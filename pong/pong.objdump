
pong.elf:     file format elf32-littlenios2
pong.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00024db8 memsz 0x00024db8 flags r-x
    LOAD off    0x00025dd8 vaddr 0x00024dd8 paddr 0x00026f90 align 2**12
         filesz 0x000021b8 memsz 0x000021b8 flags rw-
    LOAD off    0x00028148 vaddr 0x00029148 paddr 0x00029148 align 2**12
         filesz 0x00000000 memsz 0x0006f450 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024150  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a40  00024398  00024398  00025398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000021b8  00024dd8  00026f90  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0006f450  00029148  00029148  00028148  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00098598  00098598  00027f90  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00027f90  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00027f90  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011f0  00000000  00000000  00027fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003675b  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c41b  00000000  00000000  0005f903  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001168c  00000000  00000000  0006bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000047a8  00000000  00000000  0007d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000686f  00000000  00000000  00081b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c9a1  00000000  00000000  000883c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a4d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b08  00000000  00000000  000a4d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000ad321  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000ad327  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000ad32c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000ad32d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000ad32e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000ad332  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000ad336  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000ad33a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000ad343  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000ad34c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000ad355  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003d  00000000  00000000  000ad364  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d201d  00000000  00000000  000ad3a1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00024398 l    d  .rodata	00000000 .rodata
00024dd8 l    d  .rwdata	00000000 .rwdata
00029148 l    d  .bss	00000000 .bss
00098598 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos2nios2_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pong.c
00029148 l     O .bss	00000004 CurTimerState
00000000 l    df *ABS*	00000000 vga_stuff.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002463a l     O .rodata	00000010 zeroes.4389
0002464a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0002465a l     O .rodata	00000010 zeroes.4404
00007444 l     F .text	000000bc __sbprintf
0002466a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007654 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009184 l     F .text	00000008 __fp_unlock
00009198 l     F .text	0000019c __sinit.part.1
00009334 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025200 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00025644 l     O .rwdata	00000020 lc_ctype_charset
00025624 l     O .rwdata	00000020 lc_message_charset
00025664 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002469c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000247d0 l     O .rodata	00000010 blanks.4332
000247c0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0000d2dc l     F .text	000000fc __sprint_r.part.0
000247f0 l     O .rodata	00000010 blanks.4348
000247e0 l     O .rodata	00000010 zeroes.4349
0000e868 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012630 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001265c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012828 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012ae0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026f04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012d2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00026f08 l     O .rwdata	00000004 lockid
000291a8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00026f0c l     O .rwdata	00000004 lockid
000291b0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001475c l     F .text	00000048 OS_InitMisc
000147a4 l     F .text	0000006c OS_InitRdyList
00014910 l     F .text	000000e4 OS_InitTCBList
0001467c l     F .text	000000e0 OS_InitEventList
00014810 l     F .text	00000080 OS_InitTaskIdle
00014890 l     F .text	00000080 OS_InitTaskStat
00014b80 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000168a0 l     F .text	000000f4 OS_FlagTaskRdy
00016660 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001b418 l     F .text	00000034 alt_dev_reg
00025844 l     O .rwdata	0000106c JTAG_UART
000268b0 l     O .rwdata	00000030 AV_Config
000268e0 l     O .rwdata	00000030 Audio_Subsystem_Audio
00026910 l     O .rwdata	0000002c Char_LCD_16x2
0002693c l     O .rwdata	0000002c IrDA
00026968 l     O .rwdata	00000038 PS2_Port
000269a0 l     O .rwdata	00000038 PS2_Port_Dual
000269d8 l     O .rwdata	0000002c Serial_Port
00026a04 l     O .rwdata	00000034 USB
00026a38 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00026a94 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00026af0 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00026b4c l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00026b90 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020358 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00020600 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00020ddc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_ps2_keyboard.c
0002923c l     O .bss	00000004 state.2101
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002305c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000232c0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023580 l     F .text	0000003c alt_get_errno
000235bc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002924c g     O .bss	00000004 alt_instruction_exception_handler
00029210 g     O .bss	00000004 aux_status_register
0000b568 g     F .text	00000074 _mprec_log10
00026f5a g     O .rwdata	00000002 OSTaskNameSize
0000b654 g     F .text	0000008c __any_on
0000ee04 g     F .text	00000054 _isatty_r
000246a8 g     O .rodata	00000028 __mprec_tinytens
00012a24 g     F .text	000000bc alt_main
00002f30 g     F .text	00000090 strcpy
00002bc8 g     F .text	000000c0 _puts_r
00098498 g     O .bss	00000100 alt_irq
00022140 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000ee58 g     F .text	00000060 _lseek_r
00017b88 g     F .text	000000cc OS_MemInit
00026f90 g       *ABS*	00000000 __flash_rwdata_start
0001b3b8 g     F .text	00000060 OSTimeSet
000216e8 g     F .text	00000040 alt_up_character_lcd_send_cmd
00011050 g     F .text	00000088 .hidden __eqdf2
0001c15c g     F .text	000001a4 Check_for_Master_Boot_Record
000133d0 g     F .text	00000610 OSEventPendMulti
00021174 g     F .text	00000060 alt_up_audio_read_fifo_avail
00098598 g       *ABS*	00000000 __alt_heap_start
00023bc8 g     F .text	00000024 OSTaskCreateHook
00029278 g     O .bss	00002000 task1_stk
0001fefc g     F .text	000001bc alt_up_sd_card_fclose
00002b8c g     F .text	0000003c printf
00026f32 g     O .rwdata	00000002 OSMboxEn
00001b00 g     F .text	0000002c LCD_clear
000211d4 g     F .text	00000068 alt_up_audio_record_r
00013a38 g     F .text	0000004c OSIntEnter
0000f070 g     F .text	0000009c _wcrtomb_r
0000bd90 g     F .text	0000005c __sseek
000094d4 g     F .text	00000010 __sinit
0000ef18 g     F .text	00000140 __swbuf_r
00021f58 g     F .text	00000034 read_CE_bit
00026f42 g     O .rwdata	00000002 OSQEn
00009f9c g     F .text	0000007c _setlocale_r
0000933c g     F .text	00000068 __sfmoreglue
000130a4 g     F .text	000000cc __malloc_unlock
00023c30 g     F .text	00000020 OSTaskStatHook
000222e0 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000227d4 g     F .text	00000090 alt_up_rs232_read_fd
000291b8 g     O .bss	00000001 OSLockNesting
00029234 g     O .bss	00000004 current_sector_modified
00026f80 g     O .rwdata	00000002 OSDataSize
000291b9 g     O .bss	00000001 OSRunning
00001fd8 g     F .text	000001e4 draw_line
000210e0 g     F .text	00000094 alt_up_audio_reset_audio_core
0000a460 g     F .text	0000015c memmove
00023c70 g     F .text	00000020 OSInitHookBegin
00026bbc g     O .rwdata	00000198 key_table
00026f78 g     O .rwdata	00000002 OSTmrSize
000094bc g     F .text	00000018 _cleanup
00002dc8 g     F .text	000000e4 snprintf
0000a6e4 g     F .text	000000a8 _Balloc
0001eb20 g     F .text	000000c4 alt_up_sd_card_is_Present
0001bea4 g     F .text	0000004c Save_Modified_Sector
000291bc g     O .bss	00000004 OSIdleCtr
000110d8 g     F .text	000000dc .hidden __gtdf2
00023978 g     F .text	00000024 altera_nios2_gen2_irq_init
00023a48 g       .text	00000000 OSStartTsk
00021674 g     F .text	00000074 get_DDRAM_addr
00014ec0 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0002922c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00026f7e g     O .rwdata	00000002 OSTmrWheelTblSize
00022934 g     F .text	00000070 get_multi_byte_make_code_index
00000020 g       *ABS*	00000000 __flash_exceptions_start
00026f1e g     O .rwdata	00000002 OSEventSize
000291c0 g     O .bss	00000001 OSPrioHighRdy
0000eda8 g     F .text	0000005c _fstat_r
00023bec g     F .text	00000024 OSTaskDelHook
00029188 g     O .bss	00000004 errno
0000bd0c g     F .text	00000008 __seofread
00023a28 g       .text	00000000 OSStartHighRdy
00019e54 g     F .text	000001e4 OSTaskCreateExt
0000c0a0 g     F .text	0000123c ___svfiprintf_internal_r
000161a8 g     F .text	00000060 OSFlagPendGetFlagsRdy
00026f5e g     O .rwdata	00000002 OSTaskStatStkSize
000210a0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
00015324 g     F .text	00000308 OSFlagAccept
000181c0 g     F .text	000000b8 OSQFlush
00022d1c g     F .text	00000064 set_keyboard_rate
00017c54 g     F .text	00000140 OSQAccept
000291a0 g     O .bss	00000004 alt_argv
0002ee86 g       *ABS*	00000000 _gp
0001f0d8 g     F .text	0000037c alt_up_sd_card_fopen
0001ec50 g     F .text	000000d0 alt_up_sd_card_find_first
00026ebc g     O .rwdata	00000004 LCD_display_ptr
00019ca8 g     F .text	000001ac OSTaskCreate
00029220 g     O .bss	00000004 command_argument_register
000197b8 g     F .text	000004f0 OSTaskChangePrio
000291b4 g     O .bss	00000004 alt_heapsem
00015194 g     F .text	00000190 OSDebugInit
0001a038 g     F .text	00000344 OSTaskDel
0002914c g     O .bss	00000004 GameSpeedMbox
00022e98 g     F .text	00000078 reset_keyboard
000256c4 g     O .rwdata	00000180 alt_fd_list
00094d0c g     O .bss	00000370 OSFlagTbl
00029150 g     O .bss	00000004 keyboard
0001445c g     F .text	000000b8 OS_EventTaskRemove
0001e39c g     F .text	0000012c find_first_empty_record_in_root_directory
000231fc g     F .text	00000090 alt_find_dev
0000a318 g     F .text	00000148 memcpy
00026f48 g     O .rwdata	00000002 OSRdyTblSize
00021890 g     F .text	00000050 alt_up_character_lcd_write_fd
0000918c g     F .text	0000000c _cleanup_r
0001233c g     F .text	000000dc .hidden __floatsidf
00023384 g     F .text	0000007c alt_io_redirect
000111b4 g     F .text	000000f4 .hidden __ltdf2
000017ac g     F .text	000000b4 playBuffer
00024398 g       *ABS*	00000000 __DTOR_END__
00021e28 g     F .text	00000090 alt_up_irda_write_fd
00022760 g     F .text	00000074 alt_up_rs232_read_data
00002c88 g     F .text	00000014 puts
00023f68 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013170 g     F .text	00000120 OSEventNameGet
00026f2c g     O .rwdata	00000002 OSFlagMax
0001dfa4 g     F .text	000001ac find_first_empty_cluster
00000a28 g     F .text	0000010c collide_paddle
0000bc44 g     F .text	00000074 __fpclassifyd
0000b4c4 g     F .text	000000a4 __ratio
0001ea64 g     F .text	000000bc alt_up_sd_card_open_dev
00013a84 g     F .text	000000f8 OSIntExit
0000e84c g     F .text	0000001c __vfiprintf_internal
00026f66 g     O .rwdata	00000002 OSTCBSize
000014ec g     F .text	0000005c init_audio
000215bc g     F .text	00000050 alt_up_audio_read_fifo_head
000291c1 g     O .bss	00000001 OSPrioCur
00021c24 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0002085c g     F .text	000002bc altera_avalon_jtag_uart_read
00002328 g     F .text	00000014 malloc
00002b5c g     F .text	00000030 _printf_r
0000fe00 g     F .text	00000064 .hidden __udivsi3
00012784 g     F .text	000000a4 isatty
00026f4c g     O .rwdata	00000002 OSStkWidth
000246f8 g     O .rodata	000000c8 __mprec_tens
00026f40 g     O .rwdata	00000002 OSPtrSize
0000a018 g     F .text	0000000c __locale_charset
00026f20 g     O .rwdata	00000002 OSEventTblSize
00021bc4 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0002399c g       .text	00000000 OSCtxSw
00023ed8 g     F .text	00000090 alt_icache_flush
00029154 g     O .bss	00000004 Score2Mbox
00029184 g     O .bss	00000004 __malloc_top_pad
000291c4 g     O .bss	00000004 OSTCBList
00029198 g     O .bss	00000004 alt_fd_list_lock
00026ee4 g     O .rwdata	00000004 __mb_cur_max
0000a048 g     F .text	0000000c _localeconv_r
0000aaf0 g     F .text	0000003c __i2b
00009958 g     F .text	000004bc __sfvwrite_r
0001d2a4 g     F .text	000000b8 get_dir_divider_location
0009507c g     O .bss	00000c30 OSMemTbl
000291c8 g     O .bss	00000001 OSTickStepState
00029158 g     O .bss	00000004 audio_dev
00002c9c g     F .text	00000054 _sbrk_r
00001b2c g     F .text	0000005c helper_plot_pixel
0001cf74 g     F .text	000000c4 filename_to_upper_case
00026f44 g     O .rwdata	00000002 OSQMax
0001f454 g     F .text	00000088 alt_up_sd_card_set_attributes
00095cac g     O .bss	00000800 OSTaskStatStk
000177c4 g     F .text	000000f0 OSMemNameGet
0001c300 g     F .text	0000027c Read_File_Record_At_Offset
00026f24 g     O .rwdata	00000002 OSFlagEn
0000eeb8 g     F .text	00000060 _read_r
00026f6a g     O .rwdata	00000002 OSTimeTickHookEn
00018670 g     F .text	00000168 OSQPost
00016994 g     F .text	000000a4 OS_FlagUnlink
00026efc g     O .rwdata	00000004 alt_max_fd
000226dc g     F .text	00000044 alt_up_rs232_check_parity
00014a48 g     F .text	00000068 OS_MemCopy
0002160c g     F .text	00000068 alt_up_audio_write_fifo_head
00014ab0 g     F .text	000000d0 OS_Sched
0001db30 g     F .text	00000474 find_file_in_directory
0000ea9c g     F .text	000000f0 _fclose_r
000176d4 g     F .text	000000f0 OSMemGet
000173f0 g     F .text	00000110 OSMboxQuery
0001a664 g     F .text	000001b4 OSTaskNameSet
00021f8c g     F .text	00000030 read_num_bytes_available
00009154 g     F .text	00000030 fflush
00026d54 g     O .rwdata	00000066 ascii_codes
00029180 g     O .bss	00000004 __malloc_max_sbrked_mem
000291cc g     O .bss	00000004 OSCtxSwCtr
00023c50 g     F .text	00000020 OSTimeTickHook
00023400 g     F .text	00000180 alt_irq_register
00026f2e g     O .rwdata	00000002 OSFlagNameSize
00021ef4 g     F .text	00000034 read_RI_bit
00026eb4 g     O .rwdata	00000004 vga_pixel_buffer_back_buffer_reg
00014514 g     F .text	00000100 OS_EventTaskRemoveMulti
0001ebe4 g     F .text	0000006c alt_up_sd_card_is_FAT16
0000febc g     F .text	000008ac .hidden __adddf3
00026ea8 g     O .rwdata	00000004 player2_y_1
0002915c g     O .bss	00000002 gameFlag
0001430c g     F .text	00000150 OS_EventTaskWaitMulti
0000b26c g     F .text	0000010c __b2d
00026f46 g     O .rwdata	00000002 OSQSize
0000f7d0 g     F .text	00000538 .hidden __umoddi3
00012950 g     F .text	000000d4 lseek
00019120 g     F .text	0000020c OSSemPend
00026edc g     O .rwdata	00000004 _global_impure_ptr
0001d5f8 g     F .text	00000538 get_home_directory_cluster_for_file
0000b6e0 g     F .text	00000564 _realloc_r
00026f30 g     O .rwdata	00000002 OSLowestPrio
00098598 g       *ABS*	00000000 __bss_end
00023cd0 g     F .text	00000024 OSTCBInitHook
00026f76 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00023870 g     F .text	00000108 alt_tick
00017184 g     F .text	00000110 OSMboxPost
0000f258 g     F .text	00000578 .hidden __udivdi3
0000ed04 g     F .text	00000024 _fputwc_r
00026f18 g     O .rwdata	00000002 OSEventEn
000246d0 g     O .rodata	00000028 __mprec_bigtens
0000a8d4 g     F .text	00000104 __s2b
00026f72 g     O .rwdata	00000002 OSTmrCfgNameSize
00012418 g     F .text	000000a8 .hidden __floatunsidf
0000afac g     F .text	00000060 __mcmp
00029238 g     O .bss	00000004 current_sector_index
00020ecc g     F .text	0000003c alt_up_audio_open_dev
00021ff0 g     F .text	0000002c read_data_byte
00026eb8 g     O .rwdata	00000004 vga_pixel_buffer_status_reg
000094f4 g     F .text	00000018 __fp_lock_all
000167c0 g     F .text	000000e0 OS_FlagInit
00021304 g     F .text	00000068 alt_up_audio_play_r
000237d4 g     F .text	0000009c alt_alarm_stop
00026e88 g     O .rwdata	00000004 KEY_ptr
00002248 g     F .text	00000068 VGA_pixel
00021f28 g     F .text	00000030 read_RE_bit
0001c07c g     F .text	000000e0 mark_cluster
00026f54 g     O .rwdata	00000002 OSTaskIdleStkSize
00029240 g     O .bss	00000004 alt_irq_active
00018d58 g     F .text	000000b0 OSSemAccept
000021bc g     F .text	0000008c VGA_text
000179c8 g     F .text	000000d8 OSMemPut
00017500 g     F .text	000001d4 OSMemCreate
000291d0 g     O .bss	00000004 OSIdleCtrMax
00021c64 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0002569c g     O .rwdata	00000028 alt_dev_null
00026f68 g     O .rwdata	00000002 OSTicksPerSec
000005f0 g     F .text	0000037c PaddleTask
00026ed0 g     O .rwdata	00000004 character_buffer
00026e98 g     O .rwdata	00000004 x2
0001e4c8 g     F .text	0000018c convert_filename_to_name_extension
00021b30 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0002b278 g     O .bss	00002000 paddle_stk
0002399c g       .text	00000000 OSIntCtxSw
000221a0 g     F .text	00000074 alt_up_ps2_write_data_byte
0002303c g     F .text	00000020 alt_dcache_flush_all
0000a9d8 g     F .text	00000068 __hi0bits
0002920c g     O .bss	00000004 is_sd_card_formated_as_FAT16
000122bc g     F .text	00000080 .hidden __fixdfsi
00000284 g     F .text	00000110 start_screen
00001548 g     F .text	00000090 init_sd_card
0001e150 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
000291d4 g     O .bss	00000004 OSTCBFreeList
00026f90 g       *ABS*	00000000 __ram_rwdata_end
0001932c g     F .text	0000016c OSSemPendAbort
00026e20 g     O .rwdata	00000066 multi_byte_make_code
00026ef4 g     O .rwdata	00000008 alt_dev_list
00012d68 g     F .text	000000f8 write
00029230 g     O .bss	00000004 device_pointer
00026f6c g     O .rwdata	00000002 OSVersionNbr
00024dd8 g       *ABS*	00000000 __ram_rodata_end
00012698 g     F .text	000000b0 fstat
00022864 g     F .text	00000094 alt_up_rs232_write_fd
00029160 g     O .bss	00000004 SemBallSpeed
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000111b4 g     F .text	000000f4 .hidden __ledf2
00002eac g     F .text	00000084 strcat
00026f14 g     O .rwdata	00000004 OSEndiannessTest
0000ad24 g     F .text	00000140 __pow5mult
0000d3f0 g     F .text	0000145c ___vfiprintf_internal_r
00029194 g     O .bss	00000004 __nlocale_changed
0000fe64 g     F .text	00000058 .hidden __umodsi3
00026f26 g     O .rwdata	00000002 OSFlagGrpSize
00098598 g       *ABS*	00000000 end
000224d0 g     F .text	00000098 alt_up_ps2_write_fd
00021ca0 g     F .text	00000044 alt_up_irda_check_parity
0002d278 g     O .bss	00030d40 r_buf
0002021c g     F .text	0000013c altera_avalon_jtag_uart_init
00014d18 g     F .text	000000dc OS_TaskStat
00026ec8 g     O .rwdata	00000004 vga_screen_back_buffer
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00024398 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020e58 g     F .text	00000074 alt_avalon_timer_sc_init
000124c0 g     F .text	00000064 .hidden __clzsi2
00002cf0 g     F .text	000000d8 _snprintf_r
0000051c g     F .text	000000d4 IOTask
00020b18 g     F .text	000002c4 altera_avalon_jtag_uart_write
000094e4 g     F .text	00000004 __sfp_lock_acquire
0000a234 g     F .text	000000e4 memchr
000149f4 g     F .text	00000054 OS_MemClr
0002179c g     F .text	0000007c alt_up_character_lcd_write
00005230 g     F .text	000021f8 ___vfprintf_internal_r
00023a6c g     F .text	0000015c OSTaskStkInit
00009648 g     F .text	00000310 _free_r
0000a024 g     F .text	00000010 __locale_mb_cur_max
00014064 g     F .text	00000198 OS_EventTaskRdy
000241e4 g     F .text	00000180 __call_exitprocs
000291d8 g     O .bss	00000001 OSCPUUsage
00022d80 g     F .text	00000118 translate_make_code
00029190 g     O .bss	00000004 __mlocale_changed
00026ed4 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00029244 g     O .bss	00000004 _alt_tick_rate
00000394 g     F .text	00000188 GameStateTask
00018278 g     F .text	0000028c OSQPend
0001af24 g     F .text	00000104 OSTimeDly
000214b4 g     F .text	00000108 alt_up_audio_write_fifo
0000ae64 g     F .text	00000148 __lshift
00029248 g     O .bss	00000004 _alt_nticks
00012b1c g     F .text	000000fc read
0001b484 g     F .text	0000096c alt_sys_init
000219e0 g     F .text	0000008c alt_up_character_lcd_shift_display
0000bed0 g     F .text	000001d0 __ssprint_r
000213d4 g     F .text	000000e0 alt_up_audio_read_fifo
000240cc g     F .text	00000118 __register_exitproc
000291d9 g     O .bss	00000001 OSTaskCtr
00021008 g     F .text	00000058 alt_up_audio_disable_write_interrupt
000223ec g     F .text	00000058 alt_up_ps2_clear_fifo
00026ea4 g     O .rwdata	00000004 player2_y_0
000226a0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001b028 g     F .text	00000160 OSTimeDlyHMSM
0000ab2c g     F .text	000001f8 __multiply
00021a6c g     F .text	0000008c alt_up_character_lcd_erase_pos
00020704 g     F .text	00000068 altera_avalon_jtag_uart_close
00024dd8 g       *ABS*	00000000 __ram_rwdata_start
00024398 g       *ABS*	00000000 __ram_rodata_start
00029250 g     O .bss	00000028 __malloc_current_mallinfo
00026f1a g     O .rwdata	00000002 OSEventMax
0000b378 g     F .text	0000014c __d2b
00019498 g     F .text	00000110 OSSemPost
00029208 g     O .bss	00000004 initialized
00013c08 g     F .text	000000dc OSSchedUnlock
000200b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023dfc g     F .text	000000dc alt_get_fd
000291dc g     O .bss	00000004 OSMemFreeList
00013d54 g     F .text	000000b0 OSStatInit
00097f30 g     O .bss	00000014 search_data
0001659c g     F .text	000000c4 OSFlagQuery
00026f50 g     O .rwdata	00000002 OSTaskCreateExtEn
0000e984 g     F .text	00000054 _close_r
00020fb4 g     F .text	00000054 alt_up_audio_enable_write_interrupt
00029164 g     O .bss	00000004 decode_mode
00022c60 g     F .text	000000bc decode_scancode
00024050 g     F .text	0000007c memcmp
00014044 g     F .text	00000020 OS_Dummy
00020178 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00098598 g       *ABS*	00000000 __alt_stack_base
000201c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001b88 g     F .text	0000033c drawCircle
00026ecc g     O .rwdata	00000004 JTAG_UART_ptr
00021b68 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00007500 g     F .text	00000154 __swsetup_r
000964ac g     O .bss	000001e0 OSQTbl
00010768 g     F .text	000008e8 .hidden __divdf3
00020f5c g     F .text	00000058 alt_up_audio_disable_read_interrupt
000093a4 g     F .text	00000118 __sfp
00097f44 g     O .bss	00000054 boot_sector_data
0000b5dc g     F .text	00000078 __copybits
00024df8 g     O .rwdata	00000408 __malloc_av_
000094f0 g     F .text	00000004 __sinit_lock_release
000291e0 g     O .bss	00000004 OSTCBHighRdy
000112a8 g     F .text	00000718 .hidden __muldf3
0000bcb8 g     F .text	00000054 __sread
000291e4 g     O .bss	00000004 OSQFreeList
00022600 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00023cf4 g     F .text	00000108 alt_find_file
00023098 g     F .text	000000a4 alt_dev_llist_insert
00012f84 g     F .text	00000120 __malloc_lock
00012c7c g     F .text	000000b0 sbrk
00003058 g     F .text	000021d8 ___svfprintf_internal_r
00000d70 g     F .text	000002c4 BallTask
00013290 g     F .text	00000140 OSEventNameSet
000090f8 g     F .text	0000005c _fflush_r
0000e9d8 g     F .text	000000c4 _calloc_r
000291e8 g     O .bss	00000001 OSRdyGrp
00029148 g       *ABS*	00000000 __bss_start
0000a5bc g     F .text	00000128 memset
00001860 g     F .text	000001b0 main
000212a4 g     F .text	00000060 alt_up_audio_write_fifo_space
00029168 g     O .bss	00000004 Score1Mbox
000229a4 g     F .text	00000070 get_single_byte_make_code_index
000291a4 g     O .bss	00000004 alt_envp
0002917c g     O .bss	00000004 __malloc_max_total_mem
00020118 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f058 g     F .text	00000018 __swbuf
00001238 g     F .text	000002b4 find_files
0002491c g     O .rodata	00000100 OSUnMapTbl
0001f4dc g     F .text	00000088 alt_up_sd_card_get_attributes
00026f4a g     O .rwdata	00000002 OSSemEn
0001bdf0 g     F .text	000000b4 Write_Sector_Data
0001f8dc g     F .text	00000620 alt_up_sd_card_write
00021954 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00016208 g     F .text	00000394 OSFlagPost
0000bdec g     F .text	00000008 __sclose
00026e90 g     O .rwdata	00000004 LEDR_ptr
04000000 g       *ABS*	00000000 __alt_heap_limit
0000eb8c g     F .text	00000014 fclose
000141fc g     F .text	00000110 OS_EventTaskWait
0005dfb8 g     O .bss	00002000 task2_stk
0002237c g     F .text	00000070 alt_up_ps2_read_data_byte
00014df4 g     F .text	000000cc OS_TaskStatStkChk
0001a37c g     F .text	00000150 OSTaskDelReq
00007854 g     F .text	00001688 _dtoa_r
00002350 g     F .text	0000080c _malloc_r
0000f1cc g     F .text	00000030 __ascii_wctomb
00026f00 g     O .rwdata	00000004 alt_errno
00013ce4 g     F .text	00000070 OSStart
00012f24 g     F .text	00000060 __env_unlock
00009e14 g     F .text	000000c4 _fwalk
0001a818 g     F .text	000001d4 OSTaskResume
00017aa0 g     F .text	000000e8 OSMemQuery
00026f5c g     O .rwdata	00000002 OSTaskStatEn
00021ce4 g     F .text	00000040 alt_up_irda_write_data
00026f36 g     O .rwdata	00000002 OSMemMax
000187d8 g     F .text	00000170 OSQPostFront
00022568 g     F .text	0000003c alt_up_ps2_open_dev
0000fd08 g     F .text	00000084 .hidden __divsi3
000291e9 g     O .bss	00000003 OSRdyTbl
00026f10 g     O .rwdata	00000002 OSDebugEn
00021760 g     F .text	0000003c alt_up_character_lcd_open_dev
00009524 g     F .text	00000124 _malloc_trim_r
000220e4 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00024398 g       *ABS*	00000000 __CTOR_END__
00026f28 g     O .rwdata	00000002 OSFlagNodeSize
00029214 g     O .bss	00000004 status_register
00026f70 g     O .rwdata	00000002 OSTmrCfgMax
00021728 g     F .text	00000038 alt_up_character_lcd_init
000015d8 g     F .text	000001d4 readWavFile
0000bdf4 g     F .text	000000dc strcmp
0002921c g     O .bss	00000004 command_register
00017d94 g     F .text	000001ac OSQCreate
0001a4cc g     F .text	00000198 OSTaskNameGet
00024398 g       *ABS*	00000000 __flash_rodata_start
00018948 g     F .text	0000020c OSQPostOpt
00013e04 g     F .text	00000220 OSTimeTick
00026f58 g     O .rwdata	00000002 OSTaskMax
00024398 g       *ABS*	00000000 __DTOR_LIST__
00018e08 g     F .text	000000d8 OSSemCreate
00026f7c g     O .rwdata	00000002 OSTmrWheelSize
000228f8 g     F .text	0000003c alt_up_rs232_open_dev
00011050 g     F .text	00000088 .hidden __nedf2
00026f52 g     O .rwdata	00000002 OSTaskDelEn
000195a8 g     F .text	00000110 OSSemQuery
00017f40 g     F .text	00000280 OSQDel
00018504 g     F .text	0000016c OSQPendAbort
0001b44c g     F .text	00000038 alt_irq_init
00012c18 g     F .text	00000064 alt_release_fd
0001bfc8 g     F .text	000000b4 get_cluster_flag
00021fbc g     F .text	00000034 read_data_valid
00021af8 g     F .text	00000038 alt_up_character_lcd_cursor_off
00024800 g     O .rodata	00000100 .hidden __clz_tab
0001c57c g     F .text	0000028c Write_File_Record_At_Offset
0002918c g     O .bss	00000004 _PathLocale
00026ec0 g     O .rwdata	00000004 pixel_buffer
0002227c g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00024004 g     F .text	00000014 atexit
0000e924 g     F .text	00000060 _write_r
00013b7c g     F .text	0000008c OSSchedLock
0000a054 g     F .text	00000018 setlocale
0001562c g     F .text	00000108 OSFlagCreate
0001c808 g     F .text	00000680 Check_for_DOS_FAT
0001e654 g     F .text	000002c8 create_file
00026ee0 g     O .rwdata	00000004 _impure_ptr
00029218 g     O .bss	00000004 CSD_register_w0
0002919c g     O .bss	00000004 alt_argc
00008edc g     F .text	0000021c __sflush_r
0002319c g     F .text	00000060 _do_dtors
0000a040 g     F .text	00000008 __locale_cjk_lang
00026f22 g     O .rwdata	00000002 OSEventMultiEn
00026e94 g     O .rwdata	00000004 x1
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0002916c g     O .bss	00000001 ascii
0002916d g     O .bss	00000001 buf
00015734 g     F .text	00000248 OSFlagDel
000291ec g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00017018 g     F .text	0000016c OSMboxPendAbort
00026eac g     O .rwdata	00000004 speed
00001034 g     F .text	00000204 ScoreTask
0000b208 g     F .text	00000064 __ulp
00015bf0 g     F .text	000005b8 OSFlagPend
00026f6e g     O .rwdata	00000002 OSTmrEn
0000950c g     F .text	00000018 __fp_unlock_all
00026eec g     O .rwdata	00000008 alt_fs_list
00026ec4 g     O .rwdata	00000004 vga_screen_front_buffer
0001d038 g     F .text	0000026c check_file_name_for_FAT16_compliance
00014bf4 g     F .text	00000074 OS_StrCopy
00029224 g     O .bss	00000004 buffer_memory
000225a4 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0005ffb8 g     O .bss	00000014 ball
0002123c g     F .text	00000068 alt_up_audio_record_l
00022720 g     F .text	00000040 alt_up_rs232_write_data
00029170 g     O .bss	00000004 GameStatus
00026f38 g     O .rwdata	00000002 OSMemNameSize
00023c90 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00026f64 g     O .rwdata	00000002 OSTCBPrioTblMax
0000a06c g     F .text	0000000c localeconv
00026f60 g     O .rwdata	00000002 OSTaskStatStkChkEn
00016ad0 g     F .text	000000d4 OSMboxCreate
00026f34 g     O .rwdata	00000002 OSMemEn
00026e8c g     O .rwdata	00000004 SW_ptr
00029228 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00026f3e g     O .rwdata	00000002 OSMutexEn
00026f90 g       *ABS*	00000000 _edata
00098598 g       *ABS*	00000000 _end
00097f98 g     O .bss	00000500 active_files
000291f0 g     O .bss	00000001 OSIntNesting
0000eba0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001e91c g     F .text	00000148 copy_file_record_name_to_string
0002076c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001b188 g     F .text	000001d4 OSTimeDlyResume
0005ffcc g     O .bss	00030d40 l_buf
0001ce88 g     F .text	000000ec Look_for_FAT16
00000b34 g     F .text	0000023c ball_movement
00015aa4 g     F .text	0000014c OSFlagNameSet
00016de4 g     F .text	00000234 OSMboxPend
00001a10 g     F .text	00000050 wait_for_vsync
0002136c g     F .text	00000068 alt_up_audio_play_l
0001a9ec g     F .text	000001c0 OSTaskStkChk
00026f3a g     O .rwdata	00000002 OSMemSize
0000bd14 g     F .text	0000007c __swrite
00026ed8 g     O .rwdata	00000004 __malloc_trim_threshold
0000a034 g     F .text	0000000c __locale_msgcharset
000291f4 g     O .bss	00000004 OSTCBCur
00024018 g     F .text	00000038 exit
00021d24 g     F .text	00000074 alt_up_irda_read_data
0001ed20 g     F .text	000003b8 alt_up_sd_card_find_next
00026f3c g     O .rwdata	00000002 OSMemTblSize
00009ed8 g     F .text	000000c4 _fwalk_reent
0002201c g     F .text	000000c8 alt_up_ps2_init
0000b00c g     F .text	000001fc __mdiff
00029174 g     O .bss	00000004 sd_card
0000fd8c g     F .text	00000074 .hidden __modsi3
0001bef0 g     F .text	000000d8 Read_Sector_Data
00016a38 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000094e8 g     F .text	00000004 __sfp_lock_release
000139e0 g     F .text	00000058 OSInit
0001ad90 g     F .text	00000124 OSTaskQuery
00021818 g     F .text	00000078 alt_up_character_lcd_string
00090d0c g     O .bss	00002000 ball_stk
00018cb0 g     F .text	000000a8 OS_QInit
00014c68 g     F .text	00000054 OS_StrLen
00021eb8 g     F .text	0000003c alt_up_irda_open_dev
000178b4 g     F .text	00000114 OSMemNameSet
00026f56 g     O .rwdata	00000002 OSTaskProfileEn
00029178 g     O .bss	00000004 inputStr
000291f8 g     O .bss	00000004 OSTime
0009668c g     O .bss	00000800 OSTaskIdleStk
00024364 g     F .text	00000034 _exit
00017294 g     F .text	0000015c OSMboxPostOpt
00022f10 g     F .text	0000012c alt_alarm_start
0001597c g     F .text	00000128 OSFlagNameGet
0001b35c g     F .text	0000005c OSTimeGet
0001f564 g     F .text	00000378 alt_up_sd_card_read
00022a14 g     F .text	0000024c get_next_state
0000a078 g     F .text	000001bc __smakebuf_r
00022214 g     F .text	00000068 alt_up_ps2_wait_for_ack
00002fc0 g     F .text	00000098 strlen
00023c10 g     F .text	00000020 OSTaskSwHook
00023680 g     F .text	00000154 open
00096e8c g     O .bss	00000b40 OSEventTbl
000022b0 g     F .text	00000078 VGA_clear
000110d8 g     F .text	000000dc .hidden __gedf2
00024dd8 g     O .rwdata	00000020 chop
000979cc g     O .bss	00000510 OSTCBTbl
000196b8 g     F .text	00000100 OSSemSet
00092d0c g     O .bss	00002000 score_stk
00026ee8 g     O .rwdata	00000004 __wctomb
0000d3d8 g     F .text	00000018 __sprint_r
0002328c g     F .text	00000034 alt_icache_flush_all
000218e0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00026f84 g     O .rwdata	00000004 alt_priority_mask
00018ee0 g     F .text	00000240 OSSemDel
000291fc g     O .bss	00000004 OSFlagFreeList
00026f1c g     O .rwdata	00000002 OSEventNameSize
00016ba4 g     F .text	00000240 OSMboxDel
00007428 g     F .text	0000001c __vfprintf_internal
00029200 g     O .bss	00000001 OSStatRdy
00097edc g     O .bss	00000054 OSTCBPrioTbl
0000f1fc g     F .text	0000005c _wctomb_r
00012e60 g     F .text	000000c4 __env_lock
00022444 g     F .text	0000008c alt_up_ps2_read_fd
00026f62 g     O .rwdata	00000002 OSTaskSwHookEn
00001ec4 g     F .text	00000114 circleBres
00001a60 g     F .text	000000a0 clear_screen
000119c0 g     F .text	000008fc .hidden __subdf3
00021d98 g     F .text	00000090 alt_up_irda_read_fd
00026dba g     O .rwdata	00000066 single_byte_make_code
0000aa40 g     F .text	000000b0 __lo0bits
00026e9c g     O .rwdata	00000004 player1_y_0
00026f88 g     O .rwdata	00000008 alt_alarm_list
00026f2a g     O .rwdata	00000002 OSFlagWidth
0002313c g     F .text	00000060 _do_ctors
00022660 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f10c g     F .text	000000c0 wcrtomb
00012560 g     F .text	000000d0 close
000291ac g     O .bss	00000004 alt_envsem
00029204 g     O .bss	00000004 OSIdleCtrRun
00014024 g     F .text	00000020 OSVersion
00026f74 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012890 g     F .text	00000084 alt_load
00020f08 g     F .text	00000054 alt_up_audio_enable_read_interrupt
0001aeb4 g     F .text	00000070 OS_TaskStkClr
00026f4e g     O .rwdata	00000002 OSTaskCreateEn
0000096c g     F .text	000000bc collide_wall
00026ea0 g     O .rwdata	00000004 player1_y_1
0001d35c g     F .text	0000029c match_file_record_to_name_ext
00014614 g     F .text	00000068 OS_EventWaitListInit
0000ed28 g     F .text	00000080 fputwc
00023cb0 g     F .text	00000020 OSTaskIdleHook
0000233c g     F .text	00000014 free
000094ec g     F .text	00000004 __sinit_lock_acquire
00026eb0 g     O .rwdata	00000004 vga_pixel_buffer_buffer_reg
0000a7b4 g     F .text	00000120 __multadd
0001abac g     F .text	000001e4 OSTaskSuspend
0000a78c g     F .text	00000028 _Bfree
00014cbc g     F .text	0000005c OS_TaskIdle
00026f7a g     O .rwdata	00000002 OSTmrTblSize
00021060 g     F .text	00000040 alt_up_audio_read_interrupt_pending
00018b54 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013a380 	call	13a38 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008002b4 	movhi	r2,10
 140:	10a12604 	addi	r2,r2,-31592
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008002b4 	movhi	r2,10
 158:	10a12604 	addi	r2,r2,-31592
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013a840 	call	13a84 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a8f197 	ldw	r2,-23610(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a8f197 	ldw	r2,-23610(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6bba194 	ori	gp,gp,61062
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10a45214 	ori	r2,r2,37192

    movhi r3, %hi(__bss_end)
     260:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
     264:	18e16614 	ori	r3,r3,34200

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00128900 	call	12890 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0012a240 	call	12a24 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <start_screen>:
#define BUF_SIZE 50000			// about 10 seconds of buffer (@ 8K samples/sec)
#define BUF_THRESHOLD 96		// 75% of 128 word buffer
alt_up_audio_dev *audio_dev;

void start_screen(void)
{
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
	VGA_text(15, 5, "                ");
     294:	018000b4 	movhi	r6,2
     298:	3190e604 	addi	r6,r6,17304
     29c:	01400144 	movi	r5,5
     2a0:	010003c4 	movi	r4,15
     2a4:	00021bc0 	call	21bc <VGA_text>
	VGA_text(15, 6, "                ");
     2a8:	018000b4 	movhi	r6,2
     2ac:	3190e604 	addi	r6,r6,17304
     2b0:	01400184 	movi	r5,6
     2b4:	010003c4 	movi	r4,15
     2b8:	00021bc0 	call	21bc <VGA_text>
	VGA_text(310, 3, "                   ");
     2bc:	018000b4 	movhi	r6,2
     2c0:	3190eb04 	addi	r6,r6,17324
     2c4:	014000c4 	movi	r5,3
     2c8:	01004d84 	movi	r4,310
     2cc:	00021bc0 	call	21bc <VGA_text>
	VGA_text(310, 4, "                   ");
     2d0:	018000b4 	movhi	r6,2
     2d4:	3190eb04 	addi	r6,r6,17324
     2d8:	01400104 	movi	r5,4
     2dc:	01004d84 	movi	r4,310
     2e0:	00021bc0 	call	21bc <VGA_text>
	VGA_text(25, 30, "                          ");
     2e4:	018000b4 	movhi	r6,2
     2e8:	3190f004 	addi	r6,r6,17344
     2ec:	01400784 	movi	r5,30
     2f0:	01000644 	movi	r4,25
     2f4:	00021bc0 	call	21bc <VGA_text>
	VGA_clear();
     2f8:	00022b00 	call	22b0 <VGA_clear>
	draw_line(x1, player1_y_0, x1, player1_y_1, 0,0);
     2fc:	d0a00397 	ldw	r2,-32754(gp)
     300:	d0e00597 	ldw	r3,-32746(gp)
     304:	d1200397 	ldw	r4,-32754(gp)
     308:	d1600697 	ldw	r5,-32742(gp)
     30c:	d8000115 	stw	zero,4(sp)
     310:	d8000015 	stw	zero,0(sp)
     314:	280f883a 	mov	r7,r5
     318:	200d883a 	mov	r6,r4
     31c:	180b883a 	mov	r5,r3
     320:	1009883a 	mov	r4,r2
     324:	0001fd80 	call	1fd8 <draw_line>
	draw_line(x2, player2_y_0, x2, player2_y_1, 0,0);
     328:	d0a00497 	ldw	r2,-32750(gp)
     32c:	d0e00797 	ldw	r3,-32738(gp)
     330:	d1200497 	ldw	r4,-32750(gp)
     334:	d1600897 	ldw	r5,-32734(gp)
     338:	d8000115 	stw	zero,4(sp)
     33c:	d8000015 	stw	zero,0(sp)
     340:	280f883a 	mov	r7,r5
     344:	200d883a 	mov	r6,r4
     348:	180b883a 	mov	r5,r3
     34c:	1009883a 	mov	r4,r2
     350:	0001fd80 	call	1fd8 <draw_line>
	VGA_text(32, 15, "PONG THE GAME");
     354:	018000b4 	movhi	r6,2
     358:	3190f704 	addi	r6,r6,17372
     35c:	014003c4 	movi	r5,15
     360:	01000804 	movi	r4,32
     364:	00021bc0 	call	21bc <VGA_text>
	VGA_text(27, 29, "PRESS KEY 3 TO START GAME");
     368:	018000b4 	movhi	r6,2
     36c:	3190fb04 	addi	r6,r6,17388
     370:	01400744 	movi	r5,29
     374:	010006c4 	movi	r4,27
     378:	00021bc0 	call	21bc <VGA_text>
}
     37c:	0001883a 	nop
     380:	e037883a 	mov	sp,fp
     384:	dfc00117 	ldw	ra,4(sp)
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00204 	addi	sp,sp,8
     390:	f800283a 	ret

00000394 <GameStateTask>:


/* STATES THE GAME IS IN */
void GameStateTask(void* pdata)
{
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13fff15 	stw	r4,-4(fp)
	clear_screen(0);
     3a8:	0009883a 	mov	r4,zero
     3ac:	0001a600 	call	1a60 <clear_screen>
	INT8U err;

	while (1)
	{
		if (CurTimerState == START) {
     3b0:	d0a8b097 	ldw	r2,-23870(gp)
     3b4:	1000271e 	bne	r2,zero,454 <GameStateTask+0xc0>
			gameFlag = OSFlagAccept(GameStatus, START_GAME, OS_FLAG_WAIT_SET_ALL, &err);
     3b8:	d0a8ba97 	ldw	r2,-23830(gp)
     3bc:	e1fffe04 	addi	r7,fp,-8
     3c0:	01800084 	movi	r6,2
     3c4:	01400044 	movi	r5,1
     3c8:	1009883a 	mov	r4,r2
     3cc:	00153240 	call	15324 <OSFlagAccept>
     3d0:	d0a8b58d 	sth	r2,-23850(gp)
			start_screen();
     3d4:	00002840 	call	284 <start_screen>
			switch(err) {
     3d8:	e0bffe03 	ldbu	r2,-8(fp)
     3dc:	10803fcc 	andi	r2,r2,255
     3e0:	10000326 	beq	r2,zero,3f0 <GameStateTask+0x5c>
     3e4:	10801c20 	cmpeqi	r2,r2,112
     3e8:	1000121e 	bne	r2,zero,434 <GameStateTask+0xa0>
     3ec:	00001406 	br	440 <GameStateTask+0xac>
			case OS_NO_ERR:
				if(*(KEY_ptr) & 0x08) {
     3f0:	d0a00097 	ldw	r2,-32766(gp)
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	1080020c 	andi	r2,r2,8
     3fc:	10001426 	beq	r2,zero,450 <GameStateTask+0xbc>
					CurTimerState = RUNNING;
     400:	00800044 	movi	r2,1
     404:	d0a8b095 	stw	r2,-23870(gp)
					VGA_text(25, 29, "                                     ");
     408:	018000b4 	movhi	r6,2
     40c:	31910204 	addi	r6,r6,17416
     410:	01400744 	movi	r5,29
     414:	01000644 	movi	r4,25
     418:	00021bc0 	call	21bc <VGA_text>
					VGA_text(25, 15, "                                     ");
     41c:	018000b4 	movhi	r6,2
     420:	31910204 	addi	r6,r6,17416
     424:	014003c4 	movi	r5,15
     428:	01000644 	movi	r4,25
     42c:	00021bc0 	call	21bc <VGA_text>
					//printf("running state");
				}
				break;
     430:	00000706 	br	450 <GameStateTask+0xbc>
			case OS_FLAG_ERR_NOT_RDY:
				CurTimerState = START;
     434:	d028b095 	stw	zero,-23870(gp)
				start_screen();
     438:	00002840 	call	284 <start_screen>
				break;
     43c:	00000506 	br	454 <GameStateTask+0xc0>
			default:
				printf("ERROR IN START STATE\n");
     440:	010000b4 	movhi	r4,2
     444:	21110c04 	addi	r4,r4,17456
     448:	0002c880 	call	2c88 <puts>
     44c:	00000106 	br	454 <GameStateTask+0xc0>
					CurTimerState = RUNNING;
					VGA_text(25, 29, "                                     ");
					VGA_text(25, 15, "                                     ");
					//printf("running state");
				}
				break;
     450:	0001883a 	nop
			default:
				printf("ERROR IN START STATE\n");
			}
		}

		if(CurTimerState == END) {
     454:	d0a8b097 	ldw	r2,-23870(gp)
     458:	10800098 	cmpnei	r2,r2,2
     45c:	1000291e 	bne	r2,zero,504 <GameStateTask+0x170>
			gameFlag = OSFlagAccept(GameStatus, END_GAME, OS_FLAG_WAIT_SET_ALL, &err);
     460:	d0a8ba97 	ldw	r2,-23830(gp)
     464:	e1fffe04 	addi	r7,fp,-8
     468:	01800084 	movi	r6,2
     46c:	01400104 	movi	r5,4
     470:	1009883a 	mov	r4,r2
     474:	00153240 	call	15324 <OSFlagAccept>
     478:	d0a8b58d 	sth	r2,-23850(gp)
			switch(err) {
     47c:	e0bffe03 	ldbu	r2,-8(fp)
     480:	10803fcc 	andi	r2,r2,255
     484:	10000326 	beq	r2,zero,494 <GameStateTask+0x100>
     488:	10801c20 	cmpeqi	r2,r2,112
     48c:	1000101e 	bne	r2,zero,4d0 <GameStateTask+0x13c>
     490:	00001706 	br	4f0 <GameStateTask+0x15c>
			case OS_NO_ERR:
				if(decode_scancode(keyboard, &decode_mode, &buf, &ascii)==0){
     494:	d0a8b297 	ldw	r2,-23862(gp)
     498:	d1e8b984 	addi	r7,gp,-23834
     49c:	d1a8b9c4 	addi	r6,gp,-23833
     4a0:	d168b784 	addi	r5,gp,-23842
     4a4:	1009883a 	mov	r4,r2
     4a8:	0022c600 	call	22c60 <decode_scancode>
     4ac:	1000141e 	bne	r2,zero,500 <GameStateTask+0x16c>
					if(ascii == 'R'){
     4b0:	d0a8b983 	ldbu	r2,-23834(gp)
     4b4:	10803fcc 	andi	r2,r2,255
     4b8:	1080201c 	xori	r2,r2,128
     4bc:	10bfe004 	addi	r2,r2,-128
     4c0:	10801498 	cmpnei	r2,r2,82
     4c4:	10000e1e 	bne	r2,zero,500 <GameStateTask+0x16c>
						CurTimerState = START;
     4c8:	d028b095 	stw	zero,-23870(gp)
					}
				}
				break;
     4cc:	00000c06 	br	500 <GameStateTask+0x16c>
			case OS_FLAG_ERR_NOT_RDY:
				CurTimerState = END;OSTimeDlyHMSM(0, 0, 0, 125);
     4d0:	00800084 	movi	r2,2
     4d4:	d0a8b095 	stw	r2,-23870(gp)
     4d8:	01c01f44 	movi	r7,125
     4dc:	000d883a 	mov	r6,zero
     4e0:	000b883a 	mov	r5,zero
     4e4:	0009883a 	mov	r4,zero
     4e8:	001b0280 	call	1b028 <OSTimeDlyHMSM>
				break;
     4ec:	00000506 	br	504 <GameStateTask+0x170>
			default:
				printf("ERROR IN END STATE\n");
     4f0:	010000b4 	movhi	r4,2
     4f4:	21111204 	addi	r4,r4,17480
     4f8:	0002c880 	call	2c88 <puts>
     4fc:	00000106 	br	504 <GameStateTask+0x170>
				if(decode_scancode(keyboard, &decode_mode, &buf, &ascii)==0){
					if(ascii == 'R'){
						CurTimerState = START;
					}
				}
				break;
     500:	0001883a 	nop
				break;
			default:
				printf("ERROR IN END STATE\n");
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 125);
     504:	01c01f44 	movi	r7,125
     508:	000d883a 	mov	r6,zero
     50c:	000b883a 	mov	r5,zero
     510:	0009883a 	mov	r4,zero
     514:	001b0280 	call	1b028 <OSTimeDlyHMSM>
	}
     518:	003fa506 	br	3b0 <GameStateTask+0x1c>

0000051c <IOTask>:
}


/* Handles switches for speed of the ball */
void IOTask(void* pdata)
{
     51c:	defffc04 	addi	sp,sp,-16
     520:	dfc00315 	stw	ra,12(sp)
     524:	df000215 	stw	fp,8(sp)
     528:	df000204 	addi	fp,sp,8
     52c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	init_audio();
     530:	00014ec0 	call	14ec <init_audio>
	init_sd_card();
     534:	00015480 	call	1548 <init_sd_card>

	find_files ("."); //shows files but kinda weird
     538:	010000b4 	movhi	r4,2
     53c:	21111704 	addi	r4,r4,17500
     540:	00012380 	call	1238 <find_files>

	readWavFile(&(chop));
     544:	010000b4 	movhi	r4,2
     548:	21137604 	addi	r4,r4,19928
     54c:	00015d80 	call	15d8 <readWavFile>

	while(1) {
		if (*(SW_ptr) & 0x08) {	// switch 4 to start the game
     550:	d0a00197 	ldw	r2,-32762(gp)
     554:	10800017 	ldw	r2,0(r2)
     558:	1080020c 	andi	r2,r2,8
     55c:	10000d26 	beq	r2,zero,594 <IOTask+0x78>
			gameFlag = OSFlagPost(GameStatus, START_GAME, OS_FLAG_SET, &err);
     560:	d0a8ba97 	ldw	r2,-23830(gp)
     564:	e1fffe04 	addi	r7,fp,-8
     568:	01800044 	movi	r6,1
     56c:	01400044 	movi	r5,1
     570:	1009883a 	mov	r4,r2
     574:	00162080 	call	16208 <OSFlagPost>
     578:	d0a8b58d 	sth	r2,-23850(gp)
			*(LEDR_ptr) |= 0x08;	// turn on LEDR0
     57c:	d0a00297 	ldw	r2,-32758(gp)
     580:	d0e00297 	ldw	r3,-32758(gp)
     584:	18c00017 	ldw	r3,0(r3)
     588:	18c00214 	ori	r3,r3,8
     58c:	10c00015 	stw	r3,0(r2)
     590:	00000d06 	br	5c8 <IOTask+0xac>
		} else {
			gameFlag = OSFlagPost(GameStatus, START_GAME, OS_FLAG_CLR, &err);
     594:	d0a8ba97 	ldw	r2,-23830(gp)
     598:	e1fffe04 	addi	r7,fp,-8
     59c:	000d883a 	mov	r6,zero
     5a0:	01400044 	movi	r5,1
     5a4:	1009883a 	mov	r4,r2
     5a8:	00162080 	call	16208 <OSFlagPost>
     5ac:	d0a8b58d 	sth	r2,-23850(gp)
			*(LEDR_ptr) &= ~(0x08);	// turn off LEDR0
     5b0:	d0a00297 	ldw	r2,-32758(gp)
     5b4:	d0e00297 	ldw	r3,-32758(gp)
     5b8:	19000017 	ldw	r4,0(r3)
     5bc:	00fffdc4 	movi	r3,-9
     5c0:	20c6703a 	and	r3,r4,r3
     5c4:	10c00015 	stw	r3,0(r2)
		} else {
			gameFlag = OSFlagPost(GameStatus, SPEED_GAME, OS_FLAG_CLR, &err);
			*(LEDR_ptr) &= ~(0x04);		// off LEDR1
		}*/

		OSMboxPost(GameSpeedMbox, (void *) &speed);
     5c8:	d0a8b197 	ldw	r2,-23866(gp)
     5cc:	d1600984 	addi	r5,gp,-32730
     5d0:	1009883a 	mov	r4,r2
     5d4:	00171840 	call	17184 <OSMboxPost>
		OSTimeDlyHMSM(0, 0, 0, 125);
     5d8:	01c01f44 	movi	r7,125
     5dc:	000d883a 	mov	r6,zero
     5e0:	000b883a 	mov	r5,zero
     5e4:	0009883a 	mov	r4,zero
     5e8:	001b0280 	call	1b028 <OSTimeDlyHMSM>
	}
     5ec:	003fd806 	br	550 <IOTask+0x34>

000005f0 <PaddleTask>:
}


/* Handles the paddle movement */
void PaddleTask(void* pdata)
{
     5f0:	defffb04 	addi	sp,sp,-20
     5f4:	dfc00415 	stw	ra,16(sp)
     5f8:	df000315 	stw	fp,12(sp)
     5fc:	df000304 	addi	fp,sp,12
     600:	e13fff15 	stw	r4,-4(fp)
	clear_screen(0);
     604:	0009883a 	mov	r4,zero
     608:	0001a600 	call	1a60 <clear_screen>

	while(1) {
		if(CurTimerState == RUNNING) {
     60c:	d0a8b097 	ldw	r2,-23870(gp)
     610:	10800058 	cmpnei	r2,r2,1
     614:	103ffd1e 	bne	r2,zero,60c <PaddleTask+0x1c>
			// Wait for redraw cycle
			//wait_for_vsync();
			// Erase old line
			draw_line(x1, player1_y_0, x1, player1_y_1, 0,0);
     618:	d0a00397 	ldw	r2,-32754(gp)
     61c:	d0e00597 	ldw	r3,-32746(gp)
     620:	d1200397 	ldw	r4,-32754(gp)
     624:	d1600697 	ldw	r5,-32742(gp)
     628:	d8000115 	stw	zero,4(sp)
     62c:	d8000015 	stw	zero,0(sp)
     630:	280f883a 	mov	r7,r5
     634:	200d883a 	mov	r6,r4
     638:	180b883a 	mov	r5,r3
     63c:	1009883a 	mov	r4,r2
     640:	0001fd80 	call	1fd8 <draw_line>
			draw_line(x2, player2_y_0, x2, player2_y_1, 0,0);
     644:	d0a00497 	ldw	r2,-32750(gp)
     648:	d0e00797 	ldw	r3,-32738(gp)
     64c:	d1200497 	ldw	r4,-32750(gp)
     650:	d1600897 	ldw	r5,-32734(gp)
     654:	d8000115 	stw	zero,4(sp)
     658:	d8000015 	stw	zero,0(sp)
     65c:	280f883a 	mov	r7,r5
     660:	200d883a 	mov	r6,r4
     664:	180b883a 	mov	r5,r3
     668:	1009883a 	mov	r4,r2
     66c:	0001fd80 	call	1fd8 <draw_line>

			// flag to start the game
			if(decode_scancode(keyboard, &decode_mode, &buf, &ascii)==0){
     670:	d0a8b297 	ldw	r2,-23862(gp)
     674:	d1e8b984 	addi	r7,gp,-23834
     678:	d1a8b9c4 	addi	r6,gp,-23833
     67c:	d168b784 	addi	r5,gp,-23842
     680:	1009883a 	mov	r4,r2
     684:	0022c600 	call	22c60 <decode_scancode>
     688:	10006e1e 	bne	r2,zero,844 <PaddleTask+0x254>
				if (decode_mode == KB_ASCII_MAKE_CODE) {
     68c:	d0a8b797 	ldw	r2,-23842(gp)
     690:	10800058 	cmpnei	r2,r2,1
     694:	10006b1e 	bne	r2,zero,844 <PaddleTask+0x254>
					if(ascii == 'W'){
     698:	d0a8b983 	ldbu	r2,-23834(gp)
     69c:	10803fcc 	andi	r2,r2,255
     6a0:	1080201c 	xori	r2,r2,128
     6a4:	10bfe004 	addi	r2,r2,-128
     6a8:	108015d8 	cmpnei	r2,r2,87
     6ac:	1000151e 	bne	r2,zero,704 <PaddleTask+0x114>
						if (player1_y_0 > 0)	// has not reached the top border
     6b0:	d0a00597 	ldw	r2,-32746(gp)
     6b4:	0080630e 	bge	zero,r2,844 <PaddleTask+0x254>
						{
							player1_y_0 -= (ball.speed.y * 2);
     6b8:	d0e00597 	ldw	r3,-32746(gp)
     6bc:	008001b4 	movhi	r2,6
     6c0:	10bfee04 	addi	r2,r2,-72
     6c4:	10800317 	ldw	r2,12(r2)
     6c8:	1085883a 	add	r2,r2,r2
     6cc:	1885c83a 	sub	r2,r3,r2
     6d0:	d0a00595 	stw	r2,-32746(gp)
							player1_y_1 -= (ball.speed.y * 2);
     6d4:	d0e00697 	ldw	r3,-32742(gp)
     6d8:	008001b4 	movhi	r2,6
     6dc:	10bfee04 	addi	r2,r2,-72
     6e0:	10800317 	ldw	r2,12(r2)
     6e4:	1085883a 	add	r2,r2,r2
     6e8:	1885c83a 	sub	r2,r3,r2
     6ec:	d0a00695 	stw	r2,-32742(gp)
							ascii = 0;
     6f0:	d028b985 	stb	zero,-23834(gp)
							alt_up_ps2_clear_fifo(keyboard);
     6f4:	d0a8b297 	ldw	r2,-23862(gp)
     6f8:	1009883a 	mov	r4,r2
     6fc:	00223ec0 	call	223ec <alt_up_ps2_clear_fifo>
     700:	00005006 	br	844 <PaddleTask+0x254>
						}
					} else if(ascii == 'S'){
     704:	d0a8b983 	ldbu	r2,-23834(gp)
     708:	10803fcc 	andi	r2,r2,255
     70c:	1080201c 	xori	r2,r2,128
     710:	10bfe004 	addi	r2,r2,-128
     714:	108014d8 	cmpnei	r2,r2,83
     718:	1000181e 	bne	r2,zero,77c <PaddleTask+0x18c>
						if (player1_y_1 < RESOLUTION_Y)	// has not reached the bottom border
     71c:	d0a00697 	ldw	r2,-32742(gp)
     720:	10803c08 	cmpgei	r2,r2,240
     724:	1000471e 	bne	r2,zero,844 <PaddleTask+0x254>
						{
							player1_y_0 += (ball.speed.y * 2);
     728:	008001b4 	movhi	r2,6
     72c:	10bfee04 	addi	r2,r2,-72
     730:	10800317 	ldw	r2,12(r2)
     734:	1085883a 	add	r2,r2,r2
     738:	1007883a 	mov	r3,r2
     73c:	d0a00597 	ldw	r2,-32746(gp)
     740:	1885883a 	add	r2,r3,r2
     744:	d0a00595 	stw	r2,-32746(gp)
							player1_y_1 += (ball.speed.y * 2);
     748:	008001b4 	movhi	r2,6
     74c:	10bfee04 	addi	r2,r2,-72
     750:	10800317 	ldw	r2,12(r2)
     754:	1085883a 	add	r2,r2,r2
     758:	1007883a 	mov	r3,r2
     75c:	d0a00697 	ldw	r2,-32742(gp)
     760:	1885883a 	add	r2,r3,r2
     764:	d0a00695 	stw	r2,-32742(gp)
							ascii = 0;
     768:	d028b985 	stb	zero,-23834(gp)
							alt_up_ps2_clear_fifo(keyboard);
     76c:	d0a8b297 	ldw	r2,-23862(gp)
     770:	1009883a 	mov	r4,r2
     774:	00223ec0 	call	223ec <alt_up_ps2_clear_fifo>
     778:	00003206 	br	844 <PaddleTask+0x254>
						}
					} else if(ascii == 'I'){
     77c:	d0a8b983 	ldbu	r2,-23834(gp)
     780:	10803fcc 	andi	r2,r2,255
     784:	1080201c 	xori	r2,r2,128
     788:	10bfe004 	addi	r2,r2,-128
     78c:	10801258 	cmpnei	r2,r2,73
     790:	1000121e 	bne	r2,zero,7dc <PaddleTask+0x1ec>
						if (player2_y_0 > 0)	// has not reached the top border
     794:	d0a00797 	ldw	r2,-32738(gp)
     798:	00802a0e 	bge	zero,r2,844 <PaddleTask+0x254>
						{
							player2_y_0 -= (ball.speed.y * 2);
     79c:	d0e00797 	ldw	r3,-32738(gp)
     7a0:	008001b4 	movhi	r2,6
     7a4:	10bfee04 	addi	r2,r2,-72
     7a8:	10800317 	ldw	r2,12(r2)
     7ac:	1085883a 	add	r2,r2,r2
     7b0:	1885c83a 	sub	r2,r3,r2
     7b4:	d0a00795 	stw	r2,-32738(gp)
							player2_y_1 -= (ball.speed.y * 2);
     7b8:	d0e00897 	ldw	r3,-32734(gp)
     7bc:	008001b4 	movhi	r2,6
     7c0:	10bfee04 	addi	r2,r2,-72
     7c4:	10800317 	ldw	r2,12(r2)
     7c8:	1085883a 	add	r2,r2,r2
     7cc:	1885c83a 	sub	r2,r3,r2
     7d0:	d0a00895 	stw	r2,-32734(gp)
							ascii = 0;
     7d4:	d028b985 	stb	zero,-23834(gp)
     7d8:	00001a06 	br	844 <PaddleTask+0x254>
							//alt_up_ps2_clear_fifo(keyboard);
						}
					} else if(ascii == 'K'){
     7dc:	d0a8b983 	ldbu	r2,-23834(gp)
     7e0:	10803fcc 	andi	r2,r2,255
     7e4:	1080201c 	xori	r2,r2,128
     7e8:	10bfe004 	addi	r2,r2,-128
     7ec:	108012d8 	cmpnei	r2,r2,75
     7f0:	1000141e 	bne	r2,zero,844 <PaddleTask+0x254>
						if (player2_y_1 < RESOLUTION_Y)	// has not reached the bottom border
     7f4:	d0a00897 	ldw	r2,-32734(gp)
     7f8:	10803c08 	cmpgei	r2,r2,240
     7fc:	1000111e 	bne	r2,zero,844 <PaddleTask+0x254>
						{
							player2_y_0 += (ball.speed.y * 2);
     800:	008001b4 	movhi	r2,6
     804:	10bfee04 	addi	r2,r2,-72
     808:	10800317 	ldw	r2,12(r2)
     80c:	1085883a 	add	r2,r2,r2
     810:	1007883a 	mov	r3,r2
     814:	d0a00797 	ldw	r2,-32738(gp)
     818:	1885883a 	add	r2,r3,r2
     81c:	d0a00795 	stw	r2,-32738(gp)
							player2_y_1 += (ball.speed.y * 2);
     820:	008001b4 	movhi	r2,6
     824:	10bfee04 	addi	r2,r2,-72
     828:	10800317 	ldw	r2,12(r2)
     82c:	1085883a 	add	r2,r2,r2
     830:	1007883a 	mov	r3,r2
     834:	d0a00897 	ldw	r2,-32734(gp)
     838:	1885883a 	add	r2,r3,r2
     83c:	d0a00895 	stw	r2,-32734(gp)
							ascii = 0;
     840:	d028b985 	stb	zero,-23834(gp)
						//do nothing
					}
				}
			}

			if (*(KEY_ptr) & 0x02) {
     844:	d0a00097 	ldw	r2,-32766(gp)
     848:	10800017 	ldw	r2,0(r2)
     84c:	1080008c 	andi	r2,r2,2
     850:	10001126 	beq	r2,zero,898 <PaddleTask+0x2a8>
				if (player2_y_0 > 0)	// has not reached the top border
     854:	d0a00797 	ldw	r2,-32738(gp)
     858:	0080260e 	bge	zero,r2,8f4 <PaddleTask+0x304>
					{
						player2_y_0 -= (ball.speed.y * 2);
     85c:	d0e00797 	ldw	r3,-32738(gp)
     860:	008001b4 	movhi	r2,6
     864:	10bfee04 	addi	r2,r2,-72
     868:	10800317 	ldw	r2,12(r2)
     86c:	1085883a 	add	r2,r2,r2
     870:	1885c83a 	sub	r2,r3,r2
     874:	d0a00795 	stw	r2,-32738(gp)
						player2_y_1 -= (ball.speed.y * 2);
     878:	d0e00897 	ldw	r3,-32734(gp)
     87c:	008001b4 	movhi	r2,6
     880:	10bfee04 	addi	r2,r2,-72
     884:	10800317 	ldw	r2,12(r2)
     888:	1085883a 	add	r2,r2,r2
     88c:	1885c83a 	sub	r2,r3,r2
     890:	d0a00895 	stw	r2,-32734(gp)
     894:	00001706 	br	8f4 <PaddleTask+0x304>
					}
			} else if (*(KEY_ptr) & 0x04) {
     898:	d0a00097 	ldw	r2,-32766(gp)
     89c:	10800017 	ldw	r2,0(r2)
     8a0:	1080010c 	andi	r2,r2,4
     8a4:	10001326 	beq	r2,zero,8f4 <PaddleTask+0x304>
				if (player2_y_1 < RESOLUTION_Y)	// has not reached the bottom border
     8a8:	d0a00897 	ldw	r2,-32734(gp)
     8ac:	10803c08 	cmpgei	r2,r2,240
     8b0:	1000101e 	bne	r2,zero,8f4 <PaddleTask+0x304>
					{
						player2_y_0 += (ball.speed.y * 2);
     8b4:	008001b4 	movhi	r2,6
     8b8:	10bfee04 	addi	r2,r2,-72
     8bc:	10800317 	ldw	r2,12(r2)
     8c0:	1085883a 	add	r2,r2,r2
     8c4:	1007883a 	mov	r3,r2
     8c8:	d0a00797 	ldw	r2,-32738(gp)
     8cc:	1885883a 	add	r2,r3,r2
     8d0:	d0a00795 	stw	r2,-32738(gp)
						player2_y_1 += (ball.speed.y * 2);
     8d4:	008001b4 	movhi	r2,6
     8d8:	10bfee04 	addi	r2,r2,-72
     8dc:	10800317 	ldw	r2,12(r2)
     8e0:	1085883a 	add	r2,r2,r2
     8e4:	1007883a 	mov	r3,r2
     8e8:	d0a00897 	ldw	r2,-32734(gp)
     8ec:	1885883a 	add	r2,r3,r2
     8f0:	d0a00895 	stw	r2,-32734(gp)
					}
			}

			// Draw new line
			draw_line(x1, player1_y_0, x1, player1_y_1, 0xffff,0);
     8f4:	d0e00397 	ldw	r3,-32754(gp)
     8f8:	d1200597 	ldw	r4,-32746(gp)
     8fc:	d1600397 	ldw	r5,-32754(gp)
     900:	d1a00697 	ldw	r6,-32742(gp)
     904:	d8000115 	stw	zero,4(sp)
     908:	00bfffd4 	movui	r2,65535
     90c:	d8800015 	stw	r2,0(sp)
     910:	300f883a 	mov	r7,r6
     914:	280d883a 	mov	r6,r5
     918:	200b883a 	mov	r5,r4
     91c:	1809883a 	mov	r4,r3
     920:	0001fd80 	call	1fd8 <draw_line>
			draw_line(x2, player2_y_0, x2, player2_y_1, 0xffff,0);
     924:	d0e00497 	ldw	r3,-32750(gp)
     928:	d1200797 	ldw	r4,-32738(gp)
     92c:	d1600497 	ldw	r5,-32750(gp)
     930:	d1a00897 	ldw	r6,-32734(gp)
     934:	d8000115 	stw	zero,4(sp)
     938:	00bfffd4 	movui	r2,65535
     93c:	d8800015 	stw	r2,0(sp)
     940:	300f883a 	mov	r7,r6
     944:	280d883a 	mov	r6,r5
     948:	200b883a 	mov	r5,r4
     94c:	1809883a 	mov	r4,r3
     950:	0001fd80 	call	1fd8 <draw_line>
			OSTimeDlyHMSM(0, 0, 0, 125);
     954:	01c01f44 	movi	r7,125
     958:	000d883a 	mov	r6,zero
     95c:	000b883a 	mov	r5,zero
     960:	0009883a 	mov	r4,zero
     964:	001b0280 	call	1b028 <OSTimeDlyHMSM>
		}
	}
     968:	003f2806 	br	60c <PaddleTask+0x1c>

0000096c <collide_wall>:
}

/* COLLISION WITH BORDERS */
void collide_wall(void)
{
     96c:	deffff04 	addi	sp,sp,-4
     970:	df000015 	stw	fp,0(sp)
     974:	d839883a 	mov	fp,sp
	if(ball.direction == RIGHT_UP) {
     978:	008001b4 	movhi	r2,6
     97c:	10bfee04 	addi	r2,r2,-72
     980:	10800417 	ldw	r2,16(r2)
     984:	10800118 	cmpnei	r2,r2,4
     988:	1000051e 	bne	r2,zero,9a0 <collide_wall+0x34>
		ball.direction = RIGHT_DOWN;
     98c:	008001b4 	movhi	r2,6
     990:	10bfee04 	addi	r2,r2,-72
     994:	00c000c4 	movi	r3,3
     998:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT_DOWN) {
		ball.direction = LEFT_UP;
	} else if(ball.direction == LEFT_UP) {
		ball.direction = LEFT_DOWN;
	}
}
     99c:	00001d06 	br	a14 <collide_wall+0xa8>
/* COLLISION WITH BORDERS */
void collide_wall(void)
{
	if(ball.direction == RIGHT_UP) {
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == RIGHT_DOWN) {
     9a0:	008001b4 	movhi	r2,6
     9a4:	10bfee04 	addi	r2,r2,-72
     9a8:	10800417 	ldw	r2,16(r2)
     9ac:	108000d8 	cmpnei	r2,r2,3
     9b0:	1000051e 	bne	r2,zero,9c8 <collide_wall+0x5c>
		ball.direction = RIGHT_UP;
     9b4:	008001b4 	movhi	r2,6
     9b8:	10bfee04 	addi	r2,r2,-72
     9bc:	00c00104 	movi	r3,4
     9c0:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT_DOWN) {
		ball.direction = LEFT_UP;
	} else if(ball.direction == LEFT_UP) {
		ball.direction = LEFT_DOWN;
	}
}
     9c4:	00001306 	br	a14 <collide_wall+0xa8>
{
	if(ball.direction == RIGHT_UP) {
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == RIGHT_DOWN) {
		ball.direction = RIGHT_UP;
	} else if(ball.direction == LEFT_DOWN) {
     9c8:	008001b4 	movhi	r2,6
     9cc:	10bfee04 	addi	r2,r2,-72
     9d0:	10800417 	ldw	r2,16(r2)
     9d4:	10800058 	cmpnei	r2,r2,1
     9d8:	1000051e 	bne	r2,zero,9f0 <collide_wall+0x84>
		ball.direction = LEFT_UP;
     9dc:	008001b4 	movhi	r2,6
     9e0:	10bfee04 	addi	r2,r2,-72
     9e4:	00c00084 	movi	r3,2
     9e8:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT_UP) {
		ball.direction = LEFT_DOWN;
	}
}
     9ec:	00000906 	br	a14 <collide_wall+0xa8>
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == RIGHT_DOWN) {
		ball.direction = RIGHT_UP;
	} else if(ball.direction == LEFT_DOWN) {
		ball.direction = LEFT_UP;
	} else if(ball.direction == LEFT_UP) {
     9f0:	008001b4 	movhi	r2,6
     9f4:	10bfee04 	addi	r2,r2,-72
     9f8:	10800417 	ldw	r2,16(r2)
     9fc:	10800098 	cmpnei	r2,r2,2
     a00:	1000041e 	bne	r2,zero,a14 <collide_wall+0xa8>
		ball.direction = LEFT_DOWN;
     a04:	008001b4 	movhi	r2,6
     a08:	10bfee04 	addi	r2,r2,-72
     a0c:	00c00044 	movi	r3,1
     a10:	10c00415 	stw	r3,16(r2)
	}
}
     a14:	0001883a 	nop
     a18:	e037883a 	mov	sp,fp
     a1c:	df000017 	ldw	fp,0(sp)
     a20:	dec00104 	addi	sp,sp,4
     a24:	f800283a 	ret

00000a28 <collide_paddle>:

/* COLLISION WITH PADDLES */
void collide_paddle(void) {
     a28:	deffff04 	addi	sp,sp,-4
     a2c:	df000015 	stw	fp,0(sp)
     a30:	d839883a 	mov	fp,sp
	if(ball.direction == RIGHT_UP) {
     a34:	008001b4 	movhi	r2,6
     a38:	10bfee04 	addi	r2,r2,-72
     a3c:	10800417 	ldw	r2,16(r2)
     a40:	10800118 	cmpnei	r2,r2,4
     a44:	1000051e 	bne	r2,zero,a5c <collide_paddle+0x34>
		ball.direction = LEFT_UP;
     a48:	008001b4 	movhi	r2,6
     a4c:	10bfee04 	addi	r2,r2,-72
     a50:	00c00084 	movi	r3,2
     a54:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT) {
		ball.direction = RIGHT;
	} else if (ball.direction == RIGHT) {
		ball.direction = LEFT;
	}
}
     a58:	00003106 	br	b20 <collide_paddle+0xf8>

/* COLLISION WITH PADDLES */
void collide_paddle(void) {
	if(ball.direction == RIGHT_UP) {
		ball.direction = LEFT_UP;
	} else if(ball.direction == RIGHT_DOWN) {
     a5c:	008001b4 	movhi	r2,6
     a60:	10bfee04 	addi	r2,r2,-72
     a64:	10800417 	ldw	r2,16(r2)
     a68:	108000d8 	cmpnei	r2,r2,3
     a6c:	1000051e 	bne	r2,zero,a84 <collide_paddle+0x5c>
		ball.direction = LEFT_DOWN;
     a70:	008001b4 	movhi	r2,6
     a74:	10bfee04 	addi	r2,r2,-72
     a78:	00c00044 	movi	r3,1
     a7c:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT) {
		ball.direction = RIGHT;
	} else if (ball.direction == RIGHT) {
		ball.direction = LEFT;
	}
}
     a80:	00002706 	br	b20 <collide_paddle+0xf8>
void collide_paddle(void) {
	if(ball.direction == RIGHT_UP) {
		ball.direction = LEFT_UP;
	} else if(ball.direction == RIGHT_DOWN) {
		ball.direction = LEFT_DOWN;
	} else if(ball.direction == LEFT_DOWN) {
     a84:	008001b4 	movhi	r2,6
     a88:	10bfee04 	addi	r2,r2,-72
     a8c:	10800417 	ldw	r2,16(r2)
     a90:	10800058 	cmpnei	r2,r2,1
     a94:	1000051e 	bne	r2,zero,aac <collide_paddle+0x84>
		ball.direction = RIGHT_DOWN;
     a98:	008001b4 	movhi	r2,6
     a9c:	10bfee04 	addi	r2,r2,-72
     aa0:	00c000c4 	movi	r3,3
     aa4:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT) {
		ball.direction = RIGHT;
	} else if (ball.direction == RIGHT) {
		ball.direction = LEFT;
	}
}
     aa8:	00001d06 	br	b20 <collide_paddle+0xf8>
		ball.direction = LEFT_UP;
	} else if(ball.direction == RIGHT_DOWN) {
		ball.direction = LEFT_DOWN;
	} else if(ball.direction == LEFT_DOWN) {
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == LEFT_UP) {
     aac:	008001b4 	movhi	r2,6
     ab0:	10bfee04 	addi	r2,r2,-72
     ab4:	10800417 	ldw	r2,16(r2)
     ab8:	10800098 	cmpnei	r2,r2,2
     abc:	1000051e 	bne	r2,zero,ad4 <collide_paddle+0xac>
		ball.direction = RIGHT_UP;
     ac0:	008001b4 	movhi	r2,6
     ac4:	10bfee04 	addi	r2,r2,-72
     ac8:	00c00104 	movi	r3,4
     acc:	10c00415 	stw	r3,16(r2)
	} else if(ball.direction == LEFT) {
		ball.direction = RIGHT;
	} else if (ball.direction == RIGHT) {
		ball.direction = LEFT;
	}
}
     ad0:	00001306 	br	b20 <collide_paddle+0xf8>
		ball.direction = LEFT_DOWN;
	} else if(ball.direction == LEFT_DOWN) {
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == LEFT_UP) {
		ball.direction = RIGHT_UP;
	} else if(ball.direction == LEFT) {
     ad4:	008001b4 	movhi	r2,6
     ad8:	10bfee04 	addi	r2,r2,-72
     adc:	10800417 	ldw	r2,16(r2)
     ae0:	10800158 	cmpnei	r2,r2,5
     ae4:	1000051e 	bne	r2,zero,afc <collide_paddle+0xd4>
		ball.direction = RIGHT;
     ae8:	008001b4 	movhi	r2,6
     aec:	10bfee04 	addi	r2,r2,-72
     af0:	00c00184 	movi	r3,6
     af4:	10c00415 	stw	r3,16(r2)
	} else if (ball.direction == RIGHT) {
		ball.direction = LEFT;
	}
}
     af8:	00000906 	br	b20 <collide_paddle+0xf8>
		ball.direction = RIGHT_DOWN;
	} else if(ball.direction == LEFT_UP) {
		ball.direction = RIGHT_UP;
	} else if(ball.direction == LEFT) {
		ball.direction = RIGHT;
	} else if (ball.direction == RIGHT) {
     afc:	008001b4 	movhi	r2,6
     b00:	10bfee04 	addi	r2,r2,-72
     b04:	10800417 	ldw	r2,16(r2)
     b08:	10800198 	cmpnei	r2,r2,6
     b0c:	1000041e 	bne	r2,zero,b20 <collide_paddle+0xf8>
		ball.direction = LEFT;
     b10:	008001b4 	movhi	r2,6
     b14:	10bfee04 	addi	r2,r2,-72
     b18:	00c00144 	movi	r3,5
     b1c:	10c00415 	stw	r3,16(r2)
	}
}
     b20:	0001883a 	nop
     b24:	e037883a 	mov	sp,fp
     b28:	df000017 	ldw	fp,0(sp)
     b2c:	dec00104 	addi	sp,sp,4
     b30:	f800283a 	ret

00000b34 <ball_movement>:

/* BALL MOVEMENT */
void ball_movement(void) {
     b34:	deffff04 	addi	sp,sp,-4
     b38:	df000015 	stw	fp,0(sp)
     b3c:	d839883a 	mov	fp,sp
	// ball movement
	// possibly add more angles
	if(ball.direction == LEFT_DOWN) {
     b40:	008001b4 	movhi	r2,6
     b44:	10bfee04 	addi	r2,r2,-72
     b48:	10800417 	ldw	r2,16(r2)
     b4c:	10800058 	cmpnei	r2,r2,1
     b50:	1000151e 	bne	r2,zero,ba8 <ball_movement+0x74>
		ball.x -= ball.speed.x;
     b54:	008001b4 	movhi	r2,6
     b58:	10bfee04 	addi	r2,r2,-72
     b5c:	10c00017 	ldw	r3,0(r2)
     b60:	008001b4 	movhi	r2,6
     b64:	10bfee04 	addi	r2,r2,-72
     b68:	10800217 	ldw	r2,8(r2)
     b6c:	1887c83a 	sub	r3,r3,r2
     b70:	008001b4 	movhi	r2,6
     b74:	10bfee04 	addi	r2,r2,-72
     b78:	10c00015 	stw	r3,0(r2)
		ball.y += ball.speed.y;
     b7c:	008001b4 	movhi	r2,6
     b80:	10bfee04 	addi	r2,r2,-72
     b84:	10c00117 	ldw	r3,4(r2)
     b88:	008001b4 	movhi	r2,6
     b8c:	10bfee04 	addi	r2,r2,-72
     b90:	10800317 	ldw	r2,12(r2)
     b94:	1887883a 	add	r3,r3,r2
     b98:	008001b4 	movhi	r2,6
     b9c:	10bfee04 	addi	r2,r2,-72
     ba0:	10c00115 	stw	r3,4(r2)
	} else if (ball.direction == LEFT) {
		ball.x -= ball.speed.x;
	} else if (ball.direction == RIGHT) {
		ball.x += ball.speed.x;
	}
}
     ba4:	00006d06 	br	d5c <ball_movement+0x228>
	// ball movement
	// possibly add more angles
	if(ball.direction == LEFT_DOWN) {
		ball.x -= ball.speed.x;
		ball.y += ball.speed.y;
	} else if(ball.direction == LEFT_UP) {
     ba8:	008001b4 	movhi	r2,6
     bac:	10bfee04 	addi	r2,r2,-72
     bb0:	10800417 	ldw	r2,16(r2)
     bb4:	10800098 	cmpnei	r2,r2,2
     bb8:	1000151e 	bne	r2,zero,c10 <ball_movement+0xdc>
		ball.x -= ball.speed.x;
     bbc:	008001b4 	movhi	r2,6
     bc0:	10bfee04 	addi	r2,r2,-72
     bc4:	10c00017 	ldw	r3,0(r2)
     bc8:	008001b4 	movhi	r2,6
     bcc:	10bfee04 	addi	r2,r2,-72
     bd0:	10800217 	ldw	r2,8(r2)
     bd4:	1887c83a 	sub	r3,r3,r2
     bd8:	008001b4 	movhi	r2,6
     bdc:	10bfee04 	addi	r2,r2,-72
     be0:	10c00015 	stw	r3,0(r2)
		ball.y -= ball.speed.y;
     be4:	008001b4 	movhi	r2,6
     be8:	10bfee04 	addi	r2,r2,-72
     bec:	10c00117 	ldw	r3,4(r2)
     bf0:	008001b4 	movhi	r2,6
     bf4:	10bfee04 	addi	r2,r2,-72
     bf8:	10800317 	ldw	r2,12(r2)
     bfc:	1887c83a 	sub	r3,r3,r2
     c00:	008001b4 	movhi	r2,6
     c04:	10bfee04 	addi	r2,r2,-72
     c08:	10c00115 	stw	r3,4(r2)
	} else if (ball.direction == LEFT) {
		ball.x -= ball.speed.x;
	} else if (ball.direction == RIGHT) {
		ball.x += ball.speed.x;
	}
}
     c0c:	00005306 	br	d5c <ball_movement+0x228>
		ball.x -= ball.speed.x;
		ball.y += ball.speed.y;
	} else if(ball.direction == LEFT_UP) {
		ball.x -= ball.speed.x;
		ball.y -= ball.speed.y;
	} else if(ball.direction == RIGHT_UP) {
     c10:	008001b4 	movhi	r2,6
     c14:	10bfee04 	addi	r2,r2,-72
     c18:	10800417 	ldw	r2,16(r2)
     c1c:	10800118 	cmpnei	r2,r2,4
     c20:	1000151e 	bne	r2,zero,c78 <ball_movement+0x144>
		ball.x += ball.speed.x;
     c24:	008001b4 	movhi	r2,6
     c28:	10bfee04 	addi	r2,r2,-72
     c2c:	10c00017 	ldw	r3,0(r2)
     c30:	008001b4 	movhi	r2,6
     c34:	10bfee04 	addi	r2,r2,-72
     c38:	10800217 	ldw	r2,8(r2)
     c3c:	1887883a 	add	r3,r3,r2
     c40:	008001b4 	movhi	r2,6
     c44:	10bfee04 	addi	r2,r2,-72
     c48:	10c00015 	stw	r3,0(r2)
		ball.y -= ball.speed.y;
     c4c:	008001b4 	movhi	r2,6
     c50:	10bfee04 	addi	r2,r2,-72
     c54:	10c00117 	ldw	r3,4(r2)
     c58:	008001b4 	movhi	r2,6
     c5c:	10bfee04 	addi	r2,r2,-72
     c60:	10800317 	ldw	r2,12(r2)
     c64:	1887c83a 	sub	r3,r3,r2
     c68:	008001b4 	movhi	r2,6
     c6c:	10bfee04 	addi	r2,r2,-72
     c70:	10c00115 	stw	r3,4(r2)
	} else if (ball.direction == LEFT) {
		ball.x -= ball.speed.x;
	} else if (ball.direction == RIGHT) {
		ball.x += ball.speed.x;
	}
}
     c74:	00003906 	br	d5c <ball_movement+0x228>
		ball.x -= ball.speed.x;
		ball.y -= ball.speed.y;
	} else if(ball.direction == RIGHT_UP) {
		ball.x += ball.speed.x;
		ball.y -= ball.speed.y;
	} else if(ball.direction == RIGHT_DOWN) {
     c78:	008001b4 	movhi	r2,6
     c7c:	10bfee04 	addi	r2,r2,-72
     c80:	10800417 	ldw	r2,16(r2)
     c84:	108000d8 	cmpnei	r2,r2,3
     c88:	1000151e 	bne	r2,zero,ce0 <ball_movement+0x1ac>
		ball.x += ball.speed.x;
     c8c:	008001b4 	movhi	r2,6
     c90:	10bfee04 	addi	r2,r2,-72
     c94:	10c00017 	ldw	r3,0(r2)
     c98:	008001b4 	movhi	r2,6
     c9c:	10bfee04 	addi	r2,r2,-72
     ca0:	10800217 	ldw	r2,8(r2)
     ca4:	1887883a 	add	r3,r3,r2
     ca8:	008001b4 	movhi	r2,6
     cac:	10bfee04 	addi	r2,r2,-72
     cb0:	10c00015 	stw	r3,0(r2)
		ball.y += ball.speed.y;
     cb4:	008001b4 	movhi	r2,6
     cb8:	10bfee04 	addi	r2,r2,-72
     cbc:	10c00117 	ldw	r3,4(r2)
     cc0:	008001b4 	movhi	r2,6
     cc4:	10bfee04 	addi	r2,r2,-72
     cc8:	10800317 	ldw	r2,12(r2)
     ccc:	1887883a 	add	r3,r3,r2
     cd0:	008001b4 	movhi	r2,6
     cd4:	10bfee04 	addi	r2,r2,-72
     cd8:	10c00115 	stw	r3,4(r2)
	} else if (ball.direction == LEFT) {
		ball.x -= ball.speed.x;
	} else if (ball.direction == RIGHT) {
		ball.x += ball.speed.x;
	}
}
     cdc:	00001f06 	br	d5c <ball_movement+0x228>
		ball.x += ball.speed.x;
		ball.y -= ball.speed.y;
	} else if(ball.direction == RIGHT_DOWN) {
		ball.x += ball.speed.x;
		ball.y += ball.speed.y;
	} else if (ball.direction == LEFT) {
     ce0:	008001b4 	movhi	r2,6
     ce4:	10bfee04 	addi	r2,r2,-72
     ce8:	10800417 	ldw	r2,16(r2)
     cec:	10800158 	cmpnei	r2,r2,5
     cf0:	10000b1e 	bne	r2,zero,d20 <ball_movement+0x1ec>
		ball.x -= ball.speed.x;
     cf4:	008001b4 	movhi	r2,6
     cf8:	10bfee04 	addi	r2,r2,-72
     cfc:	10c00017 	ldw	r3,0(r2)
     d00:	008001b4 	movhi	r2,6
     d04:	10bfee04 	addi	r2,r2,-72
     d08:	10800217 	ldw	r2,8(r2)
     d0c:	1887c83a 	sub	r3,r3,r2
     d10:	008001b4 	movhi	r2,6
     d14:	10bfee04 	addi	r2,r2,-72
     d18:	10c00015 	stw	r3,0(r2)
	} else if (ball.direction == RIGHT) {
		ball.x += ball.speed.x;
	}
}
     d1c:	00000f06 	br	d5c <ball_movement+0x228>
	} else if(ball.direction == RIGHT_DOWN) {
		ball.x += ball.speed.x;
		ball.y += ball.speed.y;
	} else if (ball.direction == LEFT) {
		ball.x -= ball.speed.x;
	} else if (ball.direction == RIGHT) {
     d20:	008001b4 	movhi	r2,6
     d24:	10bfee04 	addi	r2,r2,-72
     d28:	10800417 	ldw	r2,16(r2)
     d2c:	10800198 	cmpnei	r2,r2,6
     d30:	10000a1e 	bne	r2,zero,d5c <ball_movement+0x228>
		ball.x += ball.speed.x;
     d34:	008001b4 	movhi	r2,6
     d38:	10bfee04 	addi	r2,r2,-72
     d3c:	10c00017 	ldw	r3,0(r2)
     d40:	008001b4 	movhi	r2,6
     d44:	10bfee04 	addi	r2,r2,-72
     d48:	10800217 	ldw	r2,8(r2)
     d4c:	1887883a 	add	r3,r3,r2
     d50:	008001b4 	movhi	r2,6
     d54:	10bfee04 	addi	r2,r2,-72
     d58:	10c00015 	stw	r3,0(r2)
	}
}
     d5c:	0001883a 	nop
     d60:	e037883a 	mov	sp,fp
     d64:	df000017 	ldw	fp,0(sp)
     d68:	dec00104 	addi	sp,sp,4
     d6c:	f800283a 	ret

00000d70 <BallTask>:

/* Handles the ball */
void BallTask(void* pdata)
{
     d70:	defffa04 	addi	sp,sp,-24
     d74:	dfc00515 	stw	ra,20(sp)
     d78:	df000415 	stw	fp,16(sp)
     d7c:	df000404 	addi	fp,sp,16
     d80:	e13fff15 	stw	r4,-4(fp)
	//INT8U err;
	//int *speed;
	//speed = OSMboxAccept(GameSpeedMbox);
	ball.x = RESOLUTION_X/2;
     d84:	008001b4 	movhi	r2,6
     d88:	10bfee04 	addi	r2,r2,-72
     d8c:	00c02804 	movi	r3,160
     d90:	10c00015 	stw	r3,0(r2)
	ball.y = RESOLUTION_Y/2;
     d94:	008001b4 	movhi	r2,6
     d98:	10bfee04 	addi	r2,r2,-72
     d9c:	00c01e04 	movi	r3,120
     da0:	10c00115 	stw	r3,4(r2)
	ball.speed.x = speed;
     da4:	d0e00997 	ldw	r3,-32730(gp)
     da8:	008001b4 	movhi	r2,6
     dac:	10bfee04 	addi	r2,r2,-72
     db0:	10c00215 	stw	r3,8(r2)
	ball.speed.y = speed;
     db4:	d0e00997 	ldw	r3,-32730(gp)
     db8:	008001b4 	movhi	r2,6
     dbc:	10bfee04 	addi	r2,r2,-72
     dc0:	10c00315 	stw	r3,12(r2)
	ball.x += ball.speed.x;
     dc4:	008001b4 	movhi	r2,6
     dc8:	10bfee04 	addi	r2,r2,-72
     dcc:	10c00017 	ldw	r3,0(r2)
     dd0:	008001b4 	movhi	r2,6
     dd4:	10bfee04 	addi	r2,r2,-72
     dd8:	10800217 	ldw	r2,8(r2)
     ddc:	1887883a 	add	r3,r3,r2
     de0:	008001b4 	movhi	r2,6
     de4:	10bfee04 	addi	r2,r2,-72
     de8:	10c00015 	stw	r3,0(r2)
	ball.y += ball.speed.y;
     dec:	008001b4 	movhi	r2,6
     df0:	10bfee04 	addi	r2,r2,-72
     df4:	10c00117 	ldw	r3,4(r2)
     df8:	008001b4 	movhi	r2,6
     dfc:	10bfee04 	addi	r2,r2,-72
     e00:	10800317 	ldw	r2,12(r2)
     e04:	1887883a 	add	r3,r3,r2
     e08:	008001b4 	movhi	r2,6
     e0c:	10bfee04 	addi	r2,r2,-72
     e10:	10c00115 	stw	r3,4(r2)
	ball.direction = RIGHT_DOWN;
     e14:	008001b4 	movhi	r2,6
     e18:	10bfee04 	addi	r2,r2,-72
     e1c:	00c000c4 	movi	r3,3
     e20:	10c00415 	stw	r3,16(r2)
	int r = 1;
     e24:	00800044 	movi	r2,1
     e28:	e0bffc15 	stw	r2,-16(fp)
	int score1 = 0, score2 = 0;
     e2c:	e03ffd15 	stw	zero,-12(fp)
     e30:	e03ffe15 	stw	zero,-8(fp)
	for(;;) {
		if(CurTimerState == RUNNING) {
     e34:	d0a8b097 	ldw	r2,-23870(gp)
     e38:	10800058 	cmpnei	r2,r2,1
     e3c:	103ffd1e 	bne	r2,zero,e34 <BallTask+0xc4>
			// Wait for redraw cycle
			//wait_for_vsync();
			// erase the ball
			circleBres(ball.x, ball.y, r, 0);
     e40:	008001b4 	movhi	r2,6
     e44:	10bfee04 	addi	r2,r2,-72
     e48:	10c00017 	ldw	r3,0(r2)
     e4c:	008001b4 	movhi	r2,6
     e50:	10bfee04 	addi	r2,r2,-72
     e54:	10800117 	ldw	r2,4(r2)
     e58:	000f883a 	mov	r7,zero
     e5c:	e1bffc17 	ldw	r6,-16(fp)
     e60:	100b883a 	mov	r5,r2
     e64:	1809883a 	mov	r4,r3
     e68:	0001ec40 	call	1ec4 <circleBres>
			// ball collision with the paddles and the top and bottom borders (FUNCTIONAL ATM!!!!)
			if(((ball.x+r-5 <= x1) && (ball.y >= player1_y_0) && (ball.y <= player1_y_1)) ) {
     e6c:	008001b4 	movhi	r2,6
     e70:	10bfee04 	addi	r2,r2,-72
     e74:	10c00017 	ldw	r3,0(r2)
     e78:	e0bffc17 	ldw	r2,-16(fp)
     e7c:	1885883a 	add	r2,r3,r2
     e80:	10bffec4 	addi	r2,r2,-5
     e84:	d0e00397 	ldw	r3,-32754(gp)
     e88:	18800c16 	blt	r3,r2,ebc <BallTask+0x14c>
     e8c:	008001b4 	movhi	r2,6
     e90:	10bfee04 	addi	r2,r2,-72
     e94:	10c00117 	ldw	r3,4(r2)
     e98:	d0a00597 	ldw	r2,-32746(gp)
     e9c:	18800716 	blt	r3,r2,ebc <BallTask+0x14c>
     ea0:	008001b4 	movhi	r2,6
     ea4:	10bfee04 	addi	r2,r2,-72
     ea8:	10800117 	ldw	r2,4(r2)
     eac:	d0e00697 	ldw	r3,-32742(gp)
     eb0:	18800216 	blt	r3,r2,ebc <BallTask+0x14c>
				playBuffer();
     eb4:	00017ac0 	call	17ac <playBuffer>
				collide_paddle();
     eb8:	0000a280 	call	a28 <collide_paddle>
			}
			if((ball.x+r+4 >= x2) && (ball.y >= player2_y_0) && (ball.y <= player2_y_1)) {
     ebc:	008001b4 	movhi	r2,6
     ec0:	10bfee04 	addi	r2,r2,-72
     ec4:	10c00017 	ldw	r3,0(r2)
     ec8:	e0bffc17 	ldw	r2,-16(fp)
     ecc:	1885883a 	add	r2,r3,r2
     ed0:	10c00104 	addi	r3,r2,4
     ed4:	d0a00497 	ldw	r2,-32750(gp)
     ed8:	18800c16 	blt	r3,r2,f0c <BallTask+0x19c>
     edc:	008001b4 	movhi	r2,6
     ee0:	10bfee04 	addi	r2,r2,-72
     ee4:	10c00117 	ldw	r3,4(r2)
     ee8:	d0a00797 	ldw	r2,-32738(gp)
     eec:	18800716 	blt	r3,r2,f0c <BallTask+0x19c>
     ef0:	008001b4 	movhi	r2,6
     ef4:	10bfee04 	addi	r2,r2,-72
     ef8:	10800117 	ldw	r2,4(r2)
     efc:	d0e00897 	ldw	r3,-32734(gp)
     f00:	18800216 	blt	r3,r2,f0c <BallTask+0x19c>
				playBuffer();
     f04:	00017ac0 	call	17ac <playBuffer>

				collide_paddle();
     f08:	0000a280 	call	a28 <collide_paddle>
			}

			// top and bottom borders
			if(ball.y + r <= 0 || ball.y + r >= RESOLUTION_Y) {
     f0c:	008001b4 	movhi	r2,6
     f10:	10bfee04 	addi	r2,r2,-72
     f14:	10c00117 	ldw	r3,4(r2)
     f18:	e0bffc17 	ldw	r2,-16(fp)
     f1c:	1885883a 	add	r2,r3,r2
     f20:	0080070e 	bge	zero,r2,f40 <BallTask+0x1d0>
     f24:	008001b4 	movhi	r2,6
     f28:	10bfee04 	addi	r2,r2,-72
     f2c:	10c00117 	ldw	r3,4(r2)
     f30:	e0bffc17 	ldw	r2,-16(fp)
     f34:	1885883a 	add	r2,r3,r2
     f38:	10803c10 	cmplti	r2,r2,240
     f3c:	1000021e 	bne	r2,zero,f48 <BallTask+0x1d8>
				playBuffer();
     f40:	00017ac0 	call	17ac <playBuffer>
				collide_wall();
     f44:	000096c0 	call	96c <collide_wall>
			}

			// resets the ball to the middle
			// score for p2
			if(ball.x >= RESOLUTION_X) {
     f48:	008001b4 	movhi	r2,6
     f4c:	10bfee04 	addi	r2,r2,-72
     f50:	10800017 	ldw	r2,0(r2)
     f54:	10805010 	cmplti	r2,r2,320
     f58:	10000b1e 	bne	r2,zero,f88 <BallTask+0x218>
				score2++;
     f5c:	e0bffe17 	ldw	r2,-8(fp)
     f60:	10800044 	addi	r2,r2,1
     f64:	e0bffe15 	stw	r2,-8(fp)
				ball.x = RESOLUTION_X/2;
     f68:	008001b4 	movhi	r2,6
     f6c:	10bfee04 	addi	r2,r2,-72
     f70:	00c02804 	movi	r3,160
     f74:	10c00015 	stw	r3,0(r2)
				ball.y = RESOLUTION_Y/2;
     f78:	008001b4 	movhi	r2,6
     f7c:	10bfee04 	addi	r2,r2,-72
     f80:	00c01e04 	movi	r3,120
     f84:	10c00115 	stw	r3,4(r2)
			}
			// score for p1
			if(ball.x <= 0) {
     f88:	008001b4 	movhi	r2,6
     f8c:	10bfee04 	addi	r2,r2,-72
     f90:	10800017 	ldw	r2,0(r2)
     f94:	00800b16 	blt	zero,r2,fc4 <BallTask+0x254>
				score1++;
     f98:	e0bffd17 	ldw	r2,-12(fp)
     f9c:	10800044 	addi	r2,r2,1
     fa0:	e0bffd15 	stw	r2,-12(fp)
				ball.x = RESOLUTION_X/2;
     fa4:	008001b4 	movhi	r2,6
     fa8:	10bfee04 	addi	r2,r2,-72
     fac:	00c02804 	movi	r3,160
     fb0:	10c00015 	stw	r3,0(r2)
				ball.y = RESOLUTION_Y/2;
     fb4:	008001b4 	movhi	r2,6
     fb8:	10bfee04 	addi	r2,r2,-72
     fbc:	00c01e04 	movi	r3,120
     fc0:	10c00115 	stw	r3,4(r2)
			}

			ball_movement();
     fc4:	0000b340 	call	b34 <ball_movement>

			OSMboxPost(Score1Mbox, (void *) &score1);
     fc8:	d0a8b897 	ldw	r2,-23838(gp)
     fcc:	e0fffd04 	addi	r3,fp,-12
     fd0:	180b883a 	mov	r5,r3
     fd4:	1009883a 	mov	r4,r2
     fd8:	00171840 	call	17184 <OSMboxPost>
			OSMboxPost(Score2Mbox, (void *) &score2);
     fdc:	d0a8b397 	ldw	r2,-23858(gp)
     fe0:	e0fffe04 	addi	r3,fp,-8
     fe4:	180b883a 	mov	r5,r3
     fe8:	1009883a 	mov	r4,r2
     fec:	00171840 	call	17184 <OSMboxPost>
			circleBres(ball.x, ball.y, r, 0xffff);
     ff0:	008001b4 	movhi	r2,6
     ff4:	10bfee04 	addi	r2,r2,-72
     ff8:	10c00017 	ldw	r3,0(r2)
     ffc:	008001b4 	movhi	r2,6
    1000:	10bfee04 	addi	r2,r2,-72
    1004:	10800117 	ldw	r2,4(r2)
    1008:	01ffffd4 	movui	r7,65535
    100c:	e1bffc17 	ldw	r6,-16(fp)
    1010:	100b883a 	mov	r5,r2
    1014:	1809883a 	mov	r4,r3
    1018:	0001ec40 	call	1ec4 <circleBres>
			OSTimeDlyHMSM(0, 0, 0, 125);
    101c:	01c01f44 	movi	r7,125
    1020:	000d883a 	mov	r6,zero
    1024:	000b883a 	mov	r5,zero
    1028:	0009883a 	mov	r4,zero
    102c:	001b0280 	call	1b028 <OSTimeDlyHMSM>
		}
	}
    1030:	003f8006 	br	e34 <BallTask+0xc4>

00001034 <ScoreTask>:
}

/* Handle the scores for player 1 and player 2 */
void ScoreTask(void* pdata)
{
    1034:	deffeb04 	addi	sp,sp,-84
    1038:	dfc01415 	stw	ra,80(sp)
    103c:	df001315 	stw	fp,76(sp)
    1040:	df001304 	addi	fp,sp,76
    1044:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int *score1, *score2;
	char texts[30];
	char text2[30];
	clear_screen(0);
    1048:	0009883a 	mov	r4,zero
    104c:	0001a600 	call	1a60 <clear_screen>
	// use a mailbox to determine the score
	for(;;) {
		if (CurTimerState == RUNNING) {
    1050:	d0a8b097 	ldw	r2,-23870(gp)
    1054:	10800058 	cmpnei	r2,r2,1
    1058:	1000711e 	bne	r2,zero,1220 <ScoreTask+0x1ec>
			// mailbox the scores of player 1 and 2
			score1 = OSMboxAccept(Score1Mbox);
    105c:	d0a8b897 	ldw	r2,-23838(gp)
    1060:	1009883a 	mov	r4,r2
    1064:	0016a380 	call	16a38 <OSMboxAccept>
    1068:	e0bfed15 	stw	r2,-76(fp)
			score2 = OSMboxAccept(Score2Mbox);
    106c:	d0a8b397 	ldw	r2,-23858(gp)
    1070:	1009883a 	mov	r4,r2
    1074:	0016a380 	call	16a38 <OSMboxAccept>
    1078:	e0bfee15 	stw	r2,-72(fp)
			snprintf(texts, sizeof(texts), " %d", *score1);
    107c:	e0bfed17 	ldw	r2,-76(fp)
    1080:	10c00017 	ldw	r3,0(r2)
    1084:	e0bfef44 	addi	r2,fp,-67
    1088:	180f883a 	mov	r7,r3
    108c:	018000b4 	movhi	r6,2
    1090:	31911804 	addi	r6,r6,17504
    1094:	01400784 	movi	r5,30
    1098:	1009883a 	mov	r4,r2
    109c:	0002dc80 	call	2dc8 <snprintf>
			snprintf(text2, sizeof(text2), " %d", *score2);
    10a0:	e0bfee17 	ldw	r2,-72(fp)
    10a4:	10c00017 	ldw	r3,0(r2)
    10a8:	e0bff6c4 	addi	r2,fp,-37
    10ac:	180f883a 	mov	r7,r3
    10b0:	018000b4 	movhi	r6,2
    10b4:	31911804 	addi	r6,r6,17504
    10b8:	01400784 	movi	r5,30
    10bc:	1009883a 	mov	r4,r2
    10c0:	0002dc80 	call	2dc8 <snprintf>
			// display the score of player 1 and 2
			VGA_text(15, 5, "PLAYER 1");
    10c4:	018000b4 	movhi	r6,2
    10c8:	31911904 	addi	r6,r6,17508
    10cc:	01400144 	movi	r5,5
    10d0:	010003c4 	movi	r4,15
    10d4:	00021bc0 	call	21bc <VGA_text>
			VGA_text(15, 6, "SCORE: ");
    10d8:	018000b4 	movhi	r6,2
    10dc:	31911c04 	addi	r6,r6,17520
    10e0:	01400184 	movi	r5,6
    10e4:	010003c4 	movi	r4,15
    10e8:	00021bc0 	call	21bc <VGA_text>
			VGA_text(21, 6, text2);
    10ec:	e0bff6c4 	addi	r2,fp,-37
    10f0:	100d883a 	mov	r6,r2
    10f4:	01400184 	movi	r5,6
    10f8:	01000544 	movi	r4,21
    10fc:	00021bc0 	call	21bc <VGA_text>
			VGA_text(310, 3, "PLAYER 2");
    1100:	018000b4 	movhi	r6,2
    1104:	31911e04 	addi	r6,r6,17528
    1108:	014000c4 	movi	r5,3
    110c:	01004d84 	movi	r4,310
    1110:	00021bc0 	call	21bc <VGA_text>
			VGA_text(310, 4, "SCORE: ");
    1114:	018000b4 	movhi	r6,2
    1118:	31911c04 	addi	r6,r6,17520
    111c:	01400104 	movi	r5,4
    1120:	01004d84 	movi	r4,310
    1124:	00021bc0 	call	21bc <VGA_text>
			VGA_text(316, 4, texts);
    1128:	e0bfef44 	addi	r2,fp,-67
    112c:	100d883a 	mov	r6,r2
    1130:	01400104 	movi	r5,4
    1134:	01004f04 	movi	r4,316
    1138:	00021bc0 	call	21bc <VGA_text>

			if (*score1 == 5) {		// score of player 1 set it to END_GAME
    113c:	e0bfed17 	ldw	r2,-76(fp)
    1140:	10800017 	ldw	r2,0(r2)
    1144:	10800158 	cmpnei	r2,r2,5
    1148:	1000191e 	bne	r2,zero,11b0 <ScoreTask+0x17c>
				gameFlag = OSFlagPost(GameStatus, END_GAME, OS_FLAG_SET, &err);
    114c:	d0a8ba97 	ldw	r2,-23830(gp)
    1150:	e0ffef04 	addi	r3,fp,-68
    1154:	180f883a 	mov	r7,r3
    1158:	01800044 	movi	r6,1
    115c:	01400104 	movi	r5,4
    1160:	1009883a 	mov	r4,r2
    1164:	00162080 	call	16208 <OSFlagPost>
    1168:	d0a8b58d 	sth	r2,-23850(gp)
				CurTimerState = END;
    116c:	00800084 	movi	r2,2
    1170:	d0a8b095 	stw	r2,-23870(gp)
				VGA_text(32, 29, "PLAYER 2 WINS");
    1174:	018000b4 	movhi	r6,2
    1178:	31912104 	addi	r6,r6,17540
    117c:	01400744 	movi	r5,29
    1180:	01000804 	movi	r4,32
    1184:	00021bc0 	call	21bc <VGA_text>
				VGA_text(29, 30, "PRESS 'R' TO RESET");
    1188:	018000b4 	movhi	r6,2
    118c:	31912504 	addi	r6,r6,17556
    1190:	01400784 	movi	r5,30
    1194:	01000744 	movi	r4,29
    1198:	00021bc0 	call	21bc <VGA_text>
				*score1 = 0;
    119c:	e0bfed17 	ldw	r2,-76(fp)
    11a0:	10000015 	stw	zero,0(r2)
				*score2 = 0;
    11a4:	e0bfee17 	ldw	r2,-72(fp)
    11a8:	10000015 	stw	zero,0(r2)
    11ac:	00001c06 	br	1220 <ScoreTask+0x1ec>
			} else if (*score2 == 5) {	// score of p2 set it to END_GAME
    11b0:	e0bfee17 	ldw	r2,-72(fp)
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	10800158 	cmpnei	r2,r2,5
    11bc:	1000181e 	bne	r2,zero,1220 <ScoreTask+0x1ec>
				gameFlag = OSFlagPost(GameStatus, END_GAME, OS_FLAG_SET, &err);
    11c0:	d0a8ba97 	ldw	r2,-23830(gp)
    11c4:	e0ffef04 	addi	r3,fp,-68
    11c8:	180f883a 	mov	r7,r3
    11cc:	01800044 	movi	r6,1
    11d0:	01400104 	movi	r5,4
    11d4:	1009883a 	mov	r4,r2
    11d8:	00162080 	call	16208 <OSFlagPost>
    11dc:	d0a8b58d 	sth	r2,-23850(gp)
				CurTimerState = END;
    11e0:	00800084 	movi	r2,2
    11e4:	d0a8b095 	stw	r2,-23870(gp)
				VGA_text(32, 29, "PLAYER 1 WINS");
    11e8:	018000b4 	movhi	r6,2
    11ec:	31912a04 	addi	r6,r6,17576
    11f0:	01400744 	movi	r5,29
    11f4:	01000804 	movi	r4,32
    11f8:	00021bc0 	call	21bc <VGA_text>
				VGA_text(29, 30, "PRESS 'R' TO RESET");
    11fc:	018000b4 	movhi	r6,2
    1200:	31912504 	addi	r6,r6,17556
    1204:	01400784 	movi	r5,30
    1208:	01000744 	movi	r4,29
    120c:	00021bc0 	call	21bc <VGA_text>
				*score1 = 0;
    1210:	e0bfed17 	ldw	r2,-76(fp)
    1214:	10000015 	stw	zero,0(r2)
				*score2 = 0;
    1218:	e0bfee17 	ldw	r2,-72(fp)
    121c:	10000015 	stw	zero,0(r2)
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 125);
    1220:	01c01f44 	movi	r7,125
    1224:	000d883a 	mov	r6,zero
    1228:	000b883a 	mov	r5,zero
    122c:	0009883a 	mov	r4,zero
    1230:	001b0280 	call	1b028 <OSTimeDlyHMSM>
	}
    1234:	003f8606 	br	1050 <ScoreTask+0x1c>

00001238 <find_files>:

// find_files will print out the list of files in the current path,
// then recursively call itself on any subdirectories it finds.
// It is limited to directories containing MAX_SUBDIRECTORIES or fewer
// subdirectories and a maximium path length of 104 characters (including /'s)
void find_files (char* path){
    1238:	deffb004 	addi	sp,sp,-320
    123c:	dfc04f15 	stw	ra,316(sp)
    1240:	df004e15 	stw	fp,312(sp)
    1244:	df004e04 	addi	fp,sp,312
    1248:	e13fff15 	stw	r4,-4(fp)
	char filepath [90];
	char filename [15];
	char fullpath [104];
	char* folders [MAX_SUBDIRECTORIES];
	int num_dirs = 0;
    124c:	e03fb215 	stw	zero,-312(fp)
	short int file;
	short int attributes;
	bool foundAll;

	//copy the path name to local memory
	strcpy (filepath, path);
    1250:	e0bfb604 	addi	r2,fp,-296
    1254:	e17fff17 	ldw	r5,-4(fp)
    1258:	1009883a 	mov	r4,r2
    125c:	0002f300 	call	2f30 <strcpy>

	foundAll = (alt_up_sd_card_find_first(filepath,filename) == 0 ? false : true);
    1260:	e0ffcc84 	addi	r3,fp,-206
    1264:	e0bfb604 	addi	r2,fp,-296
    1268:	180b883a 	mov	r5,r3
    126c:	1009883a 	mov	r4,r2
    1270:	001ec500 	call	1ec50 <alt_up_sd_card_find_first>
    1274:	10bfffcc 	andi	r2,r2,65535
    1278:	10a0001c 	xori	r2,r2,32768
    127c:	10a00004 	addi	r2,r2,-32768
    1280:	1004c03a 	cmpne	r2,r2,zero
    1284:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);
    1288:	e0bfb604 	addi	r2,fp,-296
    128c:	100b883a 	mov	r5,r2
    1290:	010000b4 	movhi	r4,2
    1294:	21112e04 	addi	r4,r4,17592
    1298:	0002b8c0 	call	2b8c <printf>

	//loop through the directory tree
	while (!foundAll){
    129c:	00005306 	br	13ec <find_files+0x1b4>
		strcpy (fullpath,filepath);
    12a0:	e0ffb604 	addi	r3,fp,-296
    12a4:	e0bfd044 	addi	r2,fp,-191
    12a8:	180b883a 	mov	r5,r3
    12ac:	1009883a 	mov	r4,r2
    12b0:	0002f300 	call	2f30 <strcpy>
		//remove the '.' character from the filepath (foo/bar/. -> foo/bar/)
		fullpath [strlen(filepath)-1] = '\0';
    12b4:	e0bfb604 	addi	r2,fp,-296
    12b8:	1009883a 	mov	r4,r2
    12bc:	0002fc00 	call	2fc0 <strlen>
    12c0:	10bfffc4 	addi	r2,r2,-1
    12c4:	e0ffd044 	addi	r3,fp,-191
    12c8:	1885883a 	add	r2,r3,r2
    12cc:	10000005 	stb	zero,0(r2)
		strcat (fullpath,filename);
    12d0:	e0ffcc84 	addi	r3,fp,-206
    12d4:	e0bfd044 	addi	r2,fp,-191
    12d8:	180b883a 	mov	r5,r3
    12dc:	1009883a 	mov	r4,r2
    12e0:	0002eac0 	call	2eac <strcat>

		file = alt_up_sd_card_fopen (fullpath, false);
    12e4:	e0bfd044 	addi	r2,fp,-191
    12e8:	000b883a 	mov	r5,zero
    12ec:	1009883a 	mov	r4,r2
    12f0:	001f0d80 	call	1f0d8 <alt_up_sd_card_fopen>
    12f4:	e0bfb50d 	sth	r2,-300(fp)
		attributes = alt_up_sd_card_get_attributes (file);
    12f8:	e0bfb50f 	ldh	r2,-300(fp)
    12fc:	1009883a 	mov	r4,r2
    1300:	001f4dc0 	call	1f4dc <alt_up_sd_card_get_attributes>
    1304:	e0bfb58d 	sth	r2,-298(fp)
		if (file != -1)
    1308:	e0bfb50f 	ldh	r2,-300(fp)
    130c:	10bfffe0 	cmpeqi	r2,r2,-1
    1310:	1000031e 	bne	r2,zero,1320 <find_files+0xe8>
			alt_up_sd_card_fclose(file);
    1314:	e0bfb50f 	ldh	r2,-300(fp)
    1318:	1009883a 	mov	r4,r2
    131c:	001fefc0 	call	1fefc <alt_up_sd_card_fclose>

		//print the file name, unless it's a directory or mount point
		if ( (attributes != -1) && !(attributes & 0x0018)){
    1320:	e0bfb58f 	ldh	r2,-298(fp)
    1324:	10bfffe0 	cmpeqi	r2,r2,-1
    1328:	1000091e 	bne	r2,zero,1350 <find_files+0x118>
    132c:	e0bfb58b 	ldhu	r2,-298(fp)
    1330:	10bfffcc 	andi	r2,r2,65535
    1334:	1080060c 	andi	r2,r2,24
    1338:	1000051e 	bne	r2,zero,1350 <find_files+0x118>
			printf("/%s\n",fullpath);
    133c:	e0bfd044 	addi	r2,fp,-191
    1340:	100b883a 	mov	r5,r2
    1344:	010000b4 	movhi	r4,2
    1348:	21112e04 	addi	r4,r4,17592
    134c:	0002b8c0 	call	2b8c <printf>
		}

		//if a directory is found, allocate space and save its name for later
		if ((attributes != -1) && (attributes & 0x0010)){
    1350:	e0bfb58f 	ldh	r2,-298(fp)
    1354:	10bfffe0 	cmpeqi	r2,r2,-1
    1358:	10001c1e 	bne	r2,zero,13cc <find_files+0x194>
    135c:	e0bfb58b 	ldhu	r2,-298(fp)
    1360:	10bfffcc 	andi	r2,r2,65535
    1364:	1080040c 	andi	r2,r2,16
    1368:	10001826 	beq	r2,zero,13cc <find_files+0x194>
			folders [num_dirs] = malloc (15*sizeof(char));
    136c:	010003c4 	movi	r4,15
    1370:	00023280 	call	2328 <malloc>
    1374:	1007883a 	mov	r3,r2
    1378:	e0bfb217 	ldw	r2,-312(fp)
    137c:	1085883a 	add	r2,r2,r2
    1380:	1085883a 	add	r2,r2,r2
    1384:	e13fb204 	addi	r4,fp,-312
    1388:	2085883a 	add	r2,r4,r2
    138c:	10803904 	addi	r2,r2,228
    1390:	10c00015 	stw	r3,0(r2)
			strcpy(folders[num_dirs],filename);
    1394:	e0bfb217 	ldw	r2,-312(fp)
    1398:	1085883a 	add	r2,r2,r2
    139c:	1085883a 	add	r2,r2,r2
    13a0:	e0ffb204 	addi	r3,fp,-312
    13a4:	1885883a 	add	r2,r3,r2
    13a8:	10803904 	addi	r2,r2,228
    13ac:	10800017 	ldw	r2,0(r2)
    13b0:	e0ffcc84 	addi	r3,fp,-206
    13b4:	180b883a 	mov	r5,r3
    13b8:	1009883a 	mov	r4,r2
    13bc:	0002f300 	call	2f30 <strcpy>
			num_dirs++;
    13c0:	e0bfb217 	ldw	r2,-312(fp)
    13c4:	10800044 	addi	r2,r2,1
    13c8:	e0bfb215 	stw	r2,-312(fp)
		}

		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
    13cc:	e0bfcc84 	addi	r2,fp,-206
    13d0:	1009883a 	mov	r4,r2
    13d4:	001ed200 	call	1ed20 <alt_up_sd_card_find_next>
    13d8:	10bfffcc 	andi	r2,r2,65535
    13dc:	10a0001c 	xori	r2,r2,32768
    13e0:	10a00004 	addi	r2,r2,-32768
    13e4:	1004c03a 	cmpne	r2,r2,zero
    13e8:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);

	//loop through the directory tree
	while (!foundAll){
    13ec:	e0bfb303 	ldbu	r2,-308(fp)
    13f0:	1080005c 	xori	r2,r2,1
    13f4:	10803fcc 	andi	r2,r2,255
    13f8:	103fa91e 	bne	r2,zero,12a0 <find_files+0x68>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
    13fc:	e03fb415 	stw	zero,-304(fp)
    1400:	00003106 	br	14c8 <find_files+0x290>

		strcpy (fullpath,filepath);
    1404:	e0ffb604 	addi	r3,fp,-296
    1408:	e0bfd044 	addi	r2,fp,-191
    140c:	180b883a 	mov	r5,r3
    1410:	1009883a 	mov	r4,r2
    1414:	0002f300 	call	2f30 <strcpy>
		fullpath [strlen(filepath)-1] = '\0';
    1418:	e0bfb604 	addi	r2,fp,-296
    141c:	1009883a 	mov	r4,r2
    1420:	0002fc00 	call	2fc0 <strlen>
    1424:	10bfffc4 	addi	r2,r2,-1
    1428:	e0ffd044 	addi	r3,fp,-191
    142c:	1885883a 	add	r2,r3,r2
    1430:	10000005 	stb	zero,0(r2)
		strcat (fullpath,folders[i]);
    1434:	e0bfb417 	ldw	r2,-304(fp)
    1438:	1085883a 	add	r2,r2,r2
    143c:	1085883a 	add	r2,r2,r2
    1440:	e13fb204 	addi	r4,fp,-312
    1444:	2085883a 	add	r2,r4,r2
    1448:	10803904 	addi	r2,r2,228
    144c:	10c00017 	ldw	r3,0(r2)
    1450:	e0bfd044 	addi	r2,fp,-191
    1454:	180b883a 	mov	r5,r3
    1458:	1009883a 	mov	r4,r2
    145c:	0002eac0 	call	2eac <strcat>
		strcat (fullpath, "/.");
    1460:	e0bfd044 	addi	r2,fp,-191
    1464:	1009883a 	mov	r4,r2
    1468:	0002fc00 	call	2fc0 <strlen>
    146c:	1007883a 	mov	r3,r2
    1470:	e0bfd044 	addi	r2,fp,-191
    1474:	10c5883a 	add	r2,r2,r3
    1478:	00c00bc4 	movi	r3,47
    147c:	10c00005 	stb	r3,0(r2)
    1480:	00c00b84 	movi	r3,46
    1484:	10c00045 	stb	r3,1(r2)
    1488:	10000085 	stb	zero,2(r2)
		find_files (fullpath);
    148c:	e0bfd044 	addi	r2,fp,-191
    1490:	1009883a 	mov	r4,r2
    1494:	00012380 	call	1238 <find_files>
		free(folders[i]);
    1498:	e0bfb417 	ldw	r2,-304(fp)
    149c:	1085883a 	add	r2,r2,r2
    14a0:	1085883a 	add	r2,r2,r2
    14a4:	e0ffb204 	addi	r3,fp,-312
    14a8:	1885883a 	add	r2,r3,r2
    14ac:	10803904 	addi	r2,r2,228
    14b0:	10800017 	ldw	r2,0(r2)
    14b4:	1009883a 	mov	r4,r2
    14b8:	000233c0 	call	233c <free>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
    14bc:	e0bfb417 	ldw	r2,-304(fp)
    14c0:	10800044 	addi	r2,r2,1
    14c4:	e0bfb415 	stw	r2,-304(fp)
    14c8:	e0ffb417 	ldw	r3,-304(fp)
    14cc:	e0bfb217 	ldw	r2,-312(fp)
    14d0:	18bfcc16 	blt	r3,r2,1404 <find_files+0x1cc>
		strcat (fullpath, "/.");
		find_files (fullpath);
		free(folders[i]);
	}

	return;
    14d4:	0001883a 	nop
}
    14d8:	e037883a 	mov	sp,fp
    14dc:	dfc00117 	ldw	ra,4(sp)
    14e0:	df000017 	ldw	fp,0(sp)
    14e4:	dec00204 	addi	sp,sp,8
    14e8:	f800283a 	ret

000014ec <init_audio>:

void init_audio(void)
{
    14ec:	defffe04 	addi	sp,sp,-8
    14f0:	dfc00115 	stw	ra,4(sp)
    14f4:	df000015 	stw	fp,0(sp)
    14f8:	d839883a 	mov	fp,sp
	audio_dev = alt_up_audio_open_dev ("/dev/Audio_Subsystem_Audio");
    14fc:	010000b4 	movhi	r4,2
    1500:	21113004 	addi	r4,r4,17600
    1504:	0020ecc0 	call	20ecc <alt_up_audio_open_dev>
    1508:	d0a8b495 	stw	r2,-23854(gp)

	// audio part
	if (audio_dev == NULL)	{
    150c:	d0a8b497 	ldw	r2,-23854(gp)
    1510:	1000041e 	bne	r2,zero,1524 <init_audio+0x38>
		printf("Error: could not open audio device\n");
    1514:	010000b4 	movhi	r4,2
    1518:	21113704 	addi	r4,r4,17628
    151c:	0002c880 	call	2c88 <puts>
	} else
		printf("Opened audio device\n");
}
    1520:	00000306 	br	1530 <init_audio+0x44>

	// audio part
	if (audio_dev == NULL)	{
		printf("Error: could not open audio device\n");
	} else
		printf("Opened audio device\n");
    1524:	010000b4 	movhi	r4,2
    1528:	21114004 	addi	r4,r4,17664
    152c:	0002c880 	call	2c88 <puts>
}
    1530:	0001883a 	nop
    1534:	e037883a 	mov	sp,fp
    1538:	dfc00117 	ldw	ra,4(sp)
    153c:	df000017 	ldw	fp,0(sp)
    1540:	dec00204 	addi	sp,sp,8
    1544:	f800283a 	ret

00001548 <init_sd_card>:

void init_sd_card(void)
{
    1548:	defffd04 	addi	sp,sp,-12
    154c:	dfc00215 	stw	ra,8(sp)
    1550:	df000115 	stw	fp,4(sp)
    1554:	df000104 	addi	fp,sp,4
	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
    1558:	010000b4 	movhi	r4,2
    155c:	21114504 	addi	r4,r4,17684
    1560:	001ea640 	call	1ea64 <alt_up_sd_card_open_dev>
    1564:	e0bfff15 	stw	r2,-4(fp)

	if (sd_card!=NULL){
    1568:	e0bfff17 	ldw	r2,-4(fp)
    156c:	10001426 	beq	r2,zero,15c0 <init_sd_card+0x78>
		if (alt_up_sd_card_is_Present()){
    1570:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
    1574:	10803fcc 	andi	r2,r2,255
    1578:	10000426 	beq	r2,zero,158c <init_sd_card+0x44>
			printf("An SD Card was found!\n");
    157c:	010000b4 	movhi	r4,2
    1580:	21114904 	addi	r4,r4,17700
    1584:	0002c880 	call	2c88 <puts>
    1588:	00000306 	br	1598 <init_sd_card+0x50>
		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
    158c:	010000b4 	movhi	r4,2
    1590:	21114f04 	addi	r4,r4,17724
    1594:	0002b8c0 	call	2b8c <printf>
		}

		if (alt_up_sd_card_is_FAT16()){
    1598:	001ebe40 	call	1ebe4 <alt_up_sd_card_is_FAT16>
    159c:	10803fcc 	andi	r2,r2,255
    15a0:	10000426 	beq	r2,zero,15b4 <init_sd_card+0x6c>
			printf("FAT-16 partition found!\n");
    15a4:	010000b4 	movhi	r4,2
    15a8:	21115a04 	addi	r4,r4,17768
    15ac:	0002c880 	call	2c88 <puts>
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
		}
	}
}
    15b0:	00000306 	br	15c0 <init_sd_card+0x78>

		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partition found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
    15b4:	010000b4 	movhi	r4,2
    15b8:	21116004 	addi	r4,r4,17792
    15bc:	0002c880 	call	2c88 <puts>
		}
	}
}
    15c0:	0001883a 	nop
    15c4:	e037883a 	mov	sp,fp
    15c8:	dfc00117 	ldw	ra,4(sp)
    15cc:	df000017 	ldw	fp,0(sp)
    15d0:	dec00204 	addi	sp,sp,8
    15d4:	f800283a 	ret

000015d8 <readWavFile>:

void readWavFile(char * wavFile){
    15d8:	defff804 	addi	sp,sp,-32
    15dc:	dfc00715 	stw	ra,28(sp)
    15e0:	df000615 	stw	fp,24(sp)
    15e4:	df000604 	addi	fp,sp,24
    15e8:	e13fff15 	stw	r4,-4(fp)
	// opening up the .wav file
	int file_index_test2 = alt_up_sd_card_fopen(wavFile,false);
    15ec:	000b883a 	mov	r5,zero
    15f0:	e13fff17 	ldw	r4,-4(fp)
    15f4:	001f0d80 	call	1f0d8 <alt_up_sd_card_fopen>
    15f8:	10bfffcc 	andi	r2,r2,65535
    15fc:	10a0001c 	xori	r2,r2,32768
    1600:	10a00004 	addi	r2,r2,-32768
    1604:	e0bffc15 	stw	r2,-16(fp)
	if (file_index_test2 <0){
    1608:	e0bffc17 	ldw	r2,-16(fp)
    160c:	1000040e 	bge	r2,zero,1620 <readWavFile+0x48>
		printf("File Error: File not found");
    1610:	010000b4 	movhi	r4,2
    1614:	21116a04 	addi	r4,r4,17832
    1618:	0002b8c0 	call	2b8c <printf>
				printf("samples from file: %i of %i\n",i,BUF_SIZE);
			}
		}
		alt_up_sd_card_fclose(file_index_test2);
	}
}
    161c:	00005d06 	br	1794 <readWavFile+0x1bc>
	if (file_index_test2 <0){
		printf("File Error: File not found");
	}
	else{
		char read_data,read_data2;
		for (int i = 0; i < 11; i++){ //skill over header
    1620:	e03ffa15 	stw	zero,-24(fp)
    1624:	00001b06 	br	1694 <readWavFile+0xbc>
			// read returns a byte of data from .wav file
			alt_up_sd_card_read(file_index_test2);
    1628:	e0bffc17 	ldw	r2,-16(fp)
    162c:	10bfffcc 	andi	r2,r2,65535
    1630:	10a0001c 	xori	r2,r2,32768
    1634:	10a00004 	addi	r2,r2,-32768
    1638:	1009883a 	mov	r4,r2
    163c:	001f5640 	call	1f564 <alt_up_sd_card_read>
			alt_up_sd_card_read(file_index_test2);
    1640:	e0bffc17 	ldw	r2,-16(fp)
    1644:	10bfffcc 	andi	r2,r2,65535
    1648:	10a0001c 	xori	r2,r2,32768
    164c:	10a00004 	addi	r2,r2,-32768
    1650:	1009883a 	mov	r4,r2
    1654:	001f5640 	call	1f564 <alt_up_sd_card_read>
			alt_up_sd_card_read(file_index_test2);
    1658:	e0bffc17 	ldw	r2,-16(fp)
    165c:	10bfffcc 	andi	r2,r2,65535
    1660:	10a0001c 	xori	r2,r2,32768
    1664:	10a00004 	addi	r2,r2,-32768
    1668:	1009883a 	mov	r4,r2
    166c:	001f5640 	call	1f564 <alt_up_sd_card_read>
			alt_up_sd_card_read(file_index_test2);
    1670:	e0bffc17 	ldw	r2,-16(fp)
    1674:	10bfffcc 	andi	r2,r2,65535
    1678:	10a0001c 	xori	r2,r2,32768
    167c:	10a00004 	addi	r2,r2,-32768
    1680:	1009883a 	mov	r4,r2
    1684:	001f5640 	call	1f564 <alt_up_sd_card_read>
	if (file_index_test2 <0){
		printf("File Error: File not found");
	}
	else{
		char read_data,read_data2;
		for (int i = 0; i < 11; i++){ //skill over header
    1688:	e0bffa17 	ldw	r2,-24(fp)
    168c:	10800044 	addi	r2,r2,1
    1690:	e0bffa15 	stw	r2,-24(fp)
    1694:	e0bffa17 	ldw	r2,-24(fp)
    1698:	108002d0 	cmplti	r2,r2,11
    169c:	103fe21e 	bne	r2,zero,1628 <readWavFile+0x50>
			alt_up_sd_card_read(file_index_test2);
			alt_up_sd_card_read(file_index_test2);
			alt_up_sd_card_read(file_index_test2);
			alt_up_sd_card_read(file_index_test2);
		}
		int i=0;
    16a0:	e03ffb15 	stw	zero,-20(fp)
		unsigned int fileData;
		while (i < BUF_SIZE){	// BUF_SIZE depends on files
    16a4:	00003206 	br	1770 <readWavFile+0x198>
			read_data =  alt_up_sd_card_read(file_index_test2) ;
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	10bfffcc 	andi	r2,r2,65535
    16b0:	10a0001c 	xori	r2,r2,32768
    16b4:	10a00004 	addi	r2,r2,-32768
    16b8:	1009883a 	mov	r4,r2
    16bc:	001f5640 	call	1f564 <alt_up_sd_card_read>
    16c0:	e0bffd05 	stb	r2,-12(fp)
			read_data2 = alt_up_sd_card_read(file_index_test2) ;
    16c4:	e0bffc17 	ldw	r2,-16(fp)
    16c8:	10bfffcc 	andi	r2,r2,65535
    16cc:	10a0001c 	xori	r2,r2,32768
    16d0:	10a00004 	addi	r2,r2,-32768
    16d4:	1009883a 	mov	r4,r2
    16d8:	001f5640 	call	1f564 <alt_up_sd_card_read>
    16dc:	e0bffd45 	stb	r2,-11(fp)

			// has to be stored as int since fifo_space takes in an int type
			fileData = ((read_data2 << 8) + read_data)<<16 ;
    16e0:	e0bffd47 	ldb	r2,-11(fp)
    16e4:	1006923a 	slli	r3,r2,8
    16e8:	e0bffd07 	ldb	r2,-12(fp)
    16ec:	1885883a 	add	r2,r3,r2
    16f0:	1004943a 	slli	r2,r2,16
    16f4:	e0bffe15 	stw	r2,-8(fp)

			// store into left and right buffers
			l_buf[i]= fileData;
    16f8:	008001b4 	movhi	r2,6
    16fc:	10bff304 	addi	r2,r2,-52
    1700:	e0fffb17 	ldw	r3,-20(fp)
    1704:	18c7883a 	add	r3,r3,r3
    1708:	18c7883a 	add	r3,r3,r3
    170c:	10c5883a 	add	r2,r2,r3
    1710:	e0fffe17 	ldw	r3,-8(fp)
    1714:	10c00015 	stw	r3,0(r2)
			r_buf[i] = fileData;
    1718:	008000f4 	movhi	r2,3
    171c:	10b49e04 	addi	r2,r2,-11656
    1720:	e0fffb17 	ldw	r3,-20(fp)
    1724:	18c7883a 	add	r3,r3,r3
    1728:	18c7883a 	add	r3,r3,r3
    172c:	10c5883a 	add	r2,r2,r3
    1730:	e0fffe17 	ldw	r3,-8(fp)
    1734:	10c00015 	stw	r3,0(r2)
			i++;
    1738:	e0bffb17 	ldw	r2,-20(fp)
    173c:	10800044 	addi	r2,r2,1
    1740:	e0bffb15 	stw	r2,-20(fp)
			if (i%20000 == 0){ //print progress
    1744:	e0bffb17 	ldw	r2,-20(fp)
    1748:	00d38804 	movi	r3,20000
    174c:	10c7283a 	div	r3,r2,r3
    1750:	18d38824 	muli	r3,r3,20000
    1754:	10c5c83a 	sub	r2,r2,r3
    1758:	1000051e 	bne	r2,zero,1770 <readWavFile+0x198>
				printf("samples from file: %i of %i\n",i,BUF_SIZE);
    175c:	01b0d414 	movui	r6,50000
    1760:	e17ffb17 	ldw	r5,-20(fp)
    1764:	010000b4 	movhi	r4,2
    1768:	21117104 	addi	r4,r4,17860
    176c:	0002b8c0 	call	2b8c <printf>
			alt_up_sd_card_read(file_index_test2);
			alt_up_sd_card_read(file_index_test2);
		}
		int i=0;
		unsigned int fileData;
		while (i < BUF_SIZE){	// BUF_SIZE depends on files
    1770:	e0bffb17 	ldw	r2,-20(fp)
    1774:	00f0d3d4 	movui	r3,49999
    1778:	18bfcb0e 	bge	r3,r2,16a8 <readWavFile+0xd0>
			i++;
			if (i%20000 == 0){ //print progress
				printf("samples from file: %i of %i\n",i,BUF_SIZE);
			}
		}
		alt_up_sd_card_fclose(file_index_test2);
    177c:	e0bffc17 	ldw	r2,-16(fp)
    1780:	10bfffcc 	andi	r2,r2,65535
    1784:	10a0001c 	xori	r2,r2,32768
    1788:	10a00004 	addi	r2,r2,-32768
    178c:	1009883a 	mov	r4,r2
    1790:	001fefc0 	call	1fefc <alt_up_sd_card_fclose>
	}
}
    1794:	0001883a 	nop
    1798:	e037883a 	mov	sp,fp
    179c:	dfc00117 	ldw	ra,4(sp)
    17a0:	df000017 	ldw	fp,0(sp)
    17a4:	dec00204 	addi	sp,sp,8
    17a8:	f800283a 	ret

000017ac <playBuffer>:

void playBuffer(void){
    17ac:	defffc04 	addi	sp,sp,-16
    17b0:	dfc00315 	stw	ra,12(sp)
    17b4:	df000215 	stw	fp,8(sp)
    17b8:	df000204 	addi	fp,sp,8
	int buffer_index = 0;
    17bc:	e03ffe15 	stw	zero,-8(fp)
	int num_out = 0;
    17c0:	e03fff15 	stw	zero,-4(fp)
	while (buffer_index <BUF_SIZE){
    17c4:	e0bffe17 	ldw	r2,-8(fp)
    17c8:	00f0d3d4 	movui	r3,49999
    17cc:	18801e16 	blt	r3,r2,1848 <playBuffer+0x9c>
		// play has write to fifo in it so no need to use fifo_write
		num_out = alt_up_audio_play_r (audio_dev, &(r_buf[buffer_index]), BUF_SIZE-buffer_index);
    17d0:	d128b497 	ldw	r4,-23854(gp)
    17d4:	e0bffe17 	ldw	r2,-8(fp)
    17d8:	1085883a 	add	r2,r2,r2
    17dc:	1087883a 	add	r3,r2,r2
    17e0:	008000f4 	movhi	r2,3
    17e4:	10b49e04 	addi	r2,r2,-11656
    17e8:	188b883a 	add	r5,r3,r2
    17ec:	00f0d414 	movui	r3,50000
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	1885c83a 	sub	r2,r3,r2
    17f8:	100d883a 	mov	r6,r2
    17fc:	00213040 	call	21304 <alt_up_audio_play_r>
    1800:	e0bfff15 	stw	r2,-4(fp)
		alt_up_audio_play_l (audio_dev, &(l_buf[buffer_index]), BUF_SIZE-buffer_index);
    1804:	d128b497 	ldw	r4,-23854(gp)
    1808:	e0bffe17 	ldw	r2,-8(fp)
    180c:	1085883a 	add	r2,r2,r2
    1810:	1087883a 	add	r3,r2,r2
    1814:	008001b4 	movhi	r2,6
    1818:	10bff304 	addi	r2,r2,-52
    181c:	188b883a 	add	r5,r3,r2
    1820:	00f0d414 	movui	r3,50000
    1824:	e0bffe17 	ldw	r2,-8(fp)
    1828:	1885c83a 	sub	r2,r3,r2
    182c:	100d883a 	mov	r6,r2
    1830:	002136c0 	call	2136c <alt_up_audio_play_l>
		//printf("wrote %i words to fifo",num_out);
		buffer_index += num_out;
    1834:	e0fffe17 	ldw	r3,-8(fp)
    1838:	e0bfff17 	ldw	r2,-4(fp)
    183c:	1885883a 	add	r2,r3,r2
    1840:	e0bffe15 	stw	r2,-8(fp)
		break;
    1844:	0001883a 	nop
	}
}
    1848:	0001883a 	nop
    184c:	e037883a 	mov	sp,fp
    1850:	dfc00117 	ldw	ra,4(sp)
    1854:	df000017 	ldw	fp,0(sp)
    1858:	dec00204 	addi	sp,sp,8
    185c:	f800283a 	ret

00001860 <main>:



/* The main function creates two task and starts multi-tasking */
int main(void)
{
    1860:	defff804 	addi	sp,sp,-32
    1864:	dfc00715 	stw	ra,28(sp)
    1868:	df000615 	stw	fp,24(sp)
    186c:	df000604 	addi	fp,sp,24
	keyboard = alt_up_ps2_open_dev("/dev/PS2_Port");
    1870:	010000b4 	movhi	r4,2
    1874:	21117904 	addi	r4,r4,17892
    1878:	00225680 	call	22568 <alt_up_ps2_open_dev>
    187c:	d0a8b295 	stw	r2,-23862(gp)
	INT8U err;
	//SemBallSpeed = OSSemCreate(1);
	GameSpeedMbox = OSMboxCreate((void *)0);
    1880:	0009883a 	mov	r4,zero
    1884:	0016ad00 	call	16ad0 <OSMboxCreate>
    1888:	d0a8b195 	stw	r2,-23866(gp)
	Score1Mbox = OSMboxCreate((void *)0);
    188c:	0009883a 	mov	r4,zero
    1890:	0016ad00 	call	16ad0 <OSMboxCreate>
    1894:	d0a8b895 	stw	r2,-23838(gp)
	Score2Mbox = OSMboxCreate((void *)0);
    1898:	0009883a 	mov	r4,zero
    189c:	0016ad00 	call	16ad0 <OSMboxCreate>
    18a0:	d0a8b395 	stw	r2,-23858(gp)
	GameStatus = OSFlagCreate(0x00, &err);
    18a4:	e17fff04 	addi	r5,fp,-4
    18a8:	0009883a 	mov	r4,zero
    18ac:	001562c0 	call	1562c <OSFlagCreate>
    18b0:	d0a8ba95 	stw	r2,-23830(gp)

	OSTaskCreateExt(GameStateTask,
    18b4:	d8000415 	stw	zero,16(sp)
    18b8:	d8000315 	stw	zero,12(sp)
    18bc:	00820004 	movi	r2,2048
    18c0:	d8800215 	stw	r2,8(sp)
    18c4:	008000f4 	movhi	r2,3
    18c8:	10a49e04 	addi	r2,r2,-28040
    18cc:	d8800115 	stw	r2,4(sp)
    18d0:	008000c4 	movi	r2,3
    18d4:	d8800015 	stw	r2,0(sp)
    18d8:	01c000c4 	movi	r7,3
    18dc:	018000f4 	movhi	r6,3
    18e0:	31ac9d04 	addi	r6,r6,-19852
    18e4:	000b883a 	mov	r5,zero
    18e8:	01000034 	movhi	r4,0
    18ec:	2100e504 	addi	r4,r4,916
    18f0:	0019e540 	call	19e54 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);


  OSTaskCreateExt(IOTask,
    18f4:	d8000415 	stw	zero,16(sp)
    18f8:	d8000315 	stw	zero,12(sp)
    18fc:	00820004 	movi	r2,2048
    1900:	d8800215 	stw	r2,8(sp)
    1904:	008001b4 	movhi	r2,6
    1908:	10b7ee04 	addi	r2,r2,-8264
    190c:	d8800115 	stw	r2,4(sp)
    1910:	00800084 	movi	r2,2
    1914:	d8800015 	stw	r2,0(sp)
    1918:	01c00084 	movi	r7,2
    191c:	018001b4 	movhi	r6,6
    1920:	31bfed04 	addi	r6,r6,-76
    1924:	000b883a 	mov	r5,zero
    1928:	01000034 	movhi	r4,0
    192c:	21014704 	addi	r4,r4,1308
    1930:	0019e540 	call	19e54 <OSTaskCreateExt>
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(PaddleTask,
    1934:	d8000415 	stw	zero,16(sp)
    1938:	d8000315 	stw	zero,12(sp)
    193c:	00820004 	movi	r2,2048
    1940:	d8800215 	stw	r2,8(sp)
    1944:	008000f4 	movhi	r2,3
    1948:	10ac9e04 	addi	r2,r2,-19848
    194c:	d8800115 	stw	r2,4(sp)
    1950:	00800144 	movi	r2,5
    1954:	d8800015 	stw	r2,0(sp)
    1958:	01c00144 	movi	r7,5
    195c:	018000f4 	movhi	r6,3
    1960:	31b49d04 	addi	r6,r6,-11660
    1964:	000b883a 	mov	r5,zero
    1968:	01000034 	movhi	r4,0
    196c:	21017c04 	addi	r4,r4,1520
    1970:	0019e540 	call	19e54 <OSTaskCreateExt>
                  paddle_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(BallTask,
    1974:	d8000415 	stw	zero,16(sp)
    1978:	d8000315 	stw	zero,12(sp)
    197c:	00820004 	movi	r2,2048
    1980:	d8800215 	stw	r2,8(sp)
    1984:	00800274 	movhi	r2,9
    1988:	10834304 	addi	r2,r2,3340
    198c:	d8800115 	stw	r2,4(sp)
    1990:	00800104 	movi	r2,4
    1994:	d8800015 	stw	r2,0(sp)
    1998:	01c00104 	movi	r7,4
    199c:	01800274 	movhi	r6,9
    19a0:	318b4204 	addi	r6,r6,11528
    19a4:	000b883a 	mov	r5,zero
    19a8:	01000034 	movhi	r4,0
    19ac:	21035c04 	addi	r4,r4,3440
    19b0:	0019e540 	call	19e54 <OSTaskCreateExt>
                  ball_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(ScoreTask,
    19b4:	d8000415 	stw	zero,16(sp)
    19b8:	d8000315 	stw	zero,12(sp)
    19bc:	00820004 	movi	r2,2048
    19c0:	d8800215 	stw	r2,8(sp)
    19c4:	00800274 	movhi	r2,9
    19c8:	108b4304 	addi	r2,r2,11532
    19cc:	d8800115 	stw	r2,4(sp)
    19d0:	008001c4 	movi	r2,7
    19d4:	d8800015 	stw	r2,0(sp)
    19d8:	01c001c4 	movi	r7,7
    19dc:	01800274 	movhi	r6,9
    19e0:	31934204 	addi	r6,r6,19720
    19e4:	000b883a 	mov	r5,zero
    19e8:	01000034 	movhi	r4,0
    19ec:	21040d04 	addi	r4,r4,4148
    19f0:	0019e540 	call	19e54 <OSTaskCreateExt>
				  TASK_STACKSIZE,
				  NULL,
				  0);


  OSStart();
    19f4:	0013ce40 	call	13ce4 <OSStart>
  return 0;
    19f8:	0005883a 	mov	r2,zero
}
    19fc:	e037883a 	mov	sp,fp
    1a00:	dfc00117 	ldw	ra,4(sp)
    1a04:	df000017 	ldw	fp,0(sp)
    1a08:	dec00204 	addi	sp,sp,8
    1a0c:	f800283a 	ret

00001a10 <wait_for_vsync>:
/******************************************************************************/
/**** VGA SYNCHRONIZATION FUNCTIONS *******************************************/
/******************************************************************************/

void wait_for_vsync()
{
    1a10:	defffe04 	addi	sp,sp,-8
    1a14:	df000115 	stw	fp,4(sp)
    1a18:	dc000015 	stw	r16,0(sp)
    1a1c:	df000104 	addi	fp,sp,4
	register int status;
	// Wait for vertical synchronization.
	*vga_pixel_buffer_buffer_reg = 1;
    1a20:	d0a00a97 	ldw	r2,-32726(gp)
    1a24:	00c00044 	movi	r3,1
    1a28:	10c00015 	stw	r3,0(r2)
	status = *vga_pixel_buffer_status_reg;
    1a2c:	d0a00c97 	ldw	r2,-32718(gp)
    1a30:	14000017 	ldw	r16,0(r2)
	while( (status & 0x01) != 0 )
    1a34:	00000206 	br	1a40 <wait_for_vsync+0x30>
	{
		status = *vga_pixel_buffer_status_reg;
    1a38:	d0a00c97 	ldw	r2,-32718(gp)
    1a3c:	14000017 	ldw	r16,0(r2)
{
	register int status;
	// Wait for vertical synchronization.
	*vga_pixel_buffer_buffer_reg = 1;
	status = *vga_pixel_buffer_status_reg;
	while( (status & 0x01) != 0 )
    1a40:	8080004c 	andi	r2,r16,1
    1a44:	103ffc1e 	bne	r2,zero,1a38 <wait_for_vsync+0x28>
	{
		status = *vga_pixel_buffer_status_reg;
	}
}
    1a48:	0001883a 	nop
    1a4c:	e6ffff04 	addi	sp,fp,-4
    1a50:	df000117 	ldw	fp,4(sp)
    1a54:	dc000017 	ldw	r16,0(sp)
    1a58:	dec00204 	addi	sp,sp,8
    1a5c:	f800283a 	ret

00001a60 <clear_screen>:
/******************************************************************************/
/**** LINE DRAWING AND CLEAR SCREEN FUNCTIONS *********************************/
/******************************************************************************/

void clear_screen(int back_buffer)
{
    1a60:	defffa04 	addi	sp,sp,-24
    1a64:	df000515 	stw	fp,20(sp)
    1a68:	dcc00415 	stw	r19,16(sp)
    1a6c:	dc800315 	stw	r18,12(sp)
    1a70:	dc400215 	stw	r17,8(sp)
    1a74:	dc000115 	stw	r16,4(sp)
    1a78:	df000504 	addi	fp,sp,20
    1a7c:	e13ffb15 	stw	r4,-20(fp)
	register int *buffer = (back_buffer != 0) ? vga_screen_back_buffer : vga_screen_front_buffer;
    1a80:	e0bffb17 	ldw	r2,-20(fp)
    1a84:	10000226 	beq	r2,zero,1a90 <clear_screen+0x30>
    1a88:	d0a01097 	ldw	r2,-32702(gp)
    1a8c:	00000106 	br	1a94 <clear_screen+0x34>
    1a90:	d0a00f97 	ldw	r2,-32706(gp)
    1a94:	1027883a 	mov	r19,r2
	register int y,x;
	for (y = 0; y < RESOLUTION_Y; y++)
    1a98:	0021883a 	mov	r16,zero
    1a9c:	00000d06 	br	1ad4 <clear_screen+0x74>
	{
		register int *buf = (buffer + (y << 8));
    1aa0:	8004923a 	slli	r2,r16,8
    1aa4:	1085883a 	add	r2,r2,r2
    1aa8:	1085883a 	add	r2,r2,r2
    1aac:	98a5883a 	add	r18,r19,r2
		for (x = 0; x < RESOLUTION_X/2; x++)
    1ab0:	0023883a 	mov	r17,zero
    1ab4:	00000406 	br	1ac8 <clear_screen+0x68>
		{
			*buf++ = 0;
    1ab8:	9005883a 	mov	r2,r18
    1abc:	14800104 	addi	r18,r2,4
    1ac0:	10000015 	stw	zero,0(r2)
	register int *buffer = (back_buffer != 0) ? vga_screen_back_buffer : vga_screen_front_buffer;
	register int y,x;
	for (y = 0; y < RESOLUTION_Y; y++)
	{
		register int *buf = (buffer + (y << 8));
		for (x = 0; x < RESOLUTION_X/2; x++)
    1ac4:	8c400044 	addi	r17,r17,1
    1ac8:	88802810 	cmplti	r2,r17,160
    1acc:	103ffa1e 	bne	r2,zero,1ab8 <clear_screen+0x58>

void clear_screen(int back_buffer)
{
	register int *buffer = (back_buffer != 0) ? vga_screen_back_buffer : vga_screen_front_buffer;
	register int y,x;
	for (y = 0; y < RESOLUTION_Y; y++)
    1ad0:	84000044 	addi	r16,r16,1
    1ad4:	80803c10 	cmplti	r2,r16,240
    1ad8:	103ff11e 	bne	r2,zero,1aa0 <clear_screen+0x40>
		for (x = 0; x < RESOLUTION_X/2; x++)
		{
			*buf++ = 0;
		}
	}
}
    1adc:	0001883a 	nop
    1ae0:	e6fffc04 	addi	sp,fp,-16
    1ae4:	df000417 	ldw	fp,16(sp)
    1ae8:	dcc00317 	ldw	r19,12(sp)
    1aec:	dc800217 	ldw	r18,8(sp)
    1af0:	dc400117 	ldw	r17,4(sp)
    1af4:	dc000017 	ldw	r16,0(sp)
    1af8:	dec00504 	addi	sp,sp,20
    1afc:	f800283a 	ret

00001b00 <LCD_clear>:

void LCD_clear(void)
{
    1b00:	deffff04 	addi	sp,sp,-4
    1b04:	df000015 	stw	fp,0(sp)
    1b08:	d839883a 	mov	fp,sp
	*(LCD_display_ptr) = 0x01;				// clear the LCD
    1b0c:	d0a00d97 	ldw	r2,-32714(gp)
    1b10:	00c00044 	movi	r3,1
    1b14:	10c00005 	stb	r3,0(r2)
}
    1b18:	0001883a 	nop
    1b1c:	e037883a 	mov	sp,fp
    1b20:	df000017 	ldw	fp,0(sp)
    1b24:	dec00104 	addi	sp,sp,4
    1b28:	f800283a 	ret

00001b2c <helper_plot_pixel>:

void helper_plot_pixel(int buffer_start, int x, int y, short int line_color)
{
    1b2c:	defffb04 	addi	sp,sp,-20
    1b30:	df000415 	stw	fp,16(sp)
    1b34:	df000404 	addi	fp,sp,16
    1b38:	e13ffc15 	stw	r4,-16(fp)
    1b3c:	e17ffd15 	stw	r5,-12(fp)
    1b40:	e1bffe15 	stw	r6,-8(fp)
    1b44:	3805883a 	mov	r2,r7
    1b48:	e0bfff0d 	sth	r2,-4(fp)
	*((short int *)(buffer_start + (y << 10) + (x << 1))) = (short int) line_color;
    1b4c:	e0bffe17 	ldw	r2,-8(fp)
    1b50:	100692ba 	slli	r3,r2,10
    1b54:	e0bffc17 	ldw	r2,-16(fp)
    1b58:	1887883a 	add	r3,r3,r2
    1b5c:	e0bffd17 	ldw	r2,-12(fp)
    1b60:	1085883a 	add	r2,r2,r2
    1b64:	1885883a 	add	r2,r3,r2
    1b68:	1007883a 	mov	r3,r2
    1b6c:	e0bfff0b 	ldhu	r2,-4(fp)
    1b70:	1880000d 	sth	r2,0(r3)
}
    1b74:	0001883a 	nop
    1b78:	e037883a 	mov	sp,fp
    1b7c:	df000017 	ldw	fp,0(sp)
    1b80:	dec00104 	addi	sp,sp,4
    1b84:	f800283a 	ret

00001b88 <drawCircle>:

// Function to put pixels
// at subsequence points
void drawCircle(int xc, int yc, int x, int y, int color)
{
    1b88:	defff804 	addi	sp,sp,-32
    1b8c:	dfc00715 	stw	ra,28(sp)
    1b90:	df000615 	stw	fp,24(sp)
    1b94:	dc400515 	stw	r17,20(sp)
    1b98:	dc000415 	stw	r16,16(sp)
    1b9c:	df000604 	addi	fp,sp,24
    1ba0:	e13ffa15 	stw	r4,-24(fp)
    1ba4:	e17ffb15 	stw	r5,-20(fp)
    1ba8:	e1bffc15 	stw	r6,-16(fp)
    1bac:	e1fffd15 	stw	r7,-12(fp)
	register unsigned int buffer_start;
	register int circle_color = color;
    1bb0:	e4000217 	ldw	r16,8(fp)

	//buffer_start = (int) vga_screen_back_buffer;
	buffer_start = (int) vga_screen_front_buffer;
    1bb4:	d0a00f97 	ldw	r2,-32706(gp)
    1bb8:	1023883a 	mov	r17,r2

	helper_plot_pixel(buffer_start, xc+x, yc+y, circle_color);
    1bbc:	8811883a 	mov	r8,r17
    1bc0:	e0fffa17 	ldw	r3,-24(fp)
    1bc4:	e0bffc17 	ldw	r2,-16(fp)
    1bc8:	1889883a 	add	r4,r3,r2
    1bcc:	e0fffb17 	ldw	r3,-20(fp)
    1bd0:	e0bffd17 	ldw	r2,-12(fp)
    1bd4:	1885883a 	add	r2,r3,r2
    1bd8:	8007883a 	mov	r3,r16
    1bdc:	18ffffcc 	andi	r3,r3,65535
    1be0:	18e0001c 	xori	r3,r3,32768
    1be4:	18e00004 	addi	r3,r3,-32768
    1be8:	180f883a 	mov	r7,r3
    1bec:	100d883a 	mov	r6,r2
    1bf0:	200b883a 	mov	r5,r4
    1bf4:	4009883a 	mov	r4,r8
    1bf8:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc-x, yc+y, circle_color);
    1bfc:	8811883a 	mov	r8,r17
    1c00:	e0fffa17 	ldw	r3,-24(fp)
    1c04:	e0bffc17 	ldw	r2,-16(fp)
    1c08:	1889c83a 	sub	r4,r3,r2
    1c0c:	e0fffb17 	ldw	r3,-20(fp)
    1c10:	e0bffd17 	ldw	r2,-12(fp)
    1c14:	1885883a 	add	r2,r3,r2
    1c18:	8007883a 	mov	r3,r16
    1c1c:	18ffffcc 	andi	r3,r3,65535
    1c20:	18e0001c 	xori	r3,r3,32768
    1c24:	18e00004 	addi	r3,r3,-32768
    1c28:	180f883a 	mov	r7,r3
    1c2c:	100d883a 	mov	r6,r2
    1c30:	200b883a 	mov	r5,r4
    1c34:	4009883a 	mov	r4,r8
    1c38:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc+x, yc-y, circle_color);
    1c3c:	8811883a 	mov	r8,r17
    1c40:	e0fffa17 	ldw	r3,-24(fp)
    1c44:	e0bffc17 	ldw	r2,-16(fp)
    1c48:	1889883a 	add	r4,r3,r2
    1c4c:	e0fffb17 	ldw	r3,-20(fp)
    1c50:	e0bffd17 	ldw	r2,-12(fp)
    1c54:	1885c83a 	sub	r2,r3,r2
    1c58:	8007883a 	mov	r3,r16
    1c5c:	18ffffcc 	andi	r3,r3,65535
    1c60:	18e0001c 	xori	r3,r3,32768
    1c64:	18e00004 	addi	r3,r3,-32768
    1c68:	180f883a 	mov	r7,r3
    1c6c:	100d883a 	mov	r6,r2
    1c70:	200b883a 	mov	r5,r4
    1c74:	4009883a 	mov	r4,r8
    1c78:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc-x, yc-y, circle_color);
    1c7c:	8811883a 	mov	r8,r17
    1c80:	e0fffa17 	ldw	r3,-24(fp)
    1c84:	e0bffc17 	ldw	r2,-16(fp)
    1c88:	1889c83a 	sub	r4,r3,r2
    1c8c:	e0fffb17 	ldw	r3,-20(fp)
    1c90:	e0bffd17 	ldw	r2,-12(fp)
    1c94:	1885c83a 	sub	r2,r3,r2
    1c98:	8007883a 	mov	r3,r16
    1c9c:	18ffffcc 	andi	r3,r3,65535
    1ca0:	18e0001c 	xori	r3,r3,32768
    1ca4:	18e00004 	addi	r3,r3,-32768
    1ca8:	180f883a 	mov	r7,r3
    1cac:	100d883a 	mov	r6,r2
    1cb0:	200b883a 	mov	r5,r4
    1cb4:	4009883a 	mov	r4,r8
    1cb8:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc+x, yc+y, circle_color);
    1cbc:	8811883a 	mov	r8,r17
    1cc0:	e0fffa17 	ldw	r3,-24(fp)
    1cc4:	e0bffc17 	ldw	r2,-16(fp)
    1cc8:	1889883a 	add	r4,r3,r2
    1ccc:	e0fffb17 	ldw	r3,-20(fp)
    1cd0:	e0bffd17 	ldw	r2,-12(fp)
    1cd4:	1885883a 	add	r2,r3,r2
    1cd8:	8007883a 	mov	r3,r16
    1cdc:	18ffffcc 	andi	r3,r3,65535
    1ce0:	18e0001c 	xori	r3,r3,32768
    1ce4:	18e00004 	addi	r3,r3,-32768
    1ce8:	180f883a 	mov	r7,r3
    1cec:	100d883a 	mov	r6,r2
    1cf0:	200b883a 	mov	r5,r4
    1cf4:	4009883a 	mov	r4,r8
    1cf8:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc-x, yc+y, circle_color);
    1cfc:	8811883a 	mov	r8,r17
    1d00:	e0fffa17 	ldw	r3,-24(fp)
    1d04:	e0bffc17 	ldw	r2,-16(fp)
    1d08:	1889c83a 	sub	r4,r3,r2
    1d0c:	e0fffb17 	ldw	r3,-20(fp)
    1d10:	e0bffd17 	ldw	r2,-12(fp)
    1d14:	1885883a 	add	r2,r3,r2
    1d18:	8007883a 	mov	r3,r16
    1d1c:	18ffffcc 	andi	r3,r3,65535
    1d20:	18e0001c 	xori	r3,r3,32768
    1d24:	18e00004 	addi	r3,r3,-32768
    1d28:	180f883a 	mov	r7,r3
    1d2c:	100d883a 	mov	r6,r2
    1d30:	200b883a 	mov	r5,r4
    1d34:	4009883a 	mov	r4,r8
    1d38:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc+x, yc-y, circle_color);
    1d3c:	8811883a 	mov	r8,r17
    1d40:	e0fffa17 	ldw	r3,-24(fp)
    1d44:	e0bffc17 	ldw	r2,-16(fp)
    1d48:	1889883a 	add	r4,r3,r2
    1d4c:	e0fffb17 	ldw	r3,-20(fp)
    1d50:	e0bffd17 	ldw	r2,-12(fp)
    1d54:	1885c83a 	sub	r2,r3,r2
    1d58:	8007883a 	mov	r3,r16
    1d5c:	18ffffcc 	andi	r3,r3,65535
    1d60:	18e0001c 	xori	r3,r3,32768
    1d64:	18e00004 	addi	r3,r3,-32768
    1d68:	180f883a 	mov	r7,r3
    1d6c:	100d883a 	mov	r6,r2
    1d70:	200b883a 	mov	r5,r4
    1d74:	4009883a 	mov	r4,r8
    1d78:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc-x, yc-y, circle_color);
    1d7c:	8811883a 	mov	r8,r17
    1d80:	e0fffa17 	ldw	r3,-24(fp)
    1d84:	e0bffc17 	ldw	r2,-16(fp)
    1d88:	1889c83a 	sub	r4,r3,r2
    1d8c:	e0fffb17 	ldw	r3,-20(fp)
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	1885c83a 	sub	r2,r3,r2
    1d98:	8007883a 	mov	r3,r16
    1d9c:	18ffffcc 	andi	r3,r3,65535
    1da0:	18e0001c 	xori	r3,r3,32768
    1da4:	18e00004 	addi	r3,r3,-32768
    1da8:	180f883a 	mov	r7,r3
    1dac:	100d883a 	mov	r6,r2
    1db0:	200b883a 	mov	r5,r4
    1db4:	4009883a 	mov	r4,r8
    1db8:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc, yc, circle_color);
    1dbc:	8807883a 	mov	r3,r17
    1dc0:	8005883a 	mov	r2,r16
    1dc4:	10bfffcc 	andi	r2,r2,65535
    1dc8:	10a0001c 	xori	r2,r2,32768
    1dcc:	10a00004 	addi	r2,r2,-32768
    1dd0:	100f883a 	mov	r7,r2
    1dd4:	e1bffb17 	ldw	r6,-20(fp)
    1dd8:	e17ffa17 	ldw	r5,-24(fp)
    1ddc:	1809883a 	mov	r4,r3
    1de0:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc, yc+y, circle_color);
    1de4:	8809883a 	mov	r4,r17
    1de8:	e0fffb17 	ldw	r3,-20(fp)
    1dec:	e0bffd17 	ldw	r2,-12(fp)
    1df0:	1885883a 	add	r2,r3,r2
    1df4:	8007883a 	mov	r3,r16
    1df8:	18ffffcc 	andi	r3,r3,65535
    1dfc:	18e0001c 	xori	r3,r3,32768
    1e00:	18e00004 	addi	r3,r3,-32768
    1e04:	180f883a 	mov	r7,r3
    1e08:	100d883a 	mov	r6,r2
    1e0c:	e17ffa17 	ldw	r5,-24(fp)
    1e10:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc, yc-y, circle_color);
    1e14:	8809883a 	mov	r4,r17
    1e18:	e0fffb17 	ldw	r3,-20(fp)
    1e1c:	e0bffd17 	ldw	r2,-12(fp)
    1e20:	1885c83a 	sub	r2,r3,r2
    1e24:	8007883a 	mov	r3,r16
    1e28:	18ffffcc 	andi	r3,r3,65535
    1e2c:	18e0001c 	xori	r3,r3,32768
    1e30:	18e00004 	addi	r3,r3,-32768
    1e34:	180f883a 	mov	r7,r3
    1e38:	100d883a 	mov	r6,r2
    1e3c:	e17ffa17 	ldw	r5,-24(fp)
    1e40:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc+x, yc, circle_color);
    1e44:	8809883a 	mov	r4,r17
    1e48:	e0fffa17 	ldw	r3,-24(fp)
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	1885883a 	add	r2,r3,r2
    1e54:	8007883a 	mov	r3,r16
    1e58:	18ffffcc 	andi	r3,r3,65535
    1e5c:	18e0001c 	xori	r3,r3,32768
    1e60:	18e00004 	addi	r3,r3,-32768
    1e64:	180f883a 	mov	r7,r3
    1e68:	e1bffb17 	ldw	r6,-20(fp)
    1e6c:	100b883a 	mov	r5,r2
    1e70:	0001b2c0 	call	1b2c <helper_plot_pixel>
	helper_plot_pixel(buffer_start, xc-x, yc, circle_color);
    1e74:	8809883a 	mov	r4,r17
    1e78:	e0fffa17 	ldw	r3,-24(fp)
    1e7c:	e0bffc17 	ldw	r2,-16(fp)
    1e80:	1885c83a 	sub	r2,r3,r2
    1e84:	8007883a 	mov	r3,r16
    1e88:	18ffffcc 	andi	r3,r3,65535
    1e8c:	18e0001c 	xori	r3,r3,32768
    1e90:	18e00004 	addi	r3,r3,-32768
    1e94:	180f883a 	mov	r7,r3
    1e98:	e1bffb17 	ldw	r6,-20(fp)
    1e9c:	100b883a 	mov	r5,r2
    1ea0:	0001b2c0 	call	1b2c <helper_plot_pixel>
}
    1ea4:	0001883a 	nop
    1ea8:	e6fffe04 	addi	sp,fp,-8
    1eac:	dfc00317 	ldw	ra,12(sp)
    1eb0:	df000217 	ldw	fp,8(sp)
    1eb4:	dc400117 	ldw	r17,4(sp)
    1eb8:	dc000017 	ldw	r16,0(sp)
    1ebc:	dec00404 	addi	sp,sp,16
    1ec0:	f800283a 	ret

00001ec4 <circleBres>:

// Function for circle-generation
// using Bresenham's algorithm
void circleBres(int xc, int yc, int r, int color)
{
    1ec4:	defff504 	addi	sp,sp,-44
    1ec8:	dfc00a15 	stw	ra,40(sp)
    1ecc:	df000915 	stw	fp,36(sp)
    1ed0:	dc000815 	stw	r16,32(sp)
    1ed4:	df000904 	addi	fp,sp,36
    1ed8:	e13ffb15 	stw	r4,-20(fp)
    1edc:	e17ffc15 	stw	r5,-16(fp)
    1ee0:	e1bffd15 	stw	r6,-12(fp)
    1ee4:	e1fffe15 	stw	r7,-8(fp)
	register int circle_color = color;
    1ee8:	e43ffe17 	ldw	r16,-8(fp)
    int x = 0, y = r;
    1eec:	e03ff815 	stw	zero,-32(fp)
    1ef0:	e0bffd17 	ldw	r2,-12(fp)
    1ef4:	e0bff915 	stw	r2,-28(fp)
    int d = 3 - 2 * r;
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
    1efc:	1085883a 	add	r2,r2,r2
    1f00:	1007883a 	mov	r3,r2
    1f04:	008000c4 	movi	r2,3
    1f08:	10c5c83a 	sub	r2,r2,r3
    1f0c:	e0bffa15 	stw	r2,-24(fp)

    while (y >= x)
    1f10:	00002706 	br	1fb0 <circleBres+0xec>
    {
        // for each pixel we will
        // draw all eight pixels
        drawCircle(xc, yc, x, y, circle_color);
    1f14:	dc000015 	stw	r16,0(sp)
    1f18:	e1fff917 	ldw	r7,-28(fp)
    1f1c:	e1bff817 	ldw	r6,-32(fp)
    1f20:	e17ffc17 	ldw	r5,-16(fp)
    1f24:	e13ffb17 	ldw	r4,-20(fp)
    1f28:	0001b880 	call	1b88 <drawCircle>
        x++;
    1f2c:	e0bff817 	ldw	r2,-32(fp)
    1f30:	10800044 	addi	r2,r2,1
    1f34:	e0bff815 	stw	r2,-32(fp)

        // check for decision parameter
        // and correspondingly
        // update d, x, y
        if (d > 0)
    1f38:	e0bffa17 	ldw	r2,-24(fp)
    1f3c:	00800e0e 	bge	zero,r2,1f78 <circleBres+0xb4>
        {
            y--;
    1f40:	e0bff917 	ldw	r2,-28(fp)
    1f44:	10bfffc4 	addi	r2,r2,-1
    1f48:	e0bff915 	stw	r2,-28(fp)
            d = d + 4 * (x - y) + 10;
    1f4c:	e0fff817 	ldw	r3,-32(fp)
    1f50:	e0bff917 	ldw	r2,-28(fp)
    1f54:	1885c83a 	sub	r2,r3,r2
    1f58:	1085883a 	add	r2,r2,r2
    1f5c:	1085883a 	add	r2,r2,r2
    1f60:	1007883a 	mov	r3,r2
    1f64:	e0bffa17 	ldw	r2,-24(fp)
    1f68:	1885883a 	add	r2,r3,r2
    1f6c:	10800284 	addi	r2,r2,10
    1f70:	e0bffa15 	stw	r2,-24(fp)
    1f74:	00000806 	br	1f98 <circleBres+0xd4>
        }
        else
            d = d + 4 * x + 6;
    1f78:	e0bff817 	ldw	r2,-32(fp)
    1f7c:	1085883a 	add	r2,r2,r2
    1f80:	1085883a 	add	r2,r2,r2
    1f84:	1007883a 	mov	r3,r2
    1f88:	e0bffa17 	ldw	r2,-24(fp)
    1f8c:	1885883a 	add	r2,r3,r2
    1f90:	10800184 	addi	r2,r2,6
    1f94:	e0bffa15 	stw	r2,-24(fp)
        drawCircle(xc, yc, x, y, circle_color);
    1f98:	dc000015 	stw	r16,0(sp)
    1f9c:	e1fff917 	ldw	r7,-28(fp)
    1fa0:	e1bff817 	ldw	r6,-32(fp)
    1fa4:	e17ffc17 	ldw	r5,-16(fp)
    1fa8:	e13ffb17 	ldw	r4,-20(fp)
    1fac:	0001b880 	call	1b88 <drawCircle>
{
	register int circle_color = color;
    int x = 0, y = r;
    int d = 3 - 2 * r;

    while (y >= x)
    1fb0:	e0fff917 	ldw	r3,-28(fp)
    1fb4:	e0bff817 	ldw	r2,-32(fp)
    1fb8:	18bfd60e 	bge	r3,r2,1f14 <circleBres+0x50>
        else
            d = d + 4 * x + 6;
        drawCircle(xc, yc, x, y, circle_color);
        //delay(50);
    }
}
    1fbc:	0001883a 	nop
    1fc0:	e6ffff04 	addi	sp,fp,-4
    1fc4:	dfc00217 	ldw	ra,8(sp)
    1fc8:	df000117 	ldw	fp,4(sp)
    1fcc:	dc000017 	ldw	r16,0(sp)
    1fd0:	dec00304 	addi	sp,sp,12
    1fd4:	f800283a 	ret

00001fd8 <draw_line>:

/* Bresenham's line drawing algorithm. */
void draw_line(int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    1fd8:	deffef04 	addi	sp,sp,-68
    1fdc:	dfc01015 	stw	ra,64(sp)
    1fe0:	df000f15 	stw	fp,60(sp)
    1fe4:	ddc00e15 	stw	r23,56(sp)
    1fe8:	dd800d15 	stw	r22,52(sp)
    1fec:	dd400c15 	stw	r21,48(sp)
    1ff0:	dd000b15 	stw	r20,44(sp)
    1ff4:	dcc00a15 	stw	r19,40(sp)
    1ff8:	dc800915 	stw	r18,36(sp)
    1ffc:	dc400815 	stw	r17,32(sp)
    2000:	dc000715 	stw	r16,28(sp)
    2004:	df000f04 	addi	fp,sp,60
    2008:	e13ff115 	stw	r4,-60(fp)
    200c:	e17ff215 	stw	r5,-56(fp)
    2010:	e1bff315 	stw	r6,-52(fp)
    2014:	e1fff415 	stw	r7,-48(fp)
	register int x_0 = x0;
    2018:	e47ff117 	ldw	r17,-60(fp)
	register int y_0 = y0;
    201c:	e4fff217 	ldw	r19,-56(fp)
	register int x_1 = x1;
    2020:	e4bff317 	ldw	r18,-52(fp)
	register int y_1 = y1;
    2024:	e53ff417 	ldw	r20,-48(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    2028:	a4c5c83a 	sub	r2,r20,r19
    202c:	1000010e 	bge	r2,zero,2034 <draw_line+0x5c>
    2030:	0085c83a 	sub	r2,zero,r2
    2034:	1007883a 	mov	r3,r2
    2038:	9445c83a 	sub	r2,r18,r17
    203c:	1000010e 	bge	r2,zero,2044 <draw_line+0x6c>
    2040:	0085c83a 	sub	r2,zero,r2
    2044:	10c4803a 	cmplt	r2,r2,r3
    2048:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int line_color = color;
    204c:	e0800217 	ldw	r2,8(fp)
    2050:	e0bff715 	stw	r2,-36(fp)
	register unsigned int buffer_start;

	if (backbuffer == 1)
    2054:	e0800317 	ldw	r2,12(fp)
    2058:	10800058 	cmpnei	r2,r2,1
    205c:	1000031e 	bne	r2,zero,206c <draw_line+0x94>
		buffer_start = (int) vga_screen_back_buffer;
    2060:	d0a01097 	ldw	r2,-32702(gp)
    2064:	e0bff515 	stw	r2,-44(fp)
    2068:	00000206 	br	2074 <draw_line+0x9c>
	else
		buffer_start = (int) vga_screen_front_buffer;
    206c:	d0a00f97 	ldw	r2,-32706(gp)
    2070:	e0bff515 	stw	r2,-44(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
    2074:	e0bff607 	ldb	r2,-40(fp)
    2078:	0080060e 	bge	zero,r2,2094 <draw_line+0xbc>
		// Swap x_0 and y_0
		error = x_0;
    207c:	8821883a 	mov	r16,r17
		x_0 = y_0;
    2080:	9823883a 	mov	r17,r19
		y_0 = error;
    2084:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
    2088:	9021883a 	mov	r16,r18
		x_1 = y_1;
    208c:	a025883a 	mov	r18,r20
		y_1 = error;
    2090:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
    2094:	9440060e 	bge	r18,r17,20b0 <draw_line+0xd8>
		// Swap x_0 and x_1
		error = x_0;
    2098:	8821883a 	mov	r16,r17
		x_0 = x_1;
    209c:	9023883a 	mov	r17,r18
		x_1 = error;
    20a0:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
    20a4:	9821883a 	mov	r16,r19
		y_0 = y_1;
    20a8:	a027883a 	mov	r19,r20
		y_1 = error;
    20ac:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    20b0:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
    20b4:	a4c5c83a 	sub	r2,r20,r19
    20b8:	1000010e 	bge	r2,zero,20c0 <draw_line+0xe8>
    20bc:	0085c83a 	sub	r2,zero,r2
    20c0:	102f883a 	mov	r23,r2
	error = -(deltax / 2);
    20c4:	a804d7fa 	srli	r2,r21,31
    20c8:	1545883a 	add	r2,r2,r21
    20cc:	1005d07a 	srai	r2,r2,1
    20d0:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
    20d4:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
    20d8:	9d00020e 	bge	r19,r20,20e4 <draw_line+0x10c>
		ystep = 1;
    20dc:	04c00044 	movi	r19,1
    20e0:	00000106 	br	20e8 <draw_line+0x110>
	else
		ystep = -1;
    20e4:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x-axis (steep = 0) or along the y-axis (steep = 1). The code is replicated to
	 * be fast on low optimization levels. */
	if (steep == 1)
    20e8:	e0bff607 	ldb	r2,-40(fp)
    20ec:	10800058 	cmpnei	r2,r2,1
    20f0:	1000231e 	bne	r2,zero,2180 <draw_line+0x1a8>
	{
		for (x=x_0; x <= x_1; x++) {
    20f4:	00001006 	br	2138 <draw_line+0x160>
			helper_plot_pixel(buffer_start, y, x, line_color);
    20f8:	e0fff517 	ldw	r3,-44(fp)
    20fc:	e13ff717 	ldw	r4,-36(fp)
    2100:	2005883a 	mov	r2,r4
    2104:	10bfffcc 	andi	r2,r2,65535
    2108:	10a0001c 	xori	r2,r2,32768
    210c:	10a00004 	addi	r2,r2,-32768
    2110:	100f883a 	mov	r7,r2
    2114:	880d883a 	mov	r6,r17
    2118:	b00b883a 	mov	r5,r22
    211c:	1809883a 	mov	r4,r3
    2120:	0001b2c0 	call	1b2c <helper_plot_pixel>
			error = error + deltay;
    2124:	85e1883a 	add	r16,r16,r23
			if (error > 0) {
    2128:	0400020e 	bge	zero,r16,2134 <draw_line+0x15c>
				y = y + ystep;
    212c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    2130:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x-axis (steep = 0) or along the y-axis (steep = 1). The code is replicated to
	 * be fast on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    2134:	8c400044 	addi	r17,r17,1
    2138:	947fef0e 	bge	r18,r17,20f8 <draw_line+0x120>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    213c:	00001106 	br	2184 <draw_line+0x1ac>
	}
	else
	{
		for (x=x_0; x <= x_1; x++)
		{
			helper_plot_pixel(buffer_start, x, y, line_color);
    2140:	e0fff517 	ldw	r3,-44(fp)
    2144:	e13ff717 	ldw	r4,-36(fp)
    2148:	2005883a 	mov	r2,r4
    214c:	10bfffcc 	andi	r2,r2,65535
    2150:	10a0001c 	xori	r2,r2,32768
    2154:	10a00004 	addi	r2,r2,-32768
    2158:	100f883a 	mov	r7,r2
    215c:	b00d883a 	mov	r6,r22
    2160:	880b883a 	mov	r5,r17
    2164:	1809883a 	mov	r4,r3
    2168:	0001b2c0 	call	1b2c <helper_plot_pixel>
			error = error + deltay;
    216c:	85e1883a 	add	r16,r16,r23
			if (error > 0) {
    2170:	0400020e 	bge	zero,r16,217c <draw_line+0x1a4>
				y = y + ystep;
    2174:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    2178:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++)
    217c:	8c400044 	addi	r17,r17,1
    2180:	947fef0e 	bge	r18,r17,2140 <draw_line+0x168>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    2184:	0001883a 	nop
    2188:	e6fff804 	addi	sp,fp,-32
    218c:	dfc00917 	ldw	ra,36(sp)
    2190:	df000817 	ldw	fp,32(sp)
    2194:	ddc00717 	ldw	r23,28(sp)
    2198:	dd800617 	ldw	r22,24(sp)
    219c:	dd400517 	ldw	r21,20(sp)
    21a0:	dd000417 	ldw	r20,16(sp)
    21a4:	dcc00317 	ldw	r19,12(sp)
    21a8:	dc800217 	ldw	r18,8(sp)
    21ac:	dc400117 	ldw	r17,4(sp)
    21b0:	dc000017 	ldw	r16,0(sp)
    21b4:	dec00a04 	addi	sp,sp,40
    21b8:	f800283a 	ret

000021bc <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    21bc:	defffb04 	addi	sp,sp,-20
    21c0:	df000415 	stw	fp,16(sp)
    21c4:	df000404 	addi	fp,sp,16
    21c8:	e13ffd15 	stw	r4,-12(fp)
    21cc:	e17ffe15 	stw	r5,-8(fp)
    21d0:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    21d4:	e0bffe17 	ldw	r2,-8(fp)
    21d8:	100691fa 	slli	r3,r2,7
    21dc:	e0bffd17 	ldw	r2,-12(fp)
    21e0:	1885883a 	add	r2,r3,r2
    21e4:	e0bffc15 	stw	r2,-16(fp)
	while ( *(text_ptr) ) {
    21e8:	00000c06 	br	221c <VGA_text+0x60>
		*(character_buffer+ offset) = *(text_ptr);
    21ec:	d0e01297 	ldw	r3,-32694(gp)
    21f0:	e0bffc17 	ldw	r2,-16(fp)
    21f4:	1885883a 	add	r2,r3,r2
    21f8:	e0ffff17 	ldw	r3,-4(fp)
    21fc:	18c00003 	ldbu	r3,0(r3)
    2200:	10c00005 	stb	r3,0(r2)
		// write to the character buffer
		++text_ptr;
    2204:	e0bfff17 	ldw	r2,-4(fp)
    2208:	10800044 	addi	r2,r2,1
    220c:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    2210:	e0bffc17 	ldw	r2,-16(fp)
    2214:	10800044 	addi	r2,r2,1
    2218:	e0bffc15 	stw	r2,-16(fp)
{
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) ) {
    221c:	e0bfff17 	ldw	r2,-4(fp)
    2220:	10800003 	ldbu	r2,0(r2)
    2224:	10803fcc 	andi	r2,r2,255
    2228:	1080201c 	xori	r2,r2,128
    222c:	10bfe004 	addi	r2,r2,-128
    2230:	103fee1e 	bne	r2,zero,21ec <VGA_text+0x30>
		*(character_buffer+ offset) = *(text_ptr);
		// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    2234:	0001883a 	nop
    2238:	e037883a 	mov	sp,fp
    223c:	df000017 	ldw	fp,0(sp)
    2240:	dec00104 	addi	sp,sp,4
    2244:	f800283a 	ret

00002248 <VGA_pixel>:
/****************************************************************************************
* Set a single pixel on the VGA monitor
****************************************************************************************/
void VGA_pixel(int x, int y, short pixel_color){
    2248:	defffa04 	addi	sp,sp,-24
    224c:	df000515 	stw	fp,20(sp)
    2250:	df000504 	addi	fp,sp,20
    2254:	e13ffd15 	stw	r4,-12(fp)
    2258:	e17ffe15 	stw	r5,-8(fp)
    225c:	3005883a 	mov	r2,r6
    2260:	e0bfff0d 	sth	r2,-4(fp)
	int offset;
	volatile short * pixel_buffer = (short *) 0x08000000;
    2264:	00820034 	movhi	r2,2048
    2268:	e0bffb15 	stw	r2,-20(fp)
	// VGA pixel buffer
	offset = (y << 9) + x;
    226c:	e0bffe17 	ldw	r2,-8(fp)
    2270:	1006927a 	slli	r3,r2,9
    2274:	e0bffd17 	ldw	r2,-12(fp)
    2278:	1885883a 	add	r2,r3,r2
    227c:	e0bffc15 	stw	r2,-16(fp)
	*(pixel_buffer + offset) = pixel_color;
    2280:	e0bffc17 	ldw	r2,-16(fp)
    2284:	1085883a 	add	r2,r2,r2
    2288:	1007883a 	mov	r3,r2
    228c:	e0bffb17 	ldw	r2,-20(fp)
    2290:	10c5883a 	add	r2,r2,r3
    2294:	e0ffff0b 	ldhu	r3,-4(fp)
    2298:	10c0000d 	sth	r3,0(r2)
}
    229c:	0001883a 	nop
    22a0:	e037883a 	mov	sp,fp
    22a4:	df000017 	ldw	fp,0(sp)
    22a8:	dec00104 	addi	sp,sp,4
    22ac:	f800283a 	ret

000022b0 <VGA_clear>:
/****************************************************************************************
* Clear screen - Set entire screen to black on the VGA monitor
****************************************************************************************/
void VGA_clear() {
    22b0:	defffc04 	addi	sp,sp,-16
    22b4:	dfc00315 	stw	ra,12(sp)
    22b8:	df000215 	stw	fp,8(sp)
    22bc:	df000204 	addi	fp,sp,8
	int x, y;
	for (x = 0; x < 160; x++) {
    22c0:	e03ffe15 	stw	zero,-8(fp)
    22c4:	00000f06 	br	2304 <VGA_clear+0x54>
		for (y = 0; y < 240; y++) {
    22c8:	e03fff15 	stw	zero,-4(fp)
    22cc:	00000706 	br	22ec <VGA_clear+0x3c>
			VGA_pixel(x, y, 0);
    22d0:	000d883a 	mov	r6,zero
    22d4:	e17fff17 	ldw	r5,-4(fp)
    22d8:	e13ffe17 	ldw	r4,-8(fp)
    22dc:	00022480 	call	2248 <VGA_pixel>
* Clear screen - Set entire screen to black on the VGA monitor
****************************************************************************************/
void VGA_clear() {
	int x, y;
	for (x = 0; x < 160; x++) {
		for (y = 0; y < 240; y++) {
    22e0:	e0bfff17 	ldw	r2,-4(fp)
    22e4:	10800044 	addi	r2,r2,1
    22e8:	e0bfff15 	stw	r2,-4(fp)
    22ec:	e0bfff17 	ldw	r2,-4(fp)
    22f0:	10803c10 	cmplti	r2,r2,240
    22f4:	103ff61e 	bne	r2,zero,22d0 <VGA_clear+0x20>
/****************************************************************************************
* Clear screen - Set entire screen to black on the VGA monitor
****************************************************************************************/
void VGA_clear() {
	int x, y;
	for (x = 0; x < 160; x++) {
    22f8:	e0bffe17 	ldw	r2,-8(fp)
    22fc:	10800044 	addi	r2,r2,1
    2300:	e0bffe15 	stw	r2,-8(fp)
    2304:	e0bffe17 	ldw	r2,-8(fp)
    2308:	10802810 	cmplti	r2,r2,160
    230c:	103fee1e 	bne	r2,zero,22c8 <VGA_clear+0x18>
		for (y = 0; y < 240; y++) {
			VGA_pixel(x, y, 0);
		}
	}
}
    2310:	0001883a 	nop
    2314:	e037883a 	mov	sp,fp
    2318:	dfc00117 	ldw	ra,4(sp)
    231c:	df000017 	ldw	fp,0(sp)
    2320:	dec00204 	addi	sp,sp,8
    2324:	f800283a 	ret

00002328 <malloc>:
    2328:	008000b4 	movhi	r2,2
    232c:	109bb804 	addi	r2,r2,28384
    2330:	200b883a 	mov	r5,r4
    2334:	11000017 	ldw	r4,0(r2)
    2338:	00023501 	jmpi	2350 <_malloc_r>

0000233c <free>:
    233c:	008000b4 	movhi	r2,2
    2340:	109bb804 	addi	r2,r2,28384
    2344:	200b883a 	mov	r5,r4
    2348:	11000017 	ldw	r4,0(r2)
    234c:	00096481 	jmpi	9648 <_free_r>

00002350 <_malloc_r>:
    2350:	defff504 	addi	sp,sp,-44
    2354:	dc800315 	stw	r18,12(sp)
    2358:	dfc00a15 	stw	ra,40(sp)
    235c:	df000915 	stw	fp,36(sp)
    2360:	ddc00815 	stw	r23,32(sp)
    2364:	dd800715 	stw	r22,28(sp)
    2368:	dd400615 	stw	r21,24(sp)
    236c:	dd000515 	stw	r20,20(sp)
    2370:	dcc00415 	stw	r19,16(sp)
    2374:	dc400215 	stw	r17,8(sp)
    2378:	dc000115 	stw	r16,4(sp)
    237c:	288002c4 	addi	r2,r5,11
    2380:	00c00584 	movi	r3,22
    2384:	2025883a 	mov	r18,r4
    2388:	18807f2e 	bgeu	r3,r2,2588 <_malloc_r+0x238>
    238c:	047ffe04 	movi	r17,-8
    2390:	1462703a 	and	r17,r2,r17
    2394:	8800a316 	blt	r17,zero,2624 <_malloc_r+0x2d4>
    2398:	8940a236 	bltu	r17,r5,2624 <_malloc_r+0x2d4>
    239c:	0012f840 	call	12f84 <__malloc_lock>
    23a0:	00807dc4 	movi	r2,503
    23a4:	1441e92e 	bgeu	r2,r17,2b4c <_malloc_r+0x7fc>
    23a8:	8804d27a 	srli	r2,r17,9
    23ac:	1000a126 	beq	r2,zero,2634 <_malloc_r+0x2e4>
    23b0:	00c00104 	movi	r3,4
    23b4:	18811e36 	bltu	r3,r2,2830 <_malloc_r+0x4e0>
    23b8:	8804d1ba 	srli	r2,r17,6
    23bc:	12000e44 	addi	r8,r2,57
    23c0:	11c00e04 	addi	r7,r2,56
    23c4:	4209883a 	add	r4,r8,r8
    23c8:	04c000b4 	movhi	r19,2
    23cc:	2109883a 	add	r4,r4,r4
    23d0:	9cd37e04 	addi	r19,r19,19960
    23d4:	2109883a 	add	r4,r4,r4
    23d8:	9909883a 	add	r4,r19,r4
    23dc:	24000117 	ldw	r16,4(r4)
    23e0:	213ffe04 	addi	r4,r4,-8
    23e4:	24009726 	beq	r4,r16,2644 <_malloc_r+0x2f4>
    23e8:	80800117 	ldw	r2,4(r16)
    23ec:	01bfff04 	movi	r6,-4
    23f0:	014003c4 	movi	r5,15
    23f4:	1184703a 	and	r2,r2,r6
    23f8:	1447c83a 	sub	r3,r2,r17
    23fc:	28c00716 	blt	r5,r3,241c <_malloc_r+0xcc>
    2400:	1800920e 	bge	r3,zero,264c <_malloc_r+0x2fc>
    2404:	84000317 	ldw	r16,12(r16)
    2408:	24008e26 	beq	r4,r16,2644 <_malloc_r+0x2f4>
    240c:	80800117 	ldw	r2,4(r16)
    2410:	1184703a 	and	r2,r2,r6
    2414:	1447c83a 	sub	r3,r2,r17
    2418:	28fff90e 	bge	r5,r3,2400 <_malloc_r+0xb0>
    241c:	3809883a 	mov	r4,r7
    2420:	018000b4 	movhi	r6,2
    2424:	9c000417 	ldw	r16,16(r19)
    2428:	31937e04 	addi	r6,r6,19960
    242c:	32000204 	addi	r8,r6,8
    2430:	82013426 	beq	r16,r8,2904 <_malloc_r+0x5b4>
    2434:	80c00117 	ldw	r3,4(r16)
    2438:	00bfff04 	movi	r2,-4
    243c:	188e703a 	and	r7,r3,r2
    2440:	3c45c83a 	sub	r2,r7,r17
    2444:	00c003c4 	movi	r3,15
    2448:	18811f16 	blt	r3,r2,28c8 <_malloc_r+0x578>
    244c:	32000515 	stw	r8,20(r6)
    2450:	32000415 	stw	r8,16(r6)
    2454:	10007f0e 	bge	r2,zero,2654 <_malloc_r+0x304>
    2458:	00807fc4 	movi	r2,511
    245c:	11c0fd36 	bltu	r2,r7,2854 <_malloc_r+0x504>
    2460:	3806d0fa 	srli	r3,r7,3
    2464:	01c00044 	movi	r7,1
    2468:	30800117 	ldw	r2,4(r6)
    246c:	19400044 	addi	r5,r3,1
    2470:	294b883a 	add	r5,r5,r5
    2474:	1807d0ba 	srai	r3,r3,2
    2478:	294b883a 	add	r5,r5,r5
    247c:	294b883a 	add	r5,r5,r5
    2480:	298b883a 	add	r5,r5,r6
    2484:	38c6983a 	sll	r3,r7,r3
    2488:	29c00017 	ldw	r7,0(r5)
    248c:	2a7ffe04 	addi	r9,r5,-8
    2490:	1886b03a 	or	r3,r3,r2
    2494:	82400315 	stw	r9,12(r16)
    2498:	81c00215 	stw	r7,8(r16)
    249c:	30c00115 	stw	r3,4(r6)
    24a0:	2c000015 	stw	r16,0(r5)
    24a4:	3c000315 	stw	r16,12(r7)
    24a8:	2005d0ba 	srai	r2,r4,2
    24ac:	01400044 	movi	r5,1
    24b0:	288a983a 	sll	r5,r5,r2
    24b4:	19406f36 	bltu	r3,r5,2674 <_malloc_r+0x324>
    24b8:	28c4703a 	and	r2,r5,r3
    24bc:	10000a1e 	bne	r2,zero,24e8 <_malloc_r+0x198>
    24c0:	00bfff04 	movi	r2,-4
    24c4:	294b883a 	add	r5,r5,r5
    24c8:	2088703a 	and	r4,r4,r2
    24cc:	28c4703a 	and	r2,r5,r3
    24d0:	21000104 	addi	r4,r4,4
    24d4:	1000041e 	bne	r2,zero,24e8 <_malloc_r+0x198>
    24d8:	294b883a 	add	r5,r5,r5
    24dc:	28c4703a 	and	r2,r5,r3
    24e0:	21000104 	addi	r4,r4,4
    24e4:	103ffc26 	beq	r2,zero,24d8 <_malloc_r+0x188>
    24e8:	02bfff04 	movi	r10,-4
    24ec:	024003c4 	movi	r9,15
    24f0:	21800044 	addi	r6,r4,1
    24f4:	318d883a 	add	r6,r6,r6
    24f8:	318d883a 	add	r6,r6,r6
    24fc:	318d883a 	add	r6,r6,r6
    2500:	998d883a 	add	r6,r19,r6
    2504:	333ffe04 	addi	r12,r6,-8
    2508:	2017883a 	mov	r11,r4
    250c:	31800104 	addi	r6,r6,4
    2510:	34000017 	ldw	r16,0(r6)
    2514:	31fffd04 	addi	r7,r6,-12
    2518:	81c0041e 	bne	r16,r7,252c <_malloc_r+0x1dc>
    251c:	0000fb06 	br	290c <_malloc_r+0x5bc>
    2520:	1801030e 	bge	r3,zero,2930 <_malloc_r+0x5e0>
    2524:	84000317 	ldw	r16,12(r16)
    2528:	81c0f826 	beq	r16,r7,290c <_malloc_r+0x5bc>
    252c:	80800117 	ldw	r2,4(r16)
    2530:	1284703a 	and	r2,r2,r10
    2534:	1447c83a 	sub	r3,r2,r17
    2538:	48fff90e 	bge	r9,r3,2520 <_malloc_r+0x1d0>
    253c:	80800317 	ldw	r2,12(r16)
    2540:	81000217 	ldw	r4,8(r16)
    2544:	89400054 	ori	r5,r17,1
    2548:	81400115 	stw	r5,4(r16)
    254c:	20800315 	stw	r2,12(r4)
    2550:	11000215 	stw	r4,8(r2)
    2554:	8463883a 	add	r17,r16,r17
    2558:	9c400515 	stw	r17,20(r19)
    255c:	9c400415 	stw	r17,16(r19)
    2560:	18800054 	ori	r2,r3,1
    2564:	88800115 	stw	r2,4(r17)
    2568:	8a000315 	stw	r8,12(r17)
    256c:	8a000215 	stw	r8,8(r17)
    2570:	88e3883a 	add	r17,r17,r3
    2574:	88c00015 	stw	r3,0(r17)
    2578:	9009883a 	mov	r4,r18
    257c:	00130a40 	call	130a4 <__malloc_unlock>
    2580:	80800204 	addi	r2,r16,8
    2584:	00001b06 	br	25f4 <_malloc_r+0x2a4>
    2588:	04400404 	movi	r17,16
    258c:	89402536 	bltu	r17,r5,2624 <_malloc_r+0x2d4>
    2590:	0012f840 	call	12f84 <__malloc_lock>
    2594:	00800184 	movi	r2,6
    2598:	01000084 	movi	r4,2
    259c:	04c000b4 	movhi	r19,2
    25a0:	1085883a 	add	r2,r2,r2
    25a4:	9cd37e04 	addi	r19,r19,19960
    25a8:	1085883a 	add	r2,r2,r2
    25ac:	9885883a 	add	r2,r19,r2
    25b0:	14000117 	ldw	r16,4(r2)
    25b4:	10fffe04 	addi	r3,r2,-8
    25b8:	80c0d926 	beq	r16,r3,2920 <_malloc_r+0x5d0>
    25bc:	80c00117 	ldw	r3,4(r16)
    25c0:	81000317 	ldw	r4,12(r16)
    25c4:	00bfff04 	movi	r2,-4
    25c8:	1884703a 	and	r2,r3,r2
    25cc:	81400217 	ldw	r5,8(r16)
    25d0:	8085883a 	add	r2,r16,r2
    25d4:	10c00117 	ldw	r3,4(r2)
    25d8:	29000315 	stw	r4,12(r5)
    25dc:	21400215 	stw	r5,8(r4)
    25e0:	18c00054 	ori	r3,r3,1
    25e4:	10c00115 	stw	r3,4(r2)
    25e8:	9009883a 	mov	r4,r18
    25ec:	00130a40 	call	130a4 <__malloc_unlock>
    25f0:	80800204 	addi	r2,r16,8
    25f4:	dfc00a17 	ldw	ra,40(sp)
    25f8:	df000917 	ldw	fp,36(sp)
    25fc:	ddc00817 	ldw	r23,32(sp)
    2600:	dd800717 	ldw	r22,28(sp)
    2604:	dd400617 	ldw	r21,24(sp)
    2608:	dd000517 	ldw	r20,20(sp)
    260c:	dcc00417 	ldw	r19,16(sp)
    2610:	dc800317 	ldw	r18,12(sp)
    2614:	dc400217 	ldw	r17,8(sp)
    2618:	dc000117 	ldw	r16,4(sp)
    261c:	dec00b04 	addi	sp,sp,44
    2620:	f800283a 	ret
    2624:	00800304 	movi	r2,12
    2628:	90800015 	stw	r2,0(r18)
    262c:	0005883a 	mov	r2,zero
    2630:	003ff006 	br	25f4 <_malloc_r+0x2a4>
    2634:	01002004 	movi	r4,128
    2638:	02001004 	movi	r8,64
    263c:	01c00fc4 	movi	r7,63
    2640:	003f6106 	br	23c8 <_malloc_r+0x78>
    2644:	4009883a 	mov	r4,r8
    2648:	003f7506 	br	2420 <_malloc_r+0xd0>
    264c:	81000317 	ldw	r4,12(r16)
    2650:	003fde06 	br	25cc <_malloc_r+0x27c>
    2654:	81c5883a 	add	r2,r16,r7
    2658:	11400117 	ldw	r5,4(r2)
    265c:	9009883a 	mov	r4,r18
    2660:	29400054 	ori	r5,r5,1
    2664:	11400115 	stw	r5,4(r2)
    2668:	00130a40 	call	130a4 <__malloc_unlock>
    266c:	80800204 	addi	r2,r16,8
    2670:	003fe006 	br	25f4 <_malloc_r+0x2a4>
    2674:	9c000217 	ldw	r16,8(r19)
    2678:	00bfff04 	movi	r2,-4
    267c:	85800117 	ldw	r22,4(r16)
    2680:	b0ac703a 	and	r22,r22,r2
    2684:	b4400336 	bltu	r22,r17,2694 <_malloc_r+0x344>
    2688:	b445c83a 	sub	r2,r22,r17
    268c:	00c003c4 	movi	r3,15
    2690:	18805d16 	blt	r3,r2,2808 <_malloc_r+0x4b8>
    2694:	05c000b4 	movhi	r23,2
    2698:	008000f4 	movhi	r2,3
    269c:	10a46104 	addi	r2,r2,-28284
    26a0:	bddbb504 	addi	r23,r23,28372
    26a4:	15400017 	ldw	r21,0(r2)
    26a8:	b8c00017 	ldw	r3,0(r23)
    26ac:	00bfffc4 	movi	r2,-1
    26b0:	858d883a 	add	r6,r16,r22
    26b4:	8d6b883a 	add	r21,r17,r21
    26b8:	1880ea26 	beq	r3,r2,2a64 <_malloc_r+0x714>
    26bc:	ad4403c4 	addi	r21,r21,4111
    26c0:	00bc0004 	movi	r2,-4096
    26c4:	a8aa703a 	and	r21,r21,r2
    26c8:	a80b883a 	mov	r5,r21
    26cc:	9009883a 	mov	r4,r18
    26d0:	d9800015 	stw	r6,0(sp)
    26d4:	0002c9c0 	call	2c9c <_sbrk_r>
    26d8:	1029883a 	mov	r20,r2
    26dc:	00bfffc4 	movi	r2,-1
    26e0:	d9800017 	ldw	r6,0(sp)
    26e4:	a080e826 	beq	r20,r2,2a88 <_malloc_r+0x738>
    26e8:	a180a636 	bltu	r20,r6,2984 <_malloc_r+0x634>
    26ec:	070000f4 	movhi	fp,3
    26f0:	e7249404 	addi	fp,fp,-28080
    26f4:	e0800017 	ldw	r2,0(fp)
    26f8:	a887883a 	add	r3,r21,r2
    26fc:	e0c00015 	stw	r3,0(fp)
    2700:	3500e626 	beq	r6,r20,2a9c <_malloc_r+0x74c>
    2704:	b9000017 	ldw	r4,0(r23)
    2708:	00bfffc4 	movi	r2,-1
    270c:	2080ee26 	beq	r4,r2,2ac8 <_malloc_r+0x778>
    2710:	a185c83a 	sub	r2,r20,r6
    2714:	10c5883a 	add	r2,r2,r3
    2718:	e0800015 	stw	r2,0(fp)
    271c:	a0c001cc 	andi	r3,r20,7
    2720:	1800bc26 	beq	r3,zero,2a14 <_malloc_r+0x6c4>
    2724:	a0e9c83a 	sub	r20,r20,r3
    2728:	00840204 	movi	r2,4104
    272c:	a5000204 	addi	r20,r20,8
    2730:	10c7c83a 	sub	r3,r2,r3
    2734:	a545883a 	add	r2,r20,r21
    2738:	1083ffcc 	andi	r2,r2,4095
    273c:	18abc83a 	sub	r21,r3,r2
    2740:	a80b883a 	mov	r5,r21
    2744:	9009883a 	mov	r4,r18
    2748:	0002c9c0 	call	2c9c <_sbrk_r>
    274c:	00ffffc4 	movi	r3,-1
    2750:	10c0e126 	beq	r2,r3,2ad8 <_malloc_r+0x788>
    2754:	1505c83a 	sub	r2,r2,r20
    2758:	1545883a 	add	r2,r2,r21
    275c:	10800054 	ori	r2,r2,1
    2760:	e0c00017 	ldw	r3,0(fp)
    2764:	9d000215 	stw	r20,8(r19)
    2768:	a0800115 	stw	r2,4(r20)
    276c:	a8c7883a 	add	r3,r21,r3
    2770:	e0c00015 	stw	r3,0(fp)
    2774:	84c00e26 	beq	r16,r19,27b0 <_malloc_r+0x460>
    2778:	018003c4 	movi	r6,15
    277c:	3580a72e 	bgeu	r6,r22,2a1c <_malloc_r+0x6cc>
    2780:	81400117 	ldw	r5,4(r16)
    2784:	013ffe04 	movi	r4,-8
    2788:	b0bffd04 	addi	r2,r22,-12
    278c:	1104703a 	and	r2,r2,r4
    2790:	2900004c 	andi	r4,r5,1
    2794:	2088b03a 	or	r4,r4,r2
    2798:	81000115 	stw	r4,4(r16)
    279c:	01400144 	movi	r5,5
    27a0:	8089883a 	add	r4,r16,r2
    27a4:	21400115 	stw	r5,4(r4)
    27a8:	21400215 	stw	r5,8(r4)
    27ac:	3080cd36 	bltu	r6,r2,2ae4 <_malloc_r+0x794>
    27b0:	008000f4 	movhi	r2,3
    27b4:	10a46004 	addi	r2,r2,-28288
    27b8:	11000017 	ldw	r4,0(r2)
    27bc:	20c0012e 	bgeu	r4,r3,27c4 <_malloc_r+0x474>
    27c0:	10c00015 	stw	r3,0(r2)
    27c4:	008000f4 	movhi	r2,3
    27c8:	10a45f04 	addi	r2,r2,-28292
    27cc:	11000017 	ldw	r4,0(r2)
    27d0:	9c000217 	ldw	r16,8(r19)
    27d4:	20c0012e 	bgeu	r4,r3,27dc <_malloc_r+0x48c>
    27d8:	10c00015 	stw	r3,0(r2)
    27dc:	80c00117 	ldw	r3,4(r16)
    27e0:	00bfff04 	movi	r2,-4
    27e4:	1886703a 	and	r3,r3,r2
    27e8:	1c45c83a 	sub	r2,r3,r17
    27ec:	1c400236 	bltu	r3,r17,27f8 <_malloc_r+0x4a8>
    27f0:	00c003c4 	movi	r3,15
    27f4:	18800416 	blt	r3,r2,2808 <_malloc_r+0x4b8>
    27f8:	9009883a 	mov	r4,r18
    27fc:	00130a40 	call	130a4 <__malloc_unlock>
    2800:	0005883a 	mov	r2,zero
    2804:	003f7b06 	br	25f4 <_malloc_r+0x2a4>
    2808:	88c00054 	ori	r3,r17,1
    280c:	80c00115 	stw	r3,4(r16)
    2810:	8463883a 	add	r17,r16,r17
    2814:	10800054 	ori	r2,r2,1
    2818:	9c400215 	stw	r17,8(r19)
    281c:	88800115 	stw	r2,4(r17)
    2820:	9009883a 	mov	r4,r18
    2824:	00130a40 	call	130a4 <__malloc_unlock>
    2828:	80800204 	addi	r2,r16,8
    282c:	003f7106 	br	25f4 <_malloc_r+0x2a4>
    2830:	00c00504 	movi	r3,20
    2834:	18804a2e 	bgeu	r3,r2,2960 <_malloc_r+0x610>
    2838:	00c01504 	movi	r3,84
    283c:	18806e36 	bltu	r3,r2,29f8 <_malloc_r+0x6a8>
    2840:	8804d33a 	srli	r2,r17,12
    2844:	12001bc4 	addi	r8,r2,111
    2848:	11c01b84 	addi	r7,r2,110
    284c:	4209883a 	add	r4,r8,r8
    2850:	003edd06 	br	23c8 <_malloc_r+0x78>
    2854:	3804d27a 	srli	r2,r7,9
    2858:	00c00104 	movi	r3,4
    285c:	1880442e 	bgeu	r3,r2,2970 <_malloc_r+0x620>
    2860:	00c00504 	movi	r3,20
    2864:	18808136 	bltu	r3,r2,2a6c <_malloc_r+0x71c>
    2868:	11401704 	addi	r5,r2,92
    286c:	10c016c4 	addi	r3,r2,91
    2870:	294b883a 	add	r5,r5,r5
    2874:	294b883a 	add	r5,r5,r5
    2878:	294b883a 	add	r5,r5,r5
    287c:	994b883a 	add	r5,r19,r5
    2880:	28800017 	ldw	r2,0(r5)
    2884:	018000b4 	movhi	r6,2
    2888:	297ffe04 	addi	r5,r5,-8
    288c:	31937e04 	addi	r6,r6,19960
    2890:	28806526 	beq	r5,r2,2a28 <_malloc_r+0x6d8>
    2894:	01bfff04 	movi	r6,-4
    2898:	10c00117 	ldw	r3,4(r2)
    289c:	1986703a 	and	r3,r3,r6
    28a0:	38c0022e 	bgeu	r7,r3,28ac <_malloc_r+0x55c>
    28a4:	10800217 	ldw	r2,8(r2)
    28a8:	28bffb1e 	bne	r5,r2,2898 <_malloc_r+0x548>
    28ac:	11400317 	ldw	r5,12(r2)
    28b0:	98c00117 	ldw	r3,4(r19)
    28b4:	81400315 	stw	r5,12(r16)
    28b8:	80800215 	stw	r2,8(r16)
    28bc:	2c000215 	stw	r16,8(r5)
    28c0:	14000315 	stw	r16,12(r2)
    28c4:	003ef806 	br	24a8 <_malloc_r+0x158>
    28c8:	88c00054 	ori	r3,r17,1
    28cc:	80c00115 	stw	r3,4(r16)
    28d0:	8463883a 	add	r17,r16,r17
    28d4:	34400515 	stw	r17,20(r6)
    28d8:	34400415 	stw	r17,16(r6)
    28dc:	10c00054 	ori	r3,r2,1
    28e0:	8a000315 	stw	r8,12(r17)
    28e4:	8a000215 	stw	r8,8(r17)
    28e8:	88c00115 	stw	r3,4(r17)
    28ec:	88a3883a 	add	r17,r17,r2
    28f0:	88800015 	stw	r2,0(r17)
    28f4:	9009883a 	mov	r4,r18
    28f8:	00130a40 	call	130a4 <__malloc_unlock>
    28fc:	80800204 	addi	r2,r16,8
    2900:	003f3c06 	br	25f4 <_malloc_r+0x2a4>
    2904:	30c00117 	ldw	r3,4(r6)
    2908:	003ee706 	br	24a8 <_malloc_r+0x158>
    290c:	5ac00044 	addi	r11,r11,1
    2910:	588000cc 	andi	r2,r11,3
    2914:	31800204 	addi	r6,r6,8
    2918:	103efd1e 	bne	r2,zero,2510 <_malloc_r+0x1c0>
    291c:	00002406 	br	29b0 <_malloc_r+0x660>
    2920:	14000317 	ldw	r16,12(r2)
    2924:	143f251e 	bne	r2,r16,25bc <_malloc_r+0x26c>
    2928:	21000084 	addi	r4,r4,2
    292c:	003ebc06 	br	2420 <_malloc_r+0xd0>
    2930:	8085883a 	add	r2,r16,r2
    2934:	10c00117 	ldw	r3,4(r2)
    2938:	81000317 	ldw	r4,12(r16)
    293c:	81400217 	ldw	r5,8(r16)
    2940:	18c00054 	ori	r3,r3,1
    2944:	10c00115 	stw	r3,4(r2)
    2948:	29000315 	stw	r4,12(r5)
    294c:	21400215 	stw	r5,8(r4)
    2950:	9009883a 	mov	r4,r18
    2954:	00130a40 	call	130a4 <__malloc_unlock>
    2958:	80800204 	addi	r2,r16,8
    295c:	003f2506 	br	25f4 <_malloc_r+0x2a4>
    2960:	12001704 	addi	r8,r2,92
    2964:	11c016c4 	addi	r7,r2,91
    2968:	4209883a 	add	r4,r8,r8
    296c:	003e9606 	br	23c8 <_malloc_r+0x78>
    2970:	3804d1ba 	srli	r2,r7,6
    2974:	11400e44 	addi	r5,r2,57
    2978:	10c00e04 	addi	r3,r2,56
    297c:	294b883a 	add	r5,r5,r5
    2980:	003fbc06 	br	2874 <_malloc_r+0x524>
    2984:	84ff5926 	beq	r16,r19,26ec <_malloc_r+0x39c>
    2988:	008000b4 	movhi	r2,2
    298c:	10937e04 	addi	r2,r2,19960
    2990:	14000217 	ldw	r16,8(r2)
    2994:	00bfff04 	movi	r2,-4
    2998:	80c00117 	ldw	r3,4(r16)
    299c:	1886703a 	and	r3,r3,r2
    29a0:	003f9106 	br	27e8 <_malloc_r+0x498>
    29a4:	60800217 	ldw	r2,8(r12)
    29a8:	213fffc4 	addi	r4,r4,-1
    29ac:	1300651e 	bne	r2,r12,2b44 <_malloc_r+0x7f4>
    29b0:	208000cc 	andi	r2,r4,3
    29b4:	633ffe04 	addi	r12,r12,-8
    29b8:	103ffa1e 	bne	r2,zero,29a4 <_malloc_r+0x654>
    29bc:	98800117 	ldw	r2,4(r19)
    29c0:	0146303a 	nor	r3,zero,r5
    29c4:	1884703a 	and	r2,r3,r2
    29c8:	98800115 	stw	r2,4(r19)
    29cc:	294b883a 	add	r5,r5,r5
    29d0:	117f2836 	bltu	r2,r5,2674 <_malloc_r+0x324>
    29d4:	283f2726 	beq	r5,zero,2674 <_malloc_r+0x324>
    29d8:	2886703a 	and	r3,r5,r2
    29dc:	5809883a 	mov	r4,r11
    29e0:	183ec31e 	bne	r3,zero,24f0 <_malloc_r+0x1a0>
    29e4:	294b883a 	add	r5,r5,r5
    29e8:	2886703a 	and	r3,r5,r2
    29ec:	21000104 	addi	r4,r4,4
    29f0:	183ffc26 	beq	r3,zero,29e4 <_malloc_r+0x694>
    29f4:	003ebe06 	br	24f0 <_malloc_r+0x1a0>
    29f8:	00c05504 	movi	r3,340
    29fc:	18801236 	bltu	r3,r2,2a48 <_malloc_r+0x6f8>
    2a00:	8804d3fa 	srli	r2,r17,15
    2a04:	12001e04 	addi	r8,r2,120
    2a08:	11c01dc4 	addi	r7,r2,119
    2a0c:	4209883a 	add	r4,r8,r8
    2a10:	003e6d06 	br	23c8 <_malloc_r+0x78>
    2a14:	00c40004 	movi	r3,4096
    2a18:	003f4606 	br	2734 <_malloc_r+0x3e4>
    2a1c:	00800044 	movi	r2,1
    2a20:	a0800115 	stw	r2,4(r20)
    2a24:	003f7406 	br	27f8 <_malloc_r+0x4a8>
    2a28:	1805d0ba 	srai	r2,r3,2
    2a2c:	01c00044 	movi	r7,1
    2a30:	30c00117 	ldw	r3,4(r6)
    2a34:	388e983a 	sll	r7,r7,r2
    2a38:	2805883a 	mov	r2,r5
    2a3c:	38c6b03a 	or	r3,r7,r3
    2a40:	30c00115 	stw	r3,4(r6)
    2a44:	003f9b06 	br	28b4 <_malloc_r+0x564>
    2a48:	00c15504 	movi	r3,1364
    2a4c:	18801a36 	bltu	r3,r2,2ab8 <_malloc_r+0x768>
    2a50:	8804d4ba 	srli	r2,r17,18
    2a54:	12001f44 	addi	r8,r2,125
    2a58:	11c01f04 	addi	r7,r2,124
    2a5c:	4209883a 	add	r4,r8,r8
    2a60:	003e5906 	br	23c8 <_malloc_r+0x78>
    2a64:	ad400404 	addi	r21,r21,16
    2a68:	003f1706 	br	26c8 <_malloc_r+0x378>
    2a6c:	00c01504 	movi	r3,84
    2a70:	18802336 	bltu	r3,r2,2b00 <_malloc_r+0x7b0>
    2a74:	3804d33a 	srli	r2,r7,12
    2a78:	11401bc4 	addi	r5,r2,111
    2a7c:	10c01b84 	addi	r3,r2,110
    2a80:	294b883a 	add	r5,r5,r5
    2a84:	003f7b06 	br	2874 <_malloc_r+0x524>
    2a88:	9c000217 	ldw	r16,8(r19)
    2a8c:	00bfff04 	movi	r2,-4
    2a90:	80c00117 	ldw	r3,4(r16)
    2a94:	1886703a 	and	r3,r3,r2
    2a98:	003f5306 	br	27e8 <_malloc_r+0x498>
    2a9c:	3083ffcc 	andi	r2,r6,4095
    2aa0:	103f181e 	bne	r2,zero,2704 <_malloc_r+0x3b4>
    2aa4:	99000217 	ldw	r4,8(r19)
    2aa8:	b545883a 	add	r2,r22,r21
    2aac:	10800054 	ori	r2,r2,1
    2ab0:	20800115 	stw	r2,4(r4)
    2ab4:	003f3e06 	br	27b0 <_malloc_r+0x460>
    2ab8:	01003f84 	movi	r4,254
    2abc:	02001fc4 	movi	r8,127
    2ac0:	01c01f84 	movi	r7,126
    2ac4:	003e4006 	br	23c8 <_malloc_r+0x78>
    2ac8:	008000b4 	movhi	r2,2
    2acc:	109bb504 	addi	r2,r2,28372
    2ad0:	15000015 	stw	r20,0(r2)
    2ad4:	003f1106 	br	271c <_malloc_r+0x3cc>
    2ad8:	00800044 	movi	r2,1
    2adc:	002b883a 	mov	r21,zero
    2ae0:	003f1f06 	br	2760 <_malloc_r+0x410>
    2ae4:	81400204 	addi	r5,r16,8
    2ae8:	9009883a 	mov	r4,r18
    2aec:	00096480 	call	9648 <_free_r>
    2af0:	008000f4 	movhi	r2,3
    2af4:	10a49404 	addi	r2,r2,-28080
    2af8:	10c00017 	ldw	r3,0(r2)
    2afc:	003f2c06 	br	27b0 <_malloc_r+0x460>
    2b00:	00c05504 	movi	r3,340
    2b04:	18800536 	bltu	r3,r2,2b1c <_malloc_r+0x7cc>
    2b08:	3804d3fa 	srli	r2,r7,15
    2b0c:	11401e04 	addi	r5,r2,120
    2b10:	10c01dc4 	addi	r3,r2,119
    2b14:	294b883a 	add	r5,r5,r5
    2b18:	003f5606 	br	2874 <_malloc_r+0x524>
    2b1c:	00c15504 	movi	r3,1364
    2b20:	18800536 	bltu	r3,r2,2b38 <_malloc_r+0x7e8>
    2b24:	3804d4ba 	srli	r2,r7,18
    2b28:	11401f44 	addi	r5,r2,125
    2b2c:	10c01f04 	addi	r3,r2,124
    2b30:	294b883a 	add	r5,r5,r5
    2b34:	003f4f06 	br	2874 <_malloc_r+0x524>
    2b38:	01403f84 	movi	r5,254
    2b3c:	00c01f84 	movi	r3,126
    2b40:	003f4c06 	br	2874 <_malloc_r+0x524>
    2b44:	98800117 	ldw	r2,4(r19)
    2b48:	003fa006 	br	29cc <_malloc_r+0x67c>
    2b4c:	8808d0fa 	srli	r4,r17,3
    2b50:	20800044 	addi	r2,r4,1
    2b54:	1085883a 	add	r2,r2,r2
    2b58:	003e9006 	br	259c <_malloc_r+0x24c>

00002b5c <_printf_r>:
    2b5c:	defffd04 	addi	sp,sp,-12
    2b60:	2805883a 	mov	r2,r5
    2b64:	dfc00015 	stw	ra,0(sp)
    2b68:	d9800115 	stw	r6,4(sp)
    2b6c:	d9c00215 	stw	r7,8(sp)
    2b70:	21400217 	ldw	r5,8(r4)
    2b74:	d9c00104 	addi	r7,sp,4
    2b78:	100d883a 	mov	r6,r2
    2b7c:	00052300 	call	5230 <___vfprintf_internal_r>
    2b80:	dfc00017 	ldw	ra,0(sp)
    2b84:	dec00304 	addi	sp,sp,12
    2b88:	f800283a 	ret

00002b8c <printf>:
    2b8c:	defffc04 	addi	sp,sp,-16
    2b90:	dfc00015 	stw	ra,0(sp)
    2b94:	d9400115 	stw	r5,4(sp)
    2b98:	d9800215 	stw	r6,8(sp)
    2b9c:	d9c00315 	stw	r7,12(sp)
    2ba0:	008000b4 	movhi	r2,2
    2ba4:	109bb804 	addi	r2,r2,28384
    2ba8:	10800017 	ldw	r2,0(r2)
    2bac:	200b883a 	mov	r5,r4
    2bb0:	d9800104 	addi	r6,sp,4
    2bb4:	11000217 	ldw	r4,8(r2)
    2bb8:	00074280 	call	7428 <__vfprintf_internal>
    2bbc:	dfc00017 	ldw	ra,0(sp)
    2bc0:	dec00404 	addi	sp,sp,16
    2bc4:	f800283a 	ret

00002bc8 <_puts_r>:
    2bc8:	defff604 	addi	sp,sp,-40
    2bcc:	dc000715 	stw	r16,28(sp)
    2bd0:	2021883a 	mov	r16,r4
    2bd4:	2809883a 	mov	r4,r5
    2bd8:	dc400815 	stw	r17,32(sp)
    2bdc:	dfc00915 	stw	ra,36(sp)
    2be0:	2823883a 	mov	r17,r5
    2be4:	0002fc00 	call	2fc0 <strlen>
    2be8:	10c00044 	addi	r3,r2,1
    2bec:	d8800115 	stw	r2,4(sp)
    2bf0:	008000b4 	movhi	r2,2
    2bf4:	10917d04 	addi	r2,r2,17908
    2bf8:	d8800215 	stw	r2,8(sp)
    2bfc:	00800044 	movi	r2,1
    2c00:	d8800315 	stw	r2,12(sp)
    2c04:	00800084 	movi	r2,2
    2c08:	dc400015 	stw	r17,0(sp)
    2c0c:	d8c00615 	stw	r3,24(sp)
    2c10:	dec00415 	stw	sp,16(sp)
    2c14:	d8800515 	stw	r2,20(sp)
    2c18:	80000226 	beq	r16,zero,2c24 <_puts_r+0x5c>
    2c1c:	80800e17 	ldw	r2,56(r16)
    2c20:	10001426 	beq	r2,zero,2c74 <_puts_r+0xac>
    2c24:	81400217 	ldw	r5,8(r16)
    2c28:	2880030b 	ldhu	r2,12(r5)
    2c2c:	10c8000c 	andi	r3,r2,8192
    2c30:	1800061e 	bne	r3,zero,2c4c <_puts_r+0x84>
    2c34:	29001917 	ldw	r4,100(r5)
    2c38:	00f7ffc4 	movi	r3,-8193
    2c3c:	10880014 	ori	r2,r2,8192
    2c40:	20c6703a 	and	r3,r4,r3
    2c44:	2880030d 	sth	r2,12(r5)
    2c48:	28c01915 	stw	r3,100(r5)
    2c4c:	d9800404 	addi	r6,sp,16
    2c50:	8009883a 	mov	r4,r16
    2c54:	00099580 	call	9958 <__sfvwrite_r>
    2c58:	1000091e 	bne	r2,zero,2c80 <_puts_r+0xb8>
    2c5c:	00800284 	movi	r2,10
    2c60:	dfc00917 	ldw	ra,36(sp)
    2c64:	dc400817 	ldw	r17,32(sp)
    2c68:	dc000717 	ldw	r16,28(sp)
    2c6c:	dec00a04 	addi	sp,sp,40
    2c70:	f800283a 	ret
    2c74:	8009883a 	mov	r4,r16
    2c78:	00094d40 	call	94d4 <__sinit>
    2c7c:	003fe906 	br	2c24 <_puts_r+0x5c>
    2c80:	00bfffc4 	movi	r2,-1
    2c84:	003ff606 	br	2c60 <_puts_r+0x98>

00002c88 <puts>:
    2c88:	008000b4 	movhi	r2,2
    2c8c:	109bb804 	addi	r2,r2,28384
    2c90:	200b883a 	mov	r5,r4
    2c94:	11000017 	ldw	r4,0(r2)
    2c98:	0002bc81 	jmpi	2bc8 <_puts_r>

00002c9c <_sbrk_r>:
    2c9c:	defffd04 	addi	sp,sp,-12
    2ca0:	dc000015 	stw	r16,0(sp)
    2ca4:	040000f4 	movhi	r16,3
    2ca8:	dc400115 	stw	r17,4(sp)
    2cac:	84246204 	addi	r16,r16,-28280
    2cb0:	2023883a 	mov	r17,r4
    2cb4:	2809883a 	mov	r4,r5
    2cb8:	dfc00215 	stw	ra,8(sp)
    2cbc:	80000015 	stw	zero,0(r16)
    2cc0:	0012c7c0 	call	12c7c <sbrk>
    2cc4:	00ffffc4 	movi	r3,-1
    2cc8:	10c00526 	beq	r2,r3,2ce0 <_sbrk_r+0x44>
    2ccc:	dfc00217 	ldw	ra,8(sp)
    2cd0:	dc400117 	ldw	r17,4(sp)
    2cd4:	dc000017 	ldw	r16,0(sp)
    2cd8:	dec00304 	addi	sp,sp,12
    2cdc:	f800283a 	ret
    2ce0:	80c00017 	ldw	r3,0(r16)
    2ce4:	183ff926 	beq	r3,zero,2ccc <_sbrk_r+0x30>
    2ce8:	88c00015 	stw	r3,0(r17)
    2cec:	003ff706 	br	2ccc <_sbrk_r+0x30>

00002cf0 <_snprintf_r>:
    2cf0:	30003116 	blt	r6,zero,2db8 <_snprintf_r+0xc8>
    2cf4:	deffe404 	addi	sp,sp,-112
    2cf8:	00c08204 	movi	r3,520
    2cfc:	dc001a15 	stw	r16,104(sp)
    2d00:	3005883a 	mov	r2,r6
    2d04:	dfc01b15 	stw	ra,108(sp)
    2d08:	d8c0030d 	sth	r3,12(sp)
    2d0c:	d9400015 	stw	r5,0(sp)
    2d10:	d9400415 	stw	r5,16(sp)
    2d14:	380d883a 	mov	r6,r7
    2d18:	2021883a 	mov	r16,r4
    2d1c:	10001026 	beq	r2,zero,2d60 <_snprintf_r+0x70>
    2d20:	10bfffc4 	addi	r2,r2,-1
    2d24:	d8800215 	stw	r2,8(sp)
    2d28:	d8800515 	stw	r2,20(sp)
    2d2c:	d9c01c04 	addi	r7,sp,112
    2d30:	00bfffc4 	movi	r2,-1
    2d34:	d80b883a 	mov	r5,sp
    2d38:	d880038d 	sth	r2,14(sp)
    2d3c:	00030580 	call	3058 <___svfprintf_internal_r>
    2d40:	00ffffc4 	movi	r3,-1
    2d44:	10c01316 	blt	r2,r3,2d94 <_snprintf_r+0xa4>
    2d48:	d8c00017 	ldw	r3,0(sp)
    2d4c:	18000005 	stb	zero,0(r3)
    2d50:	dfc01b17 	ldw	ra,108(sp)
    2d54:	dc001a17 	ldw	r16,104(sp)
    2d58:	dec01c04 	addi	sp,sp,112
    2d5c:	f800283a 	ret
    2d60:	00bfffc4 	movi	r2,-1
    2d64:	d9c01c04 	addi	r7,sp,112
    2d68:	d80b883a 	mov	r5,sp
    2d6c:	d8000215 	stw	zero,8(sp)
    2d70:	d8000515 	stw	zero,20(sp)
    2d74:	d880038d 	sth	r2,14(sp)
    2d78:	00030580 	call	3058 <___svfprintf_internal_r>
    2d7c:	00ffffc4 	movi	r3,-1
    2d80:	10c00716 	blt	r2,r3,2da0 <_snprintf_r+0xb0>
    2d84:	dfc01b17 	ldw	ra,108(sp)
    2d88:	dc001a17 	ldw	r16,104(sp)
    2d8c:	dec01c04 	addi	sp,sp,112
    2d90:	f800283a 	ret
    2d94:	00c022c4 	movi	r3,139
    2d98:	80c00015 	stw	r3,0(r16)
    2d9c:	003fea06 	br	2d48 <_snprintf_r+0x58>
    2da0:	00c022c4 	movi	r3,139
    2da4:	80c00015 	stw	r3,0(r16)
    2da8:	dfc01b17 	ldw	ra,108(sp)
    2dac:	dc001a17 	ldw	r16,104(sp)
    2db0:	dec01c04 	addi	sp,sp,112
    2db4:	f800283a 	ret
    2db8:	008022c4 	movi	r2,139
    2dbc:	20800015 	stw	r2,0(r4)
    2dc0:	00bfffc4 	movi	r2,-1
    2dc4:	f800283a 	ret

00002dc8 <snprintf>:
    2dc8:	deffe304 	addi	sp,sp,-116
    2dcc:	dfc01b15 	stw	ra,108(sp)
    2dd0:	dc001a15 	stw	r16,104(sp)
    2dd4:	d9c01c15 	stw	r7,112(sp)
    2dd8:	008000b4 	movhi	r2,2
    2ddc:	109bb804 	addi	r2,r2,28384
    2de0:	14000017 	ldw	r16,0(r2)
    2de4:	28002d16 	blt	r5,zero,2e9c <snprintf+0xd4>
    2de8:	00808204 	movi	r2,520
    2dec:	d880030d 	sth	r2,12(sp)
    2df0:	d9000015 	stw	r4,0(sp)
    2df4:	d9000415 	stw	r4,16(sp)
    2df8:	28001126 	beq	r5,zero,2e40 <snprintf+0x78>
    2dfc:	28bfffc4 	addi	r2,r5,-1
    2e00:	d8800215 	stw	r2,8(sp)
    2e04:	d8800515 	stw	r2,20(sp)
    2e08:	d9c01c04 	addi	r7,sp,112
    2e0c:	00bfffc4 	movi	r2,-1
    2e10:	d80b883a 	mov	r5,sp
    2e14:	8009883a 	mov	r4,r16
    2e18:	d880038d 	sth	r2,14(sp)
    2e1c:	00030580 	call	3058 <___svfprintf_internal_r>
    2e20:	00ffffc4 	movi	r3,-1
    2e24:	10c01416 	blt	r2,r3,2e78 <snprintf+0xb0>
    2e28:	d8c00017 	ldw	r3,0(sp)
    2e2c:	18000005 	stb	zero,0(r3)
    2e30:	dfc01b17 	ldw	ra,108(sp)
    2e34:	dc001a17 	ldw	r16,104(sp)
    2e38:	dec01d04 	addi	sp,sp,116
    2e3c:	f800283a 	ret
    2e40:	00bfffc4 	movi	r2,-1
    2e44:	d9c01c04 	addi	r7,sp,112
    2e48:	d80b883a 	mov	r5,sp
    2e4c:	8009883a 	mov	r4,r16
    2e50:	d8000215 	stw	zero,8(sp)
    2e54:	d8000515 	stw	zero,20(sp)
    2e58:	d880038d 	sth	r2,14(sp)
    2e5c:	00030580 	call	3058 <___svfprintf_internal_r>
    2e60:	00ffffc4 	movi	r3,-1
    2e64:	10c00716 	blt	r2,r3,2e84 <snprintf+0xbc>
    2e68:	dfc01b17 	ldw	ra,108(sp)
    2e6c:	dc001a17 	ldw	r16,104(sp)
    2e70:	dec01d04 	addi	sp,sp,116
    2e74:	f800283a 	ret
    2e78:	00c022c4 	movi	r3,139
    2e7c:	80c00015 	stw	r3,0(r16)
    2e80:	003fe906 	br	2e28 <snprintf+0x60>
    2e84:	00c022c4 	movi	r3,139
    2e88:	80c00015 	stw	r3,0(r16)
    2e8c:	dfc01b17 	ldw	ra,108(sp)
    2e90:	dc001a17 	ldw	r16,104(sp)
    2e94:	dec01d04 	addi	sp,sp,116
    2e98:	f800283a 	ret
    2e9c:	008022c4 	movi	r2,139
    2ea0:	80800015 	stw	r2,0(r16)
    2ea4:	00bfffc4 	movi	r2,-1
    2ea8:	003fef06 	br	2e68 <snprintf+0xa0>

00002eac <strcat>:
    2eac:	defffe04 	addi	sp,sp,-8
    2eb0:	dc000015 	stw	r16,0(sp)
    2eb4:	dfc00115 	stw	ra,4(sp)
    2eb8:	208000cc 	andi	r2,r4,3
    2ebc:	2021883a 	mov	r16,r4
    2ec0:	1000131e 	bne	r2,zero,2f10 <strcat+0x64>
    2ec4:	20800017 	ldw	r2,0(r4)
    2ec8:	01ffbff4 	movhi	r7,65279
    2ecc:	39ffbfc4 	addi	r7,r7,-257
    2ed0:	0086303a 	nor	r3,zero,r2
    2ed4:	01a02074 	movhi	r6,32897
    2ed8:	11c5883a 	add	r2,r2,r7
    2edc:	31a02004 	addi	r6,r6,-32640
    2ee0:	10c4703a 	and	r2,r2,r3
    2ee4:	1184703a 	and	r2,r2,r6
    2ee8:	1000091e 	bne	r2,zero,2f10 <strcat+0x64>
    2eec:	21000104 	addi	r4,r4,4
    2ef0:	20800017 	ldw	r2,0(r4)
    2ef4:	11c7883a 	add	r3,r2,r7
    2ef8:	0084303a 	nor	r2,zero,r2
    2efc:	1884703a 	and	r2,r3,r2
    2f00:	1184703a 	and	r2,r2,r6
    2f04:	103ff926 	beq	r2,zero,2eec <strcat+0x40>
    2f08:	00000106 	br	2f10 <strcat+0x64>
    2f0c:	21000044 	addi	r4,r4,1
    2f10:	20800007 	ldb	r2,0(r4)
    2f14:	103ffd1e 	bne	r2,zero,2f0c <strcat+0x60>
    2f18:	0002f300 	call	2f30 <strcpy>
    2f1c:	8005883a 	mov	r2,r16
    2f20:	dfc00117 	ldw	ra,4(sp)
    2f24:	dc000017 	ldw	r16,0(sp)
    2f28:	dec00204 	addi	sp,sp,8
    2f2c:	f800283a 	ret

00002f30 <strcpy>:
    2f30:	2906b03a 	or	r3,r5,r4
    2f34:	18c000cc 	andi	r3,r3,3
    2f38:	2005883a 	mov	r2,r4
    2f3c:	1800161e 	bne	r3,zero,2f98 <strcpy+0x68>
    2f40:	29c00017 	ldw	r7,0(r5)
    2f44:	02ffbff4 	movhi	r11,65279
    2f48:	5affbfc4 	addi	r11,r11,-257
    2f4c:	02a02074 	movhi	r10,32897
    2f50:	01c6303a 	nor	r3,zero,r7
    2f54:	3ac9883a 	add	r4,r7,r11
    2f58:	52a02004 	addi	r10,r10,-32640
    2f5c:	20c6703a 	and	r3,r4,r3
    2f60:	1a86703a 	and	r3,r3,r10
    2f64:	18000c1e 	bne	r3,zero,2f98 <strcpy+0x68>
    2f68:	1011883a 	mov	r8,r2
    2f6c:	41c00015 	stw	r7,0(r8)
    2f70:	29400104 	addi	r5,r5,4
    2f74:	29c00017 	ldw	r7,0(r5)
    2f78:	41800104 	addi	r6,r8,4
    2f7c:	3011883a 	mov	r8,r6
    2f80:	3ad3883a 	add	r9,r7,r11
    2f84:	01c6303a 	nor	r3,zero,r7
    2f88:	48c6703a 	and	r3,r9,r3
    2f8c:	1a86703a 	and	r3,r3,r10
    2f90:	183ff626 	beq	r3,zero,2f6c <strcpy+0x3c>
    2f94:	00000106 	br	2f9c <strcpy+0x6c>
    2f98:	100d883a 	mov	r6,r2
    2f9c:	28c00003 	ldbu	r3,0(r5)
    2fa0:	31800044 	addi	r6,r6,1
    2fa4:	29400044 	addi	r5,r5,1
    2fa8:	30ffffc5 	stb	r3,-1(r6)
    2fac:	18c03fcc 	andi	r3,r3,255
    2fb0:	18c0201c 	xori	r3,r3,128
    2fb4:	18ffe004 	addi	r3,r3,-128
    2fb8:	183ff81e 	bne	r3,zero,2f9c <strcpy+0x6c>
    2fbc:	f800283a 	ret

00002fc0 <strlen>:
    2fc0:	208000cc 	andi	r2,r4,3
    2fc4:	10002026 	beq	r2,zero,3048 <strlen+0x88>
    2fc8:	20800007 	ldb	r2,0(r4)
    2fcc:	10002026 	beq	r2,zero,3050 <strlen+0x90>
    2fd0:	2005883a 	mov	r2,r4
    2fd4:	00000206 	br	2fe0 <strlen+0x20>
    2fd8:	10c00007 	ldb	r3,0(r2)
    2fdc:	18001826 	beq	r3,zero,3040 <strlen+0x80>
    2fe0:	10800044 	addi	r2,r2,1
    2fe4:	10c000cc 	andi	r3,r2,3
    2fe8:	183ffb1e 	bne	r3,zero,2fd8 <strlen+0x18>
    2fec:	10c00017 	ldw	r3,0(r2)
    2ff0:	01ffbff4 	movhi	r7,65279
    2ff4:	39ffbfc4 	addi	r7,r7,-257
    2ff8:	00ca303a 	nor	r5,zero,r3
    2ffc:	01a02074 	movhi	r6,32897
    3000:	19c7883a 	add	r3,r3,r7
    3004:	31a02004 	addi	r6,r6,-32640
    3008:	1946703a 	and	r3,r3,r5
    300c:	1986703a 	and	r3,r3,r6
    3010:	1800091e 	bne	r3,zero,3038 <strlen+0x78>
    3014:	10800104 	addi	r2,r2,4
    3018:	10c00017 	ldw	r3,0(r2)
    301c:	19cb883a 	add	r5,r3,r7
    3020:	00c6303a 	nor	r3,zero,r3
    3024:	28c6703a 	and	r3,r5,r3
    3028:	1986703a 	and	r3,r3,r6
    302c:	183ff926 	beq	r3,zero,3014 <strlen+0x54>
    3030:	00000106 	br	3038 <strlen+0x78>
    3034:	10800044 	addi	r2,r2,1
    3038:	10c00007 	ldb	r3,0(r2)
    303c:	183ffd1e 	bne	r3,zero,3034 <strlen+0x74>
    3040:	1105c83a 	sub	r2,r2,r4
    3044:	f800283a 	ret
    3048:	2005883a 	mov	r2,r4
    304c:	003fe706 	br	2fec <strlen+0x2c>
    3050:	0005883a 	mov	r2,zero
    3054:	f800283a 	ret

00003058 <___svfprintf_internal_r>:
    3058:	deffb704 	addi	sp,sp,-292
    305c:	dfc04815 	stw	ra,288(sp)
    3060:	ddc04615 	stw	r23,280(sp)
    3064:	d9402c15 	stw	r5,176(sp)
    3068:	d9003915 	stw	r4,228(sp)
    306c:	302f883a 	mov	r23,r6
    3070:	d9c02d15 	stw	r7,180(sp)
    3074:	df004715 	stw	fp,284(sp)
    3078:	dd804515 	stw	r22,276(sp)
    307c:	dd404415 	stw	r21,272(sp)
    3080:	dd004315 	stw	r20,268(sp)
    3084:	dcc04215 	stw	r19,264(sp)
    3088:	dc804115 	stw	r18,260(sp)
    308c:	dc404015 	stw	r17,256(sp)
    3090:	dc003f15 	stw	r16,252(sp)
    3094:	000a0480 	call	a048 <_localeconv_r>
    3098:	10800017 	ldw	r2,0(r2)
    309c:	1009883a 	mov	r4,r2
    30a0:	d8803415 	stw	r2,208(sp)
    30a4:	0002fc00 	call	2fc0 <strlen>
    30a8:	d8c02c17 	ldw	r3,176(sp)
    30ac:	d8803815 	stw	r2,224(sp)
    30b0:	1880030b 	ldhu	r2,12(r3)
    30b4:	1080200c 	andi	r2,r2,128
    30b8:	10000226 	beq	r2,zero,30c4 <___svfprintf_internal_r+0x6c>
    30bc:	18800417 	ldw	r2,16(r3)
    30c0:	10067f26 	beq	r2,zero,4ac0 <___svfprintf_internal_r+0x1a68>
    30c4:	dcc03917 	ldw	r19,228(sp)
    30c8:	d8c00404 	addi	r3,sp,16
    30cc:	054000b4 	movhi	r21,2
    30d0:	d9001e04 	addi	r4,sp,120
    30d4:	ad518e84 	addi	r21,r21,17978
    30d8:	d8c01e15 	stw	r3,120(sp)
    30dc:	d8002015 	stw	zero,128(sp)
    30e0:	d8001f15 	stw	zero,124(sp)
    30e4:	d8003315 	stw	zero,204(sp)
    30e8:	d8003615 	stw	zero,216(sp)
    30ec:	d8003715 	stw	zero,220(sp)
    30f0:	1811883a 	mov	r8,r3
    30f4:	d8003a15 	stw	zero,232(sp)
    30f8:	d8003b15 	stw	zero,236(sp)
    30fc:	d8002f15 	stw	zero,188(sp)
    3100:	d9002815 	stw	r4,160(sp)
    3104:	b8800007 	ldb	r2,0(r23)
    3108:	10026726 	beq	r2,zero,3aa8 <___svfprintf_internal_r+0xa50>
    310c:	00c00944 	movi	r3,37
    3110:	b821883a 	mov	r16,r23
    3114:	10c0021e 	bne	r2,r3,3120 <___svfprintf_internal_r+0xc8>
    3118:	00001406 	br	316c <___svfprintf_internal_r+0x114>
    311c:	10c00326 	beq	r2,r3,312c <___svfprintf_internal_r+0xd4>
    3120:	84000044 	addi	r16,r16,1
    3124:	80800007 	ldb	r2,0(r16)
    3128:	103ffc1e 	bne	r2,zero,311c <___svfprintf_internal_r+0xc4>
    312c:	85e3c83a 	sub	r17,r16,r23
    3130:	88000e26 	beq	r17,zero,316c <___svfprintf_internal_r+0x114>
    3134:	d8c02017 	ldw	r3,128(sp)
    3138:	d8801f17 	ldw	r2,124(sp)
    313c:	45c00015 	stw	r23,0(r8)
    3140:	1c47883a 	add	r3,r3,r17
    3144:	10800044 	addi	r2,r2,1
    3148:	d8c02015 	stw	r3,128(sp)
    314c:	44400115 	stw	r17,4(r8)
    3150:	d8801f15 	stw	r2,124(sp)
    3154:	00c001c4 	movi	r3,7
    3158:	18809716 	blt	r3,r2,33b8 <___svfprintf_internal_r+0x360>
    315c:	42000204 	addi	r8,r8,8
    3160:	d9402f17 	ldw	r5,188(sp)
    3164:	2c4b883a 	add	r5,r5,r17
    3168:	d9402f15 	stw	r5,188(sp)
    316c:	80800007 	ldb	r2,0(r16)
    3170:	10009826 	beq	r2,zero,33d4 <___svfprintf_internal_r+0x37c>
    3174:	84400047 	ldb	r17,1(r16)
    3178:	00bfffc4 	movi	r2,-1
    317c:	85c00044 	addi	r23,r16,1
    3180:	d8002785 	stb	zero,158(sp)
    3184:	0007883a 	mov	r3,zero
    3188:	000f883a 	mov	r7,zero
    318c:	d8802915 	stw	r2,164(sp)
    3190:	d8003115 	stw	zero,196(sp)
    3194:	0025883a 	mov	r18,zero
    3198:	01401604 	movi	r5,88
    319c:	01800244 	movi	r6,9
    31a0:	02800a84 	movi	r10,42
    31a4:	02401b04 	movi	r9,108
    31a8:	bdc00044 	addi	r23,r23,1
    31ac:	88bff804 	addi	r2,r17,-32
    31b0:	2882f036 	bltu	r5,r2,3d74 <___svfprintf_internal_r+0xd1c>
    31b4:	100490ba 	slli	r2,r2,2
    31b8:	01000034 	movhi	r4,0
    31bc:	210c7304 	addi	r4,r4,12748
    31c0:	1105883a 	add	r2,r2,r4
    31c4:	10800017 	ldw	r2,0(r2)
    31c8:	1000683a 	jmp	r2
    31cc:	00003cdc 	xori	zero,zero,243
    31d0:	00003d74 	movhi	zero,245
    31d4:	00003d74 	movhi	zero,245
    31d8:	00003cd0 	cmplti	zero,zero,243
    31dc:	00003d74 	movhi	zero,245
    31e0:	00003d74 	movhi	zero,245
    31e4:	00003d74 	movhi	zero,245
    31e8:	00003d74 	movhi	zero,245
    31ec:	00003d74 	movhi	zero,245
    31f0:	00003d74 	movhi	zero,245
    31f4:	00003430 	cmpltui	zero,zero,208
    31f8:	00003c0c 	andi	zero,zero,240
    31fc:	00003d74 	movhi	zero,245
    3200:	00003340 	call	334 <start_screen+0xb0>
    3204:	00003458 	cmpnei	zero,zero,209
    3208:	00003d74 	movhi	zero,245
    320c:	000034cc 	andi	zero,zero,211
    3210:	00003498 	cmpnei	zero,zero,210
    3214:	00003498 	cmpnei	zero,zero,210
    3218:	00003498 	cmpnei	zero,zero,210
    321c:	00003498 	cmpnei	zero,zero,210
    3220:	00003498 	cmpnei	zero,zero,210
    3224:	00003498 	cmpnei	zero,zero,210
    3228:	00003498 	cmpnei	zero,zero,210
    322c:	00003498 	cmpnei	zero,zero,210
    3230:	00003498 	cmpnei	zero,zero,210
    3234:	00003d74 	movhi	zero,245
    3238:	00003d74 	movhi	zero,245
    323c:	00003d74 	movhi	zero,245
    3240:	00003d74 	movhi	zero,245
    3244:	00003d74 	movhi	zero,245
    3248:	00003d74 	movhi	zero,245
    324c:	00003d74 	movhi	zero,245
    3250:	00003d74 	movhi	zero,245
    3254:	00003d74 	movhi	zero,245
    3258:	00003d74 	movhi	zero,245
    325c:	00003584 	movi	zero,214
    3260:	000034d8 	cmpnei	zero,zero,211
    3264:	00003d74 	movhi	zero,245
    3268:	000034d8 	cmpnei	zero,zero,211
    326c:	00003d74 	movhi	zero,245
    3270:	00003d74 	movhi	zero,245
    3274:	00003d74 	movhi	zero,245
    3278:	00003d74 	movhi	zero,245
    327c:	00003578 	rdprs	zero,zero,213
    3280:	00003d74 	movhi	zero,245
    3284:	00003d74 	movhi	zero,245
    3288:	00003640 	call	364 <start_screen+0xe0>
    328c:	00003d74 	movhi	zero,245
    3290:	00003d74 	movhi	zero,245
    3294:	00003d74 	movhi	zero,245
    3298:	00003d74 	movhi	zero,245
    329c:	00003d74 	movhi	zero,245
    32a0:	00003ab0 	cmpltui	zero,zero,234
    32a4:	00003d74 	movhi	zero,245
    32a8:	00003d74 	movhi	zero,245
    32ac:	00003b10 	cmplti	zero,zero,236
    32b0:	00003d74 	movhi	zero,245
    32b4:	00003d74 	movhi	zero,245
    32b8:	00003d74 	movhi	zero,245
    32bc:	00003d74 	movhi	zero,245
    32c0:	00003d74 	movhi	zero,245
    32c4:	00003d74 	movhi	zero,245
    32c8:	00003d74 	movhi	zero,245
    32cc:	00003d74 	movhi	zero,245
    32d0:	00003d74 	movhi	zero,245
    32d4:	00003d74 	movhi	zero,245
    32d8:	00003bc0 	call	3bc <GameStateTask+0x28>
    32dc:	00003cfc 	xorhi	zero,zero,243
    32e0:	000034d8 	cmpnei	zero,zero,211
    32e4:	000034d8 	cmpnei	zero,zero,211
    32e8:	000034d8 	cmpnei	zero,zero,211
    32ec:	00003d50 	cmplti	zero,zero,245
    32f0:	00003cfc 	xorhi	zero,zero,243
    32f4:	00003d74 	movhi	zero,245
    32f8:	00003d74 	movhi	zero,245
    32fc:	00003d0c 	andi	zero,zero,244
    3300:	00003d74 	movhi	zero,245
    3304:	00003d1c 	xori	zero,zero,244
    3308:	00003bfc 	xorhi	zero,zero,239
    330c:	0000334c 	andi	zero,zero,205
    3310:	00003c1c 	xori	zero,zero,240
    3314:	00003d74 	movhi	zero,245
    3318:	00003c28 	cmpgeui	zero,zero,240
    331c:	00003d74 	movhi	zero,245
    3320:	00003c84 	movi	zero,242
    3324:	00003d74 	movhi	zero,245
    3328:	00003d74 	movhi	zero,245
    332c:	00003c94 	movui	zero,242
    3330:	d9003117 	ldw	r4,196(sp)
    3334:	d8802d15 	stw	r2,180(sp)
    3338:	0109c83a 	sub	r4,zero,r4
    333c:	d9003115 	stw	r4,196(sp)
    3340:	94800114 	ori	r18,r18,4
    3344:	bc400007 	ldb	r17,0(r23)
    3348:	003f9706 	br	31a8 <___svfprintf_internal_r+0x150>
    334c:	00800c04 	movi	r2,48
    3350:	d9002d17 	ldw	r4,180(sp)
    3354:	d9402917 	ldw	r5,164(sp)
    3358:	d8802705 	stb	r2,156(sp)
    335c:	00801e04 	movi	r2,120
    3360:	d8802745 	stb	r2,157(sp)
    3364:	d8002785 	stb	zero,158(sp)
    3368:	20c00104 	addi	r3,r4,4
    336c:	25000017 	ldw	r20,0(r4)
    3370:	002d883a 	mov	r22,zero
    3374:	90800094 	ori	r2,r18,2
    3378:	28028616 	blt	r5,zero,3d94 <___svfprintf_internal_r+0xd3c>
    337c:	00bfdfc4 	movi	r2,-129
    3380:	90a4703a 	and	r18,r18,r2
    3384:	d8c02d15 	stw	r3,180(sp)
    3388:	94800094 	ori	r18,r18,2
    338c:	a002731e 	bne	r20,zero,3d5c <___svfprintf_internal_r+0xd04>
    3390:	008000b4 	movhi	r2,2
    3394:	10918704 	addi	r2,r2,17948
    3398:	d8803a15 	stw	r2,232(sp)
    339c:	04401e04 	movi	r17,120
    33a0:	d8c02917 	ldw	r3,164(sp)
    33a4:	0039883a 	mov	fp,zero
    33a8:	1801d526 	beq	r3,zero,3b00 <___svfprintf_internal_r+0xaa8>
    33ac:	0029883a 	mov	r20,zero
    33b0:	002d883a 	mov	r22,zero
    33b4:	0001f106 	br	3b7c <___svfprintf_internal_r+0xb24>
    33b8:	d9402c17 	ldw	r5,176(sp)
    33bc:	d9801e04 	addi	r6,sp,120
    33c0:	9809883a 	mov	r4,r19
    33c4:	000bed00 	call	bed0 <__ssprint_r>
    33c8:	1000081e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    33cc:	da000404 	addi	r8,sp,16
    33d0:	003f6306 	br	3160 <___svfprintf_internal_r+0x108>
    33d4:	d8802017 	ldw	r2,128(sp)
    33d8:	10000426 	beq	r2,zero,33ec <___svfprintf_internal_r+0x394>
    33dc:	d9402c17 	ldw	r5,176(sp)
    33e0:	d9003917 	ldw	r4,228(sp)
    33e4:	d9801e04 	addi	r6,sp,120
    33e8:	000bed00 	call	bed0 <__ssprint_r>
    33ec:	d8802c17 	ldw	r2,176(sp)
    33f0:	10c0030b 	ldhu	r3,12(r2)
    33f4:	d8802f17 	ldw	r2,188(sp)
    33f8:	18c0100c 	andi	r3,r3,64
    33fc:	1805f51e 	bne	r3,zero,4bd4 <___svfprintf_internal_r+0x1b7c>
    3400:	dfc04817 	ldw	ra,288(sp)
    3404:	df004717 	ldw	fp,284(sp)
    3408:	ddc04617 	ldw	r23,280(sp)
    340c:	dd804517 	ldw	r22,276(sp)
    3410:	dd404417 	ldw	r21,272(sp)
    3414:	dd004317 	ldw	r20,268(sp)
    3418:	dcc04217 	ldw	r19,264(sp)
    341c:	dc804117 	ldw	r18,260(sp)
    3420:	dc404017 	ldw	r17,256(sp)
    3424:	dc003f17 	ldw	r16,252(sp)
    3428:	dec04904 	addi	sp,sp,292
    342c:	f800283a 	ret
    3430:	d8802d17 	ldw	r2,180(sp)
    3434:	d9002d17 	ldw	r4,180(sp)
    3438:	10800017 	ldw	r2,0(r2)
    343c:	d8803115 	stw	r2,196(sp)
    3440:	20800104 	addi	r2,r4,4
    3444:	d9003117 	ldw	r4,196(sp)
    3448:	203fb916 	blt	r4,zero,3330 <___svfprintf_internal_r+0x2d8>
    344c:	d8802d15 	stw	r2,180(sp)
    3450:	bc400007 	ldb	r17,0(r23)
    3454:	003f5406 	br	31a8 <___svfprintf_internal_r+0x150>
    3458:	bc400007 	ldb	r17,0(r23)
    345c:	bac00044 	addi	r11,r23,1
    3460:	8a873926 	beq	r17,r10,5148 <___svfprintf_internal_r+0x20f0>
    3464:	88bff404 	addi	r2,r17,-48
    3468:	0009883a 	mov	r4,zero
    346c:	30868836 	bltu	r6,r2,4e90 <___svfprintf_internal_r+0x1e38>
    3470:	5c400007 	ldb	r17,0(r11)
    3474:	210002a4 	muli	r4,r4,10
    3478:	5dc00044 	addi	r23,r11,1
    347c:	b817883a 	mov	r11,r23
    3480:	2089883a 	add	r4,r4,r2
    3484:	88bff404 	addi	r2,r17,-48
    3488:	30bff92e 	bgeu	r6,r2,3470 <___svfprintf_internal_r+0x418>
    348c:	2005d716 	blt	r4,zero,4bec <___svfprintf_internal_r+0x1b94>
    3490:	d9002915 	stw	r4,164(sp)
    3494:	003f4506 	br	31ac <___svfprintf_internal_r+0x154>
    3498:	b809883a 	mov	r4,r23
    349c:	d8003115 	stw	zero,196(sp)
    34a0:	88bff404 	addi	r2,r17,-48
    34a4:	0017883a 	mov	r11,zero
    34a8:	24400007 	ldb	r17,0(r4)
    34ac:	5ac002a4 	muli	r11,r11,10
    34b0:	bdc00044 	addi	r23,r23,1
    34b4:	b809883a 	mov	r4,r23
    34b8:	12d7883a 	add	r11,r2,r11
    34bc:	88bff404 	addi	r2,r17,-48
    34c0:	30bff92e 	bgeu	r6,r2,34a8 <___svfprintf_internal_r+0x450>
    34c4:	dac03115 	stw	r11,196(sp)
    34c8:	003f3806 	br	31ac <___svfprintf_internal_r+0x154>
    34cc:	94802014 	ori	r18,r18,128
    34d0:	bc400007 	ldb	r17,0(r23)
    34d4:	003f3406 	br	31a8 <___svfprintf_internal_r+0x150>
    34d8:	18c03fcc 	andi	r3,r3,255
    34dc:	1807471e 	bne	r3,zero,51fc <___svfprintf_internal_r+0x21a4>
    34e0:	9080020c 	andi	r2,r18,8
    34e4:	10047d26 	beq	r2,zero,46dc <___svfprintf_internal_r+0x1684>
    34e8:	d8c02d17 	ldw	r3,180(sp)
    34ec:	d9002d17 	ldw	r4,180(sp)
    34f0:	d9402d17 	ldw	r5,180(sp)
    34f4:	18c00017 	ldw	r3,0(r3)
    34f8:	21000117 	ldw	r4,4(r4)
    34fc:	29400204 	addi	r5,r5,8
    3500:	d8c03615 	stw	r3,216(sp)
    3504:	d9003715 	stw	r4,220(sp)
    3508:	d9402d15 	stw	r5,180(sp)
    350c:	d9003617 	ldw	r4,216(sp)
    3510:	d9403717 	ldw	r5,220(sp)
    3514:	da003e15 	stw	r8,248(sp)
    3518:	04000044 	movi	r16,1
    351c:	000bc440 	call	bc44 <__fpclassifyd>
    3520:	da003e17 	ldw	r8,248(sp)
    3524:	14044b1e 	bne	r2,r16,4654 <___svfprintf_internal_r+0x15fc>
    3528:	d9003617 	ldw	r4,216(sp)
    352c:	d9403717 	ldw	r5,220(sp)
    3530:	000d883a 	mov	r6,zero
    3534:	000f883a 	mov	r7,zero
    3538:	00111b40 	call	111b4 <__ledf2>
    353c:	da003e17 	ldw	r8,248(sp)
    3540:	1005f316 	blt	r2,zero,4d10 <___svfprintf_internal_r+0x1cb8>
    3544:	df002783 	ldbu	fp,158(sp)
    3548:	008011c4 	movi	r2,71
    354c:	1445590e 	bge	r2,r17,4ab4 <___svfprintf_internal_r+0x1a5c>
    3550:	040000b4 	movhi	r16,2
    3554:	84117f04 	addi	r16,r16,17916
    3558:	00c000c4 	movi	r3,3
    355c:	00bfdfc4 	movi	r2,-129
    3560:	d8c02a15 	stw	r3,168(sp)
    3564:	90a4703a 	and	r18,r18,r2
    3568:	d8c02e15 	stw	r3,184(sp)
    356c:	d8002915 	stw	zero,164(sp)
    3570:	d8003215 	stw	zero,200(sp)
    3574:	00006606 	br	3710 <___svfprintf_internal_r+0x6b8>
    3578:	94800214 	ori	r18,r18,8
    357c:	bc400007 	ldb	r17,0(r23)
    3580:	003f0906 	br	31a8 <___svfprintf_internal_r+0x150>
    3584:	18c03fcc 	andi	r3,r3,255
    3588:	1807181e 	bne	r3,zero,51ec <___svfprintf_internal_r+0x2194>
    358c:	94800414 	ori	r18,r18,16
    3590:	9080080c 	andi	r2,r18,32
    3594:	10039626 	beq	r2,zero,43f0 <___svfprintf_internal_r+0x1398>
    3598:	d9402d17 	ldw	r5,180(sp)
    359c:	28800117 	ldw	r2,4(r5)
    35a0:	2d000017 	ldw	r20,0(r5)
    35a4:	29400204 	addi	r5,r5,8
    35a8:	d9402d15 	stw	r5,180(sp)
    35ac:	102d883a 	mov	r22,r2
    35b0:	10039816 	blt	r2,zero,4414 <___svfprintf_internal_r+0x13bc>
    35b4:	d9402917 	ldw	r5,164(sp)
    35b8:	df002783 	ldbu	fp,158(sp)
    35bc:	2803ab16 	blt	r5,zero,446c <___svfprintf_internal_r+0x1414>
    35c0:	00ffdfc4 	movi	r3,-129
    35c4:	a584b03a 	or	r2,r20,r22
    35c8:	90e4703a 	and	r18,r18,r3
    35cc:	10014a26 	beq	r2,zero,3af8 <___svfprintf_internal_r+0xaa0>
    35d0:	b0034b26 	beq	r22,zero,4300 <___svfprintf_internal_r+0x12a8>
    35d4:	dc402a15 	stw	r17,168(sp)
    35d8:	dc001e04 	addi	r16,sp,120
    35dc:	b023883a 	mov	r17,r22
    35e0:	402d883a 	mov	r22,r8
    35e4:	a009883a 	mov	r4,r20
    35e8:	880b883a 	mov	r5,r17
    35ec:	01800284 	movi	r6,10
    35f0:	000f883a 	mov	r7,zero
    35f4:	000f7d00 	call	f7d0 <__umoddi3>
    35f8:	10800c04 	addi	r2,r2,48
    35fc:	843fffc4 	addi	r16,r16,-1
    3600:	a009883a 	mov	r4,r20
    3604:	880b883a 	mov	r5,r17
    3608:	80800005 	stb	r2,0(r16)
    360c:	01800284 	movi	r6,10
    3610:	000f883a 	mov	r7,zero
    3614:	000f2580 	call	f258 <__udivdi3>
    3618:	1029883a 	mov	r20,r2
    361c:	10c4b03a 	or	r2,r2,r3
    3620:	1823883a 	mov	r17,r3
    3624:	103fef1e 	bne	r2,zero,35e4 <___svfprintf_internal_r+0x58c>
    3628:	d8c02817 	ldw	r3,160(sp)
    362c:	dc402a17 	ldw	r17,168(sp)
    3630:	b011883a 	mov	r8,r22
    3634:	1c07c83a 	sub	r3,r3,r16
    3638:	d8c02e15 	stw	r3,184(sp)
    363c:	00002e06 	br	36f8 <___svfprintf_internal_r+0x6a0>
    3640:	18c03fcc 	andi	r3,r3,255
    3644:	1806e71e 	bne	r3,zero,51e4 <___svfprintf_internal_r+0x218c>
    3648:	94800414 	ori	r18,r18,16
    364c:	9080080c 	andi	r2,r18,32
    3650:	1002d426 	beq	r2,zero,41a4 <___svfprintf_internal_r+0x114c>
    3654:	d9402d17 	ldw	r5,180(sp)
    3658:	d8c02917 	ldw	r3,164(sp)
    365c:	d8002785 	stb	zero,158(sp)
    3660:	28800204 	addi	r2,r5,8
    3664:	2d000017 	ldw	r20,0(r5)
    3668:	2d800117 	ldw	r22,4(r5)
    366c:	18041516 	blt	r3,zero,46c4 <___svfprintf_internal_r+0x166c>
    3670:	013fdfc4 	movi	r4,-129
    3674:	a586b03a 	or	r3,r20,r22
    3678:	d8802d15 	stw	r2,180(sp)
    367c:	9124703a 	and	r18,r18,r4
    3680:	1802d51e 	bne	r3,zero,41d8 <___svfprintf_internal_r+0x1180>
    3684:	d9402917 	ldw	r5,164(sp)
    3688:	0039883a 	mov	fp,zero
    368c:	2806be26 	beq	r5,zero,5188 <___svfprintf_internal_r+0x2130>
    3690:	0029883a 	mov	r20,zero
    3694:	002d883a 	mov	r22,zero
    3698:	dc001e04 	addi	r16,sp,120
    369c:	a006d0fa 	srli	r3,r20,3
    36a0:	b008977a 	slli	r4,r22,29
    36a4:	b02cd0fa 	srli	r22,r22,3
    36a8:	a50001cc 	andi	r20,r20,7
    36ac:	a0800c04 	addi	r2,r20,48
    36b0:	843fffc4 	addi	r16,r16,-1
    36b4:	20e8b03a 	or	r20,r4,r3
    36b8:	80800005 	stb	r2,0(r16)
    36bc:	a586b03a 	or	r3,r20,r22
    36c0:	183ff61e 	bne	r3,zero,369c <___svfprintf_internal_r+0x644>
    36c4:	90c0004c 	andi	r3,r18,1
    36c8:	18013926 	beq	r3,zero,3bb0 <___svfprintf_internal_r+0xb58>
    36cc:	10803fcc 	andi	r2,r2,255
    36d0:	1080201c 	xori	r2,r2,128
    36d4:	10bfe004 	addi	r2,r2,-128
    36d8:	00c00c04 	movi	r3,48
    36dc:	10c13426 	beq	r2,r3,3bb0 <___svfprintf_internal_r+0xb58>
    36e0:	80ffffc5 	stb	r3,-1(r16)
    36e4:	d8c02817 	ldw	r3,160(sp)
    36e8:	80bfffc4 	addi	r2,r16,-1
    36ec:	1021883a 	mov	r16,r2
    36f0:	1887c83a 	sub	r3,r3,r2
    36f4:	d8c02e15 	stw	r3,184(sp)
    36f8:	d8802e17 	ldw	r2,184(sp)
    36fc:	d9002917 	ldw	r4,164(sp)
    3700:	1100010e 	bge	r2,r4,3708 <___svfprintf_internal_r+0x6b0>
    3704:	2005883a 	mov	r2,r4
    3708:	d8802a15 	stw	r2,168(sp)
    370c:	d8003215 	stw	zero,200(sp)
    3710:	e7003fcc 	andi	fp,fp,255
    3714:	e700201c 	xori	fp,fp,128
    3718:	e73fe004 	addi	fp,fp,-128
    371c:	e0000326 	beq	fp,zero,372c <___svfprintf_internal_r+0x6d4>
    3720:	d8c02a17 	ldw	r3,168(sp)
    3724:	18c00044 	addi	r3,r3,1
    3728:	d8c02a15 	stw	r3,168(sp)
    372c:	90c0008c 	andi	r3,r18,2
    3730:	d8c02b15 	stw	r3,172(sp)
    3734:	18000326 	beq	r3,zero,3744 <___svfprintf_internal_r+0x6ec>
    3738:	d8c02a17 	ldw	r3,168(sp)
    373c:	18c00084 	addi	r3,r3,2
    3740:	d8c02a15 	stw	r3,168(sp)
    3744:	90c0210c 	andi	r3,r18,132
    3748:	d8c03015 	stw	r3,192(sp)
    374c:	1801a11e 	bne	r3,zero,3dd4 <___svfprintf_internal_r+0xd7c>
    3750:	d9003117 	ldw	r4,196(sp)
    3754:	d8c02a17 	ldw	r3,168(sp)
    3758:	20e9c83a 	sub	r20,r4,r3
    375c:	05019d0e 	bge	zero,r20,3dd4 <___svfprintf_internal_r+0xd7c>
    3760:	02400404 	movi	r9,16
    3764:	d8c02017 	ldw	r3,128(sp)
    3768:	d8801f17 	ldw	r2,124(sp)
    376c:	4d051b0e 	bge	r9,r20,4bdc <___svfprintf_internal_r+0x1b84>
    3770:	014000b4 	movhi	r5,2
    3774:	29519284 	addi	r5,r5,17994
    3778:	dc403c15 	stw	r17,240(sp)
    377c:	d9403515 	stw	r5,212(sp)
    3780:	a023883a 	mov	r17,r20
    3784:	482d883a 	mov	r22,r9
    3788:	9029883a 	mov	r20,r18
    378c:	070001c4 	movi	fp,7
    3790:	8025883a 	mov	r18,r16
    3794:	dc002c17 	ldw	r16,176(sp)
    3798:	00000306 	br	37a8 <___svfprintf_internal_r+0x750>
    379c:	8c7ffc04 	addi	r17,r17,-16
    37a0:	42000204 	addi	r8,r8,8
    37a4:	b440130e 	bge	r22,r17,37f4 <___svfprintf_internal_r+0x79c>
    37a8:	010000b4 	movhi	r4,2
    37ac:	18c00404 	addi	r3,r3,16
    37b0:	10800044 	addi	r2,r2,1
    37b4:	21119284 	addi	r4,r4,17994
    37b8:	41000015 	stw	r4,0(r8)
    37bc:	45800115 	stw	r22,4(r8)
    37c0:	d8c02015 	stw	r3,128(sp)
    37c4:	d8801f15 	stw	r2,124(sp)
    37c8:	e0bff40e 	bge	fp,r2,379c <___svfprintf_internal_r+0x744>
    37cc:	d9801e04 	addi	r6,sp,120
    37d0:	800b883a 	mov	r5,r16
    37d4:	9809883a 	mov	r4,r19
    37d8:	000bed00 	call	bed0 <__ssprint_r>
    37dc:	103f031e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    37e0:	8c7ffc04 	addi	r17,r17,-16
    37e4:	d8c02017 	ldw	r3,128(sp)
    37e8:	d8801f17 	ldw	r2,124(sp)
    37ec:	da000404 	addi	r8,sp,16
    37f0:	b47fed16 	blt	r22,r17,37a8 <___svfprintf_internal_r+0x750>
    37f4:	9021883a 	mov	r16,r18
    37f8:	a025883a 	mov	r18,r20
    37fc:	8829883a 	mov	r20,r17
    3800:	dc403c17 	ldw	r17,240(sp)
    3804:	d9403517 	ldw	r5,212(sp)
    3808:	a0c7883a 	add	r3,r20,r3
    380c:	10800044 	addi	r2,r2,1
    3810:	41400015 	stw	r5,0(r8)
    3814:	45000115 	stw	r20,4(r8)
    3818:	d8c02015 	stw	r3,128(sp)
    381c:	d8801f15 	stw	r2,124(sp)
    3820:	010001c4 	movi	r4,7
    3824:	20829f16 	blt	r4,r2,42a4 <___svfprintf_internal_r+0x124c>
    3828:	df002787 	ldb	fp,158(sp)
    382c:	42000204 	addi	r8,r8,8
    3830:	e0000c26 	beq	fp,zero,3864 <___svfprintf_internal_r+0x80c>
    3834:	d8801f17 	ldw	r2,124(sp)
    3838:	d9002784 	addi	r4,sp,158
    383c:	18c00044 	addi	r3,r3,1
    3840:	10800044 	addi	r2,r2,1
    3844:	41000015 	stw	r4,0(r8)
    3848:	01000044 	movi	r4,1
    384c:	41000115 	stw	r4,4(r8)
    3850:	d8c02015 	stw	r3,128(sp)
    3854:	d8801f15 	stw	r2,124(sp)
    3858:	010001c4 	movi	r4,7
    385c:	20823816 	blt	r4,r2,4140 <___svfprintf_internal_r+0x10e8>
    3860:	42000204 	addi	r8,r8,8
    3864:	d8802b17 	ldw	r2,172(sp)
    3868:	10000c26 	beq	r2,zero,389c <___svfprintf_internal_r+0x844>
    386c:	d8801f17 	ldw	r2,124(sp)
    3870:	d9002704 	addi	r4,sp,156
    3874:	18c00084 	addi	r3,r3,2
    3878:	10800044 	addi	r2,r2,1
    387c:	41000015 	stw	r4,0(r8)
    3880:	01000084 	movi	r4,2
    3884:	41000115 	stw	r4,4(r8)
    3888:	d8c02015 	stw	r3,128(sp)
    388c:	d8801f15 	stw	r2,124(sp)
    3890:	010001c4 	movi	r4,7
    3894:	20823216 	blt	r4,r2,4160 <___svfprintf_internal_r+0x1108>
    3898:	42000204 	addi	r8,r8,8
    389c:	d9003017 	ldw	r4,192(sp)
    38a0:	00802004 	movi	r2,128
    38a4:	20819726 	beq	r4,r2,3f04 <___svfprintf_internal_r+0xeac>
    38a8:	d9402917 	ldw	r5,164(sp)
    38ac:	d8802e17 	ldw	r2,184(sp)
    38b0:	28adc83a 	sub	r22,r5,r2
    38b4:	05802f0e 	bge	zero,r22,3974 <___svfprintf_internal_r+0x91c>
    38b8:	07000404 	movi	fp,16
    38bc:	d8801f17 	ldw	r2,124(sp)
    38c0:	e583c00e 	bge	fp,r22,47c4 <___svfprintf_internal_r+0x176c>
    38c4:	014000b4 	movhi	r5,2
    38c8:	29518e84 	addi	r5,r5,17978
    38cc:	dc402915 	stw	r17,164(sp)
    38d0:	d9402b15 	stw	r5,172(sp)
    38d4:	b023883a 	mov	r17,r22
    38d8:	050001c4 	movi	r20,7
    38dc:	902d883a 	mov	r22,r18
    38e0:	8025883a 	mov	r18,r16
    38e4:	dc002c17 	ldw	r16,176(sp)
    38e8:	00000306 	br	38f8 <___svfprintf_internal_r+0x8a0>
    38ec:	8c7ffc04 	addi	r17,r17,-16
    38f0:	42000204 	addi	r8,r8,8
    38f4:	e440110e 	bge	fp,r17,393c <___svfprintf_internal_r+0x8e4>
    38f8:	18c00404 	addi	r3,r3,16
    38fc:	10800044 	addi	r2,r2,1
    3900:	45400015 	stw	r21,0(r8)
    3904:	47000115 	stw	fp,4(r8)
    3908:	d8c02015 	stw	r3,128(sp)
    390c:	d8801f15 	stw	r2,124(sp)
    3910:	a0bff60e 	bge	r20,r2,38ec <___svfprintf_internal_r+0x894>
    3914:	d9801e04 	addi	r6,sp,120
    3918:	800b883a 	mov	r5,r16
    391c:	9809883a 	mov	r4,r19
    3920:	000bed00 	call	bed0 <__ssprint_r>
    3924:	103eb11e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    3928:	8c7ffc04 	addi	r17,r17,-16
    392c:	d8c02017 	ldw	r3,128(sp)
    3930:	d8801f17 	ldw	r2,124(sp)
    3934:	da000404 	addi	r8,sp,16
    3938:	e47fef16 	blt	fp,r17,38f8 <___svfprintf_internal_r+0x8a0>
    393c:	9021883a 	mov	r16,r18
    3940:	b025883a 	mov	r18,r22
    3944:	882d883a 	mov	r22,r17
    3948:	dc402917 	ldw	r17,164(sp)
    394c:	d9002b17 	ldw	r4,172(sp)
    3950:	1d87883a 	add	r3,r3,r22
    3954:	10800044 	addi	r2,r2,1
    3958:	41000015 	stw	r4,0(r8)
    395c:	45800115 	stw	r22,4(r8)
    3960:	d8c02015 	stw	r3,128(sp)
    3964:	d8801f15 	stw	r2,124(sp)
    3968:	010001c4 	movi	r4,7
    396c:	2081ec16 	blt	r4,r2,4120 <___svfprintf_internal_r+0x10c8>
    3970:	42000204 	addi	r8,r8,8
    3974:	9080400c 	andi	r2,r18,256
    3978:	1001181e 	bne	r2,zero,3ddc <___svfprintf_internal_r+0xd84>
    397c:	d9402e17 	ldw	r5,184(sp)
    3980:	d8801f17 	ldw	r2,124(sp)
    3984:	44000015 	stw	r16,0(r8)
    3988:	1947883a 	add	r3,r3,r5
    398c:	10800044 	addi	r2,r2,1
    3990:	41400115 	stw	r5,4(r8)
    3994:	d8c02015 	stw	r3,128(sp)
    3998:	d8801f15 	stw	r2,124(sp)
    399c:	010001c4 	movi	r4,7
    39a0:	2081d116 	blt	r4,r2,40e8 <___svfprintf_internal_r+0x1090>
    39a4:	42000204 	addi	r8,r8,8
    39a8:	9480010c 	andi	r18,r18,4
    39ac:	90003226 	beq	r18,zero,3a78 <___svfprintf_internal_r+0xa20>
    39b0:	d9403117 	ldw	r5,196(sp)
    39b4:	d8802a17 	ldw	r2,168(sp)
    39b8:	28a1c83a 	sub	r16,r5,r2
    39bc:	04002e0e 	bge	zero,r16,3a78 <___svfprintf_internal_r+0xa20>
    39c0:	04400404 	movi	r17,16
    39c4:	d8801f17 	ldw	r2,124(sp)
    39c8:	8c04b90e 	bge	r17,r16,4cb0 <___svfprintf_internal_r+0x1c58>
    39cc:	014000b4 	movhi	r5,2
    39d0:	29519284 	addi	r5,r5,17994
    39d4:	d9403515 	stw	r5,212(sp)
    39d8:	048001c4 	movi	r18,7
    39dc:	dd002c17 	ldw	r20,176(sp)
    39e0:	00000306 	br	39f0 <___svfprintf_internal_r+0x998>
    39e4:	843ffc04 	addi	r16,r16,-16
    39e8:	42000204 	addi	r8,r8,8
    39ec:	8c00130e 	bge	r17,r16,3a3c <___svfprintf_internal_r+0x9e4>
    39f0:	010000b4 	movhi	r4,2
    39f4:	18c00404 	addi	r3,r3,16
    39f8:	10800044 	addi	r2,r2,1
    39fc:	21119284 	addi	r4,r4,17994
    3a00:	41000015 	stw	r4,0(r8)
    3a04:	44400115 	stw	r17,4(r8)
    3a08:	d8c02015 	stw	r3,128(sp)
    3a0c:	d8801f15 	stw	r2,124(sp)
    3a10:	90bff40e 	bge	r18,r2,39e4 <___svfprintf_internal_r+0x98c>
    3a14:	d9801e04 	addi	r6,sp,120
    3a18:	a00b883a 	mov	r5,r20
    3a1c:	9809883a 	mov	r4,r19
    3a20:	000bed00 	call	bed0 <__ssprint_r>
    3a24:	103e711e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    3a28:	843ffc04 	addi	r16,r16,-16
    3a2c:	d8c02017 	ldw	r3,128(sp)
    3a30:	d8801f17 	ldw	r2,124(sp)
    3a34:	da000404 	addi	r8,sp,16
    3a38:	8c3fed16 	blt	r17,r16,39f0 <___svfprintf_internal_r+0x998>
    3a3c:	d9403517 	ldw	r5,212(sp)
    3a40:	1c07883a 	add	r3,r3,r16
    3a44:	10800044 	addi	r2,r2,1
    3a48:	41400015 	stw	r5,0(r8)
    3a4c:	44000115 	stw	r16,4(r8)
    3a50:	d8c02015 	stw	r3,128(sp)
    3a54:	d8801f15 	stw	r2,124(sp)
    3a58:	010001c4 	movi	r4,7
    3a5c:	2080060e 	bge	r4,r2,3a78 <___svfprintf_internal_r+0xa20>
    3a60:	d9402c17 	ldw	r5,176(sp)
    3a64:	d9801e04 	addi	r6,sp,120
    3a68:	9809883a 	mov	r4,r19
    3a6c:	000bed00 	call	bed0 <__ssprint_r>
    3a70:	103e5e1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    3a74:	d8c02017 	ldw	r3,128(sp)
    3a78:	d8803117 	ldw	r2,196(sp)
    3a7c:	d9002a17 	ldw	r4,168(sp)
    3a80:	1100010e 	bge	r2,r4,3a88 <___svfprintf_internal_r+0xa30>
    3a84:	2005883a 	mov	r2,r4
    3a88:	d9402f17 	ldw	r5,188(sp)
    3a8c:	288b883a 	add	r5,r5,r2
    3a90:	d9402f15 	stw	r5,188(sp)
    3a94:	18019c1e 	bne	r3,zero,4108 <___svfprintf_internal_r+0x10b0>
    3a98:	b8800007 	ldb	r2,0(r23)
    3a9c:	d8001f15 	stw	zero,124(sp)
    3aa0:	da000404 	addi	r8,sp,16
    3aa4:	103d991e 	bne	r2,zero,310c <___svfprintf_internal_r+0xb4>
    3aa8:	b821883a 	mov	r16,r23
    3aac:	003daf06 	br	316c <___svfprintf_internal_r+0x114>
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	1805c71e 	bne	r3,zero,51d4 <___svfprintf_internal_r+0x217c>
    3ab8:	94800414 	ori	r18,r18,16
    3abc:	9080080c 	andi	r2,r18,32
    3ac0:	10020126 	beq	r2,zero,42c8 <___svfprintf_internal_r+0x1270>
    3ac4:	d8802d17 	ldw	r2,180(sp)
    3ac8:	d9002917 	ldw	r4,164(sp)
    3acc:	d8002785 	stb	zero,158(sp)
    3ad0:	10c00204 	addi	r3,r2,8
    3ad4:	15000017 	ldw	r20,0(r2)
    3ad8:	15800117 	ldw	r22,4(r2)
    3adc:	20038e16 	blt	r4,zero,4918 <___svfprintf_internal_r+0x18c0>
    3ae0:	013fdfc4 	movi	r4,-129
    3ae4:	a584b03a 	or	r2,r20,r22
    3ae8:	d8c02d15 	stw	r3,180(sp)
    3aec:	9124703a 	and	r18,r18,r4
    3af0:	0039883a 	mov	fp,zero
    3af4:	103eb61e 	bne	r2,zero,35d0 <___svfprintf_internal_r+0x578>
    3af8:	d8802917 	ldw	r2,164(sp)
    3afc:	1002c81e 	bne	r2,zero,4620 <___svfprintf_internal_r+0x15c8>
    3b00:	d8002915 	stw	zero,164(sp)
    3b04:	d8002e15 	stw	zero,184(sp)
    3b08:	dc001e04 	addi	r16,sp,120
    3b0c:	003efa06 	br	36f8 <___svfprintf_internal_r+0x6a0>
    3b10:	18c03fcc 	andi	r3,r3,255
    3b14:	1805ad1e 	bne	r3,zero,51cc <___svfprintf_internal_r+0x2174>
    3b18:	014000b4 	movhi	r5,2
    3b1c:	29518204 	addi	r5,r5,17928
    3b20:	d9403a15 	stw	r5,232(sp)
    3b24:	9080080c 	andi	r2,r18,32
    3b28:	10006126 	beq	r2,zero,3cb0 <___svfprintf_internal_r+0xc58>
    3b2c:	d8802d17 	ldw	r2,180(sp)
    3b30:	15000017 	ldw	r20,0(r2)
    3b34:	15800117 	ldw	r22,4(r2)
    3b38:	10800204 	addi	r2,r2,8
    3b3c:	d8802d15 	stw	r2,180(sp)
    3b40:	9080004c 	andi	r2,r18,1
    3b44:	10018e26 	beq	r2,zero,4180 <___svfprintf_internal_r+0x1128>
    3b48:	a584b03a 	or	r2,r20,r22
    3b4c:	10030926 	beq	r2,zero,4774 <___svfprintf_internal_r+0x171c>
    3b50:	d8c02917 	ldw	r3,164(sp)
    3b54:	00800c04 	movi	r2,48
    3b58:	d8802705 	stb	r2,156(sp)
    3b5c:	dc402745 	stb	r17,157(sp)
    3b60:	d8002785 	stb	zero,158(sp)
    3b64:	90800094 	ori	r2,r18,2
    3b68:	18048716 	blt	r3,zero,4d88 <___svfprintf_internal_r+0x1d30>
    3b6c:	00bfdfc4 	movi	r2,-129
    3b70:	90a4703a 	and	r18,r18,r2
    3b74:	94800094 	ori	r18,r18,2
    3b78:	0039883a 	mov	fp,zero
    3b7c:	d9003a17 	ldw	r4,232(sp)
    3b80:	dc001e04 	addi	r16,sp,120
    3b84:	a08003cc 	andi	r2,r20,15
    3b88:	b006973a 	slli	r3,r22,28
    3b8c:	2085883a 	add	r2,r4,r2
    3b90:	a028d13a 	srli	r20,r20,4
    3b94:	10800003 	ldbu	r2,0(r2)
    3b98:	b02cd13a 	srli	r22,r22,4
    3b9c:	843fffc4 	addi	r16,r16,-1
    3ba0:	1d28b03a 	or	r20,r3,r20
    3ba4:	80800005 	stb	r2,0(r16)
    3ba8:	a584b03a 	or	r2,r20,r22
    3bac:	103ff51e 	bne	r2,zero,3b84 <___svfprintf_internal_r+0xb2c>
    3bb0:	d8c02817 	ldw	r3,160(sp)
    3bb4:	1c07c83a 	sub	r3,r3,r16
    3bb8:	d8c02e15 	stw	r3,184(sp)
    3bbc:	003ece06 	br	36f8 <___svfprintf_internal_r+0x6a0>
    3bc0:	d8c02d17 	ldw	r3,180(sp)
    3bc4:	d9002d17 	ldw	r4,180(sp)
    3bc8:	d8002785 	stb	zero,158(sp)
    3bcc:	18800017 	ldw	r2,0(r3)
    3bd0:	21000104 	addi	r4,r4,4
    3bd4:	00c00044 	movi	r3,1
    3bd8:	d8c02a15 	stw	r3,168(sp)
    3bdc:	d8801405 	stb	r2,80(sp)
    3be0:	d9002d15 	stw	r4,180(sp)
    3be4:	d8c02e15 	stw	r3,184(sp)
    3be8:	d8002915 	stw	zero,164(sp)
    3bec:	d8003215 	stw	zero,200(sp)
    3bf0:	dc001404 	addi	r16,sp,80
    3bf4:	0039883a 	mov	fp,zero
    3bf8:	003ecc06 	br	372c <___svfprintf_internal_r+0x6d4>
    3bfc:	18c03fcc 	andi	r3,r3,255
    3c00:	183e9226 	beq	r3,zero,364c <___svfprintf_internal_r+0x5f4>
    3c04:	d9c02785 	stb	r7,158(sp)
    3c08:	003e9006 	br	364c <___svfprintf_internal_r+0x5f4>
    3c0c:	00c00044 	movi	r3,1
    3c10:	01c00ac4 	movi	r7,43
    3c14:	bc400007 	ldb	r17,0(r23)
    3c18:	003d6306 	br	31a8 <___svfprintf_internal_r+0x150>
    3c1c:	94800814 	ori	r18,r18,32
    3c20:	bc400007 	ldb	r17,0(r23)
    3c24:	003d6006 	br	31a8 <___svfprintf_internal_r+0x150>
    3c28:	d8c02d17 	ldw	r3,180(sp)
    3c2c:	d8002785 	stb	zero,158(sp)
    3c30:	1c000017 	ldw	r16,0(r3)
    3c34:	1d000104 	addi	r20,r3,4
    3c38:	80040f26 	beq	r16,zero,4c78 <___svfprintf_internal_r+0x1c20>
    3c3c:	d9002917 	ldw	r4,164(sp)
    3c40:	2003dc16 	blt	r4,zero,4bb4 <___svfprintf_internal_r+0x1b5c>
    3c44:	200d883a 	mov	r6,r4
    3c48:	000b883a 	mov	r5,zero
    3c4c:	8009883a 	mov	r4,r16
    3c50:	da003e15 	stw	r8,248(sp)
    3c54:	000a2340 	call	a234 <memchr>
    3c58:	da003e17 	ldw	r8,248(sp)
    3c5c:	10045826 	beq	r2,zero,4dc0 <___svfprintf_internal_r+0x1d68>
    3c60:	1405c83a 	sub	r2,r2,r16
    3c64:	d8802e15 	stw	r2,184(sp)
    3c68:	1003d816 	blt	r2,zero,4bcc <___svfprintf_internal_r+0x1b74>
    3c6c:	df002783 	ldbu	fp,158(sp)
    3c70:	d8802a15 	stw	r2,168(sp)
    3c74:	dd002d15 	stw	r20,180(sp)
    3c78:	d8002915 	stw	zero,164(sp)
    3c7c:	d8003215 	stw	zero,200(sp)
    3c80:	003ea306 	br	3710 <___svfprintf_internal_r+0x6b8>
    3c84:	18c03fcc 	andi	r3,r3,255
    3c88:	183f8c26 	beq	r3,zero,3abc <___svfprintf_internal_r+0xa64>
    3c8c:	d9c02785 	stb	r7,158(sp)
    3c90:	003f8a06 	br	3abc <___svfprintf_internal_r+0xa64>
    3c94:	18c03fcc 	andi	r3,r3,255
    3c98:	1805631e 	bne	r3,zero,5228 <___svfprintf_internal_r+0x21d0>
    3c9c:	014000b4 	movhi	r5,2
    3ca0:	29518704 	addi	r5,r5,17948
    3ca4:	d9403a15 	stw	r5,232(sp)
    3ca8:	9080080c 	andi	r2,r18,32
    3cac:	103f9f1e 	bne	r2,zero,3b2c <___svfprintf_internal_r+0xad4>
    3cb0:	9080040c 	andi	r2,r18,16
    3cb4:	10029c26 	beq	r2,zero,4728 <___svfprintf_internal_r+0x16d0>
    3cb8:	d8c02d17 	ldw	r3,180(sp)
    3cbc:	002d883a 	mov	r22,zero
    3cc0:	1d000017 	ldw	r20,0(r3)
    3cc4:	18c00104 	addi	r3,r3,4
    3cc8:	d8c02d15 	stw	r3,180(sp)
    3ccc:	003f9c06 	br	3b40 <___svfprintf_internal_r+0xae8>
    3cd0:	94800054 	ori	r18,r18,1
    3cd4:	bc400007 	ldb	r17,0(r23)
    3cd8:	003d3306 	br	31a8 <___svfprintf_internal_r+0x150>
    3cdc:	38803fcc 	andi	r2,r7,255
    3ce0:	1080201c 	xori	r2,r2,128
    3ce4:	10bfe004 	addi	r2,r2,-128
    3ce8:	1002971e 	bne	r2,zero,4748 <___svfprintf_internal_r+0x16f0>
    3cec:	00c00044 	movi	r3,1
    3cf0:	01c00804 	movi	r7,32
    3cf4:	bc400007 	ldb	r17,0(r23)
    3cf8:	003d2b06 	br	31a8 <___svfprintf_internal_r+0x150>
    3cfc:	18c03fcc 	andi	r3,r3,255
    3d00:	183e2326 	beq	r3,zero,3590 <___svfprintf_internal_r+0x538>
    3d04:	d9c02785 	stb	r7,158(sp)
    3d08:	003e2106 	br	3590 <___svfprintf_internal_r+0x538>
    3d0c:	bc400007 	ldb	r17,0(r23)
    3d10:	8a430426 	beq	r17,r9,4924 <___svfprintf_internal_r+0x18cc>
    3d14:	94800414 	ori	r18,r18,16
    3d18:	003d2306 	br	31a8 <___svfprintf_internal_r+0x150>
    3d1c:	18c03fcc 	andi	r3,r3,255
    3d20:	18053f1e 	bne	r3,zero,5220 <___svfprintf_internal_r+0x21c8>
    3d24:	9080080c 	andi	r2,r18,32
    3d28:	10028926 	beq	r2,zero,4750 <___svfprintf_internal_r+0x16f8>
    3d2c:	d9402d17 	ldw	r5,180(sp)
    3d30:	d9002f17 	ldw	r4,188(sp)
    3d34:	28800017 	ldw	r2,0(r5)
    3d38:	2007d7fa 	srai	r3,r4,31
    3d3c:	29400104 	addi	r5,r5,4
    3d40:	d9402d15 	stw	r5,180(sp)
    3d44:	11000015 	stw	r4,0(r2)
    3d48:	10c00115 	stw	r3,4(r2)
    3d4c:	003ced06 	br	3104 <___svfprintf_internal_r+0xac>
    3d50:	94801014 	ori	r18,r18,64
    3d54:	bc400007 	ldb	r17,0(r23)
    3d58:	003d1306 	br	31a8 <___svfprintf_internal_r+0x150>
    3d5c:	010000b4 	movhi	r4,2
    3d60:	21118704 	addi	r4,r4,17948
    3d64:	0039883a 	mov	fp,zero
    3d68:	d9003a15 	stw	r4,232(sp)
    3d6c:	04401e04 	movi	r17,120
    3d70:	003f8206 	br	3b7c <___svfprintf_internal_r+0xb24>
    3d74:	18c03fcc 	andi	r3,r3,255
    3d78:	1805221e 	bne	r3,zero,5204 <___svfprintf_internal_r+0x21ac>
    3d7c:	883d9526 	beq	r17,zero,33d4 <___svfprintf_internal_r+0x37c>
    3d80:	00c00044 	movi	r3,1
    3d84:	d8c02a15 	stw	r3,168(sp)
    3d88:	dc401405 	stb	r17,80(sp)
    3d8c:	d8002785 	stb	zero,158(sp)
    3d90:	003f9406 	br	3be4 <___svfprintf_internal_r+0xb8c>
    3d94:	010000b4 	movhi	r4,2
    3d98:	21118704 	addi	r4,r4,17948
    3d9c:	d9003a15 	stw	r4,232(sp)
    3da0:	d8c02d15 	stw	r3,180(sp)
    3da4:	1025883a 	mov	r18,r2
    3da8:	04401e04 	movi	r17,120
    3dac:	a584b03a 	or	r2,r20,r22
    3db0:	1000fa1e 	bne	r2,zero,419c <___svfprintf_internal_r+0x1144>
    3db4:	0039883a 	mov	fp,zero
    3db8:	00800084 	movi	r2,2
    3dbc:	10803fcc 	andi	r2,r2,255
    3dc0:	00c00044 	movi	r3,1
    3dc4:	10c21626 	beq	r2,r3,4620 <___svfprintf_internal_r+0x15c8>
    3dc8:	00c00084 	movi	r3,2
    3dcc:	10fe301e 	bne	r2,r3,3690 <___svfprintf_internal_r+0x638>
    3dd0:	003d7606 	br	33ac <___svfprintf_internal_r+0x354>
    3dd4:	d8c02017 	ldw	r3,128(sp)
    3dd8:	003e9506 	br	3830 <___svfprintf_internal_r+0x7d8>
    3ddc:	00801944 	movi	r2,101
    3de0:	14407c0e 	bge	r2,r17,3fd4 <___svfprintf_internal_r+0xf7c>
    3de4:	d9003617 	ldw	r4,216(sp)
    3de8:	d9403717 	ldw	r5,220(sp)
    3dec:	000d883a 	mov	r6,zero
    3df0:	000f883a 	mov	r7,zero
    3df4:	d8c03d15 	stw	r3,244(sp)
    3df8:	da003e15 	stw	r8,248(sp)
    3dfc:	00110500 	call	11050 <__eqdf2>
    3e00:	d8c03d17 	ldw	r3,244(sp)
    3e04:	da003e17 	ldw	r8,248(sp)
    3e08:	1000f51e 	bne	r2,zero,41e0 <___svfprintf_internal_r+0x1188>
    3e0c:	d8801f17 	ldw	r2,124(sp)
    3e10:	010000b4 	movhi	r4,2
    3e14:	21118e04 	addi	r4,r4,17976
    3e18:	18c00044 	addi	r3,r3,1
    3e1c:	10800044 	addi	r2,r2,1
    3e20:	41000015 	stw	r4,0(r8)
    3e24:	01000044 	movi	r4,1
    3e28:	41000115 	stw	r4,4(r8)
    3e2c:	d8c02015 	stw	r3,128(sp)
    3e30:	d8801f15 	stw	r2,124(sp)
    3e34:	010001c4 	movi	r4,7
    3e38:	20826616 	blt	r4,r2,47d4 <___svfprintf_internal_r+0x177c>
    3e3c:	42000204 	addi	r8,r8,8
    3e40:	d8802617 	ldw	r2,152(sp)
    3e44:	d9403317 	ldw	r5,204(sp)
    3e48:	11400216 	blt	r2,r5,3e54 <___svfprintf_internal_r+0xdfc>
    3e4c:	9080004c 	andi	r2,r18,1
    3e50:	103ed526 	beq	r2,zero,39a8 <___svfprintf_internal_r+0x950>
    3e54:	d8803817 	ldw	r2,224(sp)
    3e58:	d9003417 	ldw	r4,208(sp)
    3e5c:	d9403817 	ldw	r5,224(sp)
    3e60:	1887883a 	add	r3,r3,r2
    3e64:	d8801f17 	ldw	r2,124(sp)
    3e68:	41000015 	stw	r4,0(r8)
    3e6c:	41400115 	stw	r5,4(r8)
    3e70:	10800044 	addi	r2,r2,1
    3e74:	d8c02015 	stw	r3,128(sp)
    3e78:	d8801f15 	stw	r2,124(sp)
    3e7c:	010001c4 	movi	r4,7
    3e80:	2082af16 	blt	r4,r2,4940 <___svfprintf_internal_r+0x18e8>
    3e84:	42000204 	addi	r8,r8,8
    3e88:	d8803317 	ldw	r2,204(sp)
    3e8c:	143fffc4 	addi	r16,r2,-1
    3e90:	043ec50e 	bge	zero,r16,39a8 <___svfprintf_internal_r+0x950>
    3e94:	04400404 	movi	r17,16
    3e98:	d8801f17 	ldw	r2,124(sp)
    3e9c:	8c00860e 	bge	r17,r16,40b8 <___svfprintf_internal_r+0x1060>
    3ea0:	014000b4 	movhi	r5,2
    3ea4:	29518e84 	addi	r5,r5,17978
    3ea8:	d9402b15 	stw	r5,172(sp)
    3eac:	058001c4 	movi	r22,7
    3eb0:	dd002c17 	ldw	r20,176(sp)
    3eb4:	00000306 	br	3ec4 <___svfprintf_internal_r+0xe6c>
    3eb8:	42000204 	addi	r8,r8,8
    3ebc:	843ffc04 	addi	r16,r16,-16
    3ec0:	8c00800e 	bge	r17,r16,40c4 <___svfprintf_internal_r+0x106c>
    3ec4:	18c00404 	addi	r3,r3,16
    3ec8:	10800044 	addi	r2,r2,1
    3ecc:	45400015 	stw	r21,0(r8)
    3ed0:	44400115 	stw	r17,4(r8)
    3ed4:	d8c02015 	stw	r3,128(sp)
    3ed8:	d8801f15 	stw	r2,124(sp)
    3edc:	b0bff60e 	bge	r22,r2,3eb8 <___svfprintf_internal_r+0xe60>
    3ee0:	d9801e04 	addi	r6,sp,120
    3ee4:	a00b883a 	mov	r5,r20
    3ee8:	9809883a 	mov	r4,r19
    3eec:	000bed00 	call	bed0 <__ssprint_r>
    3ef0:	103d3e1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    3ef4:	d8c02017 	ldw	r3,128(sp)
    3ef8:	d8801f17 	ldw	r2,124(sp)
    3efc:	da000404 	addi	r8,sp,16
    3f00:	003fee06 	br	3ebc <___svfprintf_internal_r+0xe64>
    3f04:	d9403117 	ldw	r5,196(sp)
    3f08:	d8802a17 	ldw	r2,168(sp)
    3f0c:	28adc83a 	sub	r22,r5,r2
    3f10:	05be650e 	bge	zero,r22,38a8 <___svfprintf_internal_r+0x850>
    3f14:	07000404 	movi	fp,16
    3f18:	d8801f17 	ldw	r2,124(sp)
    3f1c:	e583a20e 	bge	fp,r22,4da8 <___svfprintf_internal_r+0x1d50>
    3f20:	014000b4 	movhi	r5,2
    3f24:	29518e84 	addi	r5,r5,17978
    3f28:	dc403015 	stw	r17,192(sp)
    3f2c:	d9402b15 	stw	r5,172(sp)
    3f30:	b023883a 	mov	r17,r22
    3f34:	050001c4 	movi	r20,7
    3f38:	902d883a 	mov	r22,r18
    3f3c:	8025883a 	mov	r18,r16
    3f40:	dc002c17 	ldw	r16,176(sp)
    3f44:	00000306 	br	3f54 <___svfprintf_internal_r+0xefc>
    3f48:	8c7ffc04 	addi	r17,r17,-16
    3f4c:	42000204 	addi	r8,r8,8
    3f50:	e440110e 	bge	fp,r17,3f98 <___svfprintf_internal_r+0xf40>
    3f54:	18c00404 	addi	r3,r3,16
    3f58:	10800044 	addi	r2,r2,1
    3f5c:	45400015 	stw	r21,0(r8)
    3f60:	47000115 	stw	fp,4(r8)
    3f64:	d8c02015 	stw	r3,128(sp)
    3f68:	d8801f15 	stw	r2,124(sp)
    3f6c:	a0bff60e 	bge	r20,r2,3f48 <___svfprintf_internal_r+0xef0>
    3f70:	d9801e04 	addi	r6,sp,120
    3f74:	800b883a 	mov	r5,r16
    3f78:	9809883a 	mov	r4,r19
    3f7c:	000bed00 	call	bed0 <__ssprint_r>
    3f80:	103d1a1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    3f84:	8c7ffc04 	addi	r17,r17,-16
    3f88:	d8c02017 	ldw	r3,128(sp)
    3f8c:	d8801f17 	ldw	r2,124(sp)
    3f90:	da000404 	addi	r8,sp,16
    3f94:	e47fef16 	blt	fp,r17,3f54 <___svfprintf_internal_r+0xefc>
    3f98:	9021883a 	mov	r16,r18
    3f9c:	b025883a 	mov	r18,r22
    3fa0:	882d883a 	mov	r22,r17
    3fa4:	dc403017 	ldw	r17,192(sp)
    3fa8:	d9002b17 	ldw	r4,172(sp)
    3fac:	1d87883a 	add	r3,r3,r22
    3fb0:	10800044 	addi	r2,r2,1
    3fb4:	41000015 	stw	r4,0(r8)
    3fb8:	45800115 	stw	r22,4(r8)
    3fbc:	d8c02015 	stw	r3,128(sp)
    3fc0:	d8801f15 	stw	r2,124(sp)
    3fc4:	010001c4 	movi	r4,7
    3fc8:	20819a16 	blt	r4,r2,4634 <___svfprintf_internal_r+0x15dc>
    3fcc:	42000204 	addi	r8,r8,8
    3fd0:	003e3506 	br	38a8 <___svfprintf_internal_r+0x850>
    3fd4:	d9403317 	ldw	r5,204(sp)
    3fd8:	00800044 	movi	r2,1
    3fdc:	18c00044 	addi	r3,r3,1
    3fe0:	1141710e 	bge	r2,r5,45a8 <___svfprintf_internal_r+0x1550>
    3fe4:	dc401f17 	ldw	r17,124(sp)
    3fe8:	00800044 	movi	r2,1
    3fec:	40800115 	stw	r2,4(r8)
    3ff0:	8c400044 	addi	r17,r17,1
    3ff4:	44000015 	stw	r16,0(r8)
    3ff8:	d8c02015 	stw	r3,128(sp)
    3ffc:	dc401f15 	stw	r17,124(sp)
    4000:	008001c4 	movi	r2,7
    4004:	14417416 	blt	r2,r17,45d8 <___svfprintf_internal_r+0x1580>
    4008:	42000204 	addi	r8,r8,8
    400c:	d8803817 	ldw	r2,224(sp)
    4010:	d9003417 	ldw	r4,208(sp)
    4014:	8c400044 	addi	r17,r17,1
    4018:	10c7883a 	add	r3,r2,r3
    401c:	40800115 	stw	r2,4(r8)
    4020:	41000015 	stw	r4,0(r8)
    4024:	d8c02015 	stw	r3,128(sp)
    4028:	dc401f15 	stw	r17,124(sp)
    402c:	008001c4 	movi	r2,7
    4030:	14417216 	blt	r2,r17,45fc <___svfprintf_internal_r+0x15a4>
    4034:	45800204 	addi	r22,r8,8
    4038:	d9003617 	ldw	r4,216(sp)
    403c:	d9403717 	ldw	r5,220(sp)
    4040:	000d883a 	mov	r6,zero
    4044:	000f883a 	mov	r7,zero
    4048:	d8c03d15 	stw	r3,244(sp)
    404c:	00110500 	call	11050 <__eqdf2>
    4050:	d8c03d17 	ldw	r3,244(sp)
    4054:	1000b326 	beq	r2,zero,4324 <___svfprintf_internal_r+0x12cc>
    4058:	d9403317 	ldw	r5,204(sp)
    405c:	84000044 	addi	r16,r16,1
    4060:	8c400044 	addi	r17,r17,1
    4064:	28bfffc4 	addi	r2,r5,-1
    4068:	1887883a 	add	r3,r3,r2
    406c:	b0800115 	stw	r2,4(r22)
    4070:	b4000015 	stw	r16,0(r22)
    4074:	d8c02015 	stw	r3,128(sp)
    4078:	dc401f15 	stw	r17,124(sp)
    407c:	008001c4 	movi	r2,7
    4080:	1440d216 	blt	r2,r17,43cc <___svfprintf_internal_r+0x1374>
    4084:	b5800204 	addi	r22,r22,8
    4088:	d9003b17 	ldw	r4,236(sp)
    408c:	df0022c4 	addi	fp,sp,139
    4090:	8c400044 	addi	r17,r17,1
    4094:	20c7883a 	add	r3,r4,r3
    4098:	b7000015 	stw	fp,0(r22)
    409c:	b1000115 	stw	r4,4(r22)
    40a0:	d8c02015 	stw	r3,128(sp)
    40a4:	dc401f15 	stw	r17,124(sp)
    40a8:	008001c4 	movi	r2,7
    40ac:	14400e16 	blt	r2,r17,40e8 <___svfprintf_internal_r+0x1090>
    40b0:	b2000204 	addi	r8,r22,8
    40b4:	003e3c06 	br	39a8 <___svfprintf_internal_r+0x950>
    40b8:	010000b4 	movhi	r4,2
    40bc:	21118e84 	addi	r4,r4,17978
    40c0:	d9002b15 	stw	r4,172(sp)
    40c4:	d9002b17 	ldw	r4,172(sp)
    40c8:	1c07883a 	add	r3,r3,r16
    40cc:	44000115 	stw	r16,4(r8)
    40d0:	41000015 	stw	r4,0(r8)
    40d4:	10800044 	addi	r2,r2,1
    40d8:	d8c02015 	stw	r3,128(sp)
    40dc:	d8801f15 	stw	r2,124(sp)
    40e0:	010001c4 	movi	r4,7
    40e4:	20be2f0e 	bge	r4,r2,39a4 <___svfprintf_internal_r+0x94c>
    40e8:	d9402c17 	ldw	r5,176(sp)
    40ec:	d9801e04 	addi	r6,sp,120
    40f0:	9809883a 	mov	r4,r19
    40f4:	000bed00 	call	bed0 <__ssprint_r>
    40f8:	103cbc1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    40fc:	d8c02017 	ldw	r3,128(sp)
    4100:	da000404 	addi	r8,sp,16
    4104:	003e2806 	br	39a8 <___svfprintf_internal_r+0x950>
    4108:	d9402c17 	ldw	r5,176(sp)
    410c:	d9801e04 	addi	r6,sp,120
    4110:	9809883a 	mov	r4,r19
    4114:	000bed00 	call	bed0 <__ssprint_r>
    4118:	103e5f26 	beq	r2,zero,3a98 <___svfprintf_internal_r+0xa40>
    411c:	003cb306 	br	33ec <___svfprintf_internal_r+0x394>
    4120:	d9402c17 	ldw	r5,176(sp)
    4124:	d9801e04 	addi	r6,sp,120
    4128:	9809883a 	mov	r4,r19
    412c:	000bed00 	call	bed0 <__ssprint_r>
    4130:	103cae1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4134:	d8c02017 	ldw	r3,128(sp)
    4138:	da000404 	addi	r8,sp,16
    413c:	003e0d06 	br	3974 <___svfprintf_internal_r+0x91c>
    4140:	d9402c17 	ldw	r5,176(sp)
    4144:	d9801e04 	addi	r6,sp,120
    4148:	9809883a 	mov	r4,r19
    414c:	000bed00 	call	bed0 <__ssprint_r>
    4150:	103ca61e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4154:	d8c02017 	ldw	r3,128(sp)
    4158:	da000404 	addi	r8,sp,16
    415c:	003dc106 	br	3864 <___svfprintf_internal_r+0x80c>
    4160:	d9402c17 	ldw	r5,176(sp)
    4164:	d9801e04 	addi	r6,sp,120
    4168:	9809883a 	mov	r4,r19
    416c:	000bed00 	call	bed0 <__ssprint_r>
    4170:	103c9e1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4174:	d8c02017 	ldw	r3,128(sp)
    4178:	da000404 	addi	r8,sp,16
    417c:	003dc706 	br	389c <___svfprintf_internal_r+0x844>
    4180:	d8802917 	ldw	r2,164(sp)
    4184:	d8002785 	stb	zero,158(sp)
    4188:	103f0816 	blt	r2,zero,3dac <___svfprintf_internal_r+0xd54>
    418c:	00ffdfc4 	movi	r3,-129
    4190:	a584b03a 	or	r2,r20,r22
    4194:	90e4703a 	and	r18,r18,r3
    4198:	103c8126 	beq	r2,zero,33a0 <___svfprintf_internal_r+0x348>
    419c:	0039883a 	mov	fp,zero
    41a0:	003e7606 	br	3b7c <___svfprintf_internal_r+0xb24>
    41a4:	9080040c 	andi	r2,r18,16
    41a8:	10013d26 	beq	r2,zero,46a0 <___svfprintf_internal_r+0x1648>
    41ac:	d9002d17 	ldw	r4,180(sp)
    41b0:	d9402917 	ldw	r5,164(sp)
    41b4:	d8002785 	stb	zero,158(sp)
    41b8:	20800104 	addi	r2,r4,4
    41bc:	25000017 	ldw	r20,0(r4)
    41c0:	002d883a 	mov	r22,zero
    41c4:	28013f16 	blt	r5,zero,46c4 <___svfprintf_internal_r+0x166c>
    41c8:	00ffdfc4 	movi	r3,-129
    41cc:	d8802d15 	stw	r2,180(sp)
    41d0:	90e4703a 	and	r18,r18,r3
    41d4:	a03d2b26 	beq	r20,zero,3684 <___svfprintf_internal_r+0x62c>
    41d8:	0039883a 	mov	fp,zero
    41dc:	003d2e06 	br	3698 <___svfprintf_internal_r+0x640>
    41e0:	dc402617 	ldw	r17,152(sp)
    41e4:	0441830e 	bge	zero,r17,47f4 <___svfprintf_internal_r+0x179c>
    41e8:	dc403217 	ldw	r17,200(sp)
    41ec:	d8803317 	ldw	r2,204(sp)
    41f0:	1440010e 	bge	r2,r17,41f8 <___svfprintf_internal_r+0x11a0>
    41f4:	1023883a 	mov	r17,r2
    41f8:	04400a0e 	bge	zero,r17,4224 <___svfprintf_internal_r+0x11cc>
    41fc:	d8801f17 	ldw	r2,124(sp)
    4200:	1c47883a 	add	r3,r3,r17
    4204:	44000015 	stw	r16,0(r8)
    4208:	10800044 	addi	r2,r2,1
    420c:	44400115 	stw	r17,4(r8)
    4210:	d8c02015 	stw	r3,128(sp)
    4214:	d8801f15 	stw	r2,124(sp)
    4218:	010001c4 	movi	r4,7
    421c:	20827516 	blt	r4,r2,4bf4 <___svfprintf_internal_r+0x1b9c>
    4220:	42000204 	addi	r8,r8,8
    4224:	88027b16 	blt	r17,zero,4c14 <___svfprintf_internal_r+0x1bbc>
    4228:	d9003217 	ldw	r4,200(sp)
    422c:	2463c83a 	sub	r17,r4,r17
    4230:	0440990e 	bge	zero,r17,4498 <___svfprintf_internal_r+0x1440>
    4234:	05800404 	movi	r22,16
    4238:	d8801f17 	ldw	r2,124(sp)
    423c:	b441530e 	bge	r22,r17,478c <___svfprintf_internal_r+0x1734>
    4240:	010000b4 	movhi	r4,2
    4244:	21118e84 	addi	r4,r4,17978
    4248:	d9002b15 	stw	r4,172(sp)
    424c:	070001c4 	movi	fp,7
    4250:	dd002c17 	ldw	r20,176(sp)
    4254:	00000306 	br	4264 <___svfprintf_internal_r+0x120c>
    4258:	42000204 	addi	r8,r8,8
    425c:	8c7ffc04 	addi	r17,r17,-16
    4260:	b4414d0e 	bge	r22,r17,4798 <___svfprintf_internal_r+0x1740>
    4264:	18c00404 	addi	r3,r3,16
    4268:	10800044 	addi	r2,r2,1
    426c:	45400015 	stw	r21,0(r8)
    4270:	45800115 	stw	r22,4(r8)
    4274:	d8c02015 	stw	r3,128(sp)
    4278:	d8801f15 	stw	r2,124(sp)
    427c:	e0bff60e 	bge	fp,r2,4258 <___svfprintf_internal_r+0x1200>
    4280:	d9801e04 	addi	r6,sp,120
    4284:	a00b883a 	mov	r5,r20
    4288:	9809883a 	mov	r4,r19
    428c:	000bed00 	call	bed0 <__ssprint_r>
    4290:	103c561e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4294:	d8c02017 	ldw	r3,128(sp)
    4298:	d8801f17 	ldw	r2,124(sp)
    429c:	da000404 	addi	r8,sp,16
    42a0:	003fee06 	br	425c <___svfprintf_internal_r+0x1204>
    42a4:	d9402c17 	ldw	r5,176(sp)
    42a8:	d9801e04 	addi	r6,sp,120
    42ac:	9809883a 	mov	r4,r19
    42b0:	000bed00 	call	bed0 <__ssprint_r>
    42b4:	103c4d1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    42b8:	d8c02017 	ldw	r3,128(sp)
    42bc:	df002787 	ldb	fp,158(sp)
    42c0:	da000404 	addi	r8,sp,16
    42c4:	003d5a06 	br	3830 <___svfprintf_internal_r+0x7d8>
    42c8:	9080040c 	andi	r2,r18,16
    42cc:	10005c26 	beq	r2,zero,4440 <___svfprintf_internal_r+0x13e8>
    42d0:	d9402d17 	ldw	r5,180(sp)
    42d4:	d8c02917 	ldw	r3,164(sp)
    42d8:	d8002785 	stb	zero,158(sp)
    42dc:	28800104 	addi	r2,r5,4
    42e0:	2d000017 	ldw	r20,0(r5)
    42e4:	002d883a 	mov	r22,zero
    42e8:	18005e16 	blt	r3,zero,4464 <___svfprintf_internal_r+0x140c>
    42ec:	00ffdfc4 	movi	r3,-129
    42f0:	d8802d15 	stw	r2,180(sp)
    42f4:	90e4703a 	and	r18,r18,r3
    42f8:	0039883a 	mov	fp,zero
    42fc:	a03dfe26 	beq	r20,zero,3af8 <___svfprintf_internal_r+0xaa0>
    4300:	00800244 	movi	r2,9
    4304:	153cb336 	bltu	r2,r20,35d4 <___svfprintf_internal_r+0x57c>
    4308:	a5000c04 	addi	r20,r20,48
    430c:	dc001dc4 	addi	r16,sp,119
    4310:	dd001dc5 	stb	r20,119(sp)
    4314:	d8c02817 	ldw	r3,160(sp)
    4318:	1c07c83a 	sub	r3,r3,r16
    431c:	d8c02e15 	stw	r3,184(sp)
    4320:	003cf506 	br	36f8 <___svfprintf_internal_r+0x6a0>
    4324:	d8803317 	ldw	r2,204(sp)
    4328:	143fffc4 	addi	r16,r2,-1
    432c:	043f560e 	bge	zero,r16,4088 <___svfprintf_internal_r+0x1030>
    4330:	07000404 	movi	fp,16
    4334:	e403530e 	bge	fp,r16,5084 <___svfprintf_internal_r+0x202c>
    4338:	014000b4 	movhi	r5,2
    433c:	29518e84 	addi	r5,r5,17978
    4340:	d9402b15 	stw	r5,172(sp)
    4344:	01c001c4 	movi	r7,7
    4348:	dd002c17 	ldw	r20,176(sp)
    434c:	00000306 	br	435c <___svfprintf_internal_r+0x1304>
    4350:	843ffc04 	addi	r16,r16,-16
    4354:	b5800204 	addi	r22,r22,8
    4358:	e400130e 	bge	fp,r16,43a8 <___svfprintf_internal_r+0x1350>
    435c:	18c00404 	addi	r3,r3,16
    4360:	8c400044 	addi	r17,r17,1
    4364:	b5400015 	stw	r21,0(r22)
    4368:	b7000115 	stw	fp,4(r22)
    436c:	d8c02015 	stw	r3,128(sp)
    4370:	dc401f15 	stw	r17,124(sp)
    4374:	3c7ff60e 	bge	r7,r17,4350 <___svfprintf_internal_r+0x12f8>
    4378:	d9801e04 	addi	r6,sp,120
    437c:	a00b883a 	mov	r5,r20
    4380:	9809883a 	mov	r4,r19
    4384:	d9c03d15 	stw	r7,244(sp)
    4388:	000bed00 	call	bed0 <__ssprint_r>
    438c:	d9c03d17 	ldw	r7,244(sp)
    4390:	103c161e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4394:	843ffc04 	addi	r16,r16,-16
    4398:	d8c02017 	ldw	r3,128(sp)
    439c:	dc401f17 	ldw	r17,124(sp)
    43a0:	dd800404 	addi	r22,sp,16
    43a4:	e43fed16 	blt	fp,r16,435c <___svfprintf_internal_r+0x1304>
    43a8:	d8802b17 	ldw	r2,172(sp)
    43ac:	1c07883a 	add	r3,r3,r16
    43b0:	8c400044 	addi	r17,r17,1
    43b4:	b0800015 	stw	r2,0(r22)
    43b8:	b4000115 	stw	r16,4(r22)
    43bc:	d8c02015 	stw	r3,128(sp)
    43c0:	dc401f15 	stw	r17,124(sp)
    43c4:	008001c4 	movi	r2,7
    43c8:	147f2e0e 	bge	r2,r17,4084 <___svfprintf_internal_r+0x102c>
    43cc:	d9402c17 	ldw	r5,176(sp)
    43d0:	d9801e04 	addi	r6,sp,120
    43d4:	9809883a 	mov	r4,r19
    43d8:	000bed00 	call	bed0 <__ssprint_r>
    43dc:	103c031e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    43e0:	d8c02017 	ldw	r3,128(sp)
    43e4:	dc401f17 	ldw	r17,124(sp)
    43e8:	dd800404 	addi	r22,sp,16
    43ec:	003f2606 	br	4088 <___svfprintf_internal_r+0x1030>
    43f0:	9080040c 	andi	r2,r18,16
    43f4:	1000c326 	beq	r2,zero,4704 <___svfprintf_internal_r+0x16ac>
    43f8:	d8802d17 	ldw	r2,180(sp)
    43fc:	15000017 	ldw	r20,0(r2)
    4400:	10800104 	addi	r2,r2,4
    4404:	d8802d15 	stw	r2,180(sp)
    4408:	a02dd7fa 	srai	r22,r20,31
    440c:	b005883a 	mov	r2,r22
    4410:	103c680e 	bge	r2,zero,35b4 <___svfprintf_internal_r+0x55c>
    4414:	0529c83a 	sub	r20,zero,r20
    4418:	a004c03a 	cmpne	r2,r20,zero
    441c:	05adc83a 	sub	r22,zero,r22
    4420:	b0adc83a 	sub	r22,r22,r2
    4424:	d8802917 	ldw	r2,164(sp)
    4428:	07000b44 	movi	fp,45
    442c:	df002785 	stb	fp,158(sp)
    4430:	10022e16 	blt	r2,zero,4cec <___svfprintf_internal_r+0x1c94>
    4434:	00bfdfc4 	movi	r2,-129
    4438:	90a4703a 	and	r18,r18,r2
    443c:	003c6406 	br	35d0 <___svfprintf_internal_r+0x578>
    4440:	9080100c 	andi	r2,r18,64
    4444:	d8002785 	stb	zero,158(sp)
    4448:	10012526 	beq	r2,zero,48e0 <___svfprintf_internal_r+0x1888>
    444c:	d9002d17 	ldw	r4,180(sp)
    4450:	d9402917 	ldw	r5,164(sp)
    4454:	002d883a 	mov	r22,zero
    4458:	20800104 	addi	r2,r4,4
    445c:	2500000b 	ldhu	r20,0(r4)
    4460:	283fa20e 	bge	r5,zero,42ec <___svfprintf_internal_r+0x1294>
    4464:	d8802d15 	stw	r2,180(sp)
    4468:	0039883a 	mov	fp,zero
    446c:	a584b03a 	or	r2,r20,r22
    4470:	103c571e 	bne	r2,zero,35d0 <___svfprintf_internal_r+0x578>
    4474:	00800044 	movi	r2,1
    4478:	003e5006 	br	3dbc <___svfprintf_internal_r+0xd64>
    447c:	d9402c17 	ldw	r5,176(sp)
    4480:	d9801e04 	addi	r6,sp,120
    4484:	9809883a 	mov	r4,r19
    4488:	000bed00 	call	bed0 <__ssprint_r>
    448c:	103bd71e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4490:	d8c02017 	ldw	r3,128(sp)
    4494:	da000404 	addi	r8,sp,16
    4498:	d9003217 	ldw	r4,200(sp)
    449c:	d8802617 	ldw	r2,152(sp)
    44a0:	d9403317 	ldw	r5,204(sp)
    44a4:	8123883a 	add	r17,r16,r4
    44a8:	11400216 	blt	r2,r5,44b4 <___svfprintf_internal_r+0x145c>
    44ac:	9100004c 	andi	r4,r18,1
    44b0:	20000d26 	beq	r4,zero,44e8 <___svfprintf_internal_r+0x1490>
    44b4:	d9003817 	ldw	r4,224(sp)
    44b8:	d9403417 	ldw	r5,208(sp)
    44bc:	1907883a 	add	r3,r3,r4
    44c0:	d9001f17 	ldw	r4,124(sp)
    44c4:	41400015 	stw	r5,0(r8)
    44c8:	d9403817 	ldw	r5,224(sp)
    44cc:	21000044 	addi	r4,r4,1
    44d0:	d8c02015 	stw	r3,128(sp)
    44d4:	41400115 	stw	r5,4(r8)
    44d8:	d9001f15 	stw	r4,124(sp)
    44dc:	014001c4 	movi	r5,7
    44e0:	2901dc16 	blt	r5,r4,4c54 <___svfprintf_internal_r+0x1bfc>
    44e4:	42000204 	addi	r8,r8,8
    44e8:	d9003317 	ldw	r4,204(sp)
    44ec:	8121883a 	add	r16,r16,r4
    44f0:	2085c83a 	sub	r2,r4,r2
    44f4:	8461c83a 	sub	r16,r16,r17
    44f8:	1400010e 	bge	r2,r16,4500 <___svfprintf_internal_r+0x14a8>
    44fc:	1021883a 	mov	r16,r2
    4500:	04000a0e 	bge	zero,r16,452c <___svfprintf_internal_r+0x14d4>
    4504:	d9001f17 	ldw	r4,124(sp)
    4508:	1c07883a 	add	r3,r3,r16
    450c:	44400015 	stw	r17,0(r8)
    4510:	21000044 	addi	r4,r4,1
    4514:	44000115 	stw	r16,4(r8)
    4518:	d8c02015 	stw	r3,128(sp)
    451c:	d9001f15 	stw	r4,124(sp)
    4520:	014001c4 	movi	r5,7
    4524:	2901e616 	blt	r5,r4,4cc0 <___svfprintf_internal_r+0x1c68>
    4528:	42000204 	addi	r8,r8,8
    452c:	8001f616 	blt	r16,zero,4d08 <___svfprintf_internal_r+0x1cb0>
    4530:	1421c83a 	sub	r16,r2,r16
    4534:	043d1c0e 	bge	zero,r16,39a8 <___svfprintf_internal_r+0x950>
    4538:	04400404 	movi	r17,16
    453c:	d8801f17 	ldw	r2,124(sp)
    4540:	8c3edd0e 	bge	r17,r16,40b8 <___svfprintf_internal_r+0x1060>
    4544:	014000b4 	movhi	r5,2
    4548:	29518e84 	addi	r5,r5,17978
    454c:	d9402b15 	stw	r5,172(sp)
    4550:	058001c4 	movi	r22,7
    4554:	dd002c17 	ldw	r20,176(sp)
    4558:	00000306 	br	4568 <___svfprintf_internal_r+0x1510>
    455c:	42000204 	addi	r8,r8,8
    4560:	843ffc04 	addi	r16,r16,-16
    4564:	8c3ed70e 	bge	r17,r16,40c4 <___svfprintf_internal_r+0x106c>
    4568:	18c00404 	addi	r3,r3,16
    456c:	10800044 	addi	r2,r2,1
    4570:	45400015 	stw	r21,0(r8)
    4574:	44400115 	stw	r17,4(r8)
    4578:	d8c02015 	stw	r3,128(sp)
    457c:	d8801f15 	stw	r2,124(sp)
    4580:	b0bff60e 	bge	r22,r2,455c <___svfprintf_internal_r+0x1504>
    4584:	d9801e04 	addi	r6,sp,120
    4588:	a00b883a 	mov	r5,r20
    458c:	9809883a 	mov	r4,r19
    4590:	000bed00 	call	bed0 <__ssprint_r>
    4594:	103b951e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4598:	d8c02017 	ldw	r3,128(sp)
    459c:	d8801f17 	ldw	r2,124(sp)
    45a0:	da000404 	addi	r8,sp,16
    45a4:	003fee06 	br	4560 <___svfprintf_internal_r+0x1508>
    45a8:	9088703a 	and	r4,r18,r2
    45ac:	203e8d1e 	bne	r4,zero,3fe4 <___svfprintf_internal_r+0xf8c>
    45b0:	dc401f17 	ldw	r17,124(sp)
    45b4:	40800115 	stw	r2,4(r8)
    45b8:	44000015 	stw	r16,0(r8)
    45bc:	8c400044 	addi	r17,r17,1
    45c0:	d8c02015 	stw	r3,128(sp)
    45c4:	dc401f15 	stw	r17,124(sp)
    45c8:	008001c4 	movi	r2,7
    45cc:	147f7f16 	blt	r2,r17,43cc <___svfprintf_internal_r+0x1374>
    45d0:	45800204 	addi	r22,r8,8
    45d4:	003eac06 	br	4088 <___svfprintf_internal_r+0x1030>
    45d8:	d9402c17 	ldw	r5,176(sp)
    45dc:	d9801e04 	addi	r6,sp,120
    45e0:	9809883a 	mov	r4,r19
    45e4:	000bed00 	call	bed0 <__ssprint_r>
    45e8:	103b801e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    45ec:	d8c02017 	ldw	r3,128(sp)
    45f0:	dc401f17 	ldw	r17,124(sp)
    45f4:	da000404 	addi	r8,sp,16
    45f8:	003e8406 	br	400c <___svfprintf_internal_r+0xfb4>
    45fc:	d9402c17 	ldw	r5,176(sp)
    4600:	d9801e04 	addi	r6,sp,120
    4604:	9809883a 	mov	r4,r19
    4608:	000bed00 	call	bed0 <__ssprint_r>
    460c:	103b771e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4610:	d8c02017 	ldw	r3,128(sp)
    4614:	dc401f17 	ldw	r17,124(sp)
    4618:	dd800404 	addi	r22,sp,16
    461c:	003e8606 	br	4038 <___svfprintf_internal_r+0xfe0>
    4620:	0029883a 	mov	r20,zero
    4624:	a5000c04 	addi	r20,r20,48
    4628:	dc001dc4 	addi	r16,sp,119
    462c:	dd001dc5 	stb	r20,119(sp)
    4630:	003f3806 	br	4314 <___svfprintf_internal_r+0x12bc>
    4634:	d9402c17 	ldw	r5,176(sp)
    4638:	d9801e04 	addi	r6,sp,120
    463c:	9809883a 	mov	r4,r19
    4640:	000bed00 	call	bed0 <__ssprint_r>
    4644:	103b691e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4648:	d8c02017 	ldw	r3,128(sp)
    464c:	da000404 	addi	r8,sp,16
    4650:	003c9506 	br	38a8 <___svfprintf_internal_r+0x850>
    4654:	d9003617 	ldw	r4,216(sp)
    4658:	d9403717 	ldw	r5,220(sp)
    465c:	da003e15 	stw	r8,248(sp)
    4660:	000bc440 	call	bc44 <__fpclassifyd>
    4664:	da003e17 	ldw	r8,248(sp)
    4668:	1000bd1e 	bne	r2,zero,4960 <___svfprintf_internal_r+0x1908>
    466c:	008011c4 	movi	r2,71
    4670:	14411e0e 	bge	r2,r17,4aec <___svfprintf_internal_r+0x1a94>
    4674:	040000b4 	movhi	r16,2
    4678:	84118104 	addi	r16,r16,17924
    467c:	00c000c4 	movi	r3,3
    4680:	00bfdfc4 	movi	r2,-129
    4684:	d8c02a15 	stw	r3,168(sp)
    4688:	90a4703a 	and	r18,r18,r2
    468c:	df002783 	ldbu	fp,158(sp)
    4690:	d8c02e15 	stw	r3,184(sp)
    4694:	d8002915 	stw	zero,164(sp)
    4698:	d8003215 	stw	zero,200(sp)
    469c:	003c1c06 	br	3710 <___svfprintf_internal_r+0x6b8>
    46a0:	9080100c 	andi	r2,r18,64
    46a4:	d8002785 	stb	zero,158(sp)
    46a8:	10009426 	beq	r2,zero,48fc <___svfprintf_internal_r+0x18a4>
    46ac:	d8c02d17 	ldw	r3,180(sp)
    46b0:	d9002917 	ldw	r4,164(sp)
    46b4:	002d883a 	mov	r22,zero
    46b8:	18800104 	addi	r2,r3,4
    46bc:	1d00000b 	ldhu	r20,0(r3)
    46c0:	203ec10e 	bge	r4,zero,41c8 <___svfprintf_internal_r+0x1170>
    46c4:	a586b03a 	or	r3,r20,r22
    46c8:	d8802d15 	stw	r2,180(sp)
    46cc:	183ec21e 	bne	r3,zero,41d8 <___svfprintf_internal_r+0x1180>
    46d0:	0039883a 	mov	fp,zero
    46d4:	0005883a 	mov	r2,zero
    46d8:	003db806 	br	3dbc <___svfprintf_internal_r+0xd64>
    46dc:	d8802d17 	ldw	r2,180(sp)
    46e0:	d8c02d17 	ldw	r3,180(sp)
    46e4:	d9002d17 	ldw	r4,180(sp)
    46e8:	10800017 	ldw	r2,0(r2)
    46ec:	18c00117 	ldw	r3,4(r3)
    46f0:	21000204 	addi	r4,r4,8
    46f4:	d8803615 	stw	r2,216(sp)
    46f8:	d8c03715 	stw	r3,220(sp)
    46fc:	d9002d15 	stw	r4,180(sp)
    4700:	003b8206 	br	350c <___svfprintf_internal_r+0x4b4>
    4704:	9080100c 	andi	r2,r18,64
    4708:	10010726 	beq	r2,zero,4b28 <___svfprintf_internal_r+0x1ad0>
    470c:	d8c02d17 	ldw	r3,180(sp)
    4710:	1d00000f 	ldh	r20,0(r3)
    4714:	18c00104 	addi	r3,r3,4
    4718:	d8c02d15 	stw	r3,180(sp)
    471c:	a02dd7fa 	srai	r22,r20,31
    4720:	b005883a 	mov	r2,r22
    4724:	003ba206 	br	35b0 <___svfprintf_internal_r+0x558>
    4728:	9080100c 	andi	r2,r18,64
    472c:	10010526 	beq	r2,zero,4b44 <___svfprintf_internal_r+0x1aec>
    4730:	d9002d17 	ldw	r4,180(sp)
    4734:	002d883a 	mov	r22,zero
    4738:	2500000b 	ldhu	r20,0(r4)
    473c:	21000104 	addi	r4,r4,4
    4740:	d9002d15 	stw	r4,180(sp)
    4744:	003cfe06 	br	3b40 <___svfprintf_internal_r+0xae8>
    4748:	bc400007 	ldb	r17,0(r23)
    474c:	003a9606 	br	31a8 <___svfprintf_internal_r+0x150>
    4750:	9080040c 	andi	r2,r18,16
    4754:	10010126 	beq	r2,zero,4b5c <___svfprintf_internal_r+0x1b04>
    4758:	d9402d17 	ldw	r5,180(sp)
    475c:	d8c02f17 	ldw	r3,188(sp)
    4760:	28800017 	ldw	r2,0(r5)
    4764:	29400104 	addi	r5,r5,4
    4768:	d9402d15 	stw	r5,180(sp)
    476c:	10c00015 	stw	r3,0(r2)
    4770:	003a6406 	br	3104 <___svfprintf_internal_r+0xac>
    4774:	d9002917 	ldw	r4,164(sp)
    4778:	d8002785 	stb	zero,158(sp)
    477c:	203d8d16 	blt	r4,zero,3db4 <___svfprintf_internal_r+0xd5c>
    4780:	00bfdfc4 	movi	r2,-129
    4784:	90a4703a 	and	r18,r18,r2
    4788:	003b0506 	br	33a0 <___svfprintf_internal_r+0x348>
    478c:	014000b4 	movhi	r5,2
    4790:	29518e84 	addi	r5,r5,17978
    4794:	d9402b15 	stw	r5,172(sp)
    4798:	d9402b17 	ldw	r5,172(sp)
    479c:	1c47883a 	add	r3,r3,r17
    47a0:	10800044 	addi	r2,r2,1
    47a4:	41400015 	stw	r5,0(r8)
    47a8:	44400115 	stw	r17,4(r8)
    47ac:	d8c02015 	stw	r3,128(sp)
    47b0:	d8801f15 	stw	r2,124(sp)
    47b4:	010001c4 	movi	r4,7
    47b8:	20bf3016 	blt	r4,r2,447c <___svfprintf_internal_r+0x1424>
    47bc:	42000204 	addi	r8,r8,8
    47c0:	003f3506 	br	4498 <___svfprintf_internal_r+0x1440>
    47c4:	010000b4 	movhi	r4,2
    47c8:	21118e84 	addi	r4,r4,17978
    47cc:	d9002b15 	stw	r4,172(sp)
    47d0:	003c5e06 	br	394c <___svfprintf_internal_r+0x8f4>
    47d4:	d9402c17 	ldw	r5,176(sp)
    47d8:	d9801e04 	addi	r6,sp,120
    47dc:	9809883a 	mov	r4,r19
    47e0:	000bed00 	call	bed0 <__ssprint_r>
    47e4:	103b011e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    47e8:	d8c02017 	ldw	r3,128(sp)
    47ec:	da000404 	addi	r8,sp,16
    47f0:	003d9306 	br	3e40 <___svfprintf_internal_r+0xde8>
    47f4:	d8801f17 	ldw	r2,124(sp)
    47f8:	014000b4 	movhi	r5,2
    47fc:	01000044 	movi	r4,1
    4800:	18c00044 	addi	r3,r3,1
    4804:	10800044 	addi	r2,r2,1
    4808:	29518e04 	addi	r5,r5,17976
    480c:	41000115 	stw	r4,4(r8)
    4810:	41400015 	stw	r5,0(r8)
    4814:	d8c02015 	stw	r3,128(sp)
    4818:	d8801f15 	stw	r2,124(sp)
    481c:	010001c4 	movi	r4,7
    4820:	2080b516 	blt	r4,r2,4af8 <___svfprintf_internal_r+0x1aa0>
    4824:	42000204 	addi	r8,r8,8
    4828:	8800041e 	bne	r17,zero,483c <___svfprintf_internal_r+0x17e4>
    482c:	d8803317 	ldw	r2,204(sp)
    4830:	1000021e 	bne	r2,zero,483c <___svfprintf_internal_r+0x17e4>
    4834:	9080004c 	andi	r2,r18,1
    4838:	103c5b26 	beq	r2,zero,39a8 <___svfprintf_internal_r+0x950>
    483c:	d9003817 	ldw	r4,224(sp)
    4840:	d8801f17 	ldw	r2,124(sp)
    4844:	d9403417 	ldw	r5,208(sp)
    4848:	20c7883a 	add	r3,r4,r3
    484c:	10800044 	addi	r2,r2,1
    4850:	41000115 	stw	r4,4(r8)
    4854:	41400015 	stw	r5,0(r8)
    4858:	d8c02015 	stw	r3,128(sp)
    485c:	d8801f15 	stw	r2,124(sp)
    4860:	010001c4 	movi	r4,7
    4864:	20818016 	blt	r4,r2,4e68 <___svfprintf_internal_r+0x1e10>
    4868:	42000204 	addi	r8,r8,8
    486c:	0463c83a 	sub	r17,zero,r17
    4870:	0440cb0e 	bge	zero,r17,4ba0 <___svfprintf_internal_r+0x1b48>
    4874:	05800404 	movi	r22,16
    4878:	b440e80e 	bge	r22,r17,4c1c <___svfprintf_internal_r+0x1bc4>
    487c:	014000b4 	movhi	r5,2
    4880:	29518e84 	addi	r5,r5,17978
    4884:	d9402b15 	stw	r5,172(sp)
    4888:	070001c4 	movi	fp,7
    488c:	dd002c17 	ldw	r20,176(sp)
    4890:	00000306 	br	48a0 <___svfprintf_internal_r+0x1848>
    4894:	42000204 	addi	r8,r8,8
    4898:	8c7ffc04 	addi	r17,r17,-16
    489c:	b440e20e 	bge	r22,r17,4c28 <___svfprintf_internal_r+0x1bd0>
    48a0:	18c00404 	addi	r3,r3,16
    48a4:	10800044 	addi	r2,r2,1
    48a8:	45400015 	stw	r21,0(r8)
    48ac:	45800115 	stw	r22,4(r8)
    48b0:	d8c02015 	stw	r3,128(sp)
    48b4:	d8801f15 	stw	r2,124(sp)
    48b8:	e0bff60e 	bge	fp,r2,4894 <___svfprintf_internal_r+0x183c>
    48bc:	d9801e04 	addi	r6,sp,120
    48c0:	a00b883a 	mov	r5,r20
    48c4:	9809883a 	mov	r4,r19
    48c8:	000bed00 	call	bed0 <__ssprint_r>
    48cc:	103ac71e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    48d0:	d8c02017 	ldw	r3,128(sp)
    48d4:	d8801f17 	ldw	r2,124(sp)
    48d8:	da000404 	addi	r8,sp,16
    48dc:	003fee06 	br	4898 <___svfprintf_internal_r+0x1840>
    48e0:	d8c02d17 	ldw	r3,180(sp)
    48e4:	d9002917 	ldw	r4,164(sp)
    48e8:	002d883a 	mov	r22,zero
    48ec:	18800104 	addi	r2,r3,4
    48f0:	1d000017 	ldw	r20,0(r3)
    48f4:	203e7d0e 	bge	r4,zero,42ec <___svfprintf_internal_r+0x1294>
    48f8:	003eda06 	br	4464 <___svfprintf_internal_r+0x140c>
    48fc:	d9402d17 	ldw	r5,180(sp)
    4900:	d8c02917 	ldw	r3,164(sp)
    4904:	002d883a 	mov	r22,zero
    4908:	28800104 	addi	r2,r5,4
    490c:	2d000017 	ldw	r20,0(r5)
    4910:	183e2d0e 	bge	r3,zero,41c8 <___svfprintf_internal_r+0x1170>
    4914:	003f6b06 	br	46c4 <___svfprintf_internal_r+0x166c>
    4918:	d8c02d15 	stw	r3,180(sp)
    491c:	0039883a 	mov	fp,zero
    4920:	003ed206 	br	446c <___svfprintf_internal_r+0x1414>
    4924:	bc400043 	ldbu	r17,1(r23)
    4928:	94800814 	ori	r18,r18,32
    492c:	bdc00044 	addi	r23,r23,1
    4930:	8c403fcc 	andi	r17,r17,255
    4934:	8c40201c 	xori	r17,r17,128
    4938:	8c7fe004 	addi	r17,r17,-128
    493c:	003a1a06 	br	31a8 <___svfprintf_internal_r+0x150>
    4940:	d9402c17 	ldw	r5,176(sp)
    4944:	d9801e04 	addi	r6,sp,120
    4948:	9809883a 	mov	r4,r19
    494c:	000bed00 	call	bed0 <__ssprint_r>
    4950:	103aa61e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4954:	d8c02017 	ldw	r3,128(sp)
    4958:	da000404 	addi	r8,sp,16
    495c:	003d4a06 	br	3e88 <___svfprintf_internal_r+0xe30>
    4960:	d9002917 	ldw	r4,164(sp)
    4964:	05bff7c4 	movi	r22,-33
    4968:	00bfffc4 	movi	r2,-1
    496c:	8dac703a 	and	r22,r17,r22
    4970:	20806a26 	beq	r4,r2,4b1c <___svfprintf_internal_r+0x1ac4>
    4974:	008011c4 	movi	r2,71
    4978:	b0813726 	beq	r22,r2,4e58 <___svfprintf_internal_r+0x1e00>
    497c:	d9003717 	ldw	r4,220(sp)
    4980:	90c04014 	ori	r3,r18,256
    4984:	d8c02b15 	stw	r3,172(sp)
    4988:	20015d16 	blt	r4,zero,4f00 <___svfprintf_internal_r+0x1ea8>
    498c:	dd003717 	ldw	r20,220(sp)
    4990:	d8002a05 	stb	zero,168(sp)
    4994:	00801984 	movi	r2,102
    4998:	88814026 	beq	r17,r2,4e9c <___svfprintf_internal_r+0x1e44>
    499c:	00801184 	movi	r2,70
    49a0:	88817126 	beq	r17,r2,4f68 <___svfprintf_internal_r+0x1f10>
    49a4:	00801144 	movi	r2,69
    49a8:	b0816226 	beq	r22,r2,4f34 <___svfprintf_internal_r+0x1edc>
    49ac:	d8c02917 	ldw	r3,164(sp)
    49b0:	d8802104 	addi	r2,sp,132
    49b4:	d8800315 	stw	r2,12(sp)
    49b8:	d9403617 	ldw	r5,216(sp)
    49bc:	d8802504 	addi	r2,sp,148
    49c0:	d8800215 	stw	r2,8(sp)
    49c4:	d8802604 	addi	r2,sp,152
    49c8:	d8c00015 	stw	r3,0(sp)
    49cc:	d8800115 	stw	r2,4(sp)
    49d0:	01c00084 	movi	r7,2
    49d4:	a00d883a 	mov	r6,r20
    49d8:	9809883a 	mov	r4,r19
    49dc:	d8c03d15 	stw	r3,244(sp)
    49e0:	da003e15 	stw	r8,248(sp)
    49e4:	00078540 	call	7854 <_dtoa_r>
    49e8:	1021883a 	mov	r16,r2
    49ec:	008019c4 	movi	r2,103
    49f0:	d8c03d17 	ldw	r3,244(sp)
    49f4:	da003e17 	ldw	r8,248(sp)
    49f8:	8880e726 	beq	r17,r2,4d98 <___svfprintf_internal_r+0x1d40>
    49fc:	008011c4 	movi	r2,71
    4a00:	8880d426 	beq	r17,r2,4d54 <___svfprintf_internal_r+0x1cfc>
    4a04:	80f9883a 	add	fp,r16,r3
    4a08:	d9003617 	ldw	r4,216(sp)
    4a0c:	000d883a 	mov	r6,zero
    4a10:	000f883a 	mov	r7,zero
    4a14:	a00b883a 	mov	r5,r20
    4a18:	da003e15 	stw	r8,248(sp)
    4a1c:	00110500 	call	11050 <__eqdf2>
    4a20:	da003e17 	ldw	r8,248(sp)
    4a24:	1000e426 	beq	r2,zero,4db8 <___svfprintf_internal_r+0x1d60>
    4a28:	d8802117 	ldw	r2,132(sp)
    4a2c:	1700062e 	bgeu	r2,fp,4a48 <___svfprintf_internal_r+0x19f0>
    4a30:	01000c04 	movi	r4,48
    4a34:	10c00044 	addi	r3,r2,1
    4a38:	d8c02115 	stw	r3,132(sp)
    4a3c:	11000005 	stb	r4,0(r2)
    4a40:	d8802117 	ldw	r2,132(sp)
    4a44:	173ffb36 	bltu	r2,fp,4a34 <___svfprintf_internal_r+0x19dc>
    4a48:	1405c83a 	sub	r2,r2,r16
    4a4c:	d8803315 	stw	r2,204(sp)
    4a50:	008011c4 	movi	r2,71
    4a54:	b080c526 	beq	r22,r2,4d6c <___svfprintf_internal_r+0x1d14>
    4a58:	00801944 	movi	r2,101
    4a5c:	1441d90e 	bge	r2,r17,51c4 <___svfprintf_internal_r+0x216c>
    4a60:	d8c02617 	ldw	r3,152(sp)
    4a64:	00801984 	movi	r2,102
    4a68:	d8c03215 	stw	r3,200(sp)
    4a6c:	88813426 	beq	r17,r2,4f40 <___svfprintf_internal_r+0x1ee8>
    4a70:	d8c03217 	ldw	r3,200(sp)
    4a74:	d9003317 	ldw	r4,204(sp)
    4a78:	19012516 	blt	r3,r4,4f10 <___svfprintf_internal_r+0x1eb8>
    4a7c:	9480004c 	andi	r18,r18,1
    4a80:	9001841e 	bne	r18,zero,5094 <___svfprintf_internal_r+0x203c>
    4a84:	1805883a 	mov	r2,r3
    4a88:	1801cc16 	blt	r3,zero,51bc <___svfprintf_internal_r+0x2164>
    4a8c:	d8c03217 	ldw	r3,200(sp)
    4a90:	044019c4 	movi	r17,103
    4a94:	d8c02e15 	stw	r3,184(sp)
    4a98:	df002a07 	ldb	fp,168(sp)
    4a9c:	e000a61e 	bne	fp,zero,4d38 <___svfprintf_internal_r+0x1ce0>
    4aa0:	df002783 	ldbu	fp,158(sp)
    4aa4:	d8802a15 	stw	r2,168(sp)
    4aa8:	dc802b17 	ldw	r18,172(sp)
    4aac:	d8002915 	stw	zero,164(sp)
    4ab0:	003b1706 	br	3710 <___svfprintf_internal_r+0x6b8>
    4ab4:	040000b4 	movhi	r16,2
    4ab8:	84117e04 	addi	r16,r16,17912
    4abc:	003aa606 	br	3558 <___svfprintf_internal_r+0x500>
    4ac0:	d9003917 	ldw	r4,228(sp)
    4ac4:	04001004 	movi	r16,64
    4ac8:	800b883a 	mov	r5,r16
    4acc:	00023500 	call	2350 <_malloc_r>
    4ad0:	d9002c17 	ldw	r4,176(sp)
    4ad4:	20800015 	stw	r2,0(r4)
    4ad8:	20800415 	stw	r2,16(r4)
    4adc:	1001cb26 	beq	r2,zero,520c <___svfprintf_internal_r+0x21b4>
    4ae0:	d8802c17 	ldw	r2,176(sp)
    4ae4:	14000515 	stw	r16,20(r2)
    4ae8:	00397606 	br	30c4 <___svfprintf_internal_r+0x6c>
    4aec:	040000b4 	movhi	r16,2
    4af0:	84118004 	addi	r16,r16,17920
    4af4:	003ee106 	br	467c <___svfprintf_internal_r+0x1624>
    4af8:	d9402c17 	ldw	r5,176(sp)
    4afc:	d9801e04 	addi	r6,sp,120
    4b00:	9809883a 	mov	r4,r19
    4b04:	000bed00 	call	bed0 <__ssprint_r>
    4b08:	103a381e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4b0c:	dc402617 	ldw	r17,152(sp)
    4b10:	d8c02017 	ldw	r3,128(sp)
    4b14:	da000404 	addi	r8,sp,16
    4b18:	003f4306 	br	4828 <___svfprintf_internal_r+0x17d0>
    4b1c:	01400184 	movi	r5,6
    4b20:	d9402915 	stw	r5,164(sp)
    4b24:	003f9506 	br	497c <___svfprintf_internal_r+0x1924>
    4b28:	d9002d17 	ldw	r4,180(sp)
    4b2c:	25000017 	ldw	r20,0(r4)
    4b30:	21000104 	addi	r4,r4,4
    4b34:	d9002d15 	stw	r4,180(sp)
    4b38:	a02dd7fa 	srai	r22,r20,31
    4b3c:	b005883a 	mov	r2,r22
    4b40:	003a9b06 	br	35b0 <___svfprintf_internal_r+0x558>
    4b44:	d9402d17 	ldw	r5,180(sp)
    4b48:	002d883a 	mov	r22,zero
    4b4c:	2d000017 	ldw	r20,0(r5)
    4b50:	29400104 	addi	r5,r5,4
    4b54:	d9402d15 	stw	r5,180(sp)
    4b58:	003bf906 	br	3b40 <___svfprintf_internal_r+0xae8>
    4b5c:	9480100c 	andi	r18,r18,64
    4b60:	90006e26 	beq	r18,zero,4d1c <___svfprintf_internal_r+0x1cc4>
    4b64:	d9002d17 	ldw	r4,180(sp)
    4b68:	d9402f17 	ldw	r5,188(sp)
    4b6c:	20800017 	ldw	r2,0(r4)
    4b70:	21000104 	addi	r4,r4,4
    4b74:	d9002d15 	stw	r4,180(sp)
    4b78:	1140000d 	sth	r5,0(r2)
    4b7c:	00396106 	br	3104 <___svfprintf_internal_r+0xac>
    4b80:	d9402c17 	ldw	r5,176(sp)
    4b84:	d9801e04 	addi	r6,sp,120
    4b88:	9809883a 	mov	r4,r19
    4b8c:	000bed00 	call	bed0 <__ssprint_r>
    4b90:	103a161e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4b94:	d8c02017 	ldw	r3,128(sp)
    4b98:	d8801f17 	ldw	r2,124(sp)
    4b9c:	da000404 	addi	r8,sp,16
    4ba0:	d9403317 	ldw	r5,204(sp)
    4ba4:	10800044 	addi	r2,r2,1
    4ba8:	44000015 	stw	r16,0(r8)
    4bac:	28c7883a 	add	r3,r5,r3
    4bb0:	003b7706 	br	3990 <___svfprintf_internal_r+0x938>
    4bb4:	8009883a 	mov	r4,r16
    4bb8:	da003e15 	stw	r8,248(sp)
    4bbc:	0002fc00 	call	2fc0 <strlen>
    4bc0:	d8802e15 	stw	r2,184(sp)
    4bc4:	da003e17 	ldw	r8,248(sp)
    4bc8:	103c280e 	bge	r2,zero,3c6c <___svfprintf_internal_r+0xc14>
    4bcc:	0005883a 	mov	r2,zero
    4bd0:	003c2606 	br	3c6c <___svfprintf_internal_r+0xc14>
    4bd4:	00bfffc4 	movi	r2,-1
    4bd8:	003a0906 	br	3400 <___svfprintf_internal_r+0x3a8>
    4bdc:	010000b4 	movhi	r4,2
    4be0:	21119284 	addi	r4,r4,17994
    4be4:	d9003515 	stw	r4,212(sp)
    4be8:	003b0606 	br	3804 <___svfprintf_internal_r+0x7ac>
    4bec:	013fffc4 	movi	r4,-1
    4bf0:	003a2706 	br	3490 <___svfprintf_internal_r+0x438>
    4bf4:	d9402c17 	ldw	r5,176(sp)
    4bf8:	d9801e04 	addi	r6,sp,120
    4bfc:	9809883a 	mov	r4,r19
    4c00:	000bed00 	call	bed0 <__ssprint_r>
    4c04:	1039f91e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4c08:	d8c02017 	ldw	r3,128(sp)
    4c0c:	da000404 	addi	r8,sp,16
    4c10:	003d8406 	br	4224 <___svfprintf_internal_r+0x11cc>
    4c14:	0023883a 	mov	r17,zero
    4c18:	003d8306 	br	4228 <___svfprintf_internal_r+0x11d0>
    4c1c:	010000b4 	movhi	r4,2
    4c20:	21118e84 	addi	r4,r4,17978
    4c24:	d9002b15 	stw	r4,172(sp)
    4c28:	d9002b17 	ldw	r4,172(sp)
    4c2c:	1c47883a 	add	r3,r3,r17
    4c30:	10800044 	addi	r2,r2,1
    4c34:	41000015 	stw	r4,0(r8)
    4c38:	44400115 	stw	r17,4(r8)
    4c3c:	d8c02015 	stw	r3,128(sp)
    4c40:	d8801f15 	stw	r2,124(sp)
    4c44:	010001c4 	movi	r4,7
    4c48:	20bfcd16 	blt	r4,r2,4b80 <___svfprintf_internal_r+0x1b28>
    4c4c:	42000204 	addi	r8,r8,8
    4c50:	003fd306 	br	4ba0 <___svfprintf_internal_r+0x1b48>
    4c54:	d9402c17 	ldw	r5,176(sp)
    4c58:	d9801e04 	addi	r6,sp,120
    4c5c:	9809883a 	mov	r4,r19
    4c60:	000bed00 	call	bed0 <__ssprint_r>
    4c64:	1039e11e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4c68:	d8802617 	ldw	r2,152(sp)
    4c6c:	d8c02017 	ldw	r3,128(sp)
    4c70:	da000404 	addi	r8,sp,16
    4c74:	003e1c06 	br	44e8 <___svfprintf_internal_r+0x1490>
    4c78:	d8802917 	ldw	r2,164(sp)
    4c7c:	00c00184 	movi	r3,6
    4c80:	1880012e 	bgeu	r3,r2,4c88 <___svfprintf_internal_r+0x1c30>
    4c84:	1805883a 	mov	r2,r3
    4c88:	d8802e15 	stw	r2,184(sp)
    4c8c:	1000f316 	blt	r2,zero,505c <___svfprintf_internal_r+0x2004>
    4c90:	040000b4 	movhi	r16,2
    4c94:	d8802a15 	stw	r2,168(sp)
    4c98:	dd002d15 	stw	r20,180(sp)
    4c9c:	d8002915 	stw	zero,164(sp)
    4ca0:	d8003215 	stw	zero,200(sp)
    4ca4:	84118c04 	addi	r16,r16,17968
    4ca8:	0039883a 	mov	fp,zero
    4cac:	003a9f06 	br	372c <___svfprintf_internal_r+0x6d4>
    4cb0:	010000b4 	movhi	r4,2
    4cb4:	21119284 	addi	r4,r4,17994
    4cb8:	d9003515 	stw	r4,212(sp)
    4cbc:	003b5f06 	br	3a3c <___svfprintf_internal_r+0x9e4>
    4cc0:	d9402c17 	ldw	r5,176(sp)
    4cc4:	d9801e04 	addi	r6,sp,120
    4cc8:	9809883a 	mov	r4,r19
    4ccc:	000bed00 	call	bed0 <__ssprint_r>
    4cd0:	1039c61e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4cd4:	d8802617 	ldw	r2,152(sp)
    4cd8:	d9403317 	ldw	r5,204(sp)
    4cdc:	d8c02017 	ldw	r3,128(sp)
    4ce0:	da000404 	addi	r8,sp,16
    4ce4:	2885c83a 	sub	r2,r5,r2
    4ce8:	003e1006 	br	452c <___svfprintf_internal_r+0x14d4>
    4cec:	00800044 	movi	r2,1
    4cf0:	10803fcc 	andi	r2,r2,255
    4cf4:	00c00044 	movi	r3,1
    4cf8:	10fa3526 	beq	r2,r3,35d0 <___svfprintf_internal_r+0x578>
    4cfc:	00c00084 	movi	r3,2
    4d00:	10fb9e26 	beq	r2,r3,3b7c <___svfprintf_internal_r+0xb24>
    4d04:	003a6406 	br	3698 <___svfprintf_internal_r+0x640>
    4d08:	0021883a 	mov	r16,zero
    4d0c:	003e0806 	br	4530 <___svfprintf_internal_r+0x14d8>
    4d10:	07000b44 	movi	fp,45
    4d14:	df002785 	stb	fp,158(sp)
    4d18:	003a0b06 	br	3548 <___svfprintf_internal_r+0x4f0>
    4d1c:	d8c02d17 	ldw	r3,180(sp)
    4d20:	d9002f17 	ldw	r4,188(sp)
    4d24:	18800017 	ldw	r2,0(r3)
    4d28:	18c00104 	addi	r3,r3,4
    4d2c:	d8c02d15 	stw	r3,180(sp)
    4d30:	11000015 	stw	r4,0(r2)
    4d34:	0038f306 	br	3104 <___svfprintf_internal_r+0xac>
    4d38:	00c00b44 	movi	r3,45
    4d3c:	d8c02785 	stb	r3,158(sp)
    4d40:	d8802a15 	stw	r2,168(sp)
    4d44:	dc802b17 	ldw	r18,172(sp)
    4d48:	d8002915 	stw	zero,164(sp)
    4d4c:	07000b44 	movi	fp,45
    4d50:	003a7306 	br	3720 <___svfprintf_internal_r+0x6c8>
    4d54:	9080004c 	andi	r2,r18,1
    4d58:	1000941e 	bne	r2,zero,4fac <___svfprintf_internal_r+0x1f54>
    4d5c:	d8802117 	ldw	r2,132(sp)
    4d60:	1405c83a 	sub	r2,r2,r16
    4d64:	d8803315 	stw	r2,204(sp)
    4d68:	b441161e 	bne	r22,r17,51c4 <___svfprintf_internal_r+0x216c>
    4d6c:	dd802617 	ldw	r22,152(sp)
    4d70:	00bfff44 	movi	r2,-3
    4d74:	b0801a16 	blt	r22,r2,4de0 <___svfprintf_internal_r+0x1d88>
    4d78:	d9402917 	ldw	r5,164(sp)
    4d7c:	2d801816 	blt	r5,r22,4de0 <___svfprintf_internal_r+0x1d88>
    4d80:	dd803215 	stw	r22,200(sp)
    4d84:	003f3a06 	br	4a70 <___svfprintf_internal_r+0x1a18>
    4d88:	1025883a 	mov	r18,r2
    4d8c:	0039883a 	mov	fp,zero
    4d90:	00800084 	movi	r2,2
    4d94:	003fd606 	br	4cf0 <___svfprintf_internal_r+0x1c98>
    4d98:	9080004c 	andi	r2,r18,1
    4d9c:	103f191e 	bne	r2,zero,4a04 <___svfprintf_internal_r+0x19ac>
    4da0:	d8802117 	ldw	r2,132(sp)
    4da4:	003f2806 	br	4a48 <___svfprintf_internal_r+0x19f0>
    4da8:	010000b4 	movhi	r4,2
    4dac:	21118e84 	addi	r4,r4,17978
    4db0:	d9002b15 	stw	r4,172(sp)
    4db4:	003c7c06 	br	3fa8 <___svfprintf_internal_r+0xf50>
    4db8:	e005883a 	mov	r2,fp
    4dbc:	003f2206 	br	4a48 <___svfprintf_internal_r+0x19f0>
    4dc0:	d9402917 	ldw	r5,164(sp)
    4dc4:	df002783 	ldbu	fp,158(sp)
    4dc8:	dd002d15 	stw	r20,180(sp)
    4dcc:	d9402a15 	stw	r5,168(sp)
    4dd0:	d9402e15 	stw	r5,184(sp)
    4dd4:	d8002915 	stw	zero,164(sp)
    4dd8:	d8003215 	stw	zero,200(sp)
    4ddc:	003a4c06 	br	3710 <___svfprintf_internal_r+0x6b8>
    4de0:	8c7fff84 	addi	r17,r17,-2
    4de4:	b5bfffc4 	addi	r22,r22,-1
    4de8:	dd802615 	stw	r22,152(sp)
    4dec:	dc4022c5 	stb	r17,139(sp)
    4df0:	b000c316 	blt	r22,zero,5100 <___svfprintf_internal_r+0x20a8>
    4df4:	00800ac4 	movi	r2,43
    4df8:	d8802305 	stb	r2,140(sp)
    4dfc:	00800244 	movi	r2,9
    4e00:	15806e16 	blt	r2,r22,4fbc <___svfprintf_internal_r+0x1f64>
    4e04:	00800c04 	movi	r2,48
    4e08:	b5800c04 	addi	r22,r22,48
    4e0c:	d8802345 	stb	r2,141(sp)
    4e10:	dd802385 	stb	r22,142(sp)
    4e14:	d88023c4 	addi	r2,sp,143
    4e18:	df0022c4 	addi	fp,sp,139
    4e1c:	d8c03317 	ldw	r3,204(sp)
    4e20:	1739c83a 	sub	fp,r2,fp
    4e24:	d9003317 	ldw	r4,204(sp)
    4e28:	e0c7883a 	add	r3,fp,r3
    4e2c:	df003b15 	stw	fp,236(sp)
    4e30:	d8c02e15 	stw	r3,184(sp)
    4e34:	00800044 	movi	r2,1
    4e38:	1100b70e 	bge	r2,r4,5118 <___svfprintf_internal_r+0x20c0>
    4e3c:	d8c02e17 	ldw	r3,184(sp)
    4e40:	18c00044 	addi	r3,r3,1
    4e44:	d8c02e15 	stw	r3,184(sp)
    4e48:	1805883a 	mov	r2,r3
    4e4c:	1800b016 	blt	r3,zero,5110 <___svfprintf_internal_r+0x20b8>
    4e50:	d8003215 	stw	zero,200(sp)
    4e54:	003f1006 	br	4a98 <___svfprintf_internal_r+0x1a40>
    4e58:	d8802917 	ldw	r2,164(sp)
    4e5c:	103ec71e 	bne	r2,zero,497c <___svfprintf_internal_r+0x1924>
    4e60:	dc002915 	stw	r16,164(sp)
    4e64:	003ec506 	br	497c <___svfprintf_internal_r+0x1924>
    4e68:	d9402c17 	ldw	r5,176(sp)
    4e6c:	d9801e04 	addi	r6,sp,120
    4e70:	9809883a 	mov	r4,r19
    4e74:	000bed00 	call	bed0 <__ssprint_r>
    4e78:	10395c1e 	bne	r2,zero,33ec <___svfprintf_internal_r+0x394>
    4e7c:	dc402617 	ldw	r17,152(sp)
    4e80:	d8c02017 	ldw	r3,128(sp)
    4e84:	d8801f17 	ldw	r2,124(sp)
    4e88:	da000404 	addi	r8,sp,16
    4e8c:	003e7706 	br	486c <___svfprintf_internal_r+0x1814>
    4e90:	582f883a 	mov	r23,r11
    4e94:	d8002915 	stw	zero,164(sp)
    4e98:	0038c406 	br	31ac <___svfprintf_internal_r+0x154>
    4e9c:	d8c02917 	ldw	r3,164(sp)
    4ea0:	d8802104 	addi	r2,sp,132
    4ea4:	d8800315 	stw	r2,12(sp)
    4ea8:	d9403617 	ldw	r5,216(sp)
    4eac:	d8802504 	addi	r2,sp,148
    4eb0:	d8800215 	stw	r2,8(sp)
    4eb4:	d8802604 	addi	r2,sp,152
    4eb8:	d8c00015 	stw	r3,0(sp)
    4ebc:	9809883a 	mov	r4,r19
    4ec0:	d8800115 	stw	r2,4(sp)
    4ec4:	01c000c4 	movi	r7,3
    4ec8:	a00d883a 	mov	r6,r20
    4ecc:	da003e15 	stw	r8,248(sp)
    4ed0:	00078540 	call	7854 <_dtoa_r>
    4ed4:	d9002917 	ldw	r4,164(sp)
    4ed8:	da003e17 	ldw	r8,248(sp)
    4edc:	1021883a 	mov	r16,r2
    4ee0:	1139883a 	add	fp,r2,r4
    4ee4:	2007883a 	mov	r3,r4
    4ee8:	81000007 	ldb	r4,0(r16)
    4eec:	00800c04 	movi	r2,48
    4ef0:	20806f26 	beq	r4,r2,50b0 <___svfprintf_internal_r+0x2058>
    4ef4:	d8c02617 	ldw	r3,152(sp)
    4ef8:	e0f9883a 	add	fp,fp,r3
    4efc:	003ec206 	br	4a08 <___svfprintf_internal_r+0x19b0>
    4f00:	00c00b44 	movi	r3,45
    4f04:	2520003c 	xorhi	r20,r4,32768
    4f08:	d8c02a05 	stb	r3,168(sp)
    4f0c:	003ea106 	br	4994 <___svfprintf_internal_r+0x193c>
    4f10:	d8c03217 	ldw	r3,200(sp)
    4f14:	00c0890e 	bge	zero,r3,513c <___svfprintf_internal_r+0x20e4>
    4f18:	00800044 	movi	r2,1
    4f1c:	d9003317 	ldw	r4,204(sp)
    4f20:	1105883a 	add	r2,r2,r4
    4f24:	d8802e15 	stw	r2,184(sp)
    4f28:	10005f16 	blt	r2,zero,50a8 <___svfprintf_internal_r+0x2050>
    4f2c:	044019c4 	movi	r17,103
    4f30:	003ed906 	br	4a98 <___svfprintf_internal_r+0x1a40>
    4f34:	d9002917 	ldw	r4,164(sp)
    4f38:	20c00044 	addi	r3,r4,1
    4f3c:	003e9c06 	br	49b0 <___svfprintf_internal_r+0x1958>
    4f40:	d9002917 	ldw	r4,164(sp)
    4f44:	00c0680e 	bge	zero,r3,50e8 <___svfprintf_internal_r+0x2090>
    4f48:	2000461e 	bne	r4,zero,5064 <___svfprintf_internal_r+0x200c>
    4f4c:	9480004c 	andi	r18,r18,1
    4f50:	9000441e 	bne	r18,zero,5064 <___svfprintf_internal_r+0x200c>
    4f54:	1805883a 	mov	r2,r3
    4f58:	1800a016 	blt	r3,zero,51dc <___svfprintf_internal_r+0x2184>
    4f5c:	d8c03217 	ldw	r3,200(sp)
    4f60:	d8c02e15 	stw	r3,184(sp)
    4f64:	003ecc06 	br	4a98 <___svfprintf_internal_r+0x1a40>
    4f68:	d9402917 	ldw	r5,164(sp)
    4f6c:	d8802104 	addi	r2,sp,132
    4f70:	d8800315 	stw	r2,12(sp)
    4f74:	d9400015 	stw	r5,0(sp)
    4f78:	d8802504 	addi	r2,sp,148
    4f7c:	d9403617 	ldw	r5,216(sp)
    4f80:	d8800215 	stw	r2,8(sp)
    4f84:	d8802604 	addi	r2,sp,152
    4f88:	d8800115 	stw	r2,4(sp)
    4f8c:	01c000c4 	movi	r7,3
    4f90:	a00d883a 	mov	r6,r20
    4f94:	9809883a 	mov	r4,r19
    4f98:	da003e15 	stw	r8,248(sp)
    4f9c:	00078540 	call	7854 <_dtoa_r>
    4fa0:	d8c02917 	ldw	r3,164(sp)
    4fa4:	da003e17 	ldw	r8,248(sp)
    4fa8:	1021883a 	mov	r16,r2
    4fac:	00801184 	movi	r2,70
    4fb0:	80f9883a 	add	fp,r16,r3
    4fb4:	88bfcc26 	beq	r17,r2,4ee8 <___svfprintf_internal_r+0x1e90>
    4fb8:	003e9306 	br	4a08 <___svfprintf_internal_r+0x19b0>
    4fbc:	df0022c4 	addi	fp,sp,139
    4fc0:	dc002915 	stw	r16,164(sp)
    4fc4:	9829883a 	mov	r20,r19
    4fc8:	e021883a 	mov	r16,fp
    4fcc:	4027883a 	mov	r19,r8
    4fd0:	b009883a 	mov	r4,r22
    4fd4:	01400284 	movi	r5,10
    4fd8:	000fd8c0 	call	fd8c <__modsi3>
    4fdc:	10800c04 	addi	r2,r2,48
    4fe0:	843fffc4 	addi	r16,r16,-1
    4fe4:	b009883a 	mov	r4,r22
    4fe8:	01400284 	movi	r5,10
    4fec:	80800005 	stb	r2,0(r16)
    4ff0:	000fd080 	call	fd08 <__divsi3>
    4ff4:	102d883a 	mov	r22,r2
    4ff8:	00800244 	movi	r2,9
    4ffc:	15bff416 	blt	r2,r22,4fd0 <___svfprintf_internal_r+0x1f78>
    5000:	9811883a 	mov	r8,r19
    5004:	b0800c04 	addi	r2,r22,48
    5008:	a027883a 	mov	r19,r20
    500c:	8029883a 	mov	r20,r16
    5010:	a17fffc4 	addi	r5,r20,-1
    5014:	a0bfffc5 	stb	r2,-1(r20)
    5018:	dc002917 	ldw	r16,164(sp)
    501c:	2f00752e 	bgeu	r5,fp,51f4 <___svfprintf_internal_r+0x219c>
    5020:	d9c02384 	addi	r7,sp,142
    5024:	3d0fc83a 	sub	r7,r7,r20
    5028:	d9002344 	addi	r4,sp,141
    502c:	e1cf883a 	add	r7,fp,r7
    5030:	00000106 	br	5038 <___svfprintf_internal_r+0x1fe0>
    5034:	28800003 	ldbu	r2,0(r5)
    5038:	20800005 	stb	r2,0(r4)
    503c:	21000044 	addi	r4,r4,1
    5040:	29400044 	addi	r5,r5,1
    5044:	21fffb1e 	bne	r4,r7,5034 <___svfprintf_internal_r+0x1fdc>
    5048:	d8802304 	addi	r2,sp,140
    504c:	1505c83a 	sub	r2,r2,r20
    5050:	d8c02344 	addi	r3,sp,141
    5054:	1885883a 	add	r2,r3,r2
    5058:	003f7006 	br	4e1c <___svfprintf_internal_r+0x1dc4>
    505c:	0005883a 	mov	r2,zero
    5060:	003f0b06 	br	4c90 <___svfprintf_internal_r+0x1c38>
    5064:	d9002917 	ldw	r4,164(sp)
    5068:	d8c03217 	ldw	r3,200(sp)
    506c:	20800044 	addi	r2,r4,1
    5070:	1885883a 	add	r2,r3,r2
    5074:	d8802e15 	stw	r2,184(sp)
    5078:	103e870e 	bge	r2,zero,4a98 <___svfprintf_internal_r+0x1a40>
    507c:	0005883a 	mov	r2,zero
    5080:	003e8506 	br	4a98 <___svfprintf_internal_r+0x1a40>
    5084:	010000b4 	movhi	r4,2
    5088:	21118e84 	addi	r4,r4,17978
    508c:	d9002b15 	stw	r4,172(sp)
    5090:	003cc506 	br	43a8 <___svfprintf_internal_r+0x1350>
    5094:	d8c03217 	ldw	r3,200(sp)
    5098:	18c00044 	addi	r3,r3,1
    509c:	d8c02e15 	stw	r3,184(sp)
    50a0:	1805883a 	mov	r2,r3
    50a4:	183fa10e 	bge	r3,zero,4f2c <___svfprintf_internal_r+0x1ed4>
    50a8:	0005883a 	mov	r2,zero
    50ac:	003f9f06 	br	4f2c <___svfprintf_internal_r+0x1ed4>
    50b0:	d9003617 	ldw	r4,216(sp)
    50b4:	000d883a 	mov	r6,zero
    50b8:	000f883a 	mov	r7,zero
    50bc:	a00b883a 	mov	r5,r20
    50c0:	d8c03d15 	stw	r3,244(sp)
    50c4:	da003e15 	stw	r8,248(sp)
    50c8:	00110500 	call	11050 <__eqdf2>
    50cc:	d8c03d17 	ldw	r3,244(sp)
    50d0:	da003e17 	ldw	r8,248(sp)
    50d4:	103f8726 	beq	r2,zero,4ef4 <___svfprintf_internal_r+0x1e9c>
    50d8:	00800044 	movi	r2,1
    50dc:	10c7c83a 	sub	r3,r2,r3
    50e0:	d8c02615 	stw	r3,152(sp)
    50e4:	003f8406 	br	4ef8 <___svfprintf_internal_r+0x1ea0>
    50e8:	20000e1e 	bne	r4,zero,5124 <___svfprintf_internal_r+0x20cc>
    50ec:	9480004c 	andi	r18,r18,1
    50f0:	90000c1e 	bne	r18,zero,5124 <___svfprintf_internal_r+0x20cc>
    50f4:	00800044 	movi	r2,1
    50f8:	d8802e15 	stw	r2,184(sp)
    50fc:	003e6606 	br	4a98 <___svfprintf_internal_r+0x1a40>
    5100:	00800b44 	movi	r2,45
    5104:	05adc83a 	sub	r22,zero,r22
    5108:	d8802305 	stb	r2,140(sp)
    510c:	003f3b06 	br	4dfc <___svfprintf_internal_r+0x1da4>
    5110:	0005883a 	mov	r2,zero
    5114:	003f4e06 	br	4e50 <___svfprintf_internal_r+0x1df8>
    5118:	90a4703a 	and	r18,r18,r2
    511c:	903f4a26 	beq	r18,zero,4e48 <___svfprintf_internal_r+0x1df0>
    5120:	003f4606 	br	4e3c <___svfprintf_internal_r+0x1de4>
    5124:	d8c02917 	ldw	r3,164(sp)
    5128:	18c00084 	addi	r3,r3,2
    512c:	d8c02e15 	stw	r3,184(sp)
    5130:	1805883a 	mov	r2,r3
    5134:	183e580e 	bge	r3,zero,4a98 <___svfprintf_internal_r+0x1a40>
    5138:	003fd006 	br	507c <___svfprintf_internal_r+0x2024>
    513c:	00800084 	movi	r2,2
    5140:	10c5c83a 	sub	r2,r2,r3
    5144:	003f7506 	br	4f1c <___svfprintf_internal_r+0x1ec4>
    5148:	d8802d17 	ldw	r2,180(sp)
    514c:	d9002d17 	ldw	r4,180(sp)
    5150:	bc400043 	ldbu	r17,1(r23)
    5154:	10800017 	ldw	r2,0(r2)
    5158:	582f883a 	mov	r23,r11
    515c:	d8802915 	stw	r2,164(sp)
    5160:	20800104 	addi	r2,r4,4
    5164:	d9002917 	ldw	r4,164(sp)
    5168:	d8802d15 	stw	r2,180(sp)
    516c:	203df00e 	bge	r4,zero,4930 <___svfprintf_internal_r+0x18d8>
    5170:	8c403fcc 	andi	r17,r17,255
    5174:	00bfffc4 	movi	r2,-1
    5178:	8c40201c 	xori	r17,r17,128
    517c:	d8802915 	stw	r2,164(sp)
    5180:	8c7fe004 	addi	r17,r17,-128
    5184:	00380806 	br	31a8 <___svfprintf_internal_r+0x150>
    5188:	9080004c 	andi	r2,r18,1
    518c:	0039883a 	mov	fp,zero
    5190:	10000726 	beq	r2,zero,51b0 <___svfprintf_internal_r+0x2158>
    5194:	d8c02817 	ldw	r3,160(sp)
    5198:	dc001dc4 	addi	r16,sp,119
    519c:	00800c04 	movi	r2,48
    51a0:	1c07c83a 	sub	r3,r3,r16
    51a4:	d8801dc5 	stb	r2,119(sp)
    51a8:	d8c02e15 	stw	r3,184(sp)
    51ac:	00395206 	br	36f8 <___svfprintf_internal_r+0x6a0>
    51b0:	d8002e15 	stw	zero,184(sp)
    51b4:	dc001e04 	addi	r16,sp,120
    51b8:	00394f06 	br	36f8 <___svfprintf_internal_r+0x6a0>
    51bc:	0005883a 	mov	r2,zero
    51c0:	003e3206 	br	4a8c <___svfprintf_internal_r+0x1a34>
    51c4:	dd802617 	ldw	r22,152(sp)
    51c8:	003f0606 	br	4de4 <___svfprintf_internal_r+0x1d8c>
    51cc:	d9c02785 	stb	r7,158(sp)
    51d0:	003a5106 	br	3b18 <___svfprintf_internal_r+0xac0>
    51d4:	d9c02785 	stb	r7,158(sp)
    51d8:	003a3706 	br	3ab8 <___svfprintf_internal_r+0xa60>
    51dc:	0005883a 	mov	r2,zero
    51e0:	003f5e06 	br	4f5c <___svfprintf_internal_r+0x1f04>
    51e4:	d9c02785 	stb	r7,158(sp)
    51e8:	00391706 	br	3648 <___svfprintf_internal_r+0x5f0>
    51ec:	d9c02785 	stb	r7,158(sp)
    51f0:	0038e606 	br	358c <___svfprintf_internal_r+0x534>
    51f4:	d8802344 	addi	r2,sp,141
    51f8:	003f0806 	br	4e1c <___svfprintf_internal_r+0x1dc4>
    51fc:	d9c02785 	stb	r7,158(sp)
    5200:	0038b706 	br	34e0 <___svfprintf_internal_r+0x488>
    5204:	d9c02785 	stb	r7,158(sp)
    5208:	003adc06 	br	3d7c <___svfprintf_internal_r+0xd24>
    520c:	d9403917 	ldw	r5,228(sp)
    5210:	00800304 	movi	r2,12
    5214:	28800015 	stw	r2,0(r5)
    5218:	00bfffc4 	movi	r2,-1
    521c:	00387806 	br	3400 <___svfprintf_internal_r+0x3a8>
    5220:	d9c02785 	stb	r7,158(sp)
    5224:	003abf06 	br	3d24 <___svfprintf_internal_r+0xccc>
    5228:	d9c02785 	stb	r7,158(sp)
    522c:	003a9b06 	br	3c9c <___svfprintf_internal_r+0xc44>

00005230 <___vfprintf_internal_r>:
    5230:	deffb804 	addi	sp,sp,-288
    5234:	dfc04715 	stw	ra,284(sp)
    5238:	ddc04515 	stw	r23,276(sp)
    523c:	dd404315 	stw	r21,268(sp)
    5240:	d9002c15 	stw	r4,176(sp)
    5244:	282f883a 	mov	r23,r5
    5248:	302b883a 	mov	r21,r6
    524c:	d9c02d15 	stw	r7,180(sp)
    5250:	df004615 	stw	fp,280(sp)
    5254:	dd804415 	stw	r22,272(sp)
    5258:	dd004215 	stw	r20,264(sp)
    525c:	dcc04115 	stw	r19,260(sp)
    5260:	dc804015 	stw	r18,256(sp)
    5264:	dc403f15 	stw	r17,252(sp)
    5268:	dc003e15 	stw	r16,248(sp)
    526c:	000a0480 	call	a048 <_localeconv_r>
    5270:	10800017 	ldw	r2,0(r2)
    5274:	1009883a 	mov	r4,r2
    5278:	d8803415 	stw	r2,208(sp)
    527c:	0002fc00 	call	2fc0 <strlen>
    5280:	d8803715 	stw	r2,220(sp)
    5284:	d8802c17 	ldw	r2,176(sp)
    5288:	10000226 	beq	r2,zero,5294 <___vfprintf_internal_r+0x64>
    528c:	10800e17 	ldw	r2,56(r2)
    5290:	1000f926 	beq	r2,zero,5678 <___vfprintf_internal_r+0x448>
    5294:	b880030b 	ldhu	r2,12(r23)
    5298:	10c8000c 	andi	r3,r2,8192
    529c:	1800061e 	bne	r3,zero,52b8 <___vfprintf_internal_r+0x88>
    52a0:	b9001917 	ldw	r4,100(r23)
    52a4:	00f7ffc4 	movi	r3,-8193
    52a8:	10880014 	ori	r2,r2,8192
    52ac:	20c6703a 	and	r3,r4,r3
    52b0:	b880030d 	sth	r2,12(r23)
    52b4:	b8c01915 	stw	r3,100(r23)
    52b8:	10c0020c 	andi	r3,r2,8
    52bc:	1800c126 	beq	r3,zero,55c4 <___vfprintf_internal_r+0x394>
    52c0:	b8c00417 	ldw	r3,16(r23)
    52c4:	1800bf26 	beq	r3,zero,55c4 <___vfprintf_internal_r+0x394>
    52c8:	1080068c 	andi	r2,r2,26
    52cc:	00c00284 	movi	r3,10
    52d0:	10c0c426 	beq	r2,r3,55e4 <___vfprintf_internal_r+0x3b4>
    52d4:	d8c00404 	addi	r3,sp,16
    52d8:	050000b4 	movhi	r20,2
    52dc:	d9001e04 	addi	r4,sp,120
    52e0:	a5119684 	addi	r20,r20,18010
    52e4:	d8c01e15 	stw	r3,120(sp)
    52e8:	d8002015 	stw	zero,128(sp)
    52ec:	d8001f15 	stw	zero,124(sp)
    52f0:	d8003315 	stw	zero,204(sp)
    52f4:	d8003615 	stw	zero,216(sp)
    52f8:	d8003815 	stw	zero,224(sp)
    52fc:	1811883a 	mov	r8,r3
    5300:	d8003915 	stw	zero,228(sp)
    5304:	d8003a15 	stw	zero,232(sp)
    5308:	d8002f15 	stw	zero,188(sp)
    530c:	d9002815 	stw	r4,160(sp)
    5310:	a8800007 	ldb	r2,0(r21)
    5314:	10027b26 	beq	r2,zero,5d04 <___vfprintf_internal_r+0xad4>
    5318:	00c00944 	movi	r3,37
    531c:	a821883a 	mov	r16,r21
    5320:	10c0021e 	bne	r2,r3,532c <___vfprintf_internal_r+0xfc>
    5324:	00001406 	br	5378 <___vfprintf_internal_r+0x148>
    5328:	10c00326 	beq	r2,r3,5338 <___vfprintf_internal_r+0x108>
    532c:	84000044 	addi	r16,r16,1
    5330:	80800007 	ldb	r2,0(r16)
    5334:	103ffc1e 	bne	r2,zero,5328 <___vfprintf_internal_r+0xf8>
    5338:	8563c83a 	sub	r17,r16,r21
    533c:	88000e26 	beq	r17,zero,5378 <___vfprintf_internal_r+0x148>
    5340:	d8c02017 	ldw	r3,128(sp)
    5344:	d8801f17 	ldw	r2,124(sp)
    5348:	45400015 	stw	r21,0(r8)
    534c:	1c47883a 	add	r3,r3,r17
    5350:	10800044 	addi	r2,r2,1
    5354:	d8c02015 	stw	r3,128(sp)
    5358:	44400115 	stw	r17,4(r8)
    535c:	d8801f15 	stw	r2,124(sp)
    5360:	00c001c4 	movi	r3,7
    5364:	1880a716 	blt	r3,r2,5604 <___vfprintf_internal_r+0x3d4>
    5368:	42000204 	addi	r8,r8,8
    536c:	d9402f17 	ldw	r5,188(sp)
    5370:	2c4b883a 	add	r5,r5,r17
    5374:	d9402f15 	stw	r5,188(sp)
    5378:	80800007 	ldb	r2,0(r16)
    537c:	1000a826 	beq	r2,zero,5620 <___vfprintf_internal_r+0x3f0>
    5380:	84400047 	ldb	r17,1(r16)
    5384:	00bfffc4 	movi	r2,-1
    5388:	85400044 	addi	r21,r16,1
    538c:	d8002785 	stb	zero,158(sp)
    5390:	0007883a 	mov	r3,zero
    5394:	000f883a 	mov	r7,zero
    5398:	d8802915 	stw	r2,164(sp)
    539c:	d8003115 	stw	zero,196(sp)
    53a0:	0025883a 	mov	r18,zero
    53a4:	01401604 	movi	r5,88
    53a8:	01800244 	movi	r6,9
    53ac:	02800a84 	movi	r10,42
    53b0:	02401b04 	movi	r9,108
    53b4:	ad400044 	addi	r21,r21,1
    53b8:	88bff804 	addi	r2,r17,-32
    53bc:	28830436 	bltu	r5,r2,5fd0 <___vfprintf_internal_r+0xda0>
    53c0:	100490ba 	slli	r2,r2,2
    53c4:	01000034 	movhi	r4,0
    53c8:	2114f604 	addi	r4,r4,21464
    53cc:	1105883a 	add	r2,r2,r4
    53d0:	10800017 	ldw	r2,0(r2)
    53d4:	1000683a 	jmp	r2
    53d8:	00005ef0 	cmpltui	zero,zero,379
    53dc:	00005fd0 	cmplti	zero,zero,383
    53e0:	00005fd0 	cmplti	zero,zero,383
    53e4:	00005f10 	cmplti	zero,zero,380
    53e8:	00005fd0 	cmplti	zero,zero,383
    53ec:	00005fd0 	cmplti	zero,zero,383
    53f0:	00005fd0 	cmplti	zero,zero,383
    53f4:	00005fd0 	cmplti	zero,zero,383
    53f8:	00005fd0 	cmplti	zero,zero,383
    53fc:	00005fd0 	cmplti	zero,zero,383
    5400:	00005684 	movi	zero,346
    5404:	00005e2c 	andhi	zero,zero,376
    5408:	00005fd0 	cmplti	zero,zero,383
    540c:	0000554c 	andi	zero,zero,341
    5410:	000056ac 	andhi	zero,zero,346
    5414:	00005fd0 	cmplti	zero,zero,383
    5418:	000056ec 	andhi	zero,zero,347
    541c:	000056f8 	rdprs	zero,zero,347
    5420:	000056f8 	rdprs	zero,zero,347
    5424:	000056f8 	rdprs	zero,zero,347
    5428:	000056f8 	rdprs	zero,zero,347
    542c:	000056f8 	rdprs	zero,zero,347
    5430:	000056f8 	rdprs	zero,zero,347
    5434:	000056f8 	rdprs	zero,zero,347
    5438:	000056f8 	rdprs	zero,zero,347
    543c:	000056f8 	rdprs	zero,zero,347
    5440:	00005fd0 	cmplti	zero,zero,383
    5444:	00005fd0 	cmplti	zero,zero,383
    5448:	00005fd0 	cmplti	zero,zero,383
    544c:	00005fd0 	cmplti	zero,zero,383
    5450:	00005fd0 	cmplti	zero,zero,383
    5454:	00005fd0 	cmplti	zero,zero,383
    5458:	00005fd0 	cmplti	zero,zero,383
    545c:	00005fd0 	cmplti	zero,zero,383
    5460:	00005fd0 	cmplti	zero,zero,383
    5464:	00005fd0 	cmplti	zero,zero,383
    5468:	0000572c 	andhi	zero,zero,348
    546c:	000057e8 	cmpgeui	zero,zero,351
    5470:	00005fd0 	cmplti	zero,zero,383
    5474:	000057e8 	cmpgeui	zero,zero,351
    5478:	00005fd0 	cmplti	zero,zero,383
    547c:	00005fd0 	cmplti	zero,zero,383
    5480:	00005fd0 	cmplti	zero,zero,383
    5484:	00005fd0 	cmplti	zero,zero,383
    5488:	00005888 	cmpgei	zero,zero,354
    548c:	00005fd0 	cmplti	zero,zero,383
    5490:	00005fd0 	cmplti	zero,zero,383
    5494:	00005894 	movui	zero,354
    5498:	00005fd0 	cmplti	zero,zero,383
    549c:	00005fd0 	cmplti	zero,zero,383
    54a0:	00005fd0 	cmplti	zero,zero,383
    54a4:	00005fd0 	cmplti	zero,zero,383
    54a8:	00005fd0 	cmplti	zero,zero,383
    54ac:	00005d0c 	andi	zero,zero,372
    54b0:	00005fd0 	cmplti	zero,zero,383
    54b4:	00005fd0 	cmplti	zero,zero,383
    54b8:	00005d6c 	andhi	zero,zero,373
    54bc:	00005fd0 	cmplti	zero,zero,383
    54c0:	00005fd0 	cmplti	zero,zero,383
    54c4:	00005fd0 	cmplti	zero,zero,383
    54c8:	00005fd0 	cmplti	zero,zero,383
    54cc:	00005fd0 	cmplti	zero,zero,383
    54d0:	00005fd0 	cmplti	zero,zero,383
    54d4:	00005fd0 	cmplti	zero,zero,383
    54d8:	00005fd0 	cmplti	zero,zero,383
    54dc:	00005fd0 	cmplti	zero,zero,383
    54e0:	00005fd0 	cmplti	zero,zero,383
    54e4:	00005f7c 	xorhi	zero,zero,381
    54e8:	00005f1c 	xori	zero,zero,380
    54ec:	000057e8 	cmpgeui	zero,zero,351
    54f0:	000057e8 	cmpgeui	zero,zero,351
    54f4:	000057e8 	cmpgeui	zero,zero,351
    54f8:	00005f2c 	andhi	zero,zero,380
    54fc:	00005f1c 	xori	zero,zero,380
    5500:	00005fd0 	cmplti	zero,zero,383
    5504:	00005fd0 	cmplti	zero,zero,383
    5508:	00005f38 	rdprs	zero,zero,380
    550c:	00005fd0 	cmplti	zero,zero,383
    5510:	00005f48 	cmpgei	zero,zero,381
    5514:	00005e1c 	xori	zero,zero,376
    5518:	00005558 	cmpnei	zero,zero,341
    551c:	00005e3c 	xorhi	zero,zero,376
    5520:	00005fd0 	cmplti	zero,zero,383
    5524:	00005e48 	cmpgei	zero,zero,377
    5528:	00005fd0 	cmplti	zero,zero,383
    552c:	00005ea4 	muli	zero,zero,378
    5530:	00005fd0 	cmplti	zero,zero,383
    5534:	00005fd0 	cmplti	zero,zero,383
    5538:	00005eb4 	movhi	zero,378
    553c:	d9003117 	ldw	r4,196(sp)
    5540:	d8802d15 	stw	r2,180(sp)
    5544:	0109c83a 	sub	r4,zero,r4
    5548:	d9003115 	stw	r4,196(sp)
    554c:	94800114 	ori	r18,r18,4
    5550:	ac400007 	ldb	r17,0(r21)
    5554:	003f9706 	br	53b4 <___vfprintf_internal_r+0x184>
    5558:	00800c04 	movi	r2,48
    555c:	d9002d17 	ldw	r4,180(sp)
    5560:	d9402917 	ldw	r5,164(sp)
    5564:	d8802705 	stb	r2,156(sp)
    5568:	00801e04 	movi	r2,120
    556c:	d8802745 	stb	r2,157(sp)
    5570:	d8002785 	stb	zero,158(sp)
    5574:	20c00104 	addi	r3,r4,4
    5578:	24c00017 	ldw	r19,0(r4)
    557c:	002d883a 	mov	r22,zero
    5580:	90800094 	ori	r2,r18,2
    5584:	28029a16 	blt	r5,zero,5ff0 <___vfprintf_internal_r+0xdc0>
    5588:	00bfdfc4 	movi	r2,-129
    558c:	90a4703a 	and	r18,r18,r2
    5590:	d8c02d15 	stw	r3,180(sp)
    5594:	94800094 	ori	r18,r18,2
    5598:	9802871e 	bne	r19,zero,5fb8 <___vfprintf_internal_r+0xd88>
    559c:	008000b4 	movhi	r2,2
    55a0:	10918704 	addi	r2,r2,17948
    55a4:	d8803915 	stw	r2,228(sp)
    55a8:	04401e04 	movi	r17,120
    55ac:	d8802917 	ldw	r2,164(sp)
    55b0:	0039883a 	mov	fp,zero
    55b4:	1001e926 	beq	r2,zero,5d5c <___vfprintf_internal_r+0xb2c>
    55b8:	0027883a 	mov	r19,zero
    55bc:	002d883a 	mov	r22,zero
    55c0:	00020506 	br	5dd8 <___vfprintf_internal_r+0xba8>
    55c4:	d9002c17 	ldw	r4,176(sp)
    55c8:	b80b883a 	mov	r5,r23
    55cc:	00075000 	call	7500 <__swsetup_r>
    55d0:	1005ac1e 	bne	r2,zero,6c84 <___vfprintf_internal_r+0x1a54>
    55d4:	b880030b 	ldhu	r2,12(r23)
    55d8:	00c00284 	movi	r3,10
    55dc:	1080068c 	andi	r2,r2,26
    55e0:	10ff3c1e 	bne	r2,r3,52d4 <___vfprintf_internal_r+0xa4>
    55e4:	b880038f 	ldh	r2,14(r23)
    55e8:	103f3a16 	blt	r2,zero,52d4 <___vfprintf_internal_r+0xa4>
    55ec:	d9c02d17 	ldw	r7,180(sp)
    55f0:	d9002c17 	ldw	r4,176(sp)
    55f4:	a80d883a 	mov	r6,r21
    55f8:	b80b883a 	mov	r5,r23
    55fc:	00074440 	call	7444 <__sbprintf>
    5600:	00001106 	br	5648 <___vfprintf_internal_r+0x418>
    5604:	d9002c17 	ldw	r4,176(sp)
    5608:	d9801e04 	addi	r6,sp,120
    560c:	b80b883a 	mov	r5,r23
    5610:	000d3d80 	call	d3d8 <__sprint_r>
    5614:	1000081e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5618:	da000404 	addi	r8,sp,16
    561c:	003f5306 	br	536c <___vfprintf_internal_r+0x13c>
    5620:	d8802017 	ldw	r2,128(sp)
    5624:	10000426 	beq	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5628:	d9002c17 	ldw	r4,176(sp)
    562c:	d9801e04 	addi	r6,sp,120
    5630:	b80b883a 	mov	r5,r23
    5634:	000d3d80 	call	d3d8 <__sprint_r>
    5638:	b880030b 	ldhu	r2,12(r23)
    563c:	1080100c 	andi	r2,r2,64
    5640:	1005901e 	bne	r2,zero,6c84 <___vfprintf_internal_r+0x1a54>
    5644:	d8802f17 	ldw	r2,188(sp)
    5648:	dfc04717 	ldw	ra,284(sp)
    564c:	df004617 	ldw	fp,280(sp)
    5650:	ddc04517 	ldw	r23,276(sp)
    5654:	dd804417 	ldw	r22,272(sp)
    5658:	dd404317 	ldw	r21,268(sp)
    565c:	dd004217 	ldw	r20,264(sp)
    5660:	dcc04117 	ldw	r19,260(sp)
    5664:	dc804017 	ldw	r18,256(sp)
    5668:	dc403f17 	ldw	r17,252(sp)
    566c:	dc003e17 	ldw	r16,248(sp)
    5670:	dec04804 	addi	sp,sp,288
    5674:	f800283a 	ret
    5678:	d9002c17 	ldw	r4,176(sp)
    567c:	00094d40 	call	94d4 <__sinit>
    5680:	003f0406 	br	5294 <___vfprintf_internal_r+0x64>
    5684:	d8802d17 	ldw	r2,180(sp)
    5688:	d9002d17 	ldw	r4,180(sp)
    568c:	10800017 	ldw	r2,0(r2)
    5690:	d8803115 	stw	r2,196(sp)
    5694:	20800104 	addi	r2,r4,4
    5698:	d9003117 	ldw	r4,196(sp)
    569c:	203fa716 	blt	r4,zero,553c <___vfprintf_internal_r+0x30c>
    56a0:	d8802d15 	stw	r2,180(sp)
    56a4:	ac400007 	ldb	r17,0(r21)
    56a8:	003f4206 	br	53b4 <___vfprintf_internal_r+0x184>
    56ac:	ac400007 	ldb	r17,0(r21)
    56b0:	aac00044 	addi	r11,r21,1
    56b4:	8a872826 	beq	r17,r10,7358 <___vfprintf_internal_r+0x2128>
    56b8:	88bff404 	addi	r2,r17,-48
    56bc:	0009883a 	mov	r4,zero
    56c0:	30867d36 	bltu	r6,r2,70b8 <___vfprintf_internal_r+0x1e88>
    56c4:	5c400007 	ldb	r17,0(r11)
    56c8:	210002a4 	muli	r4,r4,10
    56cc:	5d400044 	addi	r21,r11,1
    56d0:	a817883a 	mov	r11,r21
    56d4:	2089883a 	add	r4,r4,r2
    56d8:	88bff404 	addi	r2,r17,-48
    56dc:	30bff92e 	bgeu	r6,r2,56c4 <___vfprintf_internal_r+0x494>
    56e0:	2005c916 	blt	r4,zero,6e08 <___vfprintf_internal_r+0x1bd8>
    56e4:	d9002915 	stw	r4,164(sp)
    56e8:	003f3306 	br	53b8 <___vfprintf_internal_r+0x188>
    56ec:	94802014 	ori	r18,r18,128
    56f0:	ac400007 	ldb	r17,0(r21)
    56f4:	003f2f06 	br	53b4 <___vfprintf_internal_r+0x184>
    56f8:	a809883a 	mov	r4,r21
    56fc:	d8003115 	stw	zero,196(sp)
    5700:	88bff404 	addi	r2,r17,-48
    5704:	0017883a 	mov	r11,zero
    5708:	24400007 	ldb	r17,0(r4)
    570c:	5ac002a4 	muli	r11,r11,10
    5710:	ad400044 	addi	r21,r21,1
    5714:	a809883a 	mov	r4,r21
    5718:	12d7883a 	add	r11,r2,r11
    571c:	88bff404 	addi	r2,r17,-48
    5720:	30bff92e 	bgeu	r6,r2,5708 <___vfprintf_internal_r+0x4d8>
    5724:	dac03115 	stw	r11,196(sp)
    5728:	003f2306 	br	53b8 <___vfprintf_internal_r+0x188>
    572c:	18c03fcc 	andi	r3,r3,255
    5730:	18072b1e 	bne	r3,zero,73e0 <___vfprintf_internal_r+0x21b0>
    5734:	94800414 	ori	r18,r18,16
    5738:	9080080c 	andi	r2,r18,32
    573c:	10037b26 	beq	r2,zero,652c <___vfprintf_internal_r+0x12fc>
    5740:	d9402d17 	ldw	r5,180(sp)
    5744:	28800117 	ldw	r2,4(r5)
    5748:	2cc00017 	ldw	r19,0(r5)
    574c:	29400204 	addi	r5,r5,8
    5750:	d9402d15 	stw	r5,180(sp)
    5754:	102d883a 	mov	r22,r2
    5758:	10044b16 	blt	r2,zero,6888 <___vfprintf_internal_r+0x1658>
    575c:	d9402917 	ldw	r5,164(sp)
    5760:	df002783 	ldbu	fp,158(sp)
    5764:	2803bc16 	blt	r5,zero,6658 <___vfprintf_internal_r+0x1428>
    5768:	00ffdfc4 	movi	r3,-129
    576c:	9d84b03a 	or	r2,r19,r22
    5770:	90e4703a 	and	r18,r18,r3
    5774:	10017726 	beq	r2,zero,5d54 <___vfprintf_internal_r+0xb24>
    5778:	b0038326 	beq	r22,zero,6588 <___vfprintf_internal_r+0x1358>
    577c:	dc402a15 	stw	r17,168(sp)
    5780:	dc001e04 	addi	r16,sp,120
    5784:	b023883a 	mov	r17,r22
    5788:	402d883a 	mov	r22,r8
    578c:	9809883a 	mov	r4,r19
    5790:	880b883a 	mov	r5,r17
    5794:	01800284 	movi	r6,10
    5798:	000f883a 	mov	r7,zero
    579c:	000f7d00 	call	f7d0 <__umoddi3>
    57a0:	10800c04 	addi	r2,r2,48
    57a4:	843fffc4 	addi	r16,r16,-1
    57a8:	9809883a 	mov	r4,r19
    57ac:	880b883a 	mov	r5,r17
    57b0:	80800005 	stb	r2,0(r16)
    57b4:	01800284 	movi	r6,10
    57b8:	000f883a 	mov	r7,zero
    57bc:	000f2580 	call	f258 <__udivdi3>
    57c0:	1027883a 	mov	r19,r2
    57c4:	10c4b03a 	or	r2,r2,r3
    57c8:	1823883a 	mov	r17,r3
    57cc:	103fef1e 	bne	r2,zero,578c <___vfprintf_internal_r+0x55c>
    57d0:	d8c02817 	ldw	r3,160(sp)
    57d4:	dc402a17 	ldw	r17,168(sp)
    57d8:	b011883a 	mov	r8,r22
    57dc:	1c07c83a 	sub	r3,r3,r16
    57e0:	d8c02e15 	stw	r3,184(sp)
    57e4:	00005906 	br	594c <___vfprintf_internal_r+0x71c>
    57e8:	18c03fcc 	andi	r3,r3,255
    57ec:	1806fa1e 	bne	r3,zero,73d8 <___vfprintf_internal_r+0x21a8>
    57f0:	9080020c 	andi	r2,r18,8
    57f4:	10048a26 	beq	r2,zero,6a20 <___vfprintf_internal_r+0x17f0>
    57f8:	d8c02d17 	ldw	r3,180(sp)
    57fc:	d9002d17 	ldw	r4,180(sp)
    5800:	d9402d17 	ldw	r5,180(sp)
    5804:	18c00017 	ldw	r3,0(r3)
    5808:	21000117 	ldw	r4,4(r4)
    580c:	29400204 	addi	r5,r5,8
    5810:	d8c03615 	stw	r3,216(sp)
    5814:	d9003815 	stw	r4,224(sp)
    5818:	d9402d15 	stw	r5,180(sp)
    581c:	d9003617 	ldw	r4,216(sp)
    5820:	d9403817 	ldw	r5,224(sp)
    5824:	da003d15 	stw	r8,244(sp)
    5828:	04000044 	movi	r16,1
    582c:	000bc440 	call	bc44 <__fpclassifyd>
    5830:	da003d17 	ldw	r8,244(sp)
    5834:	14041f1e 	bne	r2,r16,68b4 <___vfprintf_internal_r+0x1684>
    5838:	d9003617 	ldw	r4,216(sp)
    583c:	d9403817 	ldw	r5,224(sp)
    5840:	000d883a 	mov	r6,zero
    5844:	000f883a 	mov	r7,zero
    5848:	00111b40 	call	111b4 <__ledf2>
    584c:	da003d17 	ldw	r8,244(sp)
    5850:	1005be16 	blt	r2,zero,6f4c <___vfprintf_internal_r+0x1d1c>
    5854:	df002783 	ldbu	fp,158(sp)
    5858:	008011c4 	movi	r2,71
    585c:	1445330e 	bge	r2,r17,6d2c <___vfprintf_internal_r+0x1afc>
    5860:	040000b4 	movhi	r16,2
    5864:	84117f04 	addi	r16,r16,17916
    5868:	00c000c4 	movi	r3,3
    586c:	00bfdfc4 	movi	r2,-129
    5870:	d8c02a15 	stw	r3,168(sp)
    5874:	90a4703a 	and	r18,r18,r2
    5878:	d8c02e15 	stw	r3,184(sp)
    587c:	d8002915 	stw	zero,164(sp)
    5880:	d8003215 	stw	zero,200(sp)
    5884:	00003706 	br	5964 <___vfprintf_internal_r+0x734>
    5888:	94800214 	ori	r18,r18,8
    588c:	ac400007 	ldb	r17,0(r21)
    5890:	003ec806 	br	53b4 <___vfprintf_internal_r+0x184>
    5894:	18c03fcc 	andi	r3,r3,255
    5898:	1806db1e 	bne	r3,zero,7408 <___vfprintf_internal_r+0x21d8>
    589c:	94800414 	ori	r18,r18,16
    58a0:	9080080c 	andi	r2,r18,32
    58a4:	1002d826 	beq	r2,zero,6408 <___vfprintf_internal_r+0x11d8>
    58a8:	d9402d17 	ldw	r5,180(sp)
    58ac:	d8c02917 	ldw	r3,164(sp)
    58b0:	d8002785 	stb	zero,158(sp)
    58b4:	28800204 	addi	r2,r5,8
    58b8:	2cc00017 	ldw	r19,0(r5)
    58bc:	2d800117 	ldw	r22,4(r5)
    58c0:	18048f16 	blt	r3,zero,6b00 <___vfprintf_internal_r+0x18d0>
    58c4:	013fdfc4 	movi	r4,-129
    58c8:	9d86b03a 	or	r3,r19,r22
    58cc:	d8802d15 	stw	r2,180(sp)
    58d0:	9124703a 	and	r18,r18,r4
    58d4:	1802d91e 	bne	r3,zero,643c <___vfprintf_internal_r+0x120c>
    58d8:	d8c02917 	ldw	r3,164(sp)
    58dc:	0039883a 	mov	fp,zero
    58e0:	1805c326 	beq	r3,zero,6ff0 <___vfprintf_internal_r+0x1dc0>
    58e4:	0027883a 	mov	r19,zero
    58e8:	002d883a 	mov	r22,zero
    58ec:	dc001e04 	addi	r16,sp,120
    58f0:	9806d0fa 	srli	r3,r19,3
    58f4:	b008977a 	slli	r4,r22,29
    58f8:	b02cd0fa 	srli	r22,r22,3
    58fc:	9cc001cc 	andi	r19,r19,7
    5900:	98800c04 	addi	r2,r19,48
    5904:	843fffc4 	addi	r16,r16,-1
    5908:	20e6b03a 	or	r19,r4,r3
    590c:	80800005 	stb	r2,0(r16)
    5910:	9d86b03a 	or	r3,r19,r22
    5914:	183ff61e 	bne	r3,zero,58f0 <___vfprintf_internal_r+0x6c0>
    5918:	90c0004c 	andi	r3,r18,1
    591c:	18013b26 	beq	r3,zero,5e0c <___vfprintf_internal_r+0xbdc>
    5920:	10803fcc 	andi	r2,r2,255
    5924:	1080201c 	xori	r2,r2,128
    5928:	10bfe004 	addi	r2,r2,-128
    592c:	00c00c04 	movi	r3,48
    5930:	10c13626 	beq	r2,r3,5e0c <___vfprintf_internal_r+0xbdc>
    5934:	80ffffc5 	stb	r3,-1(r16)
    5938:	d8c02817 	ldw	r3,160(sp)
    593c:	80bfffc4 	addi	r2,r16,-1
    5940:	1021883a 	mov	r16,r2
    5944:	1887c83a 	sub	r3,r3,r2
    5948:	d8c02e15 	stw	r3,184(sp)
    594c:	d8802e17 	ldw	r2,184(sp)
    5950:	d9002917 	ldw	r4,164(sp)
    5954:	1100010e 	bge	r2,r4,595c <___vfprintf_internal_r+0x72c>
    5958:	2005883a 	mov	r2,r4
    595c:	d8802a15 	stw	r2,168(sp)
    5960:	d8003215 	stw	zero,200(sp)
    5964:	e7003fcc 	andi	fp,fp,255
    5968:	e700201c 	xori	fp,fp,128
    596c:	e73fe004 	addi	fp,fp,-128
    5970:	e0000326 	beq	fp,zero,5980 <___vfprintf_internal_r+0x750>
    5974:	d8c02a17 	ldw	r3,168(sp)
    5978:	18c00044 	addi	r3,r3,1
    597c:	d8c02a15 	stw	r3,168(sp)
    5980:	90c0008c 	andi	r3,r18,2
    5984:	d8c02b15 	stw	r3,172(sp)
    5988:	18000326 	beq	r3,zero,5998 <___vfprintf_internal_r+0x768>
    598c:	d8c02a17 	ldw	r3,168(sp)
    5990:	18c00084 	addi	r3,r3,2
    5994:	d8c02a15 	stw	r3,168(sp)
    5998:	90c0210c 	andi	r3,r18,132
    599c:	d8c03015 	stw	r3,192(sp)
    59a0:	1801a31e 	bne	r3,zero,6030 <___vfprintf_internal_r+0xe00>
    59a4:	d9003117 	ldw	r4,196(sp)
    59a8:	d8c02a17 	ldw	r3,168(sp)
    59ac:	20e7c83a 	sub	r19,r4,r3
    59b0:	04c19f0e 	bge	zero,r19,6030 <___vfprintf_internal_r+0xe00>
    59b4:	02400404 	movi	r9,16
    59b8:	d8c02017 	ldw	r3,128(sp)
    59bc:	d8801f17 	ldw	r2,124(sp)
    59c0:	4cc50d0e 	bge	r9,r19,6df8 <___vfprintf_internal_r+0x1bc8>
    59c4:	014000b4 	movhi	r5,2
    59c8:	29519a84 	addi	r5,r5,18026
    59cc:	dc403b15 	stw	r17,236(sp)
    59d0:	d9403515 	stw	r5,212(sp)
    59d4:	9823883a 	mov	r17,r19
    59d8:	482d883a 	mov	r22,r9
    59dc:	9027883a 	mov	r19,r18
    59e0:	070001c4 	movi	fp,7
    59e4:	8025883a 	mov	r18,r16
    59e8:	dc002c17 	ldw	r16,176(sp)
    59ec:	00000306 	br	59fc <___vfprintf_internal_r+0x7cc>
    59f0:	8c7ffc04 	addi	r17,r17,-16
    59f4:	42000204 	addi	r8,r8,8
    59f8:	b440130e 	bge	r22,r17,5a48 <___vfprintf_internal_r+0x818>
    59fc:	010000b4 	movhi	r4,2
    5a00:	18c00404 	addi	r3,r3,16
    5a04:	10800044 	addi	r2,r2,1
    5a08:	21119a84 	addi	r4,r4,18026
    5a0c:	41000015 	stw	r4,0(r8)
    5a10:	45800115 	stw	r22,4(r8)
    5a14:	d8c02015 	stw	r3,128(sp)
    5a18:	d8801f15 	stw	r2,124(sp)
    5a1c:	e0bff40e 	bge	fp,r2,59f0 <___vfprintf_internal_r+0x7c0>
    5a20:	d9801e04 	addi	r6,sp,120
    5a24:	b80b883a 	mov	r5,r23
    5a28:	8009883a 	mov	r4,r16
    5a2c:	000d3d80 	call	d3d8 <__sprint_r>
    5a30:	103f011e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5a34:	8c7ffc04 	addi	r17,r17,-16
    5a38:	d8c02017 	ldw	r3,128(sp)
    5a3c:	d8801f17 	ldw	r2,124(sp)
    5a40:	da000404 	addi	r8,sp,16
    5a44:	b47fed16 	blt	r22,r17,59fc <___vfprintf_internal_r+0x7cc>
    5a48:	9021883a 	mov	r16,r18
    5a4c:	9825883a 	mov	r18,r19
    5a50:	8827883a 	mov	r19,r17
    5a54:	dc403b17 	ldw	r17,236(sp)
    5a58:	d9403517 	ldw	r5,212(sp)
    5a5c:	98c7883a 	add	r3,r19,r3
    5a60:	10800044 	addi	r2,r2,1
    5a64:	41400015 	stw	r5,0(r8)
    5a68:	44c00115 	stw	r19,4(r8)
    5a6c:	d8c02015 	stw	r3,128(sp)
    5a70:	d8801f15 	stw	r2,124(sp)
    5a74:	010001c4 	movi	r4,7
    5a78:	2082a316 	blt	r4,r2,6508 <___vfprintf_internal_r+0x12d8>
    5a7c:	df002787 	ldb	fp,158(sp)
    5a80:	42000204 	addi	r8,r8,8
    5a84:	e0000c26 	beq	fp,zero,5ab8 <___vfprintf_internal_r+0x888>
    5a88:	d8801f17 	ldw	r2,124(sp)
    5a8c:	d9002784 	addi	r4,sp,158
    5a90:	18c00044 	addi	r3,r3,1
    5a94:	10800044 	addi	r2,r2,1
    5a98:	41000015 	stw	r4,0(r8)
    5a9c:	01000044 	movi	r4,1
    5aa0:	41000115 	stw	r4,4(r8)
    5aa4:	d8c02015 	stw	r3,128(sp)
    5aa8:	d8801f15 	stw	r2,124(sp)
    5aac:	010001c4 	movi	r4,7
    5ab0:	20823c16 	blt	r4,r2,63a4 <___vfprintf_internal_r+0x1174>
    5ab4:	42000204 	addi	r8,r8,8
    5ab8:	d8802b17 	ldw	r2,172(sp)
    5abc:	10000c26 	beq	r2,zero,5af0 <___vfprintf_internal_r+0x8c0>
    5ac0:	d8801f17 	ldw	r2,124(sp)
    5ac4:	d9002704 	addi	r4,sp,156
    5ac8:	18c00084 	addi	r3,r3,2
    5acc:	10800044 	addi	r2,r2,1
    5ad0:	41000015 	stw	r4,0(r8)
    5ad4:	01000084 	movi	r4,2
    5ad8:	41000115 	stw	r4,4(r8)
    5adc:	d8c02015 	stw	r3,128(sp)
    5ae0:	d8801f15 	stw	r2,124(sp)
    5ae4:	010001c4 	movi	r4,7
    5ae8:	20823616 	blt	r4,r2,63c4 <___vfprintf_internal_r+0x1194>
    5aec:	42000204 	addi	r8,r8,8
    5af0:	d9003017 	ldw	r4,192(sp)
    5af4:	00802004 	movi	r2,128
    5af8:	20819926 	beq	r4,r2,6160 <___vfprintf_internal_r+0xf30>
    5afc:	d9402917 	ldw	r5,164(sp)
    5b00:	d8802e17 	ldw	r2,184(sp)
    5b04:	28adc83a 	sub	r22,r5,r2
    5b08:	0580310e 	bge	zero,r22,5bd0 <___vfprintf_internal_r+0x9a0>
    5b0c:	07000404 	movi	fp,16
    5b10:	d8801f17 	ldw	r2,124(sp)
    5b14:	e584140e 	bge	fp,r22,6b68 <___vfprintf_internal_r+0x1938>
    5b18:	014000b4 	movhi	r5,2
    5b1c:	29519684 	addi	r5,r5,18010
    5b20:	dc402915 	stw	r17,164(sp)
    5b24:	d9402b15 	stw	r5,172(sp)
    5b28:	b023883a 	mov	r17,r22
    5b2c:	04c001c4 	movi	r19,7
    5b30:	a82d883a 	mov	r22,r21
    5b34:	902b883a 	mov	r21,r18
    5b38:	8025883a 	mov	r18,r16
    5b3c:	dc002c17 	ldw	r16,176(sp)
    5b40:	00000306 	br	5b50 <___vfprintf_internal_r+0x920>
    5b44:	8c7ffc04 	addi	r17,r17,-16
    5b48:	42000204 	addi	r8,r8,8
    5b4c:	e440110e 	bge	fp,r17,5b94 <___vfprintf_internal_r+0x964>
    5b50:	18c00404 	addi	r3,r3,16
    5b54:	10800044 	addi	r2,r2,1
    5b58:	45000015 	stw	r20,0(r8)
    5b5c:	47000115 	stw	fp,4(r8)
    5b60:	d8c02015 	stw	r3,128(sp)
    5b64:	d8801f15 	stw	r2,124(sp)
    5b68:	98bff60e 	bge	r19,r2,5b44 <___vfprintf_internal_r+0x914>
    5b6c:	d9801e04 	addi	r6,sp,120
    5b70:	b80b883a 	mov	r5,r23
    5b74:	8009883a 	mov	r4,r16
    5b78:	000d3d80 	call	d3d8 <__sprint_r>
    5b7c:	103eae1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5b80:	8c7ffc04 	addi	r17,r17,-16
    5b84:	d8c02017 	ldw	r3,128(sp)
    5b88:	d8801f17 	ldw	r2,124(sp)
    5b8c:	da000404 	addi	r8,sp,16
    5b90:	e47fef16 	blt	fp,r17,5b50 <___vfprintf_internal_r+0x920>
    5b94:	9021883a 	mov	r16,r18
    5b98:	a825883a 	mov	r18,r21
    5b9c:	b02b883a 	mov	r21,r22
    5ba0:	882d883a 	mov	r22,r17
    5ba4:	dc402917 	ldw	r17,164(sp)
    5ba8:	d9002b17 	ldw	r4,172(sp)
    5bac:	1d87883a 	add	r3,r3,r22
    5bb0:	10800044 	addi	r2,r2,1
    5bb4:	41000015 	stw	r4,0(r8)
    5bb8:	45800115 	stw	r22,4(r8)
    5bbc:	d8c02015 	stw	r3,128(sp)
    5bc0:	d8801f15 	stw	r2,124(sp)
    5bc4:	010001c4 	movi	r4,7
    5bc8:	2081ee16 	blt	r4,r2,6384 <___vfprintf_internal_r+0x1154>
    5bcc:	42000204 	addi	r8,r8,8
    5bd0:	9080400c 	andi	r2,r18,256
    5bd4:	1001181e 	bne	r2,zero,6038 <___vfprintf_internal_r+0xe08>
    5bd8:	d9402e17 	ldw	r5,184(sp)
    5bdc:	d8801f17 	ldw	r2,124(sp)
    5be0:	44000015 	stw	r16,0(r8)
    5be4:	1947883a 	add	r3,r3,r5
    5be8:	10800044 	addi	r2,r2,1
    5bec:	41400115 	stw	r5,4(r8)
    5bf0:	d8c02015 	stw	r3,128(sp)
    5bf4:	d8801f15 	stw	r2,124(sp)
    5bf8:	010001c4 	movi	r4,7
    5bfc:	2081d316 	blt	r4,r2,634c <___vfprintf_internal_r+0x111c>
    5c00:	42000204 	addi	r8,r8,8
    5c04:	9480010c 	andi	r18,r18,4
    5c08:	90003226 	beq	r18,zero,5cd4 <___vfprintf_internal_r+0xaa4>
    5c0c:	d9403117 	ldw	r5,196(sp)
    5c10:	d8802a17 	ldw	r2,168(sp)
    5c14:	28a1c83a 	sub	r16,r5,r2
    5c18:	04002e0e 	bge	zero,r16,5cd4 <___vfprintf_internal_r+0xaa4>
    5c1c:	04400404 	movi	r17,16
    5c20:	d8801f17 	ldw	r2,124(sp)
    5c24:	8c04a20e 	bge	r17,r16,6eb0 <___vfprintf_internal_r+0x1c80>
    5c28:	014000b4 	movhi	r5,2
    5c2c:	29519a84 	addi	r5,r5,18026
    5c30:	d9403515 	stw	r5,212(sp)
    5c34:	048001c4 	movi	r18,7
    5c38:	dcc02c17 	ldw	r19,176(sp)
    5c3c:	00000306 	br	5c4c <___vfprintf_internal_r+0xa1c>
    5c40:	843ffc04 	addi	r16,r16,-16
    5c44:	42000204 	addi	r8,r8,8
    5c48:	8c00130e 	bge	r17,r16,5c98 <___vfprintf_internal_r+0xa68>
    5c4c:	010000b4 	movhi	r4,2
    5c50:	18c00404 	addi	r3,r3,16
    5c54:	10800044 	addi	r2,r2,1
    5c58:	21119a84 	addi	r4,r4,18026
    5c5c:	41000015 	stw	r4,0(r8)
    5c60:	44400115 	stw	r17,4(r8)
    5c64:	d8c02015 	stw	r3,128(sp)
    5c68:	d8801f15 	stw	r2,124(sp)
    5c6c:	90bff40e 	bge	r18,r2,5c40 <___vfprintf_internal_r+0xa10>
    5c70:	d9801e04 	addi	r6,sp,120
    5c74:	b80b883a 	mov	r5,r23
    5c78:	9809883a 	mov	r4,r19
    5c7c:	000d3d80 	call	d3d8 <__sprint_r>
    5c80:	103e6d1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5c84:	843ffc04 	addi	r16,r16,-16
    5c88:	d8c02017 	ldw	r3,128(sp)
    5c8c:	d8801f17 	ldw	r2,124(sp)
    5c90:	da000404 	addi	r8,sp,16
    5c94:	8c3fed16 	blt	r17,r16,5c4c <___vfprintf_internal_r+0xa1c>
    5c98:	d9403517 	ldw	r5,212(sp)
    5c9c:	1c07883a 	add	r3,r3,r16
    5ca0:	10800044 	addi	r2,r2,1
    5ca4:	41400015 	stw	r5,0(r8)
    5ca8:	44000115 	stw	r16,4(r8)
    5cac:	d8c02015 	stw	r3,128(sp)
    5cb0:	d8801f15 	stw	r2,124(sp)
    5cb4:	010001c4 	movi	r4,7
    5cb8:	2080060e 	bge	r4,r2,5cd4 <___vfprintf_internal_r+0xaa4>
    5cbc:	d9002c17 	ldw	r4,176(sp)
    5cc0:	d9801e04 	addi	r6,sp,120
    5cc4:	b80b883a 	mov	r5,r23
    5cc8:	000d3d80 	call	d3d8 <__sprint_r>
    5ccc:	103e5a1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    5cd0:	d8c02017 	ldw	r3,128(sp)
    5cd4:	d8803117 	ldw	r2,196(sp)
    5cd8:	d9002a17 	ldw	r4,168(sp)
    5cdc:	1100010e 	bge	r2,r4,5ce4 <___vfprintf_internal_r+0xab4>
    5ce0:	2005883a 	mov	r2,r4
    5ce4:	d9402f17 	ldw	r5,188(sp)
    5ce8:	288b883a 	add	r5,r5,r2
    5cec:	d9402f15 	stw	r5,188(sp)
    5cf0:	18019e1e 	bne	r3,zero,636c <___vfprintf_internal_r+0x113c>
    5cf4:	a8800007 	ldb	r2,0(r21)
    5cf8:	d8001f15 	stw	zero,124(sp)
    5cfc:	da000404 	addi	r8,sp,16
    5d00:	103d851e 	bne	r2,zero,5318 <___vfprintf_internal_r+0xe8>
    5d04:	a821883a 	mov	r16,r21
    5d08:	003d9b06 	br	5378 <___vfprintf_internal_r+0x148>
    5d0c:	18c03fcc 	andi	r3,r3,255
    5d10:	1805c11e 	bne	r3,zero,7418 <___vfprintf_internal_r+0x21e8>
    5d14:	94800414 	ori	r18,r18,16
    5d18:	9080080c 	andi	r2,r18,32
    5d1c:	10020c26 	beq	r2,zero,6550 <___vfprintf_internal_r+0x1320>
    5d20:	d8802d17 	ldw	r2,180(sp)
    5d24:	d9002917 	ldw	r4,164(sp)
    5d28:	d8002785 	stb	zero,158(sp)
    5d2c:	10c00204 	addi	r3,r2,8
    5d30:	14c00017 	ldw	r19,0(r2)
    5d34:	15800117 	ldw	r22,4(r2)
    5d38:	20040f16 	blt	r4,zero,6d78 <___vfprintf_internal_r+0x1b48>
    5d3c:	013fdfc4 	movi	r4,-129
    5d40:	9d84b03a 	or	r2,r19,r22
    5d44:	d8c02d15 	stw	r3,180(sp)
    5d48:	9124703a 	and	r18,r18,r4
    5d4c:	0039883a 	mov	fp,zero
    5d50:	103e891e 	bne	r2,zero,5778 <___vfprintf_internal_r+0x548>
    5d54:	d9002917 	ldw	r4,164(sp)
    5d58:	2002c11e 	bne	r4,zero,6860 <___vfprintf_internal_r+0x1630>
    5d5c:	d8002915 	stw	zero,164(sp)
    5d60:	d8002e15 	stw	zero,184(sp)
    5d64:	dc001e04 	addi	r16,sp,120
    5d68:	003ef806 	br	594c <___vfprintf_internal_r+0x71c>
    5d6c:	18c03fcc 	andi	r3,r3,255
    5d70:	18059d1e 	bne	r3,zero,73e8 <___vfprintf_internal_r+0x21b8>
    5d74:	014000b4 	movhi	r5,2
    5d78:	29518204 	addi	r5,r5,17928
    5d7c:	d9403915 	stw	r5,228(sp)
    5d80:	9080080c 	andi	r2,r18,32
    5d84:	10005226 	beq	r2,zero,5ed0 <___vfprintf_internal_r+0xca0>
    5d88:	d8802d17 	ldw	r2,180(sp)
    5d8c:	14c00017 	ldw	r19,0(r2)
    5d90:	15800117 	ldw	r22,4(r2)
    5d94:	10800204 	addi	r2,r2,8
    5d98:	d8802d15 	stw	r2,180(sp)
    5d9c:	9080004c 	andi	r2,r18,1
    5da0:	10019026 	beq	r2,zero,63e4 <___vfprintf_internal_r+0x11b4>
    5da4:	9d84b03a 	or	r2,r19,r22
    5da8:	10036926 	beq	r2,zero,6b50 <___vfprintf_internal_r+0x1920>
    5dac:	d8c02917 	ldw	r3,164(sp)
    5db0:	00800c04 	movi	r2,48
    5db4:	d8802705 	stb	r2,156(sp)
    5db8:	dc402745 	stb	r17,157(sp)
    5dbc:	d8002785 	stb	zero,158(sp)
    5dc0:	90800094 	ori	r2,r18,2
    5dc4:	18045d16 	blt	r3,zero,6f3c <___vfprintf_internal_r+0x1d0c>
    5dc8:	00bfdfc4 	movi	r2,-129
    5dcc:	90a4703a 	and	r18,r18,r2
    5dd0:	94800094 	ori	r18,r18,2
    5dd4:	0039883a 	mov	fp,zero
    5dd8:	d9003917 	ldw	r4,228(sp)
    5ddc:	dc001e04 	addi	r16,sp,120
    5de0:	988003cc 	andi	r2,r19,15
    5de4:	b006973a 	slli	r3,r22,28
    5de8:	2085883a 	add	r2,r4,r2
    5dec:	9826d13a 	srli	r19,r19,4
    5df0:	10800003 	ldbu	r2,0(r2)
    5df4:	b02cd13a 	srli	r22,r22,4
    5df8:	843fffc4 	addi	r16,r16,-1
    5dfc:	1ce6b03a 	or	r19,r3,r19
    5e00:	80800005 	stb	r2,0(r16)
    5e04:	9d84b03a 	or	r2,r19,r22
    5e08:	103ff51e 	bne	r2,zero,5de0 <___vfprintf_internal_r+0xbb0>
    5e0c:	d8c02817 	ldw	r3,160(sp)
    5e10:	1c07c83a 	sub	r3,r3,r16
    5e14:	d8c02e15 	stw	r3,184(sp)
    5e18:	003ecc06 	br	594c <___vfprintf_internal_r+0x71c>
    5e1c:	18c03fcc 	andi	r3,r3,255
    5e20:	183e9f26 	beq	r3,zero,58a0 <___vfprintf_internal_r+0x670>
    5e24:	d9c02785 	stb	r7,158(sp)
    5e28:	003e9d06 	br	58a0 <___vfprintf_internal_r+0x670>
    5e2c:	00c00044 	movi	r3,1
    5e30:	01c00ac4 	movi	r7,43
    5e34:	ac400007 	ldb	r17,0(r21)
    5e38:	003d5e06 	br	53b4 <___vfprintf_internal_r+0x184>
    5e3c:	94800814 	ori	r18,r18,32
    5e40:	ac400007 	ldb	r17,0(r21)
    5e44:	003d5b06 	br	53b4 <___vfprintf_internal_r+0x184>
    5e48:	d8c02d17 	ldw	r3,180(sp)
    5e4c:	d8002785 	stb	zero,158(sp)
    5e50:	1c000017 	ldw	r16,0(r3)
    5e54:	1cc00104 	addi	r19,r3,4
    5e58:	80041926 	beq	r16,zero,6ec0 <___vfprintf_internal_r+0x1c90>
    5e5c:	d9002917 	ldw	r4,164(sp)
    5e60:	2003d016 	blt	r4,zero,6da4 <___vfprintf_internal_r+0x1b74>
    5e64:	200d883a 	mov	r6,r4
    5e68:	000b883a 	mov	r5,zero
    5e6c:	8009883a 	mov	r4,r16
    5e70:	da003d15 	stw	r8,244(sp)
    5e74:	000a2340 	call	a234 <memchr>
    5e78:	da003d17 	ldw	r8,244(sp)
    5e7c:	10045426 	beq	r2,zero,6fd0 <___vfprintf_internal_r+0x1da0>
    5e80:	1405c83a 	sub	r2,r2,r16
    5e84:	d8802e15 	stw	r2,184(sp)
    5e88:	1003cc16 	blt	r2,zero,6dbc <___vfprintf_internal_r+0x1b8c>
    5e8c:	df002783 	ldbu	fp,158(sp)
    5e90:	d8802a15 	stw	r2,168(sp)
    5e94:	dcc02d15 	stw	r19,180(sp)
    5e98:	d8002915 	stw	zero,164(sp)
    5e9c:	d8003215 	stw	zero,200(sp)
    5ea0:	003eb006 	br	5964 <___vfprintf_internal_r+0x734>
    5ea4:	18c03fcc 	andi	r3,r3,255
    5ea8:	183f9b26 	beq	r3,zero,5d18 <___vfprintf_internal_r+0xae8>
    5eac:	d9c02785 	stb	r7,158(sp)
    5eb0:	003f9906 	br	5d18 <___vfprintf_internal_r+0xae8>
    5eb4:	18c03fcc 	andi	r3,r3,255
    5eb8:	1805551e 	bne	r3,zero,7410 <___vfprintf_internal_r+0x21e0>
    5ebc:	014000b4 	movhi	r5,2
    5ec0:	29518704 	addi	r5,r5,17948
    5ec4:	d9403915 	stw	r5,228(sp)
    5ec8:	9080080c 	andi	r2,r18,32
    5ecc:	103fae1e 	bne	r2,zero,5d88 <___vfprintf_internal_r+0xb58>
    5ed0:	9080040c 	andi	r2,r18,16
    5ed4:	1002de26 	beq	r2,zero,6a50 <___vfprintf_internal_r+0x1820>
    5ed8:	d8c02d17 	ldw	r3,180(sp)
    5edc:	002d883a 	mov	r22,zero
    5ee0:	1cc00017 	ldw	r19,0(r3)
    5ee4:	18c00104 	addi	r3,r3,4
    5ee8:	d8c02d15 	stw	r3,180(sp)
    5eec:	003fab06 	br	5d9c <___vfprintf_internal_r+0xb6c>
    5ef0:	38803fcc 	andi	r2,r7,255
    5ef4:	1080201c 	xori	r2,r2,128
    5ef8:	10bfe004 	addi	r2,r2,-128
    5efc:	1002d21e 	bne	r2,zero,6a48 <___vfprintf_internal_r+0x1818>
    5f00:	00c00044 	movi	r3,1
    5f04:	01c00804 	movi	r7,32
    5f08:	ac400007 	ldb	r17,0(r21)
    5f0c:	003d2906 	br	53b4 <___vfprintf_internal_r+0x184>
    5f10:	94800054 	ori	r18,r18,1
    5f14:	ac400007 	ldb	r17,0(r21)
    5f18:	003d2606 	br	53b4 <___vfprintf_internal_r+0x184>
    5f1c:	18c03fcc 	andi	r3,r3,255
    5f20:	183e0526 	beq	r3,zero,5738 <___vfprintf_internal_r+0x508>
    5f24:	d9c02785 	stb	r7,158(sp)
    5f28:	003e0306 	br	5738 <___vfprintf_internal_r+0x508>
    5f2c:	94801014 	ori	r18,r18,64
    5f30:	ac400007 	ldb	r17,0(r21)
    5f34:	003d1f06 	br	53b4 <___vfprintf_internal_r+0x184>
    5f38:	ac400007 	ldb	r17,0(r21)
    5f3c:	8a438726 	beq	r17,r9,6d5c <___vfprintf_internal_r+0x1b2c>
    5f40:	94800414 	ori	r18,r18,16
    5f44:	003d1b06 	br	53b4 <___vfprintf_internal_r+0x184>
    5f48:	18c03fcc 	andi	r3,r3,255
    5f4c:	1805341e 	bne	r3,zero,7420 <___vfprintf_internal_r+0x21f0>
    5f50:	9080080c 	andi	r2,r18,32
    5f54:	1002cd26 	beq	r2,zero,6a8c <___vfprintf_internal_r+0x185c>
    5f58:	d9402d17 	ldw	r5,180(sp)
    5f5c:	d9002f17 	ldw	r4,188(sp)
    5f60:	28800017 	ldw	r2,0(r5)
    5f64:	2007d7fa 	srai	r3,r4,31
    5f68:	29400104 	addi	r5,r5,4
    5f6c:	d9402d15 	stw	r5,180(sp)
    5f70:	11000015 	stw	r4,0(r2)
    5f74:	10c00115 	stw	r3,4(r2)
    5f78:	003ce506 	br	5310 <___vfprintf_internal_r+0xe0>
    5f7c:	d8c02d17 	ldw	r3,180(sp)
    5f80:	d9002d17 	ldw	r4,180(sp)
    5f84:	d8002785 	stb	zero,158(sp)
    5f88:	18800017 	ldw	r2,0(r3)
    5f8c:	21000104 	addi	r4,r4,4
    5f90:	00c00044 	movi	r3,1
    5f94:	d8c02a15 	stw	r3,168(sp)
    5f98:	d8801405 	stb	r2,80(sp)
    5f9c:	d9002d15 	stw	r4,180(sp)
    5fa0:	d8c02e15 	stw	r3,184(sp)
    5fa4:	d8002915 	stw	zero,164(sp)
    5fa8:	d8003215 	stw	zero,200(sp)
    5fac:	dc001404 	addi	r16,sp,80
    5fb0:	0039883a 	mov	fp,zero
    5fb4:	003e7206 	br	5980 <___vfprintf_internal_r+0x750>
    5fb8:	010000b4 	movhi	r4,2
    5fbc:	21118704 	addi	r4,r4,17948
    5fc0:	0039883a 	mov	fp,zero
    5fc4:	d9003915 	stw	r4,228(sp)
    5fc8:	04401e04 	movi	r17,120
    5fcc:	003f8206 	br	5dd8 <___vfprintf_internal_r+0xba8>
    5fd0:	18c03fcc 	andi	r3,r3,255
    5fd4:	1805061e 	bne	r3,zero,73f0 <___vfprintf_internal_r+0x21c0>
    5fd8:	883d9126 	beq	r17,zero,5620 <___vfprintf_internal_r+0x3f0>
    5fdc:	00c00044 	movi	r3,1
    5fe0:	d8c02a15 	stw	r3,168(sp)
    5fe4:	dc401405 	stb	r17,80(sp)
    5fe8:	d8002785 	stb	zero,158(sp)
    5fec:	003fec06 	br	5fa0 <___vfprintf_internal_r+0xd70>
    5ff0:	014000b4 	movhi	r5,2
    5ff4:	29518704 	addi	r5,r5,17948
    5ff8:	d9403915 	stw	r5,228(sp)
    5ffc:	d8c02d15 	stw	r3,180(sp)
    6000:	1025883a 	mov	r18,r2
    6004:	04401e04 	movi	r17,120
    6008:	9d84b03a 	or	r2,r19,r22
    600c:	1000fc1e 	bne	r2,zero,6400 <___vfprintf_internal_r+0x11d0>
    6010:	0039883a 	mov	fp,zero
    6014:	00800084 	movi	r2,2
    6018:	10803fcc 	andi	r2,r2,255
    601c:	00c00044 	movi	r3,1
    6020:	10c20f26 	beq	r2,r3,6860 <___vfprintf_internal_r+0x1630>
    6024:	00c00084 	movi	r3,2
    6028:	10fd6326 	beq	r2,r3,55b8 <___vfprintf_internal_r+0x388>
    602c:	003e2d06 	br	58e4 <___vfprintf_internal_r+0x6b4>
    6030:	d8c02017 	ldw	r3,128(sp)
    6034:	003e9306 	br	5a84 <___vfprintf_internal_r+0x854>
    6038:	00801944 	movi	r2,101
    603c:	14407e0e 	bge	r2,r17,6238 <___vfprintf_internal_r+0x1008>
    6040:	d9003617 	ldw	r4,216(sp)
    6044:	d9403817 	ldw	r5,224(sp)
    6048:	000d883a 	mov	r6,zero
    604c:	000f883a 	mov	r7,zero
    6050:	d8c03c15 	stw	r3,240(sp)
    6054:	da003d15 	stw	r8,244(sp)
    6058:	00110500 	call	11050 <__eqdf2>
    605c:	d8c03c17 	ldw	r3,240(sp)
    6060:	da003d17 	ldw	r8,244(sp)
    6064:	1000f71e 	bne	r2,zero,6444 <___vfprintf_internal_r+0x1214>
    6068:	d8801f17 	ldw	r2,124(sp)
    606c:	010000b4 	movhi	r4,2
    6070:	21118e04 	addi	r4,r4,17976
    6074:	18c00044 	addi	r3,r3,1
    6078:	10800044 	addi	r2,r2,1
    607c:	41000015 	stw	r4,0(r8)
    6080:	01000044 	movi	r4,1
    6084:	41000115 	stw	r4,4(r8)
    6088:	d8c02015 	stw	r3,128(sp)
    608c:	d8801f15 	stw	r2,124(sp)
    6090:	010001c4 	movi	r4,7
    6094:	2082b816 	blt	r4,r2,6b78 <___vfprintf_internal_r+0x1948>
    6098:	42000204 	addi	r8,r8,8
    609c:	d8802617 	ldw	r2,152(sp)
    60a0:	d9403317 	ldw	r5,204(sp)
    60a4:	11400216 	blt	r2,r5,60b0 <___vfprintf_internal_r+0xe80>
    60a8:	9080004c 	andi	r2,r18,1
    60ac:	103ed526 	beq	r2,zero,5c04 <___vfprintf_internal_r+0x9d4>
    60b0:	d8803717 	ldw	r2,220(sp)
    60b4:	d9003417 	ldw	r4,208(sp)
    60b8:	d9403717 	ldw	r5,220(sp)
    60bc:	1887883a 	add	r3,r3,r2
    60c0:	d8801f17 	ldw	r2,124(sp)
    60c4:	41000015 	stw	r4,0(r8)
    60c8:	41400115 	stw	r5,4(r8)
    60cc:	10800044 	addi	r2,r2,1
    60d0:	d8c02015 	stw	r3,128(sp)
    60d4:	d8801f15 	stw	r2,124(sp)
    60d8:	010001c4 	movi	r4,7
    60dc:	20832916 	blt	r4,r2,6d84 <___vfprintf_internal_r+0x1b54>
    60e0:	42000204 	addi	r8,r8,8
    60e4:	d8803317 	ldw	r2,204(sp)
    60e8:	143fffc4 	addi	r16,r2,-1
    60ec:	043ec50e 	bge	zero,r16,5c04 <___vfprintf_internal_r+0x9d4>
    60f0:	04400404 	movi	r17,16
    60f4:	d8801f17 	ldw	r2,124(sp)
    60f8:	8c00880e 	bge	r17,r16,631c <___vfprintf_internal_r+0x10ec>
    60fc:	014000b4 	movhi	r5,2
    6100:	29519684 	addi	r5,r5,18010
    6104:	d9402b15 	stw	r5,172(sp)
    6108:	058001c4 	movi	r22,7
    610c:	dcc02c17 	ldw	r19,176(sp)
    6110:	00000306 	br	6120 <___vfprintf_internal_r+0xef0>
    6114:	42000204 	addi	r8,r8,8
    6118:	843ffc04 	addi	r16,r16,-16
    611c:	8c00820e 	bge	r17,r16,6328 <___vfprintf_internal_r+0x10f8>
    6120:	18c00404 	addi	r3,r3,16
    6124:	10800044 	addi	r2,r2,1
    6128:	45000015 	stw	r20,0(r8)
    612c:	44400115 	stw	r17,4(r8)
    6130:	d8c02015 	stw	r3,128(sp)
    6134:	d8801f15 	stw	r2,124(sp)
    6138:	b0bff60e 	bge	r22,r2,6114 <___vfprintf_internal_r+0xee4>
    613c:	d9801e04 	addi	r6,sp,120
    6140:	b80b883a 	mov	r5,r23
    6144:	9809883a 	mov	r4,r19
    6148:	000d3d80 	call	d3d8 <__sprint_r>
    614c:	103d3a1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6150:	d8c02017 	ldw	r3,128(sp)
    6154:	d8801f17 	ldw	r2,124(sp)
    6158:	da000404 	addi	r8,sp,16
    615c:	003fee06 	br	6118 <___vfprintf_internal_r+0xee8>
    6160:	d9403117 	ldw	r5,196(sp)
    6164:	d8802a17 	ldw	r2,168(sp)
    6168:	28adc83a 	sub	r22,r5,r2
    616c:	05be630e 	bge	zero,r22,5afc <___vfprintf_internal_r+0x8cc>
    6170:	07000404 	movi	fp,16
    6174:	d8801f17 	ldw	r2,124(sp)
    6178:	e5838f0e 	bge	fp,r22,6fb8 <___vfprintf_internal_r+0x1d88>
    617c:	014000b4 	movhi	r5,2
    6180:	29519684 	addi	r5,r5,18010
    6184:	dc403015 	stw	r17,192(sp)
    6188:	d9402b15 	stw	r5,172(sp)
    618c:	b023883a 	mov	r17,r22
    6190:	04c001c4 	movi	r19,7
    6194:	a82d883a 	mov	r22,r21
    6198:	902b883a 	mov	r21,r18
    619c:	8025883a 	mov	r18,r16
    61a0:	dc002c17 	ldw	r16,176(sp)
    61a4:	00000306 	br	61b4 <___vfprintf_internal_r+0xf84>
    61a8:	8c7ffc04 	addi	r17,r17,-16
    61ac:	42000204 	addi	r8,r8,8
    61b0:	e440110e 	bge	fp,r17,61f8 <___vfprintf_internal_r+0xfc8>
    61b4:	18c00404 	addi	r3,r3,16
    61b8:	10800044 	addi	r2,r2,1
    61bc:	45000015 	stw	r20,0(r8)
    61c0:	47000115 	stw	fp,4(r8)
    61c4:	d8c02015 	stw	r3,128(sp)
    61c8:	d8801f15 	stw	r2,124(sp)
    61cc:	98bff60e 	bge	r19,r2,61a8 <___vfprintf_internal_r+0xf78>
    61d0:	d9801e04 	addi	r6,sp,120
    61d4:	b80b883a 	mov	r5,r23
    61d8:	8009883a 	mov	r4,r16
    61dc:	000d3d80 	call	d3d8 <__sprint_r>
    61e0:	103d151e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    61e4:	8c7ffc04 	addi	r17,r17,-16
    61e8:	d8c02017 	ldw	r3,128(sp)
    61ec:	d8801f17 	ldw	r2,124(sp)
    61f0:	da000404 	addi	r8,sp,16
    61f4:	e47fef16 	blt	fp,r17,61b4 <___vfprintf_internal_r+0xf84>
    61f8:	9021883a 	mov	r16,r18
    61fc:	a825883a 	mov	r18,r21
    6200:	b02b883a 	mov	r21,r22
    6204:	882d883a 	mov	r22,r17
    6208:	dc403017 	ldw	r17,192(sp)
    620c:	d9002b17 	ldw	r4,172(sp)
    6210:	1d87883a 	add	r3,r3,r22
    6214:	10800044 	addi	r2,r2,1
    6218:	41000015 	stw	r4,0(r8)
    621c:	45800115 	stw	r22,4(r8)
    6220:	d8c02015 	stw	r3,128(sp)
    6224:	d8801f15 	stw	r2,124(sp)
    6228:	010001c4 	movi	r4,7
    622c:	20818e16 	blt	r4,r2,6868 <___vfprintf_internal_r+0x1638>
    6230:	42000204 	addi	r8,r8,8
    6234:	003e3106 	br	5afc <___vfprintf_internal_r+0x8cc>
    6238:	d9403317 	ldw	r5,204(sp)
    623c:	00800044 	movi	r2,1
    6240:	18c00044 	addi	r3,r3,1
    6244:	1141530e 	bge	r2,r5,6794 <___vfprintf_internal_r+0x1564>
    6248:	dc401f17 	ldw	r17,124(sp)
    624c:	00800044 	movi	r2,1
    6250:	40800115 	stw	r2,4(r8)
    6254:	8c400044 	addi	r17,r17,1
    6258:	44000015 	stw	r16,0(r8)
    625c:	d8c02015 	stw	r3,128(sp)
    6260:	dc401f15 	stw	r17,124(sp)
    6264:	008001c4 	movi	r2,7
    6268:	14416b16 	blt	r2,r17,6818 <___vfprintf_internal_r+0x15e8>
    626c:	42000204 	addi	r8,r8,8
    6270:	d8803717 	ldw	r2,220(sp)
    6274:	d9003417 	ldw	r4,208(sp)
    6278:	8c400044 	addi	r17,r17,1
    627c:	10c7883a 	add	r3,r2,r3
    6280:	40800115 	stw	r2,4(r8)
    6284:	41000015 	stw	r4,0(r8)
    6288:	d8c02015 	stw	r3,128(sp)
    628c:	dc401f15 	stw	r17,124(sp)
    6290:	008001c4 	movi	r2,7
    6294:	14416916 	blt	r2,r17,683c <___vfprintf_internal_r+0x160c>
    6298:	45800204 	addi	r22,r8,8
    629c:	d9003617 	ldw	r4,216(sp)
    62a0:	d9403817 	ldw	r5,224(sp)
    62a4:	000d883a 	mov	r6,zero
    62a8:	000f883a 	mov	r7,zero
    62ac:	d8c03c15 	stw	r3,240(sp)
    62b0:	00110500 	call	11050 <__eqdf2>
    62b4:	d8c03c17 	ldw	r3,240(sp)
    62b8:	1000bc26 	beq	r2,zero,65ac <___vfprintf_internal_r+0x137c>
    62bc:	d9403317 	ldw	r5,204(sp)
    62c0:	84000044 	addi	r16,r16,1
    62c4:	8c400044 	addi	r17,r17,1
    62c8:	28bfffc4 	addi	r2,r5,-1
    62cc:	1887883a 	add	r3,r3,r2
    62d0:	b0800115 	stw	r2,4(r22)
    62d4:	b4000015 	stw	r16,0(r22)
    62d8:	d8c02015 	stw	r3,128(sp)
    62dc:	dc401f15 	stw	r17,124(sp)
    62e0:	008001c4 	movi	r2,7
    62e4:	14414316 	blt	r2,r17,67f4 <___vfprintf_internal_r+0x15c4>
    62e8:	b5800204 	addi	r22,r22,8
    62ec:	d9003a17 	ldw	r4,232(sp)
    62f0:	df0022c4 	addi	fp,sp,139
    62f4:	8c400044 	addi	r17,r17,1
    62f8:	20c7883a 	add	r3,r4,r3
    62fc:	b7000015 	stw	fp,0(r22)
    6300:	b1000115 	stw	r4,4(r22)
    6304:	d8c02015 	stw	r3,128(sp)
    6308:	dc401f15 	stw	r17,124(sp)
    630c:	008001c4 	movi	r2,7
    6310:	14400e16 	blt	r2,r17,634c <___vfprintf_internal_r+0x111c>
    6314:	b2000204 	addi	r8,r22,8
    6318:	003e3a06 	br	5c04 <___vfprintf_internal_r+0x9d4>
    631c:	010000b4 	movhi	r4,2
    6320:	21119684 	addi	r4,r4,18010
    6324:	d9002b15 	stw	r4,172(sp)
    6328:	d9002b17 	ldw	r4,172(sp)
    632c:	1c07883a 	add	r3,r3,r16
    6330:	44000115 	stw	r16,4(r8)
    6334:	41000015 	stw	r4,0(r8)
    6338:	10800044 	addi	r2,r2,1
    633c:	d8c02015 	stw	r3,128(sp)
    6340:	d8801f15 	stw	r2,124(sp)
    6344:	010001c4 	movi	r4,7
    6348:	20be2d0e 	bge	r4,r2,5c00 <___vfprintf_internal_r+0x9d0>
    634c:	d9002c17 	ldw	r4,176(sp)
    6350:	d9801e04 	addi	r6,sp,120
    6354:	b80b883a 	mov	r5,r23
    6358:	000d3d80 	call	d3d8 <__sprint_r>
    635c:	103cb61e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6360:	d8c02017 	ldw	r3,128(sp)
    6364:	da000404 	addi	r8,sp,16
    6368:	003e2606 	br	5c04 <___vfprintf_internal_r+0x9d4>
    636c:	d9002c17 	ldw	r4,176(sp)
    6370:	d9801e04 	addi	r6,sp,120
    6374:	b80b883a 	mov	r5,r23
    6378:	000d3d80 	call	d3d8 <__sprint_r>
    637c:	103e5d26 	beq	r2,zero,5cf4 <___vfprintf_internal_r+0xac4>
    6380:	003cad06 	br	5638 <___vfprintf_internal_r+0x408>
    6384:	d9002c17 	ldw	r4,176(sp)
    6388:	d9801e04 	addi	r6,sp,120
    638c:	b80b883a 	mov	r5,r23
    6390:	000d3d80 	call	d3d8 <__sprint_r>
    6394:	103ca81e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6398:	d8c02017 	ldw	r3,128(sp)
    639c:	da000404 	addi	r8,sp,16
    63a0:	003e0b06 	br	5bd0 <___vfprintf_internal_r+0x9a0>
    63a4:	d9002c17 	ldw	r4,176(sp)
    63a8:	d9801e04 	addi	r6,sp,120
    63ac:	b80b883a 	mov	r5,r23
    63b0:	000d3d80 	call	d3d8 <__sprint_r>
    63b4:	103ca01e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    63b8:	d8c02017 	ldw	r3,128(sp)
    63bc:	da000404 	addi	r8,sp,16
    63c0:	003dbd06 	br	5ab8 <___vfprintf_internal_r+0x888>
    63c4:	d9002c17 	ldw	r4,176(sp)
    63c8:	d9801e04 	addi	r6,sp,120
    63cc:	b80b883a 	mov	r5,r23
    63d0:	000d3d80 	call	d3d8 <__sprint_r>
    63d4:	103c981e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    63d8:	d8c02017 	ldw	r3,128(sp)
    63dc:	da000404 	addi	r8,sp,16
    63e0:	003dc306 	br	5af0 <___vfprintf_internal_r+0x8c0>
    63e4:	d8802917 	ldw	r2,164(sp)
    63e8:	d8002785 	stb	zero,158(sp)
    63ec:	103f0616 	blt	r2,zero,6008 <___vfprintf_internal_r+0xdd8>
    63f0:	00ffdfc4 	movi	r3,-129
    63f4:	9d84b03a 	or	r2,r19,r22
    63f8:	90e4703a 	and	r18,r18,r3
    63fc:	103c6b26 	beq	r2,zero,55ac <___vfprintf_internal_r+0x37c>
    6400:	0039883a 	mov	fp,zero
    6404:	003e7406 	br	5dd8 <___vfprintf_internal_r+0xba8>
    6408:	9080040c 	andi	r2,r18,16
    640c:	1001b326 	beq	r2,zero,6adc <___vfprintf_internal_r+0x18ac>
    6410:	d9002d17 	ldw	r4,180(sp)
    6414:	d9402917 	ldw	r5,164(sp)
    6418:	d8002785 	stb	zero,158(sp)
    641c:	20800104 	addi	r2,r4,4
    6420:	24c00017 	ldw	r19,0(r4)
    6424:	002d883a 	mov	r22,zero
    6428:	2801b516 	blt	r5,zero,6b00 <___vfprintf_internal_r+0x18d0>
    642c:	00ffdfc4 	movi	r3,-129
    6430:	d8802d15 	stw	r2,180(sp)
    6434:	90e4703a 	and	r18,r18,r3
    6438:	983d2726 	beq	r19,zero,58d8 <___vfprintf_internal_r+0x6a8>
    643c:	0039883a 	mov	fp,zero
    6440:	003d2a06 	br	58ec <___vfprintf_internal_r+0x6bc>
    6444:	dc402617 	ldw	r17,152(sp)
    6448:	0441d30e 	bge	zero,r17,6b98 <___vfprintf_internal_r+0x1968>
    644c:	dc403217 	ldw	r17,200(sp)
    6450:	d8803317 	ldw	r2,204(sp)
    6454:	1440010e 	bge	r2,r17,645c <___vfprintf_internal_r+0x122c>
    6458:	1023883a 	mov	r17,r2
    645c:	04400a0e 	bge	zero,r17,6488 <___vfprintf_internal_r+0x1258>
    6460:	d8801f17 	ldw	r2,124(sp)
    6464:	1c47883a 	add	r3,r3,r17
    6468:	44000015 	stw	r16,0(r8)
    646c:	10800044 	addi	r2,r2,1
    6470:	44400115 	stw	r17,4(r8)
    6474:	d8c02015 	stw	r3,128(sp)
    6478:	d8801f15 	stw	r2,124(sp)
    647c:	010001c4 	movi	r4,7
    6480:	20826516 	blt	r4,r2,6e18 <___vfprintf_internal_r+0x1be8>
    6484:	42000204 	addi	r8,r8,8
    6488:	88026116 	blt	r17,zero,6e10 <___vfprintf_internal_r+0x1be0>
    648c:	d9003217 	ldw	r4,200(sp)
    6490:	2463c83a 	sub	r17,r4,r17
    6494:	04407b0e 	bge	zero,r17,6684 <___vfprintf_internal_r+0x1454>
    6498:	05800404 	movi	r22,16
    649c:	d8801f17 	ldw	r2,124(sp)
    64a0:	b4419d0e 	bge	r22,r17,6b18 <___vfprintf_internal_r+0x18e8>
    64a4:	010000b4 	movhi	r4,2
    64a8:	21119684 	addi	r4,r4,18010
    64ac:	d9002b15 	stw	r4,172(sp)
    64b0:	070001c4 	movi	fp,7
    64b4:	dcc02c17 	ldw	r19,176(sp)
    64b8:	00000306 	br	64c8 <___vfprintf_internal_r+0x1298>
    64bc:	42000204 	addi	r8,r8,8
    64c0:	8c7ffc04 	addi	r17,r17,-16
    64c4:	b441970e 	bge	r22,r17,6b24 <___vfprintf_internal_r+0x18f4>
    64c8:	18c00404 	addi	r3,r3,16
    64cc:	10800044 	addi	r2,r2,1
    64d0:	45000015 	stw	r20,0(r8)
    64d4:	45800115 	stw	r22,4(r8)
    64d8:	d8c02015 	stw	r3,128(sp)
    64dc:	d8801f15 	stw	r2,124(sp)
    64e0:	e0bff60e 	bge	fp,r2,64bc <___vfprintf_internal_r+0x128c>
    64e4:	d9801e04 	addi	r6,sp,120
    64e8:	b80b883a 	mov	r5,r23
    64ec:	9809883a 	mov	r4,r19
    64f0:	000d3d80 	call	d3d8 <__sprint_r>
    64f4:	103c501e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    64f8:	d8c02017 	ldw	r3,128(sp)
    64fc:	d8801f17 	ldw	r2,124(sp)
    6500:	da000404 	addi	r8,sp,16
    6504:	003fee06 	br	64c0 <___vfprintf_internal_r+0x1290>
    6508:	d9002c17 	ldw	r4,176(sp)
    650c:	d9801e04 	addi	r6,sp,120
    6510:	b80b883a 	mov	r5,r23
    6514:	000d3d80 	call	d3d8 <__sprint_r>
    6518:	103c471e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    651c:	d8c02017 	ldw	r3,128(sp)
    6520:	df002787 	ldb	fp,158(sp)
    6524:	da000404 	addi	r8,sp,16
    6528:	003d5606 	br	5a84 <___vfprintf_internal_r+0x854>
    652c:	9080040c 	andi	r2,r18,16
    6530:	10016126 	beq	r2,zero,6ab8 <___vfprintf_internal_r+0x1888>
    6534:	d8802d17 	ldw	r2,180(sp)
    6538:	14c00017 	ldw	r19,0(r2)
    653c:	10800104 	addi	r2,r2,4
    6540:	d8802d15 	stw	r2,180(sp)
    6544:	982dd7fa 	srai	r22,r19,31
    6548:	b005883a 	mov	r2,r22
    654c:	003c8206 	br	5758 <___vfprintf_internal_r+0x528>
    6550:	9080040c 	andi	r2,r18,16
    6554:	10003526 	beq	r2,zero,662c <___vfprintf_internal_r+0x13fc>
    6558:	d9402d17 	ldw	r5,180(sp)
    655c:	d8c02917 	ldw	r3,164(sp)
    6560:	d8002785 	stb	zero,158(sp)
    6564:	28800104 	addi	r2,r5,4
    6568:	2cc00017 	ldw	r19,0(r5)
    656c:	002d883a 	mov	r22,zero
    6570:	18003716 	blt	r3,zero,6650 <___vfprintf_internal_r+0x1420>
    6574:	00ffdfc4 	movi	r3,-129
    6578:	d8802d15 	stw	r2,180(sp)
    657c:	90e4703a 	and	r18,r18,r3
    6580:	0039883a 	mov	fp,zero
    6584:	983df326 	beq	r19,zero,5d54 <___vfprintf_internal_r+0xb24>
    6588:	00800244 	movi	r2,9
    658c:	14fc7b36 	bltu	r2,r19,577c <___vfprintf_internal_r+0x54c>
    6590:	d8c02817 	ldw	r3,160(sp)
    6594:	dc001dc4 	addi	r16,sp,119
    6598:	9cc00c04 	addi	r19,r19,48
    659c:	1c07c83a 	sub	r3,r3,r16
    65a0:	dcc01dc5 	stb	r19,119(sp)
    65a4:	d8c02e15 	stw	r3,184(sp)
    65a8:	003ce806 	br	594c <___vfprintf_internal_r+0x71c>
    65ac:	d8803317 	ldw	r2,204(sp)
    65b0:	143fffc4 	addi	r16,r2,-1
    65b4:	043f4d0e 	bge	zero,r16,62ec <___vfprintf_internal_r+0x10bc>
    65b8:	07000404 	movi	fp,16
    65bc:	e400810e 	bge	fp,r16,67c4 <___vfprintf_internal_r+0x1594>
    65c0:	014000b4 	movhi	r5,2
    65c4:	29519684 	addi	r5,r5,18010
    65c8:	d9402b15 	stw	r5,172(sp)
    65cc:	01c001c4 	movi	r7,7
    65d0:	dcc02c17 	ldw	r19,176(sp)
    65d4:	00000306 	br	65e4 <___vfprintf_internal_r+0x13b4>
    65d8:	b5800204 	addi	r22,r22,8
    65dc:	843ffc04 	addi	r16,r16,-16
    65e0:	e4007b0e 	bge	fp,r16,67d0 <___vfprintf_internal_r+0x15a0>
    65e4:	18c00404 	addi	r3,r3,16
    65e8:	8c400044 	addi	r17,r17,1
    65ec:	b5000015 	stw	r20,0(r22)
    65f0:	b7000115 	stw	fp,4(r22)
    65f4:	d8c02015 	stw	r3,128(sp)
    65f8:	dc401f15 	stw	r17,124(sp)
    65fc:	3c7ff60e 	bge	r7,r17,65d8 <___vfprintf_internal_r+0x13a8>
    6600:	d9801e04 	addi	r6,sp,120
    6604:	b80b883a 	mov	r5,r23
    6608:	9809883a 	mov	r4,r19
    660c:	d9c03c15 	stw	r7,240(sp)
    6610:	000d3d80 	call	d3d8 <__sprint_r>
    6614:	d9c03c17 	ldw	r7,240(sp)
    6618:	103c071e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    661c:	d8c02017 	ldw	r3,128(sp)
    6620:	dc401f17 	ldw	r17,124(sp)
    6624:	dd800404 	addi	r22,sp,16
    6628:	003fec06 	br	65dc <___vfprintf_internal_r+0x13ac>
    662c:	9080100c 	andi	r2,r18,64
    6630:	d8002785 	stb	zero,158(sp)
    6634:	10010e26 	beq	r2,zero,6a70 <___vfprintf_internal_r+0x1840>
    6638:	d9002d17 	ldw	r4,180(sp)
    663c:	d9402917 	ldw	r5,164(sp)
    6640:	002d883a 	mov	r22,zero
    6644:	20800104 	addi	r2,r4,4
    6648:	24c0000b 	ldhu	r19,0(r4)
    664c:	283fc90e 	bge	r5,zero,6574 <___vfprintf_internal_r+0x1344>
    6650:	d8802d15 	stw	r2,180(sp)
    6654:	0039883a 	mov	fp,zero
    6658:	9d84b03a 	or	r2,r19,r22
    665c:	103c461e 	bne	r2,zero,5778 <___vfprintf_internal_r+0x548>
    6660:	00800044 	movi	r2,1
    6664:	003e6c06 	br	6018 <___vfprintf_internal_r+0xde8>
    6668:	d9002c17 	ldw	r4,176(sp)
    666c:	d9801e04 	addi	r6,sp,120
    6670:	b80b883a 	mov	r5,r23
    6674:	000d3d80 	call	d3d8 <__sprint_r>
    6678:	103bef1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    667c:	d8c02017 	ldw	r3,128(sp)
    6680:	da000404 	addi	r8,sp,16
    6684:	d9003217 	ldw	r4,200(sp)
    6688:	d8802617 	ldw	r2,152(sp)
    668c:	d9403317 	ldw	r5,204(sp)
    6690:	8123883a 	add	r17,r16,r4
    6694:	11400216 	blt	r2,r5,66a0 <___vfprintf_internal_r+0x1470>
    6698:	9100004c 	andi	r4,r18,1
    669c:	20000d26 	beq	r4,zero,66d4 <___vfprintf_internal_r+0x14a4>
    66a0:	d9003717 	ldw	r4,220(sp)
    66a4:	d9403417 	ldw	r5,208(sp)
    66a8:	1907883a 	add	r3,r3,r4
    66ac:	d9001f17 	ldw	r4,124(sp)
    66b0:	41400015 	stw	r5,0(r8)
    66b4:	d9403717 	ldw	r5,220(sp)
    66b8:	21000044 	addi	r4,r4,1
    66bc:	d8c02015 	stw	r3,128(sp)
    66c0:	41400115 	stw	r5,4(r8)
    66c4:	d9001f15 	stw	r4,124(sp)
    66c8:	014001c4 	movi	r5,7
    66cc:	2901e816 	blt	r5,r4,6e70 <___vfprintf_internal_r+0x1c40>
    66d0:	42000204 	addi	r8,r8,8
    66d4:	d9003317 	ldw	r4,204(sp)
    66d8:	8121883a 	add	r16,r16,r4
    66dc:	2085c83a 	sub	r2,r4,r2
    66e0:	8461c83a 	sub	r16,r16,r17
    66e4:	1400010e 	bge	r2,r16,66ec <___vfprintf_internal_r+0x14bc>
    66e8:	1021883a 	mov	r16,r2
    66ec:	04000a0e 	bge	zero,r16,6718 <___vfprintf_internal_r+0x14e8>
    66f0:	d9001f17 	ldw	r4,124(sp)
    66f4:	1c07883a 	add	r3,r3,r16
    66f8:	44400015 	stw	r17,0(r8)
    66fc:	21000044 	addi	r4,r4,1
    6700:	44000115 	stw	r16,4(r8)
    6704:	d8c02015 	stw	r3,128(sp)
    6708:	d9001f15 	stw	r4,124(sp)
    670c:	014001c4 	movi	r5,7
    6710:	2901fb16 	blt	r5,r4,6f00 <___vfprintf_internal_r+0x1cd0>
    6714:	42000204 	addi	r8,r8,8
    6718:	8001f716 	blt	r16,zero,6ef8 <___vfprintf_internal_r+0x1cc8>
    671c:	1421c83a 	sub	r16,r2,r16
    6720:	043d380e 	bge	zero,r16,5c04 <___vfprintf_internal_r+0x9d4>
    6724:	04400404 	movi	r17,16
    6728:	d8801f17 	ldw	r2,124(sp)
    672c:	8c3efb0e 	bge	r17,r16,631c <___vfprintf_internal_r+0x10ec>
    6730:	014000b4 	movhi	r5,2
    6734:	29519684 	addi	r5,r5,18010
    6738:	d9402b15 	stw	r5,172(sp)
    673c:	058001c4 	movi	r22,7
    6740:	dcc02c17 	ldw	r19,176(sp)
    6744:	00000306 	br	6754 <___vfprintf_internal_r+0x1524>
    6748:	42000204 	addi	r8,r8,8
    674c:	843ffc04 	addi	r16,r16,-16
    6750:	8c3ef50e 	bge	r17,r16,6328 <___vfprintf_internal_r+0x10f8>
    6754:	18c00404 	addi	r3,r3,16
    6758:	10800044 	addi	r2,r2,1
    675c:	45000015 	stw	r20,0(r8)
    6760:	44400115 	stw	r17,4(r8)
    6764:	d8c02015 	stw	r3,128(sp)
    6768:	d8801f15 	stw	r2,124(sp)
    676c:	b0bff60e 	bge	r22,r2,6748 <___vfprintf_internal_r+0x1518>
    6770:	d9801e04 	addi	r6,sp,120
    6774:	b80b883a 	mov	r5,r23
    6778:	9809883a 	mov	r4,r19
    677c:	000d3d80 	call	d3d8 <__sprint_r>
    6780:	103bad1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6784:	d8c02017 	ldw	r3,128(sp)
    6788:	d8801f17 	ldw	r2,124(sp)
    678c:	da000404 	addi	r8,sp,16
    6790:	003fee06 	br	674c <___vfprintf_internal_r+0x151c>
    6794:	9088703a 	and	r4,r18,r2
    6798:	203eab1e 	bne	r4,zero,6248 <___vfprintf_internal_r+0x1018>
    679c:	dc401f17 	ldw	r17,124(sp)
    67a0:	40800115 	stw	r2,4(r8)
    67a4:	44000015 	stw	r16,0(r8)
    67a8:	8c400044 	addi	r17,r17,1
    67ac:	d8c02015 	stw	r3,128(sp)
    67b0:	dc401f15 	stw	r17,124(sp)
    67b4:	008001c4 	movi	r2,7
    67b8:	14400e16 	blt	r2,r17,67f4 <___vfprintf_internal_r+0x15c4>
    67bc:	45800204 	addi	r22,r8,8
    67c0:	003eca06 	br	62ec <___vfprintf_internal_r+0x10bc>
    67c4:	010000b4 	movhi	r4,2
    67c8:	21119684 	addi	r4,r4,18010
    67cc:	d9002b15 	stw	r4,172(sp)
    67d0:	d8802b17 	ldw	r2,172(sp)
    67d4:	1c07883a 	add	r3,r3,r16
    67d8:	8c400044 	addi	r17,r17,1
    67dc:	b0800015 	stw	r2,0(r22)
    67e0:	b4000115 	stw	r16,4(r22)
    67e4:	d8c02015 	stw	r3,128(sp)
    67e8:	dc401f15 	stw	r17,124(sp)
    67ec:	008001c4 	movi	r2,7
    67f0:	147ebd0e 	bge	r2,r17,62e8 <___vfprintf_internal_r+0x10b8>
    67f4:	d9002c17 	ldw	r4,176(sp)
    67f8:	d9801e04 	addi	r6,sp,120
    67fc:	b80b883a 	mov	r5,r23
    6800:	000d3d80 	call	d3d8 <__sprint_r>
    6804:	103b8c1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6808:	d8c02017 	ldw	r3,128(sp)
    680c:	dc401f17 	ldw	r17,124(sp)
    6810:	dd800404 	addi	r22,sp,16
    6814:	003eb506 	br	62ec <___vfprintf_internal_r+0x10bc>
    6818:	d9002c17 	ldw	r4,176(sp)
    681c:	d9801e04 	addi	r6,sp,120
    6820:	b80b883a 	mov	r5,r23
    6824:	000d3d80 	call	d3d8 <__sprint_r>
    6828:	103b831e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    682c:	d8c02017 	ldw	r3,128(sp)
    6830:	dc401f17 	ldw	r17,124(sp)
    6834:	da000404 	addi	r8,sp,16
    6838:	003e8d06 	br	6270 <___vfprintf_internal_r+0x1040>
    683c:	d9002c17 	ldw	r4,176(sp)
    6840:	d9801e04 	addi	r6,sp,120
    6844:	b80b883a 	mov	r5,r23
    6848:	000d3d80 	call	d3d8 <__sprint_r>
    684c:	103b7a1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6850:	d8c02017 	ldw	r3,128(sp)
    6854:	dc401f17 	ldw	r17,124(sp)
    6858:	dd800404 	addi	r22,sp,16
    685c:	003e8f06 	br	629c <___vfprintf_internal_r+0x106c>
    6860:	0027883a 	mov	r19,zero
    6864:	003f4a06 	br	6590 <___vfprintf_internal_r+0x1360>
    6868:	d9002c17 	ldw	r4,176(sp)
    686c:	d9801e04 	addi	r6,sp,120
    6870:	b80b883a 	mov	r5,r23
    6874:	000d3d80 	call	d3d8 <__sprint_r>
    6878:	103b6f1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    687c:	d8c02017 	ldw	r3,128(sp)
    6880:	da000404 	addi	r8,sp,16
    6884:	003c9d06 	br	5afc <___vfprintf_internal_r+0x8cc>
    6888:	04e7c83a 	sub	r19,zero,r19
    688c:	9804c03a 	cmpne	r2,r19,zero
    6890:	05adc83a 	sub	r22,zero,r22
    6894:	b0adc83a 	sub	r22,r22,r2
    6898:	d8802917 	ldw	r2,164(sp)
    689c:	07000b44 	movi	fp,45
    68a0:	df002785 	stb	fp,158(sp)
    68a4:	10017b16 	blt	r2,zero,6e94 <___vfprintf_internal_r+0x1c64>
    68a8:	00bfdfc4 	movi	r2,-129
    68ac:	90a4703a 	and	r18,r18,r2
    68b0:	003bb106 	br	5778 <___vfprintf_internal_r+0x548>
    68b4:	d9003617 	ldw	r4,216(sp)
    68b8:	d9403817 	ldw	r5,224(sp)
    68bc:	da003d15 	stw	r8,244(sp)
    68c0:	000bc440 	call	bc44 <__fpclassifyd>
    68c4:	da003d17 	ldw	r8,244(sp)
    68c8:	1000f026 	beq	r2,zero,6c8c <___vfprintf_internal_r+0x1a5c>
    68cc:	d9002917 	ldw	r4,164(sp)
    68d0:	05bff7c4 	movi	r22,-33
    68d4:	00bfffc4 	movi	r2,-1
    68d8:	8dac703a 	and	r22,r17,r22
    68dc:	20820026 	beq	r4,r2,70e0 <___vfprintf_internal_r+0x1eb0>
    68e0:	008011c4 	movi	r2,71
    68e4:	b081f726 	beq	r22,r2,70c4 <___vfprintf_internal_r+0x1e94>
    68e8:	d9003817 	ldw	r4,224(sp)
    68ec:	90c04014 	ori	r3,r18,256
    68f0:	d8c02b15 	stw	r3,172(sp)
    68f4:	20021516 	blt	r4,zero,714c <___vfprintf_internal_r+0x1f1c>
    68f8:	dcc03817 	ldw	r19,224(sp)
    68fc:	d8002a05 	stb	zero,168(sp)
    6900:	00801984 	movi	r2,102
    6904:	8881f926 	beq	r17,r2,70ec <___vfprintf_internal_r+0x1ebc>
    6908:	00801184 	movi	r2,70
    690c:	88821c26 	beq	r17,r2,7180 <___vfprintf_internal_r+0x1f50>
    6910:	00801144 	movi	r2,69
    6914:	b081ef26 	beq	r22,r2,70d4 <___vfprintf_internal_r+0x1ea4>
    6918:	d8c02917 	ldw	r3,164(sp)
    691c:	d8802104 	addi	r2,sp,132
    6920:	d8800315 	stw	r2,12(sp)
    6924:	d9403617 	ldw	r5,216(sp)
    6928:	d8802504 	addi	r2,sp,148
    692c:	d9002c17 	ldw	r4,176(sp)
    6930:	d8800215 	stw	r2,8(sp)
    6934:	d8802604 	addi	r2,sp,152
    6938:	d8c00015 	stw	r3,0(sp)
    693c:	d8800115 	stw	r2,4(sp)
    6940:	01c00084 	movi	r7,2
    6944:	980d883a 	mov	r6,r19
    6948:	d8c03c15 	stw	r3,240(sp)
    694c:	da003d15 	stw	r8,244(sp)
    6950:	00078540 	call	7854 <_dtoa_r>
    6954:	1021883a 	mov	r16,r2
    6958:	008019c4 	movi	r2,103
    695c:	d8c03c17 	ldw	r3,240(sp)
    6960:	da003d17 	ldw	r8,244(sp)
    6964:	88817126 	beq	r17,r2,6f2c <___vfprintf_internal_r+0x1cfc>
    6968:	008011c4 	movi	r2,71
    696c:	88829226 	beq	r17,r2,73b8 <___vfprintf_internal_r+0x2188>
    6970:	80f9883a 	add	fp,r16,r3
    6974:	d9003617 	ldw	r4,216(sp)
    6978:	000d883a 	mov	r6,zero
    697c:	000f883a 	mov	r7,zero
    6980:	980b883a 	mov	r5,r19
    6984:	da003d15 	stw	r8,244(sp)
    6988:	00110500 	call	11050 <__eqdf2>
    698c:	da003d17 	ldw	r8,244(sp)
    6990:	10018d26 	beq	r2,zero,6fc8 <___vfprintf_internal_r+0x1d98>
    6994:	d8802117 	ldw	r2,132(sp)
    6998:	1700062e 	bgeu	r2,fp,69b4 <___vfprintf_internal_r+0x1784>
    699c:	01000c04 	movi	r4,48
    69a0:	10c00044 	addi	r3,r2,1
    69a4:	d8c02115 	stw	r3,132(sp)
    69a8:	11000005 	stb	r4,0(r2)
    69ac:	d8802117 	ldw	r2,132(sp)
    69b0:	173ffb36 	bltu	r2,fp,69a0 <___vfprintf_internal_r+0x1770>
    69b4:	1405c83a 	sub	r2,r2,r16
    69b8:	d8803315 	stw	r2,204(sp)
    69bc:	008011c4 	movi	r2,71
    69c0:	b0817626 	beq	r22,r2,6f9c <___vfprintf_internal_r+0x1d6c>
    69c4:	00801944 	movi	r2,101
    69c8:	1442810e 	bge	r2,r17,73d0 <___vfprintf_internal_r+0x21a0>
    69cc:	d8c02617 	ldw	r3,152(sp)
    69d0:	00801984 	movi	r2,102
    69d4:	d8c03215 	stw	r3,200(sp)
    69d8:	8881fe26 	beq	r17,r2,71d4 <___vfprintf_internal_r+0x1fa4>
    69dc:	d8c03217 	ldw	r3,200(sp)
    69e0:	d9003317 	ldw	r4,204(sp)
    69e4:	1901dd16 	blt	r3,r4,715c <___vfprintf_internal_r+0x1f2c>
    69e8:	9480004c 	andi	r18,r18,1
    69ec:	90022b1e 	bne	r18,zero,729c <___vfprintf_internal_r+0x206c>
    69f0:	1805883a 	mov	r2,r3
    69f4:	18028016 	blt	r3,zero,73f8 <___vfprintf_internal_r+0x21c8>
    69f8:	d8c03217 	ldw	r3,200(sp)
    69fc:	044019c4 	movi	r17,103
    6a00:	d8c02e15 	stw	r3,184(sp)
    6a04:	df002a07 	ldb	fp,168(sp)
    6a08:	e001531e 	bne	fp,zero,6f58 <___vfprintf_internal_r+0x1d28>
    6a0c:	df002783 	ldbu	fp,158(sp)
    6a10:	d8802a15 	stw	r2,168(sp)
    6a14:	dc802b17 	ldw	r18,172(sp)
    6a18:	d8002915 	stw	zero,164(sp)
    6a1c:	003bd106 	br	5964 <___vfprintf_internal_r+0x734>
    6a20:	d8802d17 	ldw	r2,180(sp)
    6a24:	d8c02d17 	ldw	r3,180(sp)
    6a28:	d9002d17 	ldw	r4,180(sp)
    6a2c:	10800017 	ldw	r2,0(r2)
    6a30:	18c00117 	ldw	r3,4(r3)
    6a34:	21000204 	addi	r4,r4,8
    6a38:	d8803615 	stw	r2,216(sp)
    6a3c:	d8c03815 	stw	r3,224(sp)
    6a40:	d9002d15 	stw	r4,180(sp)
    6a44:	003b7506 	br	581c <___vfprintf_internal_r+0x5ec>
    6a48:	ac400007 	ldb	r17,0(r21)
    6a4c:	003a5906 	br	53b4 <___vfprintf_internal_r+0x184>
    6a50:	9080100c 	andi	r2,r18,64
    6a54:	1000a826 	beq	r2,zero,6cf8 <___vfprintf_internal_r+0x1ac8>
    6a58:	d9002d17 	ldw	r4,180(sp)
    6a5c:	002d883a 	mov	r22,zero
    6a60:	24c0000b 	ldhu	r19,0(r4)
    6a64:	21000104 	addi	r4,r4,4
    6a68:	d9002d15 	stw	r4,180(sp)
    6a6c:	003ccb06 	br	5d9c <___vfprintf_internal_r+0xb6c>
    6a70:	d8c02d17 	ldw	r3,180(sp)
    6a74:	d9002917 	ldw	r4,164(sp)
    6a78:	002d883a 	mov	r22,zero
    6a7c:	18800104 	addi	r2,r3,4
    6a80:	1cc00017 	ldw	r19,0(r3)
    6a84:	203ebb0e 	bge	r4,zero,6574 <___vfprintf_internal_r+0x1344>
    6a88:	003ef106 	br	6650 <___vfprintf_internal_r+0x1420>
    6a8c:	9080040c 	andi	r2,r18,16
    6a90:	1000921e 	bne	r2,zero,6cdc <___vfprintf_internal_r+0x1aac>
    6a94:	9480100c 	andi	r18,r18,64
    6a98:	90013926 	beq	r18,zero,6f80 <___vfprintf_internal_r+0x1d50>
    6a9c:	d9002d17 	ldw	r4,180(sp)
    6aa0:	d9402f17 	ldw	r5,188(sp)
    6aa4:	20800017 	ldw	r2,0(r4)
    6aa8:	21000104 	addi	r4,r4,4
    6aac:	d9002d15 	stw	r4,180(sp)
    6ab0:	1140000d 	sth	r5,0(r2)
    6ab4:	003a1606 	br	5310 <___vfprintf_internal_r+0xe0>
    6ab8:	9080100c 	andi	r2,r18,64
    6abc:	10008026 	beq	r2,zero,6cc0 <___vfprintf_internal_r+0x1a90>
    6ac0:	d8c02d17 	ldw	r3,180(sp)
    6ac4:	1cc0000f 	ldh	r19,0(r3)
    6ac8:	18c00104 	addi	r3,r3,4
    6acc:	d8c02d15 	stw	r3,180(sp)
    6ad0:	982dd7fa 	srai	r22,r19,31
    6ad4:	b005883a 	mov	r2,r22
    6ad8:	003b1f06 	br	5758 <___vfprintf_internal_r+0x528>
    6adc:	9080100c 	andi	r2,r18,64
    6ae0:	d8002785 	stb	zero,158(sp)
    6ae4:	10008a1e 	bne	r2,zero,6d10 <___vfprintf_internal_r+0x1ae0>
    6ae8:	d9402d17 	ldw	r5,180(sp)
    6aec:	d8c02917 	ldw	r3,164(sp)
    6af0:	002d883a 	mov	r22,zero
    6af4:	28800104 	addi	r2,r5,4
    6af8:	2cc00017 	ldw	r19,0(r5)
    6afc:	183e4b0e 	bge	r3,zero,642c <___vfprintf_internal_r+0x11fc>
    6b00:	9d86b03a 	or	r3,r19,r22
    6b04:	d8802d15 	stw	r2,180(sp)
    6b08:	183e4c1e 	bne	r3,zero,643c <___vfprintf_internal_r+0x120c>
    6b0c:	0039883a 	mov	fp,zero
    6b10:	0005883a 	mov	r2,zero
    6b14:	003d4006 	br	6018 <___vfprintf_internal_r+0xde8>
    6b18:	014000b4 	movhi	r5,2
    6b1c:	29519684 	addi	r5,r5,18010
    6b20:	d9402b15 	stw	r5,172(sp)
    6b24:	d9402b17 	ldw	r5,172(sp)
    6b28:	1c47883a 	add	r3,r3,r17
    6b2c:	10800044 	addi	r2,r2,1
    6b30:	41400015 	stw	r5,0(r8)
    6b34:	44400115 	stw	r17,4(r8)
    6b38:	d8c02015 	stw	r3,128(sp)
    6b3c:	d8801f15 	stw	r2,124(sp)
    6b40:	010001c4 	movi	r4,7
    6b44:	20bec816 	blt	r4,r2,6668 <___vfprintf_internal_r+0x1438>
    6b48:	42000204 	addi	r8,r8,8
    6b4c:	003ecd06 	br	6684 <___vfprintf_internal_r+0x1454>
    6b50:	d9002917 	ldw	r4,164(sp)
    6b54:	d8002785 	stb	zero,158(sp)
    6b58:	203d2d16 	blt	r4,zero,6010 <___vfprintf_internal_r+0xde0>
    6b5c:	00bfdfc4 	movi	r2,-129
    6b60:	90a4703a 	and	r18,r18,r2
    6b64:	003a9106 	br	55ac <___vfprintf_internal_r+0x37c>
    6b68:	010000b4 	movhi	r4,2
    6b6c:	21119684 	addi	r4,r4,18010
    6b70:	d9002b15 	stw	r4,172(sp)
    6b74:	003c0c06 	br	5ba8 <___vfprintf_internal_r+0x978>
    6b78:	d9002c17 	ldw	r4,176(sp)
    6b7c:	d9801e04 	addi	r6,sp,120
    6b80:	b80b883a 	mov	r5,r23
    6b84:	000d3d80 	call	d3d8 <__sprint_r>
    6b88:	103aab1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6b8c:	d8c02017 	ldw	r3,128(sp)
    6b90:	da000404 	addi	r8,sp,16
    6b94:	003d4106 	br	609c <___vfprintf_internal_r+0xe6c>
    6b98:	d8801f17 	ldw	r2,124(sp)
    6b9c:	014000b4 	movhi	r5,2
    6ba0:	01000044 	movi	r4,1
    6ba4:	18c00044 	addi	r3,r3,1
    6ba8:	10800044 	addi	r2,r2,1
    6bac:	29518e04 	addi	r5,r5,17976
    6bb0:	41000115 	stw	r4,4(r8)
    6bb4:	41400015 	stw	r5,0(r8)
    6bb8:	d8c02015 	stw	r3,128(sp)
    6bbc:	d8801f15 	stw	r2,124(sp)
    6bc0:	010001c4 	movi	r4,7
    6bc4:	20805c16 	blt	r4,r2,6d38 <___vfprintf_internal_r+0x1b08>
    6bc8:	42000204 	addi	r8,r8,8
    6bcc:	8800041e 	bne	r17,zero,6be0 <___vfprintf_internal_r+0x19b0>
    6bd0:	d8803317 	ldw	r2,204(sp)
    6bd4:	1000021e 	bne	r2,zero,6be0 <___vfprintf_internal_r+0x19b0>
    6bd8:	9080004c 	andi	r2,r18,1
    6bdc:	103c0926 	beq	r2,zero,5c04 <___vfprintf_internal_r+0x9d4>
    6be0:	d9003717 	ldw	r4,220(sp)
    6be4:	d8801f17 	ldw	r2,124(sp)
    6be8:	d9403417 	ldw	r5,208(sp)
    6bec:	20c7883a 	add	r3,r4,r3
    6bf0:	10800044 	addi	r2,r2,1
    6bf4:	41000115 	stw	r4,4(r8)
    6bf8:	41400015 	stw	r5,0(r8)
    6bfc:	d8c02015 	stw	r3,128(sp)
    6c00:	d8801f15 	stw	r2,124(sp)
    6c04:	010001c4 	movi	r4,7
    6c08:	20812116 	blt	r4,r2,7090 <___vfprintf_internal_r+0x1e60>
    6c0c:	42000204 	addi	r8,r8,8
    6c10:	0463c83a 	sub	r17,zero,r17
    6c14:	0440730e 	bge	zero,r17,6de4 <___vfprintf_internal_r+0x1bb4>
    6c18:	05800404 	movi	r22,16
    6c1c:	b440860e 	bge	r22,r17,6e38 <___vfprintf_internal_r+0x1c08>
    6c20:	014000b4 	movhi	r5,2
    6c24:	29519684 	addi	r5,r5,18010
    6c28:	d9402b15 	stw	r5,172(sp)
    6c2c:	070001c4 	movi	fp,7
    6c30:	dcc02c17 	ldw	r19,176(sp)
    6c34:	00000306 	br	6c44 <___vfprintf_internal_r+0x1a14>
    6c38:	42000204 	addi	r8,r8,8
    6c3c:	8c7ffc04 	addi	r17,r17,-16
    6c40:	b440800e 	bge	r22,r17,6e44 <___vfprintf_internal_r+0x1c14>
    6c44:	18c00404 	addi	r3,r3,16
    6c48:	10800044 	addi	r2,r2,1
    6c4c:	45000015 	stw	r20,0(r8)
    6c50:	45800115 	stw	r22,4(r8)
    6c54:	d8c02015 	stw	r3,128(sp)
    6c58:	d8801f15 	stw	r2,124(sp)
    6c5c:	e0bff60e 	bge	fp,r2,6c38 <___vfprintf_internal_r+0x1a08>
    6c60:	d9801e04 	addi	r6,sp,120
    6c64:	b80b883a 	mov	r5,r23
    6c68:	9809883a 	mov	r4,r19
    6c6c:	000d3d80 	call	d3d8 <__sprint_r>
    6c70:	103a711e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6c74:	d8c02017 	ldw	r3,128(sp)
    6c78:	d8801f17 	ldw	r2,124(sp)
    6c7c:	da000404 	addi	r8,sp,16
    6c80:	003fee06 	br	6c3c <___vfprintf_internal_r+0x1a0c>
    6c84:	00bfffc4 	movi	r2,-1
    6c88:	003a6f06 	br	5648 <___vfprintf_internal_r+0x418>
    6c8c:	008011c4 	movi	r2,71
    6c90:	1440b816 	blt	r2,r17,6f74 <___vfprintf_internal_r+0x1d44>
    6c94:	040000b4 	movhi	r16,2
    6c98:	84118004 	addi	r16,r16,17920
    6c9c:	00c000c4 	movi	r3,3
    6ca0:	00bfdfc4 	movi	r2,-129
    6ca4:	d8c02a15 	stw	r3,168(sp)
    6ca8:	90a4703a 	and	r18,r18,r2
    6cac:	df002783 	ldbu	fp,158(sp)
    6cb0:	d8c02e15 	stw	r3,184(sp)
    6cb4:	d8002915 	stw	zero,164(sp)
    6cb8:	d8003215 	stw	zero,200(sp)
    6cbc:	003b2906 	br	5964 <___vfprintf_internal_r+0x734>
    6cc0:	d9002d17 	ldw	r4,180(sp)
    6cc4:	24c00017 	ldw	r19,0(r4)
    6cc8:	21000104 	addi	r4,r4,4
    6ccc:	d9002d15 	stw	r4,180(sp)
    6cd0:	982dd7fa 	srai	r22,r19,31
    6cd4:	b005883a 	mov	r2,r22
    6cd8:	003a9f06 	br	5758 <___vfprintf_internal_r+0x528>
    6cdc:	d9402d17 	ldw	r5,180(sp)
    6ce0:	d8c02f17 	ldw	r3,188(sp)
    6ce4:	28800017 	ldw	r2,0(r5)
    6ce8:	29400104 	addi	r5,r5,4
    6cec:	d9402d15 	stw	r5,180(sp)
    6cf0:	10c00015 	stw	r3,0(r2)
    6cf4:	00398606 	br	5310 <___vfprintf_internal_r+0xe0>
    6cf8:	d9402d17 	ldw	r5,180(sp)
    6cfc:	002d883a 	mov	r22,zero
    6d00:	2cc00017 	ldw	r19,0(r5)
    6d04:	29400104 	addi	r5,r5,4
    6d08:	d9402d15 	stw	r5,180(sp)
    6d0c:	003c2306 	br	5d9c <___vfprintf_internal_r+0xb6c>
    6d10:	d8c02d17 	ldw	r3,180(sp)
    6d14:	d9002917 	ldw	r4,164(sp)
    6d18:	002d883a 	mov	r22,zero
    6d1c:	18800104 	addi	r2,r3,4
    6d20:	1cc0000b 	ldhu	r19,0(r3)
    6d24:	203dc10e 	bge	r4,zero,642c <___vfprintf_internal_r+0x11fc>
    6d28:	003f7506 	br	6b00 <___vfprintf_internal_r+0x18d0>
    6d2c:	040000b4 	movhi	r16,2
    6d30:	84117e04 	addi	r16,r16,17912
    6d34:	003acc06 	br	5868 <___vfprintf_internal_r+0x638>
    6d38:	d9002c17 	ldw	r4,176(sp)
    6d3c:	d9801e04 	addi	r6,sp,120
    6d40:	b80b883a 	mov	r5,r23
    6d44:	000d3d80 	call	d3d8 <__sprint_r>
    6d48:	103a3b1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6d4c:	dc402617 	ldw	r17,152(sp)
    6d50:	d8c02017 	ldw	r3,128(sp)
    6d54:	da000404 	addi	r8,sp,16
    6d58:	003f9c06 	br	6bcc <___vfprintf_internal_r+0x199c>
    6d5c:	ac400043 	ldbu	r17,1(r21)
    6d60:	94800814 	ori	r18,r18,32
    6d64:	ad400044 	addi	r21,r21,1
    6d68:	8c403fcc 	andi	r17,r17,255
    6d6c:	8c40201c 	xori	r17,r17,128
    6d70:	8c7fe004 	addi	r17,r17,-128
    6d74:	00398f06 	br	53b4 <___vfprintf_internal_r+0x184>
    6d78:	d8c02d15 	stw	r3,180(sp)
    6d7c:	0039883a 	mov	fp,zero
    6d80:	003e3506 	br	6658 <___vfprintf_internal_r+0x1428>
    6d84:	d9002c17 	ldw	r4,176(sp)
    6d88:	d9801e04 	addi	r6,sp,120
    6d8c:	b80b883a 	mov	r5,r23
    6d90:	000d3d80 	call	d3d8 <__sprint_r>
    6d94:	103a281e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6d98:	d8c02017 	ldw	r3,128(sp)
    6d9c:	da000404 	addi	r8,sp,16
    6da0:	003cd006 	br	60e4 <___vfprintf_internal_r+0xeb4>
    6da4:	8009883a 	mov	r4,r16
    6da8:	da003d15 	stw	r8,244(sp)
    6dac:	0002fc00 	call	2fc0 <strlen>
    6db0:	d8802e15 	stw	r2,184(sp)
    6db4:	da003d17 	ldw	r8,244(sp)
    6db8:	103c340e 	bge	r2,zero,5e8c <___vfprintf_internal_r+0xc5c>
    6dbc:	0005883a 	mov	r2,zero
    6dc0:	003c3206 	br	5e8c <___vfprintf_internal_r+0xc5c>
    6dc4:	d9002c17 	ldw	r4,176(sp)
    6dc8:	d9801e04 	addi	r6,sp,120
    6dcc:	b80b883a 	mov	r5,r23
    6dd0:	000d3d80 	call	d3d8 <__sprint_r>
    6dd4:	103a181e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6dd8:	d8c02017 	ldw	r3,128(sp)
    6ddc:	d8801f17 	ldw	r2,124(sp)
    6de0:	da000404 	addi	r8,sp,16
    6de4:	d9403317 	ldw	r5,204(sp)
    6de8:	10800044 	addi	r2,r2,1
    6dec:	44000015 	stw	r16,0(r8)
    6df0:	28c7883a 	add	r3,r5,r3
    6df4:	003b7d06 	br	5bec <___vfprintf_internal_r+0x9bc>
    6df8:	010000b4 	movhi	r4,2
    6dfc:	21119a84 	addi	r4,r4,18026
    6e00:	d9003515 	stw	r4,212(sp)
    6e04:	003b1406 	br	5a58 <___vfprintf_internal_r+0x828>
    6e08:	013fffc4 	movi	r4,-1
    6e0c:	003a3506 	br	56e4 <___vfprintf_internal_r+0x4b4>
    6e10:	0023883a 	mov	r17,zero
    6e14:	003d9d06 	br	648c <___vfprintf_internal_r+0x125c>
    6e18:	d9002c17 	ldw	r4,176(sp)
    6e1c:	d9801e04 	addi	r6,sp,120
    6e20:	b80b883a 	mov	r5,r23
    6e24:	000d3d80 	call	d3d8 <__sprint_r>
    6e28:	103a031e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6e2c:	d8c02017 	ldw	r3,128(sp)
    6e30:	da000404 	addi	r8,sp,16
    6e34:	003d9406 	br	6488 <___vfprintf_internal_r+0x1258>
    6e38:	010000b4 	movhi	r4,2
    6e3c:	21119684 	addi	r4,r4,18010
    6e40:	d9002b15 	stw	r4,172(sp)
    6e44:	d9002b17 	ldw	r4,172(sp)
    6e48:	1c47883a 	add	r3,r3,r17
    6e4c:	10800044 	addi	r2,r2,1
    6e50:	41000015 	stw	r4,0(r8)
    6e54:	44400115 	stw	r17,4(r8)
    6e58:	d8c02015 	stw	r3,128(sp)
    6e5c:	d8801f15 	stw	r2,124(sp)
    6e60:	010001c4 	movi	r4,7
    6e64:	20bfd716 	blt	r4,r2,6dc4 <___vfprintf_internal_r+0x1b94>
    6e68:	42000204 	addi	r8,r8,8
    6e6c:	003fdd06 	br	6de4 <___vfprintf_internal_r+0x1bb4>
    6e70:	d9002c17 	ldw	r4,176(sp)
    6e74:	d9801e04 	addi	r6,sp,120
    6e78:	b80b883a 	mov	r5,r23
    6e7c:	000d3d80 	call	d3d8 <__sprint_r>
    6e80:	1039ed1e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6e84:	d8802617 	ldw	r2,152(sp)
    6e88:	d8c02017 	ldw	r3,128(sp)
    6e8c:	da000404 	addi	r8,sp,16
    6e90:	003e1006 	br	66d4 <___vfprintf_internal_r+0x14a4>
    6e94:	00800044 	movi	r2,1
    6e98:	10803fcc 	andi	r2,r2,255
    6e9c:	00c00044 	movi	r3,1
    6ea0:	10fa3526 	beq	r2,r3,5778 <___vfprintf_internal_r+0x548>
    6ea4:	00c00084 	movi	r3,2
    6ea8:	10fbcb26 	beq	r2,r3,5dd8 <___vfprintf_internal_r+0xba8>
    6eac:	003a8f06 	br	58ec <___vfprintf_internal_r+0x6bc>
    6eb0:	010000b4 	movhi	r4,2
    6eb4:	21119a84 	addi	r4,r4,18026
    6eb8:	d9003515 	stw	r4,212(sp)
    6ebc:	003b7606 	br	5c98 <___vfprintf_internal_r+0xa68>
    6ec0:	d8802917 	ldw	r2,164(sp)
    6ec4:	00c00184 	movi	r3,6
    6ec8:	1880012e 	bgeu	r3,r2,6ed0 <___vfprintf_internal_r+0x1ca0>
    6ecc:	1805883a 	mov	r2,r3
    6ed0:	d8802e15 	stw	r2,184(sp)
    6ed4:	1000ef16 	blt	r2,zero,7294 <___vfprintf_internal_r+0x2064>
    6ed8:	040000b4 	movhi	r16,2
    6edc:	d8802a15 	stw	r2,168(sp)
    6ee0:	dcc02d15 	stw	r19,180(sp)
    6ee4:	d8002915 	stw	zero,164(sp)
    6ee8:	d8003215 	stw	zero,200(sp)
    6eec:	84118c04 	addi	r16,r16,17968
    6ef0:	0039883a 	mov	fp,zero
    6ef4:	003aa206 	br	5980 <___vfprintf_internal_r+0x750>
    6ef8:	0021883a 	mov	r16,zero
    6efc:	003e0706 	br	671c <___vfprintf_internal_r+0x14ec>
    6f00:	d9002c17 	ldw	r4,176(sp)
    6f04:	d9801e04 	addi	r6,sp,120
    6f08:	b80b883a 	mov	r5,r23
    6f0c:	000d3d80 	call	d3d8 <__sprint_r>
    6f10:	1039c91e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    6f14:	d8802617 	ldw	r2,152(sp)
    6f18:	d9403317 	ldw	r5,204(sp)
    6f1c:	d8c02017 	ldw	r3,128(sp)
    6f20:	da000404 	addi	r8,sp,16
    6f24:	2885c83a 	sub	r2,r5,r2
    6f28:	003dfb06 	br	6718 <___vfprintf_internal_r+0x14e8>
    6f2c:	9080004c 	andi	r2,r18,1
    6f30:	103e8f1e 	bne	r2,zero,6970 <___vfprintf_internal_r+0x1740>
    6f34:	d8802117 	ldw	r2,132(sp)
    6f38:	003e9e06 	br	69b4 <___vfprintf_internal_r+0x1784>
    6f3c:	1025883a 	mov	r18,r2
    6f40:	0039883a 	mov	fp,zero
    6f44:	00800084 	movi	r2,2
    6f48:	003fd306 	br	6e98 <___vfprintf_internal_r+0x1c68>
    6f4c:	07000b44 	movi	fp,45
    6f50:	df002785 	stb	fp,158(sp)
    6f54:	003a4006 	br	5858 <___vfprintf_internal_r+0x628>
    6f58:	00c00b44 	movi	r3,45
    6f5c:	d8c02785 	stb	r3,158(sp)
    6f60:	d8802a15 	stw	r2,168(sp)
    6f64:	dc802b17 	ldw	r18,172(sp)
    6f68:	d8002915 	stw	zero,164(sp)
    6f6c:	07000b44 	movi	fp,45
    6f70:	003a8006 	br	5974 <___vfprintf_internal_r+0x744>
    6f74:	040000b4 	movhi	r16,2
    6f78:	84118104 	addi	r16,r16,17924
    6f7c:	003f4706 	br	6c9c <___vfprintf_internal_r+0x1a6c>
    6f80:	d8c02d17 	ldw	r3,180(sp)
    6f84:	d9002f17 	ldw	r4,188(sp)
    6f88:	18800017 	ldw	r2,0(r3)
    6f8c:	18c00104 	addi	r3,r3,4
    6f90:	d8c02d15 	stw	r3,180(sp)
    6f94:	11000015 	stw	r4,0(r2)
    6f98:	0038dd06 	br	5310 <___vfprintf_internal_r+0xe0>
    6f9c:	dd802617 	ldw	r22,152(sp)
    6fa0:	00bfff44 	movi	r2,-3
    6fa4:	b0801c16 	blt	r22,r2,7018 <___vfprintf_internal_r+0x1de8>
    6fa8:	d9402917 	ldw	r5,164(sp)
    6fac:	2d801a16 	blt	r5,r22,7018 <___vfprintf_internal_r+0x1de8>
    6fb0:	dd803215 	stw	r22,200(sp)
    6fb4:	003e8906 	br	69dc <___vfprintf_internal_r+0x17ac>
    6fb8:	010000b4 	movhi	r4,2
    6fbc:	21119684 	addi	r4,r4,18010
    6fc0:	d9002b15 	stw	r4,172(sp)
    6fc4:	003c9106 	br	620c <___vfprintf_internal_r+0xfdc>
    6fc8:	e005883a 	mov	r2,fp
    6fcc:	003e7906 	br	69b4 <___vfprintf_internal_r+0x1784>
    6fd0:	d9402917 	ldw	r5,164(sp)
    6fd4:	df002783 	ldbu	fp,158(sp)
    6fd8:	dcc02d15 	stw	r19,180(sp)
    6fdc:	d9402a15 	stw	r5,168(sp)
    6fe0:	d9402e15 	stw	r5,184(sp)
    6fe4:	d8002915 	stw	zero,164(sp)
    6fe8:	d8003215 	stw	zero,200(sp)
    6fec:	003a5d06 	br	5964 <___vfprintf_internal_r+0x734>
    6ff0:	9080004c 	andi	r2,r18,1
    6ff4:	0039883a 	mov	fp,zero
    6ff8:	10000426 	beq	r2,zero,700c <___vfprintf_internal_r+0x1ddc>
    6ffc:	00800c04 	movi	r2,48
    7000:	dc001dc4 	addi	r16,sp,119
    7004:	d8801dc5 	stb	r2,119(sp)
    7008:	003b8006 	br	5e0c <___vfprintf_internal_r+0xbdc>
    700c:	d8002e15 	stw	zero,184(sp)
    7010:	dc001e04 	addi	r16,sp,120
    7014:	003a4d06 	br	594c <___vfprintf_internal_r+0x71c>
    7018:	8c7fff84 	addi	r17,r17,-2
    701c:	b5bfffc4 	addi	r22,r22,-1
    7020:	dd802615 	stw	r22,152(sp)
    7024:	dc4022c5 	stb	r17,139(sp)
    7028:	b000bf16 	blt	r22,zero,7328 <___vfprintf_internal_r+0x20f8>
    702c:	00800ac4 	movi	r2,43
    7030:	d8802305 	stb	r2,140(sp)
    7034:	00800244 	movi	r2,9
    7038:	15807016 	blt	r2,r22,71fc <___vfprintf_internal_r+0x1fcc>
    703c:	00800c04 	movi	r2,48
    7040:	b5800c04 	addi	r22,r22,48
    7044:	d8802345 	stb	r2,141(sp)
    7048:	dd802385 	stb	r22,142(sp)
    704c:	d88023c4 	addi	r2,sp,143
    7050:	df0022c4 	addi	fp,sp,139
    7054:	d8c03317 	ldw	r3,204(sp)
    7058:	1739c83a 	sub	fp,r2,fp
    705c:	d9003317 	ldw	r4,204(sp)
    7060:	e0c7883a 	add	r3,fp,r3
    7064:	df003a15 	stw	fp,232(sp)
    7068:	d8c02e15 	stw	r3,184(sp)
    706c:	00800044 	movi	r2,1
    7070:	1100b30e 	bge	r2,r4,7340 <___vfprintf_internal_r+0x2110>
    7074:	d8c02e17 	ldw	r3,184(sp)
    7078:	18c00044 	addi	r3,r3,1
    707c:	d8c02e15 	stw	r3,184(sp)
    7080:	1805883a 	mov	r2,r3
    7084:	1800ac16 	blt	r3,zero,7338 <___vfprintf_internal_r+0x2108>
    7088:	d8003215 	stw	zero,200(sp)
    708c:	003e5d06 	br	6a04 <___vfprintf_internal_r+0x17d4>
    7090:	d9002c17 	ldw	r4,176(sp)
    7094:	d9801e04 	addi	r6,sp,120
    7098:	b80b883a 	mov	r5,r23
    709c:	000d3d80 	call	d3d8 <__sprint_r>
    70a0:	1039651e 	bne	r2,zero,5638 <___vfprintf_internal_r+0x408>
    70a4:	dc402617 	ldw	r17,152(sp)
    70a8:	d8c02017 	ldw	r3,128(sp)
    70ac:	d8801f17 	ldw	r2,124(sp)
    70b0:	da000404 	addi	r8,sp,16
    70b4:	003ed606 	br	6c10 <___vfprintf_internal_r+0x19e0>
    70b8:	582b883a 	mov	r21,r11
    70bc:	d8002915 	stw	zero,164(sp)
    70c0:	0038bd06 	br	53b8 <___vfprintf_internal_r+0x188>
    70c4:	d8802917 	ldw	r2,164(sp)
    70c8:	103e071e 	bne	r2,zero,68e8 <___vfprintf_internal_r+0x16b8>
    70cc:	dc002915 	stw	r16,164(sp)
    70d0:	003e0506 	br	68e8 <___vfprintf_internal_r+0x16b8>
    70d4:	d9002917 	ldw	r4,164(sp)
    70d8:	20c00044 	addi	r3,r4,1
    70dc:	003e0f06 	br	691c <___vfprintf_internal_r+0x16ec>
    70e0:	01400184 	movi	r5,6
    70e4:	d9402915 	stw	r5,164(sp)
    70e8:	003dff06 	br	68e8 <___vfprintf_internal_r+0x16b8>
    70ec:	d8802104 	addi	r2,sp,132
    70f0:	d8800315 	stw	r2,12(sp)
    70f4:	d8802504 	addi	r2,sp,148
    70f8:	d8800215 	stw	r2,8(sp)
    70fc:	d8802604 	addi	r2,sp,152
    7100:	d8800115 	stw	r2,4(sp)
    7104:	d8802917 	ldw	r2,164(sp)
    7108:	d9403617 	ldw	r5,216(sp)
    710c:	d9002c17 	ldw	r4,176(sp)
    7110:	d8800015 	stw	r2,0(sp)
    7114:	01c000c4 	movi	r7,3
    7118:	980d883a 	mov	r6,r19
    711c:	da003d15 	stw	r8,244(sp)
    7120:	00078540 	call	7854 <_dtoa_r>
    7124:	d8c02917 	ldw	r3,164(sp)
    7128:	da003d17 	ldw	r8,244(sp)
    712c:	1021883a 	mov	r16,r2
    7130:	10f9883a 	add	fp,r2,r3
    7134:	81000007 	ldb	r4,0(r16)
    7138:	00800c04 	movi	r2,48
    713c:	20805e26 	beq	r4,r2,72b8 <___vfprintf_internal_r+0x2088>
    7140:	d8c02617 	ldw	r3,152(sp)
    7144:	e0f9883a 	add	fp,fp,r3
    7148:	003e0a06 	br	6974 <___vfprintf_internal_r+0x1744>
    714c:	00c00b44 	movi	r3,45
    7150:	24e0003c 	xorhi	r19,r4,32768
    7154:	d8c02a05 	stb	r3,168(sp)
    7158:	003de906 	br	6900 <___vfprintf_internal_r+0x16d0>
    715c:	d8c03217 	ldw	r3,200(sp)
    7160:	00c07a0e 	bge	zero,r3,734c <___vfprintf_internal_r+0x211c>
    7164:	00800044 	movi	r2,1
    7168:	d9003317 	ldw	r4,204(sp)
    716c:	1105883a 	add	r2,r2,r4
    7170:	d8802e15 	stw	r2,184(sp)
    7174:	10004e16 	blt	r2,zero,72b0 <___vfprintf_internal_r+0x2080>
    7178:	044019c4 	movi	r17,103
    717c:	003e2106 	br	6a04 <___vfprintf_internal_r+0x17d4>
    7180:	d9002917 	ldw	r4,164(sp)
    7184:	d8802104 	addi	r2,sp,132
    7188:	d8800315 	stw	r2,12(sp)
    718c:	d9000015 	stw	r4,0(sp)
    7190:	d8802504 	addi	r2,sp,148
    7194:	d9403617 	ldw	r5,216(sp)
    7198:	d9002c17 	ldw	r4,176(sp)
    719c:	d8800215 	stw	r2,8(sp)
    71a0:	d8802604 	addi	r2,sp,152
    71a4:	d8800115 	stw	r2,4(sp)
    71a8:	01c000c4 	movi	r7,3
    71ac:	980d883a 	mov	r6,r19
    71b0:	da003d15 	stw	r8,244(sp)
    71b4:	00078540 	call	7854 <_dtoa_r>
    71b8:	d8c02917 	ldw	r3,164(sp)
    71bc:	da003d17 	ldw	r8,244(sp)
    71c0:	1021883a 	mov	r16,r2
    71c4:	00801184 	movi	r2,70
    71c8:	80f9883a 	add	fp,r16,r3
    71cc:	88bfd926 	beq	r17,r2,7134 <___vfprintf_internal_r+0x1f04>
    71d0:	003de806 	br	6974 <___vfprintf_internal_r+0x1744>
    71d4:	d9002917 	ldw	r4,164(sp)
    71d8:	00c04d0e 	bge	zero,r3,7310 <___vfprintf_internal_r+0x20e0>
    71dc:	2000441e 	bne	r4,zero,72f0 <___vfprintf_internal_r+0x20c0>
    71e0:	9480004c 	andi	r18,r18,1
    71e4:	9000421e 	bne	r18,zero,72f0 <___vfprintf_internal_r+0x20c0>
    71e8:	1805883a 	mov	r2,r3
    71ec:	18007016 	blt	r3,zero,73b0 <___vfprintf_internal_r+0x2180>
    71f0:	d8c03217 	ldw	r3,200(sp)
    71f4:	d8c02e15 	stw	r3,184(sp)
    71f8:	003e0206 	br	6a04 <___vfprintf_internal_r+0x17d4>
    71fc:	df0022c4 	addi	fp,sp,139
    7200:	dc002915 	stw	r16,164(sp)
    7204:	4027883a 	mov	r19,r8
    7208:	e021883a 	mov	r16,fp
    720c:	b009883a 	mov	r4,r22
    7210:	01400284 	movi	r5,10
    7214:	000fd8c0 	call	fd8c <__modsi3>
    7218:	10800c04 	addi	r2,r2,48
    721c:	843fffc4 	addi	r16,r16,-1
    7220:	b009883a 	mov	r4,r22
    7224:	01400284 	movi	r5,10
    7228:	80800005 	stb	r2,0(r16)
    722c:	000fd080 	call	fd08 <__divsi3>
    7230:	102d883a 	mov	r22,r2
    7234:	00800244 	movi	r2,9
    7238:	15bff416 	blt	r2,r22,720c <___vfprintf_internal_r+0x1fdc>
    723c:	9811883a 	mov	r8,r19
    7240:	b0800c04 	addi	r2,r22,48
    7244:	8027883a 	mov	r19,r16
    7248:	997fffc4 	addi	r5,r19,-1
    724c:	98bfffc5 	stb	r2,-1(r19)
    7250:	dc002917 	ldw	r16,164(sp)
    7254:	2f006a2e 	bgeu	r5,fp,7400 <___vfprintf_internal_r+0x21d0>
    7258:	d9c02384 	addi	r7,sp,142
    725c:	3ccfc83a 	sub	r7,r7,r19
    7260:	d9002344 	addi	r4,sp,141
    7264:	e1cf883a 	add	r7,fp,r7
    7268:	00000106 	br	7270 <___vfprintf_internal_r+0x2040>
    726c:	28800003 	ldbu	r2,0(r5)
    7270:	20800005 	stb	r2,0(r4)
    7274:	21000044 	addi	r4,r4,1
    7278:	29400044 	addi	r5,r5,1
    727c:	393ffb1e 	bne	r7,r4,726c <___vfprintf_internal_r+0x203c>
    7280:	d8802304 	addi	r2,sp,140
    7284:	14c5c83a 	sub	r2,r2,r19
    7288:	d8c02344 	addi	r3,sp,141
    728c:	1885883a 	add	r2,r3,r2
    7290:	003f7006 	br	7054 <___vfprintf_internal_r+0x1e24>
    7294:	0005883a 	mov	r2,zero
    7298:	003f0f06 	br	6ed8 <___vfprintf_internal_r+0x1ca8>
    729c:	d8c03217 	ldw	r3,200(sp)
    72a0:	18c00044 	addi	r3,r3,1
    72a4:	d8c02e15 	stw	r3,184(sp)
    72a8:	1805883a 	mov	r2,r3
    72ac:	183fb20e 	bge	r3,zero,7178 <___vfprintf_internal_r+0x1f48>
    72b0:	0005883a 	mov	r2,zero
    72b4:	003fb006 	br	7178 <___vfprintf_internal_r+0x1f48>
    72b8:	d9003617 	ldw	r4,216(sp)
    72bc:	000d883a 	mov	r6,zero
    72c0:	000f883a 	mov	r7,zero
    72c4:	980b883a 	mov	r5,r19
    72c8:	d8c03c15 	stw	r3,240(sp)
    72cc:	da003d15 	stw	r8,244(sp)
    72d0:	00110500 	call	11050 <__eqdf2>
    72d4:	d8c03c17 	ldw	r3,240(sp)
    72d8:	da003d17 	ldw	r8,244(sp)
    72dc:	103f9826 	beq	r2,zero,7140 <___vfprintf_internal_r+0x1f10>
    72e0:	00800044 	movi	r2,1
    72e4:	10c7c83a 	sub	r3,r2,r3
    72e8:	d8c02615 	stw	r3,152(sp)
    72ec:	003f9506 	br	7144 <___vfprintf_internal_r+0x1f14>
    72f0:	d9002917 	ldw	r4,164(sp)
    72f4:	d8c03217 	ldw	r3,200(sp)
    72f8:	20800044 	addi	r2,r4,1
    72fc:	1885883a 	add	r2,r3,r2
    7300:	d8802e15 	stw	r2,184(sp)
    7304:	103dbf0e 	bge	r2,zero,6a04 <___vfprintf_internal_r+0x17d4>
    7308:	0005883a 	mov	r2,zero
    730c:	003dbd06 	br	6a04 <___vfprintf_internal_r+0x17d4>
    7310:	2000211e 	bne	r4,zero,7398 <___vfprintf_internal_r+0x2168>
    7314:	9480004c 	andi	r18,r18,1
    7318:	90001f1e 	bne	r18,zero,7398 <___vfprintf_internal_r+0x2168>
    731c:	00800044 	movi	r2,1
    7320:	d8802e15 	stw	r2,184(sp)
    7324:	003db706 	br	6a04 <___vfprintf_internal_r+0x17d4>
    7328:	00800b44 	movi	r2,45
    732c:	05adc83a 	sub	r22,zero,r22
    7330:	d8802305 	stb	r2,140(sp)
    7334:	003f3f06 	br	7034 <___vfprintf_internal_r+0x1e04>
    7338:	0005883a 	mov	r2,zero
    733c:	003f5206 	br	7088 <___vfprintf_internal_r+0x1e58>
    7340:	90a4703a 	and	r18,r18,r2
    7344:	903f4e26 	beq	r18,zero,7080 <___vfprintf_internal_r+0x1e50>
    7348:	003f4a06 	br	7074 <___vfprintf_internal_r+0x1e44>
    734c:	00800084 	movi	r2,2
    7350:	10c5c83a 	sub	r2,r2,r3
    7354:	003f8406 	br	7168 <___vfprintf_internal_r+0x1f38>
    7358:	d8802d17 	ldw	r2,180(sp)
    735c:	d9002d17 	ldw	r4,180(sp)
    7360:	ac400043 	ldbu	r17,1(r21)
    7364:	10800017 	ldw	r2,0(r2)
    7368:	582b883a 	mov	r21,r11
    736c:	d8802915 	stw	r2,164(sp)
    7370:	20800104 	addi	r2,r4,4
    7374:	d9002917 	ldw	r4,164(sp)
    7378:	d8802d15 	stw	r2,180(sp)
    737c:	203e7a0e 	bge	r4,zero,6d68 <___vfprintf_internal_r+0x1b38>
    7380:	8c403fcc 	andi	r17,r17,255
    7384:	00bfffc4 	movi	r2,-1
    7388:	8c40201c 	xori	r17,r17,128
    738c:	d8802915 	stw	r2,164(sp)
    7390:	8c7fe004 	addi	r17,r17,-128
    7394:	00380706 	br	53b4 <___vfprintf_internal_r+0x184>
    7398:	d8c02917 	ldw	r3,164(sp)
    739c:	18c00084 	addi	r3,r3,2
    73a0:	d8c02e15 	stw	r3,184(sp)
    73a4:	1805883a 	mov	r2,r3
    73a8:	183d960e 	bge	r3,zero,6a04 <___vfprintf_internal_r+0x17d4>
    73ac:	003fd606 	br	7308 <___vfprintf_internal_r+0x20d8>
    73b0:	0005883a 	mov	r2,zero
    73b4:	003f8e06 	br	71f0 <___vfprintf_internal_r+0x1fc0>
    73b8:	9080004c 	andi	r2,r18,1
    73bc:	103f811e 	bne	r2,zero,71c4 <___vfprintf_internal_r+0x1f94>
    73c0:	d8802117 	ldw	r2,132(sp)
    73c4:	1405c83a 	sub	r2,r2,r16
    73c8:	d8803315 	stw	r2,204(sp)
    73cc:	b47ef326 	beq	r22,r17,6f9c <___vfprintf_internal_r+0x1d6c>
    73d0:	dd802617 	ldw	r22,152(sp)
    73d4:	003f1106 	br	701c <___vfprintf_internal_r+0x1dec>
    73d8:	d9c02785 	stb	r7,158(sp)
    73dc:	00390406 	br	57f0 <___vfprintf_internal_r+0x5c0>
    73e0:	d9c02785 	stb	r7,158(sp)
    73e4:	0038d306 	br	5734 <___vfprintf_internal_r+0x504>
    73e8:	d9c02785 	stb	r7,158(sp)
    73ec:	003a6106 	br	5d74 <___vfprintf_internal_r+0xb44>
    73f0:	d9c02785 	stb	r7,158(sp)
    73f4:	003af806 	br	5fd8 <___vfprintf_internal_r+0xda8>
    73f8:	0005883a 	mov	r2,zero
    73fc:	003d7e06 	br	69f8 <___vfprintf_internal_r+0x17c8>
    7400:	d8802344 	addi	r2,sp,141
    7404:	003f1306 	br	7054 <___vfprintf_internal_r+0x1e24>
    7408:	d9c02785 	stb	r7,158(sp)
    740c:	00392306 	br	589c <___vfprintf_internal_r+0x66c>
    7410:	d9c02785 	stb	r7,158(sp)
    7414:	003aa906 	br	5ebc <___vfprintf_internal_r+0xc8c>
    7418:	d9c02785 	stb	r7,158(sp)
    741c:	003a3d06 	br	5d14 <___vfprintf_internal_r+0xae4>
    7420:	d9c02785 	stb	r7,158(sp)
    7424:	003aca06 	br	5f50 <___vfprintf_internal_r+0xd20>

00007428 <__vfprintf_internal>:
    7428:	008000b4 	movhi	r2,2
    742c:	109bb804 	addi	r2,r2,28384
    7430:	300f883a 	mov	r7,r6
    7434:	280d883a 	mov	r6,r5
    7438:	200b883a 	mov	r5,r4
    743c:	11000017 	ldw	r4,0(r2)
    7440:	00052301 	jmpi	5230 <___vfprintf_internal_r>

00007444 <__sbprintf>:
    7444:	2880030b 	ldhu	r2,12(r5)
    7448:	2ac01917 	ldw	r11,100(r5)
    744c:	2a80038b 	ldhu	r10,14(r5)
    7450:	2a400717 	ldw	r9,28(r5)
    7454:	2a000917 	ldw	r8,36(r5)
    7458:	defee204 	addi	sp,sp,-1144
    745c:	00c10004 	movi	r3,1024
    7460:	dc011a15 	stw	r16,1128(sp)
    7464:	10bfff4c 	andi	r2,r2,65533
    7468:	2821883a 	mov	r16,r5
    746c:	d8cb883a 	add	r5,sp,r3
    7470:	dc811c15 	stw	r18,1136(sp)
    7474:	dc411b15 	stw	r17,1132(sp)
    7478:	dfc11d15 	stw	ra,1140(sp)
    747c:	2025883a 	mov	r18,r4
    7480:	d881030d 	sth	r2,1036(sp)
    7484:	dac11915 	stw	r11,1124(sp)
    7488:	da81038d 	sth	r10,1038(sp)
    748c:	da410715 	stw	r9,1052(sp)
    7490:	da010915 	stw	r8,1060(sp)
    7494:	dec10015 	stw	sp,1024(sp)
    7498:	dec10415 	stw	sp,1040(sp)
    749c:	d8c10215 	stw	r3,1032(sp)
    74a0:	d8c10515 	stw	r3,1044(sp)
    74a4:	d8010615 	stw	zero,1048(sp)
    74a8:	00052300 	call	5230 <___vfprintf_internal_r>
    74ac:	1023883a 	mov	r17,r2
    74b0:	10000416 	blt	r2,zero,74c4 <__sbprintf+0x80>
    74b4:	d9410004 	addi	r5,sp,1024
    74b8:	9009883a 	mov	r4,r18
    74bc:	00090f80 	call	90f8 <_fflush_r>
    74c0:	10000d1e 	bne	r2,zero,74f8 <__sbprintf+0xb4>
    74c4:	d881030b 	ldhu	r2,1036(sp)
    74c8:	1080100c 	andi	r2,r2,64
    74cc:	10000326 	beq	r2,zero,74dc <__sbprintf+0x98>
    74d0:	8080030b 	ldhu	r2,12(r16)
    74d4:	10801014 	ori	r2,r2,64
    74d8:	8080030d 	sth	r2,12(r16)
    74dc:	8805883a 	mov	r2,r17
    74e0:	dfc11d17 	ldw	ra,1140(sp)
    74e4:	dc811c17 	ldw	r18,1136(sp)
    74e8:	dc411b17 	ldw	r17,1132(sp)
    74ec:	dc011a17 	ldw	r16,1128(sp)
    74f0:	dec11e04 	addi	sp,sp,1144
    74f4:	f800283a 	ret
    74f8:	047fffc4 	movi	r17,-1
    74fc:	003ff106 	br	74c4 <__sbprintf+0x80>

00007500 <__swsetup_r>:
    7500:	008000b4 	movhi	r2,2
    7504:	defffd04 	addi	sp,sp,-12
    7508:	109bb804 	addi	r2,r2,28384
    750c:	dc400115 	stw	r17,4(sp)
    7510:	2023883a 	mov	r17,r4
    7514:	11000017 	ldw	r4,0(r2)
    7518:	dc000015 	stw	r16,0(sp)
    751c:	dfc00215 	stw	ra,8(sp)
    7520:	2821883a 	mov	r16,r5
    7524:	20000226 	beq	r4,zero,7530 <__swsetup_r+0x30>
    7528:	20800e17 	ldw	r2,56(r4)
    752c:	10003126 	beq	r2,zero,75f4 <__swsetup_r+0xf4>
    7530:	8080030b 	ldhu	r2,12(r16)
    7534:	10c0020c 	andi	r3,r2,8
    7538:	1009883a 	mov	r4,r2
    753c:	18000f26 	beq	r3,zero,757c <__swsetup_r+0x7c>
    7540:	80c00417 	ldw	r3,16(r16)
    7544:	18001526 	beq	r3,zero,759c <__swsetup_r+0x9c>
    7548:	1100004c 	andi	r4,r2,1
    754c:	20001c1e 	bne	r4,zero,75c0 <__swsetup_r+0xc0>
    7550:	1080008c 	andi	r2,r2,2
    7554:	1000291e 	bne	r2,zero,75fc <__swsetup_r+0xfc>
    7558:	80800517 	ldw	r2,20(r16)
    755c:	80800215 	stw	r2,8(r16)
    7560:	18001c26 	beq	r3,zero,75d4 <__swsetup_r+0xd4>
    7564:	0005883a 	mov	r2,zero
    7568:	dfc00217 	ldw	ra,8(sp)
    756c:	dc400117 	ldw	r17,4(sp)
    7570:	dc000017 	ldw	r16,0(sp)
    7574:	dec00304 	addi	sp,sp,12
    7578:	f800283a 	ret
    757c:	2080040c 	andi	r2,r4,16
    7580:	10002e26 	beq	r2,zero,763c <__swsetup_r+0x13c>
    7584:	2080010c 	andi	r2,r4,4
    7588:	10001e1e 	bne	r2,zero,7604 <__swsetup_r+0x104>
    758c:	80c00417 	ldw	r3,16(r16)
    7590:	20800214 	ori	r2,r4,8
    7594:	8080030d 	sth	r2,12(r16)
    7598:	183feb1e 	bne	r3,zero,7548 <__swsetup_r+0x48>
    759c:	1100a00c 	andi	r4,r2,640
    75a0:	01408004 	movi	r5,512
    75a4:	217fe826 	beq	r4,r5,7548 <__swsetup_r+0x48>
    75a8:	800b883a 	mov	r5,r16
    75ac:	8809883a 	mov	r4,r17
    75b0:	000a0780 	call	a078 <__smakebuf_r>
    75b4:	8080030b 	ldhu	r2,12(r16)
    75b8:	80c00417 	ldw	r3,16(r16)
    75bc:	003fe206 	br	7548 <__swsetup_r+0x48>
    75c0:	80800517 	ldw	r2,20(r16)
    75c4:	80000215 	stw	zero,8(r16)
    75c8:	0085c83a 	sub	r2,zero,r2
    75cc:	80800615 	stw	r2,24(r16)
    75d0:	183fe41e 	bne	r3,zero,7564 <__swsetup_r+0x64>
    75d4:	80c0030b 	ldhu	r3,12(r16)
    75d8:	0005883a 	mov	r2,zero
    75dc:	1900200c 	andi	r4,r3,128
    75e0:	203fe126 	beq	r4,zero,7568 <__swsetup_r+0x68>
    75e4:	18c01014 	ori	r3,r3,64
    75e8:	80c0030d 	sth	r3,12(r16)
    75ec:	00bfffc4 	movi	r2,-1
    75f0:	003fdd06 	br	7568 <__swsetup_r+0x68>
    75f4:	00094d40 	call	94d4 <__sinit>
    75f8:	003fcd06 	br	7530 <__swsetup_r+0x30>
    75fc:	0005883a 	mov	r2,zero
    7600:	003fd606 	br	755c <__swsetup_r+0x5c>
    7604:	81400c17 	ldw	r5,48(r16)
    7608:	28000626 	beq	r5,zero,7624 <__swsetup_r+0x124>
    760c:	80801004 	addi	r2,r16,64
    7610:	28800326 	beq	r5,r2,7620 <__swsetup_r+0x120>
    7614:	8809883a 	mov	r4,r17
    7618:	00096480 	call	9648 <_free_r>
    761c:	8100030b 	ldhu	r4,12(r16)
    7620:	80000c15 	stw	zero,48(r16)
    7624:	80c00417 	ldw	r3,16(r16)
    7628:	00bff6c4 	movi	r2,-37
    762c:	1108703a 	and	r4,r2,r4
    7630:	80000115 	stw	zero,4(r16)
    7634:	80c00015 	stw	r3,0(r16)
    7638:	003fd506 	br	7590 <__swsetup_r+0x90>
    763c:	00800244 	movi	r2,9
    7640:	88800015 	stw	r2,0(r17)
    7644:	20801014 	ori	r2,r4,64
    7648:	8080030d 	sth	r2,12(r16)
    764c:	00bfffc4 	movi	r2,-1
    7650:	003fc506 	br	7568 <__swsetup_r+0x68>

00007654 <quorem>:
    7654:	defff704 	addi	sp,sp,-36
    7658:	dc800215 	stw	r18,8(sp)
    765c:	20800417 	ldw	r2,16(r4)
    7660:	2c800417 	ldw	r18,16(r5)
    7664:	dfc00815 	stw	ra,32(sp)
    7668:	ddc00715 	stw	r23,28(sp)
    766c:	dd800615 	stw	r22,24(sp)
    7670:	dd400515 	stw	r21,20(sp)
    7674:	dd000415 	stw	r20,16(sp)
    7678:	dcc00315 	stw	r19,12(sp)
    767c:	dc400115 	stw	r17,4(sp)
    7680:	dc000015 	stw	r16,0(sp)
    7684:	14807116 	blt	r2,r18,784c <quorem+0x1f8>
    7688:	94bfffc4 	addi	r18,r18,-1
    768c:	94ad883a 	add	r22,r18,r18
    7690:	b5ad883a 	add	r22,r22,r22
    7694:	2c400504 	addi	r17,r5,20
    7698:	8da9883a 	add	r20,r17,r22
    769c:	25400504 	addi	r21,r4,20
    76a0:	282f883a 	mov	r23,r5
    76a4:	adad883a 	add	r22,r21,r22
    76a8:	a1400017 	ldw	r5,0(r20)
    76ac:	2021883a 	mov	r16,r4
    76b0:	b1000017 	ldw	r4,0(r22)
    76b4:	29400044 	addi	r5,r5,1
    76b8:	000fe000 	call	fe00 <__udivsi3>
    76bc:	1027883a 	mov	r19,r2
    76c0:	10002c26 	beq	r2,zero,7774 <quorem+0x120>
    76c4:	a813883a 	mov	r9,r21
    76c8:	880b883a 	mov	r5,r17
    76cc:	0009883a 	mov	r4,zero
    76d0:	000d883a 	mov	r6,zero
    76d4:	2a000017 	ldw	r8,0(r5)
    76d8:	49c00017 	ldw	r7,0(r9)
    76dc:	29400104 	addi	r5,r5,4
    76e0:	40bfffcc 	andi	r2,r8,65535
    76e4:	14c5383a 	mul	r2,r2,r19
    76e8:	4010d43a 	srli	r8,r8,16
    76ec:	38ffffcc 	andi	r3,r7,65535
    76f0:	1105883a 	add	r2,r2,r4
    76f4:	1008d43a 	srli	r4,r2,16
    76f8:	44d1383a 	mul	r8,r8,r19
    76fc:	198d883a 	add	r6,r3,r6
    7700:	10ffffcc 	andi	r3,r2,65535
    7704:	30c7c83a 	sub	r3,r6,r3
    7708:	380ed43a 	srli	r7,r7,16
    770c:	4105883a 	add	r2,r8,r4
    7710:	180dd43a 	srai	r6,r3,16
    7714:	113fffcc 	andi	r4,r2,65535
    7718:	390fc83a 	sub	r7,r7,r4
    771c:	398d883a 	add	r6,r7,r6
    7720:	300e943a 	slli	r7,r6,16
    7724:	18ffffcc 	andi	r3,r3,65535
    7728:	1008d43a 	srli	r4,r2,16
    772c:	38ceb03a 	or	r7,r7,r3
    7730:	49c00015 	stw	r7,0(r9)
    7734:	300dd43a 	srai	r6,r6,16
    7738:	4a400104 	addi	r9,r9,4
    773c:	a17fe52e 	bgeu	r20,r5,76d4 <quorem+0x80>
    7740:	b0800017 	ldw	r2,0(r22)
    7744:	10000b1e 	bne	r2,zero,7774 <quorem+0x120>
    7748:	b0bfff04 	addi	r2,r22,-4
    774c:	a880082e 	bgeu	r21,r2,7770 <quorem+0x11c>
    7750:	b0ffff17 	ldw	r3,-4(r22)
    7754:	18000326 	beq	r3,zero,7764 <quorem+0x110>
    7758:	00000506 	br	7770 <quorem+0x11c>
    775c:	10c00017 	ldw	r3,0(r2)
    7760:	1800031e 	bne	r3,zero,7770 <quorem+0x11c>
    7764:	10bfff04 	addi	r2,r2,-4
    7768:	94bfffc4 	addi	r18,r18,-1
    776c:	a8bffb36 	bltu	r21,r2,775c <quorem+0x108>
    7770:	84800415 	stw	r18,16(r16)
    7774:	b80b883a 	mov	r5,r23
    7778:	8009883a 	mov	r4,r16
    777c:	000afac0 	call	afac <__mcmp>
    7780:	10002616 	blt	r2,zero,781c <quorem+0x1c8>
    7784:	9cc00044 	addi	r19,r19,1
    7788:	a805883a 	mov	r2,r21
    778c:	000b883a 	mov	r5,zero
    7790:	11000017 	ldw	r4,0(r2)
    7794:	89800017 	ldw	r6,0(r17)
    7798:	10800104 	addi	r2,r2,4
    779c:	20ffffcc 	andi	r3,r4,65535
    77a0:	194b883a 	add	r5,r3,r5
    77a4:	30ffffcc 	andi	r3,r6,65535
    77a8:	28c7c83a 	sub	r3,r5,r3
    77ac:	300cd43a 	srli	r6,r6,16
    77b0:	2008d43a 	srli	r4,r4,16
    77b4:	180bd43a 	srai	r5,r3,16
    77b8:	18ffffcc 	andi	r3,r3,65535
    77bc:	2189c83a 	sub	r4,r4,r6
    77c0:	2149883a 	add	r4,r4,r5
    77c4:	200c943a 	slli	r6,r4,16
    77c8:	8c400104 	addi	r17,r17,4
    77cc:	200bd43a 	srai	r5,r4,16
    77d0:	30c6b03a 	or	r3,r6,r3
    77d4:	10ffff15 	stw	r3,-4(r2)
    77d8:	a47fed2e 	bgeu	r20,r17,7790 <quorem+0x13c>
    77dc:	9485883a 	add	r2,r18,r18
    77e0:	1085883a 	add	r2,r2,r2
    77e4:	a887883a 	add	r3,r21,r2
    77e8:	18800017 	ldw	r2,0(r3)
    77ec:	10000b1e 	bne	r2,zero,781c <quorem+0x1c8>
    77f0:	18bfff04 	addi	r2,r3,-4
    77f4:	a880082e 	bgeu	r21,r2,7818 <quorem+0x1c4>
    77f8:	18ffff17 	ldw	r3,-4(r3)
    77fc:	18000326 	beq	r3,zero,780c <quorem+0x1b8>
    7800:	00000506 	br	7818 <quorem+0x1c4>
    7804:	10c00017 	ldw	r3,0(r2)
    7808:	1800031e 	bne	r3,zero,7818 <quorem+0x1c4>
    780c:	10bfff04 	addi	r2,r2,-4
    7810:	94bfffc4 	addi	r18,r18,-1
    7814:	a8bffb36 	bltu	r21,r2,7804 <quorem+0x1b0>
    7818:	84800415 	stw	r18,16(r16)
    781c:	9805883a 	mov	r2,r19
    7820:	dfc00817 	ldw	ra,32(sp)
    7824:	ddc00717 	ldw	r23,28(sp)
    7828:	dd800617 	ldw	r22,24(sp)
    782c:	dd400517 	ldw	r21,20(sp)
    7830:	dd000417 	ldw	r20,16(sp)
    7834:	dcc00317 	ldw	r19,12(sp)
    7838:	dc800217 	ldw	r18,8(sp)
    783c:	dc400117 	ldw	r17,4(sp)
    7840:	dc000017 	ldw	r16,0(sp)
    7844:	dec00904 	addi	sp,sp,36
    7848:	f800283a 	ret
    784c:	0005883a 	mov	r2,zero
    7850:	003ff306 	br	7820 <quorem+0x1cc>

00007854 <_dtoa_r>:
    7854:	20801017 	ldw	r2,64(r4)
    7858:	deffde04 	addi	sp,sp,-136
    785c:	df002015 	stw	fp,128(sp)
    7860:	dcc01b15 	stw	r19,108(sp)
    7864:	dc801a15 	stw	r18,104(sp)
    7868:	dc401915 	stw	r17,100(sp)
    786c:	dc001815 	stw	r16,96(sp)
    7870:	dfc02115 	stw	ra,132(sp)
    7874:	ddc01f15 	stw	r23,124(sp)
    7878:	dd801e15 	stw	r22,120(sp)
    787c:	dd401d15 	stw	r21,116(sp)
    7880:	dd001c15 	stw	r20,112(sp)
    7884:	d9c00315 	stw	r7,12(sp)
    7888:	2039883a 	mov	fp,r4
    788c:	3023883a 	mov	r17,r6
    7890:	2825883a 	mov	r18,r5
    7894:	dc002417 	ldw	r16,144(sp)
    7898:	3027883a 	mov	r19,r6
    789c:	10000826 	beq	r2,zero,78c0 <_dtoa_r+0x6c>
    78a0:	21801117 	ldw	r6,68(r4)
    78a4:	00c00044 	movi	r3,1
    78a8:	100b883a 	mov	r5,r2
    78ac:	1986983a 	sll	r3,r3,r6
    78b0:	11800115 	stw	r6,4(r2)
    78b4:	10c00215 	stw	r3,8(r2)
    78b8:	000a78c0 	call	a78c <_Bfree>
    78bc:	e0001015 	stw	zero,64(fp)
    78c0:	88002e16 	blt	r17,zero,797c <_dtoa_r+0x128>
    78c4:	80000015 	stw	zero,0(r16)
    78c8:	889ffc2c 	andhi	r2,r17,32752
    78cc:	00dffc34 	movhi	r3,32752
    78d0:	10c01c26 	beq	r2,r3,7944 <_dtoa_r+0xf0>
    78d4:	000d883a 	mov	r6,zero
    78d8:	000f883a 	mov	r7,zero
    78dc:	9009883a 	mov	r4,r18
    78e0:	980b883a 	mov	r5,r19
    78e4:	00110500 	call	11050 <__eqdf2>
    78e8:	10002b1e 	bne	r2,zero,7998 <_dtoa_r+0x144>
    78ec:	d9c02317 	ldw	r7,140(sp)
    78f0:	00800044 	movi	r2,1
    78f4:	38800015 	stw	r2,0(r7)
    78f8:	d8802517 	ldw	r2,148(sp)
    78fc:	10019e26 	beq	r2,zero,7f78 <_dtoa_r+0x724>
    7900:	d8c02517 	ldw	r3,148(sp)
    7904:	008000b4 	movhi	r2,2
    7908:	10918e44 	addi	r2,r2,17977
    790c:	18800015 	stw	r2,0(r3)
    7910:	10bfffc4 	addi	r2,r2,-1
    7914:	dfc02117 	ldw	ra,132(sp)
    7918:	df002017 	ldw	fp,128(sp)
    791c:	ddc01f17 	ldw	r23,124(sp)
    7920:	dd801e17 	ldw	r22,120(sp)
    7924:	dd401d17 	ldw	r21,116(sp)
    7928:	dd001c17 	ldw	r20,112(sp)
    792c:	dcc01b17 	ldw	r19,108(sp)
    7930:	dc801a17 	ldw	r18,104(sp)
    7934:	dc401917 	ldw	r17,100(sp)
    7938:	dc001817 	ldw	r16,96(sp)
    793c:	dec02204 	addi	sp,sp,136
    7940:	f800283a 	ret
    7944:	d8c02317 	ldw	r3,140(sp)
    7948:	0089c3c4 	movi	r2,9999
    794c:	18800015 	stw	r2,0(r3)
    7950:	90017726 	beq	r18,zero,7f30 <_dtoa_r+0x6dc>
    7954:	008000b4 	movhi	r2,2
    7958:	1091a204 	addi	r2,r2,18056
    795c:	d9002517 	ldw	r4,148(sp)
    7960:	203fec26 	beq	r4,zero,7914 <_dtoa_r+0xc0>
    7964:	10c000c7 	ldb	r3,3(r2)
    7968:	1801781e 	bne	r3,zero,7f4c <_dtoa_r+0x6f8>
    796c:	10c000c4 	addi	r3,r2,3
    7970:	d9802517 	ldw	r6,148(sp)
    7974:	30c00015 	stw	r3,0(r6)
    7978:	003fe606 	br	7914 <_dtoa_r+0xc0>
    797c:	04e00034 	movhi	r19,32768
    7980:	9cffffc4 	addi	r19,r19,-1
    7984:	00800044 	movi	r2,1
    7988:	8ce6703a 	and	r19,r17,r19
    798c:	80800015 	stw	r2,0(r16)
    7990:	9823883a 	mov	r17,r19
    7994:	003fcc06 	br	78c8 <_dtoa_r+0x74>
    7998:	d8800204 	addi	r2,sp,8
    799c:	d8800015 	stw	r2,0(sp)
    79a0:	d9c00104 	addi	r7,sp,4
    79a4:	900b883a 	mov	r5,r18
    79a8:	980d883a 	mov	r6,r19
    79ac:	e009883a 	mov	r4,fp
    79b0:	8820d53a 	srli	r16,r17,20
    79b4:	000b3780 	call	b378 <__d2b>
    79b8:	d8800915 	stw	r2,36(sp)
    79bc:	8001651e 	bne	r16,zero,7f54 <_dtoa_r+0x700>
    79c0:	dd800217 	ldw	r22,8(sp)
    79c4:	dc000117 	ldw	r16,4(sp)
    79c8:	00800804 	movi	r2,32
    79cc:	b421883a 	add	r16,r22,r16
    79d0:	80c10c84 	addi	r3,r16,1074
    79d4:	10c2d10e 	bge	r2,r3,851c <_dtoa_r+0xcc8>
    79d8:	00801004 	movi	r2,64
    79dc:	81010484 	addi	r4,r16,1042
    79e0:	10c7c83a 	sub	r3,r2,r3
    79e4:	9108d83a 	srl	r4,r18,r4
    79e8:	88e2983a 	sll	r17,r17,r3
    79ec:	2448b03a 	or	r4,r4,r17
    79f0:	00124180 	call	12418 <__floatunsidf>
    79f4:	017f8434 	movhi	r5,65040
    79f8:	01800044 	movi	r6,1
    79fc:	1009883a 	mov	r4,r2
    7a00:	194b883a 	add	r5,r3,r5
    7a04:	843fffc4 	addi	r16,r16,-1
    7a08:	d9801115 	stw	r6,68(sp)
    7a0c:	000d883a 	mov	r6,zero
    7a10:	01cffe34 	movhi	r7,16376
    7a14:	00119c00 	call	119c0 <__subdf3>
    7a18:	0198dbf4 	movhi	r6,25455
    7a1c:	01cff4f4 	movhi	r7,16339
    7a20:	3190d844 	addi	r6,r6,17249
    7a24:	39e1e9c4 	addi	r7,r7,-30809
    7a28:	1009883a 	mov	r4,r2
    7a2c:	180b883a 	mov	r5,r3
    7a30:	00112a80 	call	112a8 <__muldf3>
    7a34:	01a2d874 	movhi	r6,35681
    7a38:	01cff1f4 	movhi	r7,16327
    7a3c:	31b22cc4 	addi	r6,r6,-14157
    7a40:	39e28a04 	addi	r7,r7,-30168
    7a44:	180b883a 	mov	r5,r3
    7a48:	1009883a 	mov	r4,r2
    7a4c:	000febc0 	call	febc <__adddf3>
    7a50:	8009883a 	mov	r4,r16
    7a54:	1029883a 	mov	r20,r2
    7a58:	1823883a 	mov	r17,r3
    7a5c:	001233c0 	call	1233c <__floatsidf>
    7a60:	019427f4 	movhi	r6,20639
    7a64:	01cff4f4 	movhi	r7,16339
    7a68:	319e7ec4 	addi	r6,r6,31227
    7a6c:	39d104c4 	addi	r7,r7,17427
    7a70:	1009883a 	mov	r4,r2
    7a74:	180b883a 	mov	r5,r3
    7a78:	00112a80 	call	112a8 <__muldf3>
    7a7c:	100d883a 	mov	r6,r2
    7a80:	180f883a 	mov	r7,r3
    7a84:	a009883a 	mov	r4,r20
    7a88:	880b883a 	mov	r5,r17
    7a8c:	000febc0 	call	febc <__adddf3>
    7a90:	1009883a 	mov	r4,r2
    7a94:	180b883a 	mov	r5,r3
    7a98:	1029883a 	mov	r20,r2
    7a9c:	1823883a 	mov	r17,r3
    7aa0:	00122bc0 	call	122bc <__fixdfsi>
    7aa4:	000d883a 	mov	r6,zero
    7aa8:	000f883a 	mov	r7,zero
    7aac:	a009883a 	mov	r4,r20
    7ab0:	880b883a 	mov	r5,r17
    7ab4:	d8800515 	stw	r2,20(sp)
    7ab8:	00111b40 	call	111b4 <__ledf2>
    7abc:	10028716 	blt	r2,zero,84dc <_dtoa_r+0xc88>
    7ac0:	d8c00517 	ldw	r3,20(sp)
    7ac4:	00800584 	movi	r2,22
    7ac8:	10c27536 	bltu	r2,r3,84a0 <_dtoa_r+0xc4c>
    7acc:	180490fa 	slli	r2,r3,3
    7ad0:	00c000b4 	movhi	r3,2
    7ad4:	18d1be04 	addi	r3,r3,18168
    7ad8:	1885883a 	add	r2,r3,r2
    7adc:	11000017 	ldw	r4,0(r2)
    7ae0:	11400117 	ldw	r5,4(r2)
    7ae4:	900d883a 	mov	r6,r18
    7ae8:	980f883a 	mov	r7,r19
    7aec:	00110d80 	call	110d8 <__gedf2>
    7af0:	00828d0e 	bge	zero,r2,8528 <_dtoa_r+0xcd4>
    7af4:	d9000517 	ldw	r4,20(sp)
    7af8:	d8000e15 	stw	zero,56(sp)
    7afc:	213fffc4 	addi	r4,r4,-1
    7b00:	d9000515 	stw	r4,20(sp)
    7b04:	b42dc83a 	sub	r22,r22,r16
    7b08:	b5bfffc4 	addi	r22,r22,-1
    7b0c:	b0026f16 	blt	r22,zero,84cc <_dtoa_r+0xc78>
    7b10:	d8000815 	stw	zero,32(sp)
    7b14:	d9c00517 	ldw	r7,20(sp)
    7b18:	38026416 	blt	r7,zero,84ac <_dtoa_r+0xc58>
    7b1c:	b1ed883a 	add	r22,r22,r7
    7b20:	d9c00d15 	stw	r7,52(sp)
    7b24:	d8000a15 	stw	zero,40(sp)
    7b28:	d9800317 	ldw	r6,12(sp)
    7b2c:	00800244 	movi	r2,9
    7b30:	11811436 	bltu	r2,r6,7f84 <_dtoa_r+0x730>
    7b34:	00800144 	movi	r2,5
    7b38:	1184e10e 	bge	r2,r6,8ec0 <_dtoa_r+0x166c>
    7b3c:	31bfff04 	addi	r6,r6,-4
    7b40:	d9800315 	stw	r6,12(sp)
    7b44:	0023883a 	mov	r17,zero
    7b48:	d9800317 	ldw	r6,12(sp)
    7b4c:	008000c4 	movi	r2,3
    7b50:	30836726 	beq	r6,r2,88f0 <_dtoa_r+0x109c>
    7b54:	1183410e 	bge	r2,r6,885c <_dtoa_r+0x1008>
    7b58:	d9c00317 	ldw	r7,12(sp)
    7b5c:	00800104 	movi	r2,4
    7b60:	38827c26 	beq	r7,r2,8554 <_dtoa_r+0xd00>
    7b64:	00800144 	movi	r2,5
    7b68:	3884c41e 	bne	r7,r2,8e7c <_dtoa_r+0x1628>
    7b6c:	00800044 	movi	r2,1
    7b70:	d8800b15 	stw	r2,44(sp)
    7b74:	d8c00517 	ldw	r3,20(sp)
    7b78:	d9002217 	ldw	r4,136(sp)
    7b7c:	1907883a 	add	r3,r3,r4
    7b80:	19800044 	addi	r6,r3,1
    7b84:	d8c00c15 	stw	r3,48(sp)
    7b88:	d9800615 	stw	r6,24(sp)
    7b8c:	0183a40e 	bge	zero,r6,8a20 <_dtoa_r+0x11cc>
    7b90:	d9800617 	ldw	r6,24(sp)
    7b94:	3021883a 	mov	r16,r6
    7b98:	e0001115 	stw	zero,68(fp)
    7b9c:	008005c4 	movi	r2,23
    7ba0:	1184c92e 	bgeu	r2,r6,8ec8 <_dtoa_r+0x1674>
    7ba4:	00c00044 	movi	r3,1
    7ba8:	00800104 	movi	r2,4
    7bac:	1085883a 	add	r2,r2,r2
    7bb0:	11000504 	addi	r4,r2,20
    7bb4:	180b883a 	mov	r5,r3
    7bb8:	18c00044 	addi	r3,r3,1
    7bbc:	313ffb2e 	bgeu	r6,r4,7bac <_dtoa_r+0x358>
    7bc0:	e1401115 	stw	r5,68(fp)
    7bc4:	e009883a 	mov	r4,fp
    7bc8:	000a6e40 	call	a6e4 <_Balloc>
    7bcc:	d8800715 	stw	r2,28(sp)
    7bd0:	e0801015 	stw	r2,64(fp)
    7bd4:	00800384 	movi	r2,14
    7bd8:	1400f736 	bltu	r2,r16,7fb8 <_dtoa_r+0x764>
    7bdc:	8800f626 	beq	r17,zero,7fb8 <_dtoa_r+0x764>
    7be0:	d9c00517 	ldw	r7,20(sp)
    7be4:	01c39a0e 	bge	zero,r7,8a50 <_dtoa_r+0x11fc>
    7be8:	388003cc 	andi	r2,r7,15
    7bec:	100490fa 	slli	r2,r2,3
    7bf0:	382bd13a 	srai	r21,r7,4
    7bf4:	00c000b4 	movhi	r3,2
    7bf8:	18d1be04 	addi	r3,r3,18168
    7bfc:	1885883a 	add	r2,r3,r2
    7c00:	a8c0040c 	andi	r3,r21,16
    7c04:	12400017 	ldw	r9,0(r2)
    7c08:	12000117 	ldw	r8,4(r2)
    7c0c:	18037926 	beq	r3,zero,89f4 <_dtoa_r+0x11a0>
    7c10:	008000b4 	movhi	r2,2
    7c14:	1091b404 	addi	r2,r2,18128
    7c18:	11800817 	ldw	r6,32(r2)
    7c1c:	11c00917 	ldw	r7,36(r2)
    7c20:	9009883a 	mov	r4,r18
    7c24:	980b883a 	mov	r5,r19
    7c28:	da001715 	stw	r8,92(sp)
    7c2c:	da401615 	stw	r9,88(sp)
    7c30:	00107680 	call	10768 <__divdf3>
    7c34:	da001717 	ldw	r8,92(sp)
    7c38:	da401617 	ldw	r9,88(sp)
    7c3c:	ad4003cc 	andi	r21,r21,15
    7c40:	040000c4 	movi	r16,3
    7c44:	1023883a 	mov	r17,r2
    7c48:	1829883a 	mov	r20,r3
    7c4c:	a8001126 	beq	r21,zero,7c94 <_dtoa_r+0x440>
    7c50:	05c000b4 	movhi	r23,2
    7c54:	bdd1b404 	addi	r23,r23,18128
    7c58:	4805883a 	mov	r2,r9
    7c5c:	4007883a 	mov	r3,r8
    7c60:	a980004c 	andi	r6,r21,1
    7c64:	1009883a 	mov	r4,r2
    7c68:	a82bd07a 	srai	r21,r21,1
    7c6c:	180b883a 	mov	r5,r3
    7c70:	30000426 	beq	r6,zero,7c84 <_dtoa_r+0x430>
    7c74:	b9800017 	ldw	r6,0(r23)
    7c78:	b9c00117 	ldw	r7,4(r23)
    7c7c:	84000044 	addi	r16,r16,1
    7c80:	00112a80 	call	112a8 <__muldf3>
    7c84:	bdc00204 	addi	r23,r23,8
    7c88:	a83ff51e 	bne	r21,zero,7c60 <_dtoa_r+0x40c>
    7c8c:	1013883a 	mov	r9,r2
    7c90:	1811883a 	mov	r8,r3
    7c94:	480d883a 	mov	r6,r9
    7c98:	400f883a 	mov	r7,r8
    7c9c:	8809883a 	mov	r4,r17
    7ca0:	a00b883a 	mov	r5,r20
    7ca4:	00107680 	call	10768 <__divdf3>
    7ca8:	d8800f15 	stw	r2,60(sp)
    7cac:	d8c01015 	stw	r3,64(sp)
    7cb0:	d8c00e17 	ldw	r3,56(sp)
    7cb4:	18000626 	beq	r3,zero,7cd0 <_dtoa_r+0x47c>
    7cb8:	d9000f17 	ldw	r4,60(sp)
    7cbc:	d9401017 	ldw	r5,64(sp)
    7cc0:	000d883a 	mov	r6,zero
    7cc4:	01cffc34 	movhi	r7,16368
    7cc8:	00111b40 	call	111b4 <__ledf2>
    7ccc:	10040b16 	blt	r2,zero,8cfc <_dtoa_r+0x14a8>
    7cd0:	8009883a 	mov	r4,r16
    7cd4:	001233c0 	call	1233c <__floatsidf>
    7cd8:	d9800f17 	ldw	r6,60(sp)
    7cdc:	d9c01017 	ldw	r7,64(sp)
    7ce0:	1009883a 	mov	r4,r2
    7ce4:	180b883a 	mov	r5,r3
    7ce8:	00112a80 	call	112a8 <__muldf3>
    7cec:	000d883a 	mov	r6,zero
    7cf0:	01d00734 	movhi	r7,16412
    7cf4:	1009883a 	mov	r4,r2
    7cf8:	180b883a 	mov	r5,r3
    7cfc:	000febc0 	call	febc <__adddf3>
    7d00:	1021883a 	mov	r16,r2
    7d04:	d8800617 	ldw	r2,24(sp)
    7d08:	047f3034 	movhi	r17,64704
    7d0c:	1c63883a 	add	r17,r3,r17
    7d10:	10031826 	beq	r2,zero,8974 <_dtoa_r+0x1120>
    7d14:	d8c00517 	ldw	r3,20(sp)
    7d18:	db000617 	ldw	r12,24(sp)
    7d1c:	d8c01315 	stw	r3,76(sp)
    7d20:	d9000b17 	ldw	r4,44(sp)
    7d24:	20038f26 	beq	r4,zero,8b64 <_dtoa_r+0x1310>
    7d28:	60bfffc4 	addi	r2,r12,-1
    7d2c:	100490fa 	slli	r2,r2,3
    7d30:	00c000b4 	movhi	r3,2
    7d34:	18d1be04 	addi	r3,r3,18168
    7d38:	1885883a 	add	r2,r3,r2
    7d3c:	11800017 	ldw	r6,0(r2)
    7d40:	11c00117 	ldw	r7,4(r2)
    7d44:	d8800717 	ldw	r2,28(sp)
    7d48:	0009883a 	mov	r4,zero
    7d4c:	014ff834 	movhi	r5,16352
    7d50:	db001615 	stw	r12,88(sp)
    7d54:	15c00044 	addi	r23,r2,1
    7d58:	00107680 	call	10768 <__divdf3>
    7d5c:	800d883a 	mov	r6,r16
    7d60:	880f883a 	mov	r7,r17
    7d64:	1009883a 	mov	r4,r2
    7d68:	180b883a 	mov	r5,r3
    7d6c:	00119c00 	call	119c0 <__subdf3>
    7d70:	d9401017 	ldw	r5,64(sp)
    7d74:	d9000f17 	ldw	r4,60(sp)
    7d78:	102b883a 	mov	r21,r2
    7d7c:	d8c01215 	stw	r3,72(sp)
    7d80:	00122bc0 	call	122bc <__fixdfsi>
    7d84:	1009883a 	mov	r4,r2
    7d88:	1029883a 	mov	r20,r2
    7d8c:	001233c0 	call	1233c <__floatsidf>
    7d90:	d9000f17 	ldw	r4,60(sp)
    7d94:	d9401017 	ldw	r5,64(sp)
    7d98:	100d883a 	mov	r6,r2
    7d9c:	180f883a 	mov	r7,r3
    7da0:	00119c00 	call	119c0 <__subdf3>
    7da4:	1823883a 	mov	r17,r3
    7da8:	d8c00717 	ldw	r3,28(sp)
    7dac:	d9401217 	ldw	r5,72(sp)
    7db0:	a2000c04 	addi	r8,r20,48
    7db4:	1021883a 	mov	r16,r2
    7db8:	1a000005 	stb	r8,0(r3)
    7dbc:	800d883a 	mov	r6,r16
    7dc0:	880f883a 	mov	r7,r17
    7dc4:	a809883a 	mov	r4,r21
    7dc8:	4029883a 	mov	r20,r8
    7dcc:	00110d80 	call	110d8 <__gedf2>
    7dd0:	00841d16 	blt	zero,r2,8e48 <_dtoa_r+0x15f4>
    7dd4:	800d883a 	mov	r6,r16
    7dd8:	880f883a 	mov	r7,r17
    7ddc:	0009883a 	mov	r4,zero
    7de0:	014ffc34 	movhi	r5,16368
    7de4:	00119c00 	call	119c0 <__subdf3>
    7de8:	d9401217 	ldw	r5,72(sp)
    7dec:	100d883a 	mov	r6,r2
    7df0:	180f883a 	mov	r7,r3
    7df4:	a809883a 	mov	r4,r21
    7df8:	00110d80 	call	110d8 <__gedf2>
    7dfc:	db001617 	ldw	r12,88(sp)
    7e00:	00840e16 	blt	zero,r2,8e3c <_dtoa_r+0x15e8>
    7e04:	00800044 	movi	r2,1
    7e08:	13006b0e 	bge	r2,r12,7fb8 <_dtoa_r+0x764>
    7e0c:	d9000717 	ldw	r4,28(sp)
    7e10:	dd800f15 	stw	r22,60(sp)
    7e14:	dcc01015 	stw	r19,64(sp)
    7e18:	2319883a 	add	r12,r4,r12
    7e1c:	dcc01217 	ldw	r19,72(sp)
    7e20:	602d883a 	mov	r22,r12
    7e24:	dc801215 	stw	r18,72(sp)
    7e28:	b825883a 	mov	r18,r23
    7e2c:	00000906 	br	7e54 <_dtoa_r+0x600>
    7e30:	00119c00 	call	119c0 <__subdf3>
    7e34:	a80d883a 	mov	r6,r21
    7e38:	980f883a 	mov	r7,r19
    7e3c:	1009883a 	mov	r4,r2
    7e40:	180b883a 	mov	r5,r3
    7e44:	00111b40 	call	111b4 <__ledf2>
    7e48:	1003e816 	blt	r2,zero,8dec <_dtoa_r+0x1598>
    7e4c:	b825883a 	mov	r18,r23
    7e50:	bd83e926 	beq	r23,r22,8df8 <_dtoa_r+0x15a4>
    7e54:	a809883a 	mov	r4,r21
    7e58:	980b883a 	mov	r5,r19
    7e5c:	000d883a 	mov	r6,zero
    7e60:	01d00934 	movhi	r7,16420
    7e64:	00112a80 	call	112a8 <__muldf3>
    7e68:	000d883a 	mov	r6,zero
    7e6c:	01d00934 	movhi	r7,16420
    7e70:	8009883a 	mov	r4,r16
    7e74:	880b883a 	mov	r5,r17
    7e78:	102b883a 	mov	r21,r2
    7e7c:	1827883a 	mov	r19,r3
    7e80:	00112a80 	call	112a8 <__muldf3>
    7e84:	180b883a 	mov	r5,r3
    7e88:	1009883a 	mov	r4,r2
    7e8c:	1821883a 	mov	r16,r3
    7e90:	1023883a 	mov	r17,r2
    7e94:	00122bc0 	call	122bc <__fixdfsi>
    7e98:	1009883a 	mov	r4,r2
    7e9c:	1029883a 	mov	r20,r2
    7ea0:	001233c0 	call	1233c <__floatsidf>
    7ea4:	8809883a 	mov	r4,r17
    7ea8:	800b883a 	mov	r5,r16
    7eac:	100d883a 	mov	r6,r2
    7eb0:	180f883a 	mov	r7,r3
    7eb4:	00119c00 	call	119c0 <__subdf3>
    7eb8:	a5000c04 	addi	r20,r20,48
    7ebc:	a80d883a 	mov	r6,r21
    7ec0:	980f883a 	mov	r7,r19
    7ec4:	1009883a 	mov	r4,r2
    7ec8:	180b883a 	mov	r5,r3
    7ecc:	95000005 	stb	r20,0(r18)
    7ed0:	1021883a 	mov	r16,r2
    7ed4:	1823883a 	mov	r17,r3
    7ed8:	00111b40 	call	111b4 <__ledf2>
    7edc:	bdc00044 	addi	r23,r23,1
    7ee0:	800d883a 	mov	r6,r16
    7ee4:	880f883a 	mov	r7,r17
    7ee8:	0009883a 	mov	r4,zero
    7eec:	014ffc34 	movhi	r5,16368
    7ef0:	103fcf0e 	bge	r2,zero,7e30 <_dtoa_r+0x5dc>
    7ef4:	d8c01317 	ldw	r3,76(sp)
    7ef8:	d8c00515 	stw	r3,20(sp)
    7efc:	d9400917 	ldw	r5,36(sp)
    7f00:	e009883a 	mov	r4,fp
    7f04:	000a78c0 	call	a78c <_Bfree>
    7f08:	d9000517 	ldw	r4,20(sp)
    7f0c:	d9802317 	ldw	r6,140(sp)
    7f10:	d9c02517 	ldw	r7,148(sp)
    7f14:	b8000005 	stb	zero,0(r23)
    7f18:	20800044 	addi	r2,r4,1
    7f1c:	30800015 	stw	r2,0(r6)
    7f20:	3802aa26 	beq	r7,zero,89cc <_dtoa_r+0x1178>
    7f24:	3dc00015 	stw	r23,0(r7)
    7f28:	d8800717 	ldw	r2,28(sp)
    7f2c:	003e7906 	br	7914 <_dtoa_r+0xc0>
    7f30:	00800434 	movhi	r2,16
    7f34:	10bfffc4 	addi	r2,r2,-1
    7f38:	88a2703a 	and	r17,r17,r2
    7f3c:	883e851e 	bne	r17,zero,7954 <_dtoa_r+0x100>
    7f40:	008000b4 	movhi	r2,2
    7f44:	10919f04 	addi	r2,r2,18044
    7f48:	003e8406 	br	795c <_dtoa_r+0x108>
    7f4c:	10c00204 	addi	r3,r2,8
    7f50:	003e8706 	br	7970 <_dtoa_r+0x11c>
    7f54:	01400434 	movhi	r5,16
    7f58:	297fffc4 	addi	r5,r5,-1
    7f5c:	994a703a 	and	r5,r19,r5
    7f60:	9009883a 	mov	r4,r18
    7f64:	843f0044 	addi	r16,r16,-1023
    7f68:	294ffc34 	orhi	r5,r5,16368
    7f6c:	dd800217 	ldw	r22,8(sp)
    7f70:	d8001115 	stw	zero,68(sp)
    7f74:	003ea506 	br	7a0c <_dtoa_r+0x1b8>
    7f78:	008000b4 	movhi	r2,2
    7f7c:	10918e04 	addi	r2,r2,17976
    7f80:	003e6406 	br	7914 <_dtoa_r+0xc0>
    7f84:	e0001115 	stw	zero,68(fp)
    7f88:	000b883a 	mov	r5,zero
    7f8c:	e009883a 	mov	r4,fp
    7f90:	000a6e40 	call	a6e4 <_Balloc>
    7f94:	01bfffc4 	movi	r6,-1
    7f98:	01c00044 	movi	r7,1
    7f9c:	d8800715 	stw	r2,28(sp)
    7fa0:	d9800c15 	stw	r6,48(sp)
    7fa4:	e0801015 	stw	r2,64(fp)
    7fa8:	d8000315 	stw	zero,12(sp)
    7fac:	d9c00b15 	stw	r7,44(sp)
    7fb0:	d9800615 	stw	r6,24(sp)
    7fb4:	d8002215 	stw	zero,136(sp)
    7fb8:	d8800117 	ldw	r2,4(sp)
    7fbc:	10008916 	blt	r2,zero,81e4 <_dtoa_r+0x990>
    7fc0:	d9000517 	ldw	r4,20(sp)
    7fc4:	00c00384 	movi	r3,14
    7fc8:	19008616 	blt	r3,r4,81e4 <_dtoa_r+0x990>
    7fcc:	200490fa 	slli	r2,r4,3
    7fd0:	00c000b4 	movhi	r3,2
    7fd4:	d9802217 	ldw	r6,136(sp)
    7fd8:	18d1be04 	addi	r3,r3,18168
    7fdc:	1885883a 	add	r2,r3,r2
    7fe0:	14000017 	ldw	r16,0(r2)
    7fe4:	14400117 	ldw	r17,4(r2)
    7fe8:	30016316 	blt	r6,zero,8578 <_dtoa_r+0xd24>
    7fec:	800d883a 	mov	r6,r16
    7ff0:	880f883a 	mov	r7,r17
    7ff4:	9009883a 	mov	r4,r18
    7ff8:	980b883a 	mov	r5,r19
    7ffc:	00107680 	call	10768 <__divdf3>
    8000:	180b883a 	mov	r5,r3
    8004:	1009883a 	mov	r4,r2
    8008:	00122bc0 	call	122bc <__fixdfsi>
    800c:	1009883a 	mov	r4,r2
    8010:	102b883a 	mov	r21,r2
    8014:	001233c0 	call	1233c <__floatsidf>
    8018:	800d883a 	mov	r6,r16
    801c:	880f883a 	mov	r7,r17
    8020:	1009883a 	mov	r4,r2
    8024:	180b883a 	mov	r5,r3
    8028:	00112a80 	call	112a8 <__muldf3>
    802c:	100d883a 	mov	r6,r2
    8030:	180f883a 	mov	r7,r3
    8034:	9009883a 	mov	r4,r18
    8038:	980b883a 	mov	r5,r19
    803c:	00119c00 	call	119c0 <__subdf3>
    8040:	d9c00717 	ldw	r7,28(sp)
    8044:	1009883a 	mov	r4,r2
    8048:	a8800c04 	addi	r2,r21,48
    804c:	38800005 	stb	r2,0(r7)
    8050:	3dc00044 	addi	r23,r7,1
    8054:	d9c00617 	ldw	r7,24(sp)
    8058:	01800044 	movi	r6,1
    805c:	180b883a 	mov	r5,r3
    8060:	2005883a 	mov	r2,r4
    8064:	39803826 	beq	r7,r6,8148 <_dtoa_r+0x8f4>
    8068:	000d883a 	mov	r6,zero
    806c:	01d00934 	movhi	r7,16420
    8070:	00112a80 	call	112a8 <__muldf3>
    8074:	000d883a 	mov	r6,zero
    8078:	000f883a 	mov	r7,zero
    807c:	1009883a 	mov	r4,r2
    8080:	180b883a 	mov	r5,r3
    8084:	1025883a 	mov	r18,r2
    8088:	1827883a 	mov	r19,r3
    808c:	00110500 	call	11050 <__eqdf2>
    8090:	103f9a26 	beq	r2,zero,7efc <_dtoa_r+0x6a8>
    8094:	d9c00617 	ldw	r7,24(sp)
    8098:	d8c00717 	ldw	r3,28(sp)
    809c:	b829883a 	mov	r20,r23
    80a0:	38bfffc4 	addi	r2,r7,-1
    80a4:	18ad883a 	add	r22,r3,r2
    80a8:	00000a06 	br	80d4 <_dtoa_r+0x880>
    80ac:	00112a80 	call	112a8 <__muldf3>
    80b0:	000d883a 	mov	r6,zero
    80b4:	000f883a 	mov	r7,zero
    80b8:	1009883a 	mov	r4,r2
    80bc:	180b883a 	mov	r5,r3
    80c0:	1025883a 	mov	r18,r2
    80c4:	1827883a 	mov	r19,r3
    80c8:	b829883a 	mov	r20,r23
    80cc:	00110500 	call	11050 <__eqdf2>
    80d0:	103f8a26 	beq	r2,zero,7efc <_dtoa_r+0x6a8>
    80d4:	800d883a 	mov	r6,r16
    80d8:	880f883a 	mov	r7,r17
    80dc:	9009883a 	mov	r4,r18
    80e0:	980b883a 	mov	r5,r19
    80e4:	00107680 	call	10768 <__divdf3>
    80e8:	180b883a 	mov	r5,r3
    80ec:	1009883a 	mov	r4,r2
    80f0:	00122bc0 	call	122bc <__fixdfsi>
    80f4:	1009883a 	mov	r4,r2
    80f8:	102b883a 	mov	r21,r2
    80fc:	001233c0 	call	1233c <__floatsidf>
    8100:	800d883a 	mov	r6,r16
    8104:	880f883a 	mov	r7,r17
    8108:	1009883a 	mov	r4,r2
    810c:	180b883a 	mov	r5,r3
    8110:	00112a80 	call	112a8 <__muldf3>
    8114:	100d883a 	mov	r6,r2
    8118:	180f883a 	mov	r7,r3
    811c:	9009883a 	mov	r4,r18
    8120:	980b883a 	mov	r5,r19
    8124:	00119c00 	call	119c0 <__subdf3>
    8128:	aa000c04 	addi	r8,r21,48
    812c:	a2000005 	stb	r8,0(r20)
    8130:	000d883a 	mov	r6,zero
    8134:	01d00934 	movhi	r7,16420
    8138:	1009883a 	mov	r4,r2
    813c:	180b883a 	mov	r5,r3
    8140:	a5c00044 	addi	r23,r20,1
    8144:	b53fd91e 	bne	r22,r20,80ac <_dtoa_r+0x858>
    8148:	100d883a 	mov	r6,r2
    814c:	180f883a 	mov	r7,r3
    8150:	1009883a 	mov	r4,r2
    8154:	180b883a 	mov	r5,r3
    8158:	000febc0 	call	febc <__adddf3>
    815c:	100d883a 	mov	r6,r2
    8160:	180f883a 	mov	r7,r3
    8164:	8009883a 	mov	r4,r16
    8168:	880b883a 	mov	r5,r17
    816c:	1027883a 	mov	r19,r2
    8170:	1825883a 	mov	r18,r3
    8174:	00111b40 	call	111b4 <__ledf2>
    8178:	10000816 	blt	r2,zero,819c <_dtoa_r+0x948>
    817c:	980d883a 	mov	r6,r19
    8180:	900f883a 	mov	r7,r18
    8184:	8009883a 	mov	r4,r16
    8188:	880b883a 	mov	r5,r17
    818c:	00110500 	call	11050 <__eqdf2>
    8190:	103f5a1e 	bne	r2,zero,7efc <_dtoa_r+0x6a8>
    8194:	ad40004c 	andi	r21,r21,1
    8198:	a83f5826 	beq	r21,zero,7efc <_dtoa_r+0x6a8>
    819c:	bd3fffc3 	ldbu	r20,-1(r23)
    81a0:	b8bfffc4 	addi	r2,r23,-1
    81a4:	1007883a 	mov	r3,r2
    81a8:	01400e44 	movi	r5,57
    81ac:	d9800717 	ldw	r6,28(sp)
    81b0:	00000506 	br	81c8 <_dtoa_r+0x974>
    81b4:	18ffffc4 	addi	r3,r3,-1
    81b8:	11824726 	beq	r2,r6,8ad8 <_dtoa_r+0x1284>
    81bc:	1d000003 	ldbu	r20,0(r3)
    81c0:	102f883a 	mov	r23,r2
    81c4:	10bfffc4 	addi	r2,r2,-1
    81c8:	a1003fcc 	andi	r4,r20,255
    81cc:	2100201c 	xori	r4,r4,128
    81d0:	213fe004 	addi	r4,r4,-128
    81d4:	217ff726 	beq	r4,r5,81b4 <_dtoa_r+0x960>
    81d8:	a2000044 	addi	r8,r20,1
    81dc:	12000005 	stb	r8,0(r2)
    81e0:	003f4606 	br	7efc <_dtoa_r+0x6a8>
    81e4:	d9000b17 	ldw	r4,44(sp)
    81e8:	2000c826 	beq	r4,zero,850c <_dtoa_r+0xcb8>
    81ec:	d9800317 	ldw	r6,12(sp)
    81f0:	00c00044 	movi	r3,1
    81f4:	1980f90e 	bge	r3,r6,85dc <_dtoa_r+0xd88>
    81f8:	d8800617 	ldw	r2,24(sp)
    81fc:	d8c00a17 	ldw	r3,40(sp)
    8200:	157fffc4 	addi	r21,r2,-1
    8204:	1d41f316 	blt	r3,r21,89d4 <_dtoa_r+0x1180>
    8208:	1d6bc83a 	sub	r21,r3,r21
    820c:	d9c00617 	ldw	r7,24(sp)
    8210:	3802aa16 	blt	r7,zero,8cbc <_dtoa_r+0x1468>
    8214:	dd000817 	ldw	r20,32(sp)
    8218:	d8800617 	ldw	r2,24(sp)
    821c:	d8c00817 	ldw	r3,32(sp)
    8220:	01400044 	movi	r5,1
    8224:	e009883a 	mov	r4,fp
    8228:	1887883a 	add	r3,r3,r2
    822c:	d8c00815 	stw	r3,32(sp)
    8230:	b0ad883a 	add	r22,r22,r2
    8234:	000aaf00 	call	aaf0 <__i2b>
    8238:	1023883a 	mov	r17,r2
    823c:	a0000826 	beq	r20,zero,8260 <_dtoa_r+0xa0c>
    8240:	0580070e 	bge	zero,r22,8260 <_dtoa_r+0xa0c>
    8244:	a005883a 	mov	r2,r20
    8248:	b500b916 	blt	r22,r20,8530 <_dtoa_r+0xcdc>
    824c:	d9000817 	ldw	r4,32(sp)
    8250:	a0a9c83a 	sub	r20,r20,r2
    8254:	b0adc83a 	sub	r22,r22,r2
    8258:	2089c83a 	sub	r4,r4,r2
    825c:	d9000815 	stw	r4,32(sp)
    8260:	d9800a17 	ldw	r6,40(sp)
    8264:	0181810e 	bge	zero,r6,886c <_dtoa_r+0x1018>
    8268:	d9c00b17 	ldw	r7,44(sp)
    826c:	3800b326 	beq	r7,zero,853c <_dtoa_r+0xce8>
    8270:	a800b226 	beq	r21,zero,853c <_dtoa_r+0xce8>
    8274:	880b883a 	mov	r5,r17
    8278:	a80d883a 	mov	r6,r21
    827c:	e009883a 	mov	r4,fp
    8280:	000ad240 	call	ad24 <__pow5mult>
    8284:	d9800917 	ldw	r6,36(sp)
    8288:	100b883a 	mov	r5,r2
    828c:	e009883a 	mov	r4,fp
    8290:	1023883a 	mov	r17,r2
    8294:	000ab2c0 	call	ab2c <__multiply>
    8298:	1021883a 	mov	r16,r2
    829c:	d8800a17 	ldw	r2,40(sp)
    82a0:	d9400917 	ldw	r5,36(sp)
    82a4:	e009883a 	mov	r4,fp
    82a8:	1545c83a 	sub	r2,r2,r21
    82ac:	d8800a15 	stw	r2,40(sp)
    82b0:	000a78c0 	call	a78c <_Bfree>
    82b4:	d8c00a17 	ldw	r3,40(sp)
    82b8:	18009f1e 	bne	r3,zero,8538 <_dtoa_r+0xce4>
    82bc:	05c00044 	movi	r23,1
    82c0:	e009883a 	mov	r4,fp
    82c4:	b80b883a 	mov	r5,r23
    82c8:	000aaf00 	call	aaf0 <__i2b>
    82cc:	d9000d17 	ldw	r4,52(sp)
    82d0:	102b883a 	mov	r21,r2
    82d4:	2000ce26 	beq	r4,zero,8610 <_dtoa_r+0xdbc>
    82d8:	200d883a 	mov	r6,r4
    82dc:	100b883a 	mov	r5,r2
    82e0:	e009883a 	mov	r4,fp
    82e4:	000ad240 	call	ad24 <__pow5mult>
    82e8:	d9800317 	ldw	r6,12(sp)
    82ec:	102b883a 	mov	r21,r2
    82f0:	b981810e 	bge	r23,r6,88f8 <_dtoa_r+0x10a4>
    82f4:	0027883a 	mov	r19,zero
    82f8:	a8800417 	ldw	r2,16(r21)
    82fc:	05c00804 	movi	r23,32
    8300:	10800104 	addi	r2,r2,4
    8304:	1085883a 	add	r2,r2,r2
    8308:	1085883a 	add	r2,r2,r2
    830c:	a885883a 	add	r2,r21,r2
    8310:	11000017 	ldw	r4,0(r2)
    8314:	000a9d80 	call	a9d8 <__hi0bits>
    8318:	b885c83a 	sub	r2,r23,r2
    831c:	1585883a 	add	r2,r2,r22
    8320:	108007cc 	andi	r2,r2,31
    8324:	1000b326 	beq	r2,zero,85f4 <_dtoa_r+0xda0>
    8328:	00c00804 	movi	r3,32
    832c:	1887c83a 	sub	r3,r3,r2
    8330:	01000104 	movi	r4,4
    8334:	20c2cd0e 	bge	r4,r3,8e6c <_dtoa_r+0x1618>
    8338:	00c00704 	movi	r3,28
    833c:	1885c83a 	sub	r2,r3,r2
    8340:	d8c00817 	ldw	r3,32(sp)
    8344:	a0a9883a 	add	r20,r20,r2
    8348:	b0ad883a 	add	r22,r22,r2
    834c:	1887883a 	add	r3,r3,r2
    8350:	d8c00815 	stw	r3,32(sp)
    8354:	d9800817 	ldw	r6,32(sp)
    8358:	0180040e 	bge	zero,r6,836c <_dtoa_r+0xb18>
    835c:	800b883a 	mov	r5,r16
    8360:	e009883a 	mov	r4,fp
    8364:	000ae640 	call	ae64 <__lshift>
    8368:	1021883a 	mov	r16,r2
    836c:	0580050e 	bge	zero,r22,8384 <_dtoa_r+0xb30>
    8370:	a80b883a 	mov	r5,r21
    8374:	b00d883a 	mov	r6,r22
    8378:	e009883a 	mov	r4,fp
    837c:	000ae640 	call	ae64 <__lshift>
    8380:	102b883a 	mov	r21,r2
    8384:	d9c00e17 	ldw	r7,56(sp)
    8388:	3801211e 	bne	r7,zero,8810 <_dtoa_r+0xfbc>
    838c:	d9800617 	ldw	r6,24(sp)
    8390:	0181380e 	bge	zero,r6,8874 <_dtoa_r+0x1020>
    8394:	d8c00b17 	ldw	r3,44(sp)
    8398:	1800ab1e 	bne	r3,zero,8648 <_dtoa_r+0xdf4>
    839c:	dc800717 	ldw	r18,28(sp)
    83a0:	dcc00617 	ldw	r19,24(sp)
    83a4:	9029883a 	mov	r20,r18
    83a8:	00000206 	br	83b4 <_dtoa_r+0xb60>
    83ac:	000a7b40 	call	a7b4 <__multadd>
    83b0:	1021883a 	mov	r16,r2
    83b4:	a80b883a 	mov	r5,r21
    83b8:	8009883a 	mov	r4,r16
    83bc:	00076540 	call	7654 <quorem>
    83c0:	10800c04 	addi	r2,r2,48
    83c4:	90800005 	stb	r2,0(r18)
    83c8:	94800044 	addi	r18,r18,1
    83cc:	9507c83a 	sub	r3,r18,r20
    83d0:	000f883a 	mov	r7,zero
    83d4:	01800284 	movi	r6,10
    83d8:	800b883a 	mov	r5,r16
    83dc:	e009883a 	mov	r4,fp
    83e0:	1cfff216 	blt	r3,r19,83ac <_dtoa_r+0xb58>
    83e4:	1011883a 	mov	r8,r2
    83e8:	d8800617 	ldw	r2,24(sp)
    83ec:	0082370e 	bge	zero,r2,8ccc <_dtoa_r+0x1478>
    83f0:	d9000717 	ldw	r4,28(sp)
    83f4:	0025883a 	mov	r18,zero
    83f8:	20af883a 	add	r23,r4,r2
    83fc:	01800044 	movi	r6,1
    8400:	800b883a 	mov	r5,r16
    8404:	e009883a 	mov	r4,fp
    8408:	da001715 	stw	r8,92(sp)
    840c:	000ae640 	call	ae64 <__lshift>
    8410:	a80b883a 	mov	r5,r21
    8414:	1009883a 	mov	r4,r2
    8418:	d8800915 	stw	r2,36(sp)
    841c:	000afac0 	call	afac <__mcmp>
    8420:	da001717 	ldw	r8,92(sp)
    8424:	0081800e 	bge	zero,r2,8a28 <_dtoa_r+0x11d4>
    8428:	b93fffc3 	ldbu	r4,-1(r23)
    842c:	b8bfffc4 	addi	r2,r23,-1
    8430:	1007883a 	mov	r3,r2
    8434:	01800e44 	movi	r6,57
    8438:	d9c00717 	ldw	r7,28(sp)
    843c:	00000506 	br	8454 <_dtoa_r+0xc00>
    8440:	18ffffc4 	addi	r3,r3,-1
    8444:	11c12326 	beq	r2,r7,88d4 <_dtoa_r+0x1080>
    8448:	19000003 	ldbu	r4,0(r3)
    844c:	102f883a 	mov	r23,r2
    8450:	10bfffc4 	addi	r2,r2,-1
    8454:	21403fcc 	andi	r5,r4,255
    8458:	2940201c 	xori	r5,r5,128
    845c:	297fe004 	addi	r5,r5,-128
    8460:	29bff726 	beq	r5,r6,8440 <_dtoa_r+0xbec>
    8464:	21000044 	addi	r4,r4,1
    8468:	11000005 	stb	r4,0(r2)
    846c:	a80b883a 	mov	r5,r21
    8470:	e009883a 	mov	r4,fp
    8474:	000a78c0 	call	a78c <_Bfree>
    8478:	883ea026 	beq	r17,zero,7efc <_dtoa_r+0x6a8>
    847c:	90000426 	beq	r18,zero,8490 <_dtoa_r+0xc3c>
    8480:	94400326 	beq	r18,r17,8490 <_dtoa_r+0xc3c>
    8484:	900b883a 	mov	r5,r18
    8488:	e009883a 	mov	r4,fp
    848c:	000a78c0 	call	a78c <_Bfree>
    8490:	880b883a 	mov	r5,r17
    8494:	e009883a 	mov	r4,fp
    8498:	000a78c0 	call	a78c <_Bfree>
    849c:	003e9706 	br	7efc <_dtoa_r+0x6a8>
    84a0:	01800044 	movi	r6,1
    84a4:	d9800e15 	stw	r6,56(sp)
    84a8:	003d9606 	br	7b04 <_dtoa_r+0x2b0>
    84ac:	d8800817 	ldw	r2,32(sp)
    84b0:	d8c00517 	ldw	r3,20(sp)
    84b4:	d8000d15 	stw	zero,52(sp)
    84b8:	10c5c83a 	sub	r2,r2,r3
    84bc:	00c9c83a 	sub	r4,zero,r3
    84c0:	d8800815 	stw	r2,32(sp)
    84c4:	d9000a15 	stw	r4,40(sp)
    84c8:	003d9706 	br	7b28 <_dtoa_r+0x2d4>
    84cc:	05adc83a 	sub	r22,zero,r22
    84d0:	dd800815 	stw	r22,32(sp)
    84d4:	002d883a 	mov	r22,zero
    84d8:	003d8e06 	br	7b14 <_dtoa_r+0x2c0>
    84dc:	d9000517 	ldw	r4,20(sp)
    84e0:	001233c0 	call	1233c <__floatsidf>
    84e4:	100d883a 	mov	r6,r2
    84e8:	180f883a 	mov	r7,r3
    84ec:	a009883a 	mov	r4,r20
    84f0:	880b883a 	mov	r5,r17
    84f4:	00110500 	call	11050 <__eqdf2>
    84f8:	103d7126 	beq	r2,zero,7ac0 <_dtoa_r+0x26c>
    84fc:	d9c00517 	ldw	r7,20(sp)
    8500:	39ffffc4 	addi	r7,r7,-1
    8504:	d9c00515 	stw	r7,20(sp)
    8508:	003d6d06 	br	7ac0 <_dtoa_r+0x26c>
    850c:	dd400a17 	ldw	r21,40(sp)
    8510:	dd000817 	ldw	r20,32(sp)
    8514:	0023883a 	mov	r17,zero
    8518:	003f4806 	br	823c <_dtoa_r+0x9e8>
    851c:	10e3c83a 	sub	r17,r2,r3
    8520:	9448983a 	sll	r4,r18,r17
    8524:	003d3206 	br	79f0 <_dtoa_r+0x19c>
    8528:	d8000e15 	stw	zero,56(sp)
    852c:	003d7506 	br	7b04 <_dtoa_r+0x2b0>
    8530:	b005883a 	mov	r2,r22
    8534:	003f4506 	br	824c <_dtoa_r+0x9f8>
    8538:	dc000915 	stw	r16,36(sp)
    853c:	d9800a17 	ldw	r6,40(sp)
    8540:	d9400917 	ldw	r5,36(sp)
    8544:	e009883a 	mov	r4,fp
    8548:	000ad240 	call	ad24 <__pow5mult>
    854c:	1021883a 	mov	r16,r2
    8550:	003f5a06 	br	82bc <_dtoa_r+0xa68>
    8554:	01c00044 	movi	r7,1
    8558:	d9c00b15 	stw	r7,44(sp)
    855c:	d8802217 	ldw	r2,136(sp)
    8560:	0081280e 	bge	zero,r2,8a04 <_dtoa_r+0x11b0>
    8564:	100d883a 	mov	r6,r2
    8568:	1021883a 	mov	r16,r2
    856c:	d8800c15 	stw	r2,48(sp)
    8570:	d8800615 	stw	r2,24(sp)
    8574:	003d8806 	br	7b98 <_dtoa_r+0x344>
    8578:	d8800617 	ldw	r2,24(sp)
    857c:	00be9b16 	blt	zero,r2,7fec <_dtoa_r+0x798>
    8580:	10010f1e 	bne	r2,zero,89c0 <_dtoa_r+0x116c>
    8584:	880b883a 	mov	r5,r17
    8588:	000d883a 	mov	r6,zero
    858c:	01d00534 	movhi	r7,16404
    8590:	8009883a 	mov	r4,r16
    8594:	00112a80 	call	112a8 <__muldf3>
    8598:	900d883a 	mov	r6,r18
    859c:	980f883a 	mov	r7,r19
    85a0:	1009883a 	mov	r4,r2
    85a4:	180b883a 	mov	r5,r3
    85a8:	00110d80 	call	110d8 <__gedf2>
    85ac:	002b883a 	mov	r21,zero
    85b0:	0023883a 	mov	r17,zero
    85b4:	1000bf16 	blt	r2,zero,88b4 <_dtoa_r+0x1060>
    85b8:	d9802217 	ldw	r6,136(sp)
    85bc:	ddc00717 	ldw	r23,28(sp)
    85c0:	018c303a 	nor	r6,zero,r6
    85c4:	d9800515 	stw	r6,20(sp)
    85c8:	a80b883a 	mov	r5,r21
    85cc:	e009883a 	mov	r4,fp
    85d0:	000a78c0 	call	a78c <_Bfree>
    85d4:	883e4926 	beq	r17,zero,7efc <_dtoa_r+0x6a8>
    85d8:	003fad06 	br	8490 <_dtoa_r+0xc3c>
    85dc:	d9c01117 	ldw	r7,68(sp)
    85e0:	3801bc26 	beq	r7,zero,8cd4 <_dtoa_r+0x1480>
    85e4:	10810cc4 	addi	r2,r2,1075
    85e8:	dd400a17 	ldw	r21,40(sp)
    85ec:	dd000817 	ldw	r20,32(sp)
    85f0:	003f0a06 	br	821c <_dtoa_r+0x9c8>
    85f4:	00800704 	movi	r2,28
    85f8:	d9000817 	ldw	r4,32(sp)
    85fc:	a0a9883a 	add	r20,r20,r2
    8600:	b0ad883a 	add	r22,r22,r2
    8604:	2089883a 	add	r4,r4,r2
    8608:	d9000815 	stw	r4,32(sp)
    860c:	003f5106 	br	8354 <_dtoa_r+0xb00>
    8610:	d8c00317 	ldw	r3,12(sp)
    8614:	b8c1fc0e 	bge	r23,r3,8e08 <_dtoa_r+0x15b4>
    8618:	0027883a 	mov	r19,zero
    861c:	b805883a 	mov	r2,r23
    8620:	003f3e06 	br	831c <_dtoa_r+0xac8>
    8624:	880b883a 	mov	r5,r17
    8628:	e009883a 	mov	r4,fp
    862c:	000f883a 	mov	r7,zero
    8630:	01800284 	movi	r6,10
    8634:	000a7b40 	call	a7b4 <__multadd>
    8638:	d9000c17 	ldw	r4,48(sp)
    863c:	1023883a 	mov	r17,r2
    8640:	0102040e 	bge	zero,r4,8e54 <_dtoa_r+0x1600>
    8644:	d9000615 	stw	r4,24(sp)
    8648:	0500050e 	bge	zero,r20,8660 <_dtoa_r+0xe0c>
    864c:	880b883a 	mov	r5,r17
    8650:	a00d883a 	mov	r6,r20
    8654:	e009883a 	mov	r4,fp
    8658:	000ae640 	call	ae64 <__lshift>
    865c:	1023883a 	mov	r17,r2
    8660:	9801241e 	bne	r19,zero,8af4 <_dtoa_r+0x12a0>
    8664:	8829883a 	mov	r20,r17
    8668:	d9000617 	ldw	r4,24(sp)
    866c:	dcc00717 	ldw	r19,28(sp)
    8670:	9480004c 	andi	r18,r18,1
    8674:	20bfffc4 	addi	r2,r4,-1
    8678:	9885883a 	add	r2,r19,r2
    867c:	d8800415 	stw	r2,16(sp)
    8680:	dc800615 	stw	r18,24(sp)
    8684:	a80b883a 	mov	r5,r21
    8688:	8009883a 	mov	r4,r16
    868c:	00076540 	call	7654 <quorem>
    8690:	880b883a 	mov	r5,r17
    8694:	8009883a 	mov	r4,r16
    8698:	102f883a 	mov	r23,r2
    869c:	000afac0 	call	afac <__mcmp>
    86a0:	a80b883a 	mov	r5,r21
    86a4:	a00d883a 	mov	r6,r20
    86a8:	e009883a 	mov	r4,fp
    86ac:	102d883a 	mov	r22,r2
    86b0:	000b00c0 	call	b00c <__mdiff>
    86b4:	1007883a 	mov	r3,r2
    86b8:	10800317 	ldw	r2,12(r2)
    86bc:	bc800c04 	addi	r18,r23,48
    86c0:	180b883a 	mov	r5,r3
    86c4:	10004e1e 	bne	r2,zero,8800 <_dtoa_r+0xfac>
    86c8:	8009883a 	mov	r4,r16
    86cc:	d8c01615 	stw	r3,88(sp)
    86d0:	000afac0 	call	afac <__mcmp>
    86d4:	d8c01617 	ldw	r3,88(sp)
    86d8:	e009883a 	mov	r4,fp
    86dc:	d8801615 	stw	r2,88(sp)
    86e0:	180b883a 	mov	r5,r3
    86e4:	000a78c0 	call	a78c <_Bfree>
    86e8:	d8801617 	ldw	r2,88(sp)
    86ec:	1000041e 	bne	r2,zero,8700 <_dtoa_r+0xeac>
    86f0:	d9800317 	ldw	r6,12(sp)
    86f4:	3000021e 	bne	r6,zero,8700 <_dtoa_r+0xeac>
    86f8:	d8c00617 	ldw	r3,24(sp)
    86fc:	18003726 	beq	r3,zero,87dc <_dtoa_r+0xf88>
    8700:	b0002016 	blt	r22,zero,8784 <_dtoa_r+0xf30>
    8704:	b000041e 	bne	r22,zero,8718 <_dtoa_r+0xec4>
    8708:	d9000317 	ldw	r4,12(sp)
    870c:	2000021e 	bne	r4,zero,8718 <_dtoa_r+0xec4>
    8710:	d8c00617 	ldw	r3,24(sp)
    8714:	18001b26 	beq	r3,zero,8784 <_dtoa_r+0xf30>
    8718:	00810716 	blt	zero,r2,8b38 <_dtoa_r+0x12e4>
    871c:	d8c00417 	ldw	r3,16(sp)
    8720:	9d800044 	addi	r22,r19,1
    8724:	9c800005 	stb	r18,0(r19)
    8728:	b02f883a 	mov	r23,r22
    872c:	98c10626 	beq	r19,r3,8b48 <_dtoa_r+0x12f4>
    8730:	800b883a 	mov	r5,r16
    8734:	000f883a 	mov	r7,zero
    8738:	01800284 	movi	r6,10
    873c:	e009883a 	mov	r4,fp
    8740:	000a7b40 	call	a7b4 <__multadd>
    8744:	1021883a 	mov	r16,r2
    8748:	000f883a 	mov	r7,zero
    874c:	01800284 	movi	r6,10
    8750:	880b883a 	mov	r5,r17
    8754:	e009883a 	mov	r4,fp
    8758:	8d002526 	beq	r17,r20,87f0 <_dtoa_r+0xf9c>
    875c:	000a7b40 	call	a7b4 <__multadd>
    8760:	a00b883a 	mov	r5,r20
    8764:	000f883a 	mov	r7,zero
    8768:	01800284 	movi	r6,10
    876c:	e009883a 	mov	r4,fp
    8770:	1023883a 	mov	r17,r2
    8774:	000a7b40 	call	a7b4 <__multadd>
    8778:	1029883a 	mov	r20,r2
    877c:	b027883a 	mov	r19,r22
    8780:	003fc006 	br	8684 <_dtoa_r+0xe30>
    8784:	9011883a 	mov	r8,r18
    8788:	00800e0e 	bge	zero,r2,87c4 <_dtoa_r+0xf70>
    878c:	800b883a 	mov	r5,r16
    8790:	01800044 	movi	r6,1
    8794:	e009883a 	mov	r4,fp
    8798:	da001715 	stw	r8,92(sp)
    879c:	000ae640 	call	ae64 <__lshift>
    87a0:	a80b883a 	mov	r5,r21
    87a4:	1009883a 	mov	r4,r2
    87a8:	1021883a 	mov	r16,r2
    87ac:	000afac0 	call	afac <__mcmp>
    87b0:	da001717 	ldw	r8,92(sp)
    87b4:	0081960e 	bge	zero,r2,8e10 <_dtoa_r+0x15bc>
    87b8:	00800e44 	movi	r2,57
    87bc:	40817026 	beq	r8,r2,8d80 <_dtoa_r+0x152c>
    87c0:	ba000c44 	addi	r8,r23,49
    87c4:	8825883a 	mov	r18,r17
    87c8:	9dc00044 	addi	r23,r19,1
    87cc:	9a000005 	stb	r8,0(r19)
    87d0:	a023883a 	mov	r17,r20
    87d4:	dc000915 	stw	r16,36(sp)
    87d8:	003f2406 	br	846c <_dtoa_r+0xc18>
    87dc:	00800e44 	movi	r2,57
    87e0:	9011883a 	mov	r8,r18
    87e4:	90816626 	beq	r18,r2,8d80 <_dtoa_r+0x152c>
    87e8:	05bff516 	blt	zero,r22,87c0 <_dtoa_r+0xf6c>
    87ec:	003ff506 	br	87c4 <_dtoa_r+0xf70>
    87f0:	000a7b40 	call	a7b4 <__multadd>
    87f4:	1023883a 	mov	r17,r2
    87f8:	1029883a 	mov	r20,r2
    87fc:	003fdf06 	br	877c <_dtoa_r+0xf28>
    8800:	e009883a 	mov	r4,fp
    8804:	000a78c0 	call	a78c <_Bfree>
    8808:	00800044 	movi	r2,1
    880c:	003fbc06 	br	8700 <_dtoa_r+0xeac>
    8810:	a80b883a 	mov	r5,r21
    8814:	8009883a 	mov	r4,r16
    8818:	000afac0 	call	afac <__mcmp>
    881c:	103edb0e 	bge	r2,zero,838c <_dtoa_r+0xb38>
    8820:	800b883a 	mov	r5,r16
    8824:	000f883a 	mov	r7,zero
    8828:	01800284 	movi	r6,10
    882c:	e009883a 	mov	r4,fp
    8830:	000a7b40 	call	a7b4 <__multadd>
    8834:	1021883a 	mov	r16,r2
    8838:	d8800517 	ldw	r2,20(sp)
    883c:	d8c00b17 	ldw	r3,44(sp)
    8840:	10bfffc4 	addi	r2,r2,-1
    8844:	d8800515 	stw	r2,20(sp)
    8848:	183f761e 	bne	r3,zero,8624 <_dtoa_r+0xdd0>
    884c:	d9000c17 	ldw	r4,48(sp)
    8850:	0101730e 	bge	zero,r4,8e20 <_dtoa_r+0x15cc>
    8854:	d9000615 	stw	r4,24(sp)
    8858:	003ed006 	br	839c <_dtoa_r+0xb48>
    885c:	00800084 	movi	r2,2
    8860:	3081861e 	bne	r6,r2,8e7c <_dtoa_r+0x1628>
    8864:	d8000b15 	stw	zero,44(sp)
    8868:	003f3c06 	br	855c <_dtoa_r+0xd08>
    886c:	dc000917 	ldw	r16,36(sp)
    8870:	003e9206 	br	82bc <_dtoa_r+0xa68>
    8874:	d9c00317 	ldw	r7,12(sp)
    8878:	00800084 	movi	r2,2
    887c:	11fec50e 	bge	r2,r7,8394 <_dtoa_r+0xb40>
    8880:	d9000617 	ldw	r4,24(sp)
    8884:	20013c1e 	bne	r4,zero,8d78 <_dtoa_r+0x1524>
    8888:	a80b883a 	mov	r5,r21
    888c:	000f883a 	mov	r7,zero
    8890:	01800144 	movi	r6,5
    8894:	e009883a 	mov	r4,fp
    8898:	000a7b40 	call	a7b4 <__multadd>
    889c:	100b883a 	mov	r5,r2
    88a0:	8009883a 	mov	r4,r16
    88a4:	102b883a 	mov	r21,r2
    88a8:	000afac0 	call	afac <__mcmp>
    88ac:	dc000915 	stw	r16,36(sp)
    88b0:	00bf410e 	bge	zero,r2,85b8 <_dtoa_r+0xd64>
    88b4:	d9c00717 	ldw	r7,28(sp)
    88b8:	00800c44 	movi	r2,49
    88bc:	38800005 	stb	r2,0(r7)
    88c0:	d8800517 	ldw	r2,20(sp)
    88c4:	3dc00044 	addi	r23,r7,1
    88c8:	10800044 	addi	r2,r2,1
    88cc:	d8800515 	stw	r2,20(sp)
    88d0:	003f3d06 	br	85c8 <_dtoa_r+0xd74>
    88d4:	d9800517 	ldw	r6,20(sp)
    88d8:	d9c00717 	ldw	r7,28(sp)
    88dc:	00800c44 	movi	r2,49
    88e0:	31800044 	addi	r6,r6,1
    88e4:	d9800515 	stw	r6,20(sp)
    88e8:	38800005 	stb	r2,0(r7)
    88ec:	003edf06 	br	846c <_dtoa_r+0xc18>
    88f0:	d8000b15 	stw	zero,44(sp)
    88f4:	003c9f06 	br	7b74 <_dtoa_r+0x320>
    88f8:	903e7e1e 	bne	r18,zero,82f4 <_dtoa_r+0xaa0>
    88fc:	00800434 	movhi	r2,16
    8900:	10bfffc4 	addi	r2,r2,-1
    8904:	9884703a 	and	r2,r19,r2
    8908:	1000ea1e 	bne	r2,zero,8cb4 <_dtoa_r+0x1460>
    890c:	9cdffc2c 	andhi	r19,r19,32752
    8910:	9800e826 	beq	r19,zero,8cb4 <_dtoa_r+0x1460>
    8914:	d9c00817 	ldw	r7,32(sp)
    8918:	b5800044 	addi	r22,r22,1
    891c:	04c00044 	movi	r19,1
    8920:	39c00044 	addi	r7,r7,1
    8924:	d9c00815 	stw	r7,32(sp)
    8928:	d8800d17 	ldw	r2,52(sp)
    892c:	103e721e 	bne	r2,zero,82f8 <_dtoa_r+0xaa4>
    8930:	00800044 	movi	r2,1
    8934:	003e7906 	br	831c <_dtoa_r+0xac8>
    8938:	8009883a 	mov	r4,r16
    893c:	001233c0 	call	1233c <__floatsidf>
    8940:	d9800f17 	ldw	r6,60(sp)
    8944:	d9c01017 	ldw	r7,64(sp)
    8948:	1009883a 	mov	r4,r2
    894c:	180b883a 	mov	r5,r3
    8950:	00112a80 	call	112a8 <__muldf3>
    8954:	000d883a 	mov	r6,zero
    8958:	01d00734 	movhi	r7,16412
    895c:	1009883a 	mov	r4,r2
    8960:	180b883a 	mov	r5,r3
    8964:	000febc0 	call	febc <__adddf3>
    8968:	047f3034 	movhi	r17,64704
    896c:	1021883a 	mov	r16,r2
    8970:	1c63883a 	add	r17,r3,r17
    8974:	d9000f17 	ldw	r4,60(sp)
    8978:	d9401017 	ldw	r5,64(sp)
    897c:	000d883a 	mov	r6,zero
    8980:	01d00534 	movhi	r7,16404
    8984:	00119c00 	call	119c0 <__subdf3>
    8988:	800d883a 	mov	r6,r16
    898c:	880f883a 	mov	r7,r17
    8990:	1009883a 	mov	r4,r2
    8994:	180b883a 	mov	r5,r3
    8998:	102b883a 	mov	r21,r2
    899c:	1829883a 	mov	r20,r3
    89a0:	00110d80 	call	110d8 <__gedf2>
    89a4:	00806c16 	blt	zero,r2,8b58 <_dtoa_r+0x1304>
    89a8:	89e0003c 	xorhi	r7,r17,32768
    89ac:	800d883a 	mov	r6,r16
    89b0:	a809883a 	mov	r4,r21
    89b4:	a00b883a 	mov	r5,r20
    89b8:	00111b40 	call	111b4 <__ledf2>
    89bc:	103d7e0e 	bge	r2,zero,7fb8 <_dtoa_r+0x764>
    89c0:	002b883a 	mov	r21,zero
    89c4:	0023883a 	mov	r17,zero
    89c8:	003efb06 	br	85b8 <_dtoa_r+0xd64>
    89cc:	d8800717 	ldw	r2,28(sp)
    89d0:	003bd006 	br	7914 <_dtoa_r+0xc0>
    89d4:	d9000a17 	ldw	r4,40(sp)
    89d8:	d9800d17 	ldw	r6,52(sp)
    89dc:	dd400a15 	stw	r21,40(sp)
    89e0:	a905c83a 	sub	r2,r21,r4
    89e4:	308d883a 	add	r6,r6,r2
    89e8:	d9800d15 	stw	r6,52(sp)
    89ec:	002b883a 	mov	r21,zero
    89f0:	003e0606 	br	820c <_dtoa_r+0x9b8>
    89f4:	9023883a 	mov	r17,r18
    89f8:	9829883a 	mov	r20,r19
    89fc:	04000084 	movi	r16,2
    8a00:	003c9206 	br	7c4c <_dtoa_r+0x3f8>
    8a04:	04000044 	movi	r16,1
    8a08:	dc000c15 	stw	r16,48(sp)
    8a0c:	dc000615 	stw	r16,24(sp)
    8a10:	dc002215 	stw	r16,136(sp)
    8a14:	e0001115 	stw	zero,68(fp)
    8a18:	000b883a 	mov	r5,zero
    8a1c:	003c6906 	br	7bc4 <_dtoa_r+0x370>
    8a20:	3021883a 	mov	r16,r6
    8a24:	003ffb06 	br	8a14 <_dtoa_r+0x11c0>
    8a28:	1000021e 	bne	r2,zero,8a34 <_dtoa_r+0x11e0>
    8a2c:	4200004c 	andi	r8,r8,1
    8a30:	403e7d1e 	bne	r8,zero,8428 <_dtoa_r+0xbd4>
    8a34:	01000c04 	movi	r4,48
    8a38:	00000106 	br	8a40 <_dtoa_r+0x11ec>
    8a3c:	102f883a 	mov	r23,r2
    8a40:	b8bfffc4 	addi	r2,r23,-1
    8a44:	10c00007 	ldb	r3,0(r2)
    8a48:	193ffc26 	beq	r3,r4,8a3c <_dtoa_r+0x11e8>
    8a4c:	003e8706 	br	846c <_dtoa_r+0xc18>
    8a50:	d8800517 	ldw	r2,20(sp)
    8a54:	00a3c83a 	sub	r17,zero,r2
    8a58:	8800a426 	beq	r17,zero,8cec <_dtoa_r+0x1498>
    8a5c:	888003cc 	andi	r2,r17,15
    8a60:	100490fa 	slli	r2,r2,3
    8a64:	00c000b4 	movhi	r3,2
    8a68:	18d1be04 	addi	r3,r3,18168
    8a6c:	1885883a 	add	r2,r3,r2
    8a70:	11800017 	ldw	r6,0(r2)
    8a74:	11c00117 	ldw	r7,4(r2)
    8a78:	9009883a 	mov	r4,r18
    8a7c:	980b883a 	mov	r5,r19
    8a80:	8823d13a 	srai	r17,r17,4
    8a84:	00112a80 	call	112a8 <__muldf3>
    8a88:	d8800f15 	stw	r2,60(sp)
    8a8c:	d8c01015 	stw	r3,64(sp)
    8a90:	8800e826 	beq	r17,zero,8e34 <_dtoa_r+0x15e0>
    8a94:	050000b4 	movhi	r20,2
    8a98:	a511b404 	addi	r20,r20,18128
    8a9c:	04000084 	movi	r16,2
    8aa0:	8980004c 	andi	r6,r17,1
    8aa4:	1009883a 	mov	r4,r2
    8aa8:	8823d07a 	srai	r17,r17,1
    8aac:	180b883a 	mov	r5,r3
    8ab0:	30000426 	beq	r6,zero,8ac4 <_dtoa_r+0x1270>
    8ab4:	a1800017 	ldw	r6,0(r20)
    8ab8:	a1c00117 	ldw	r7,4(r20)
    8abc:	84000044 	addi	r16,r16,1
    8ac0:	00112a80 	call	112a8 <__muldf3>
    8ac4:	a5000204 	addi	r20,r20,8
    8ac8:	883ff51e 	bne	r17,zero,8aa0 <_dtoa_r+0x124c>
    8acc:	d8800f15 	stw	r2,60(sp)
    8ad0:	d8c01015 	stw	r3,64(sp)
    8ad4:	003c7606 	br	7cb0 <_dtoa_r+0x45c>
    8ad8:	00c00c04 	movi	r3,48
    8adc:	10c00005 	stb	r3,0(r2)
    8ae0:	d8c00517 	ldw	r3,20(sp)
    8ae4:	bd3fffc3 	ldbu	r20,-1(r23)
    8ae8:	18c00044 	addi	r3,r3,1
    8aec:	d8c00515 	stw	r3,20(sp)
    8af0:	003db906 	br	81d8 <_dtoa_r+0x984>
    8af4:	89400117 	ldw	r5,4(r17)
    8af8:	e009883a 	mov	r4,fp
    8afc:	000a6e40 	call	a6e4 <_Balloc>
    8b00:	89800417 	ldw	r6,16(r17)
    8b04:	89400304 	addi	r5,r17,12
    8b08:	11000304 	addi	r4,r2,12
    8b0c:	31800084 	addi	r6,r6,2
    8b10:	318d883a 	add	r6,r6,r6
    8b14:	318d883a 	add	r6,r6,r6
    8b18:	1027883a 	mov	r19,r2
    8b1c:	000a3180 	call	a318 <memcpy>
    8b20:	01800044 	movi	r6,1
    8b24:	980b883a 	mov	r5,r19
    8b28:	e009883a 	mov	r4,fp
    8b2c:	000ae640 	call	ae64 <__lshift>
    8b30:	1029883a 	mov	r20,r2
    8b34:	003ecc06 	br	8668 <_dtoa_r+0xe14>
    8b38:	00800e44 	movi	r2,57
    8b3c:	90809026 	beq	r18,r2,8d80 <_dtoa_r+0x152c>
    8b40:	92000044 	addi	r8,r18,1
    8b44:	003f1f06 	br	87c4 <_dtoa_r+0xf70>
    8b48:	9011883a 	mov	r8,r18
    8b4c:	8825883a 	mov	r18,r17
    8b50:	a023883a 	mov	r17,r20
    8b54:	003e2906 	br	83fc <_dtoa_r+0xba8>
    8b58:	002b883a 	mov	r21,zero
    8b5c:	0023883a 	mov	r17,zero
    8b60:	003f5406 	br	88b4 <_dtoa_r+0x1060>
    8b64:	61bfffc4 	addi	r6,r12,-1
    8b68:	300490fa 	slli	r2,r6,3
    8b6c:	00c000b4 	movhi	r3,2
    8b70:	18d1be04 	addi	r3,r3,18168
    8b74:	1885883a 	add	r2,r3,r2
    8b78:	11000017 	ldw	r4,0(r2)
    8b7c:	11400117 	ldw	r5,4(r2)
    8b80:	d8800717 	ldw	r2,28(sp)
    8b84:	880f883a 	mov	r7,r17
    8b88:	d9801215 	stw	r6,72(sp)
    8b8c:	800d883a 	mov	r6,r16
    8b90:	db001615 	stw	r12,88(sp)
    8b94:	15c00044 	addi	r23,r2,1
    8b98:	00112a80 	call	112a8 <__muldf3>
    8b9c:	d9401017 	ldw	r5,64(sp)
    8ba0:	d9000f17 	ldw	r4,60(sp)
    8ba4:	d8c01515 	stw	r3,84(sp)
    8ba8:	d8801415 	stw	r2,80(sp)
    8bac:	00122bc0 	call	122bc <__fixdfsi>
    8bb0:	1009883a 	mov	r4,r2
    8bb4:	1021883a 	mov	r16,r2
    8bb8:	001233c0 	call	1233c <__floatsidf>
    8bbc:	d9000f17 	ldw	r4,60(sp)
    8bc0:	d9401017 	ldw	r5,64(sp)
    8bc4:	100d883a 	mov	r6,r2
    8bc8:	180f883a 	mov	r7,r3
    8bcc:	00119c00 	call	119c0 <__subdf3>
    8bd0:	1829883a 	mov	r20,r3
    8bd4:	d8c00717 	ldw	r3,28(sp)
    8bd8:	84000c04 	addi	r16,r16,48
    8bdc:	1023883a 	mov	r17,r2
    8be0:	1c000005 	stb	r16,0(r3)
    8be4:	db001617 	ldw	r12,88(sp)
    8be8:	00800044 	movi	r2,1
    8bec:	60802226 	beq	r12,r2,8c78 <_dtoa_r+0x1424>
    8bf0:	d9c00717 	ldw	r7,28(sp)
    8bf4:	8805883a 	mov	r2,r17
    8bf8:	b82b883a 	mov	r21,r23
    8bfc:	3b19883a 	add	r12,r7,r12
    8c00:	6023883a 	mov	r17,r12
    8c04:	a007883a 	mov	r3,r20
    8c08:	dc800f15 	stw	r18,60(sp)
    8c0c:	000d883a 	mov	r6,zero
    8c10:	01d00934 	movhi	r7,16420
    8c14:	1009883a 	mov	r4,r2
    8c18:	180b883a 	mov	r5,r3
    8c1c:	00112a80 	call	112a8 <__muldf3>
    8c20:	180b883a 	mov	r5,r3
    8c24:	1009883a 	mov	r4,r2
    8c28:	1829883a 	mov	r20,r3
    8c2c:	1025883a 	mov	r18,r2
    8c30:	00122bc0 	call	122bc <__fixdfsi>
    8c34:	1009883a 	mov	r4,r2
    8c38:	1021883a 	mov	r16,r2
    8c3c:	001233c0 	call	1233c <__floatsidf>
    8c40:	100d883a 	mov	r6,r2
    8c44:	180f883a 	mov	r7,r3
    8c48:	9009883a 	mov	r4,r18
    8c4c:	a00b883a 	mov	r5,r20
    8c50:	84000c04 	addi	r16,r16,48
    8c54:	00119c00 	call	119c0 <__subdf3>
    8c58:	ad400044 	addi	r21,r21,1
    8c5c:	ac3fffc5 	stb	r16,-1(r21)
    8c60:	ac7fea1e 	bne	r21,r17,8c0c <_dtoa_r+0x13b8>
    8c64:	1023883a 	mov	r17,r2
    8c68:	d8801217 	ldw	r2,72(sp)
    8c6c:	dc800f17 	ldw	r18,60(sp)
    8c70:	1829883a 	mov	r20,r3
    8c74:	b8af883a 	add	r23,r23,r2
    8c78:	d9001417 	ldw	r4,80(sp)
    8c7c:	d9401517 	ldw	r5,84(sp)
    8c80:	000d883a 	mov	r6,zero
    8c84:	01cff834 	movhi	r7,16352
    8c88:	000febc0 	call	febc <__adddf3>
    8c8c:	880d883a 	mov	r6,r17
    8c90:	a00f883a 	mov	r7,r20
    8c94:	1009883a 	mov	r4,r2
    8c98:	180b883a 	mov	r5,r3
    8c9c:	00111b40 	call	111b4 <__ledf2>
    8ca0:	10003e0e 	bge	r2,zero,8d9c <_dtoa_r+0x1548>
    8ca4:	d9001317 	ldw	r4,76(sp)
    8ca8:	bd3fffc3 	ldbu	r20,-1(r23)
    8cac:	d9000515 	stw	r4,20(sp)
    8cb0:	003d3b06 	br	81a0 <_dtoa_r+0x94c>
    8cb4:	0027883a 	mov	r19,zero
    8cb8:	003f1b06 	br	8928 <_dtoa_r+0x10d4>
    8cbc:	d8800817 	ldw	r2,32(sp)
    8cc0:	11e9c83a 	sub	r20,r2,r7
    8cc4:	0005883a 	mov	r2,zero
    8cc8:	003d5406 	br	821c <_dtoa_r+0x9c8>
    8ccc:	00800044 	movi	r2,1
    8cd0:	003dc706 	br	83f0 <_dtoa_r+0xb9c>
    8cd4:	d8c00217 	ldw	r3,8(sp)
    8cd8:	00800d84 	movi	r2,54
    8cdc:	dd400a17 	ldw	r21,40(sp)
    8ce0:	10c5c83a 	sub	r2,r2,r3
    8ce4:	dd000817 	ldw	r20,32(sp)
    8ce8:	003d4c06 	br	821c <_dtoa_r+0x9c8>
    8cec:	dc800f15 	stw	r18,60(sp)
    8cf0:	dcc01015 	stw	r19,64(sp)
    8cf4:	04000084 	movi	r16,2
    8cf8:	003bed06 	br	7cb0 <_dtoa_r+0x45c>
    8cfc:	d9000617 	ldw	r4,24(sp)
    8d00:	203f0d26 	beq	r4,zero,8938 <_dtoa_r+0x10e4>
    8d04:	d9800c17 	ldw	r6,48(sp)
    8d08:	01bcab0e 	bge	zero,r6,7fb8 <_dtoa_r+0x764>
    8d0c:	d9401017 	ldw	r5,64(sp)
    8d10:	d9000f17 	ldw	r4,60(sp)
    8d14:	000d883a 	mov	r6,zero
    8d18:	01d00934 	movhi	r7,16420
    8d1c:	00112a80 	call	112a8 <__muldf3>
    8d20:	81000044 	addi	r4,r16,1
    8d24:	d8800f15 	stw	r2,60(sp)
    8d28:	d8c01015 	stw	r3,64(sp)
    8d2c:	001233c0 	call	1233c <__floatsidf>
    8d30:	d9800f17 	ldw	r6,60(sp)
    8d34:	d9c01017 	ldw	r7,64(sp)
    8d38:	1009883a 	mov	r4,r2
    8d3c:	180b883a 	mov	r5,r3
    8d40:	00112a80 	call	112a8 <__muldf3>
    8d44:	01d00734 	movhi	r7,16412
    8d48:	000d883a 	mov	r6,zero
    8d4c:	1009883a 	mov	r4,r2
    8d50:	180b883a 	mov	r5,r3
    8d54:	000febc0 	call	febc <__adddf3>
    8d58:	d9c00517 	ldw	r7,20(sp)
    8d5c:	047f3034 	movhi	r17,64704
    8d60:	1021883a 	mov	r16,r2
    8d64:	39ffffc4 	addi	r7,r7,-1
    8d68:	d9c01315 	stw	r7,76(sp)
    8d6c:	1c63883a 	add	r17,r3,r17
    8d70:	db000c17 	ldw	r12,48(sp)
    8d74:	003bea06 	br	7d20 <_dtoa_r+0x4cc>
    8d78:	dc000915 	stw	r16,36(sp)
    8d7c:	003e0e06 	br	85b8 <_dtoa_r+0xd64>
    8d80:	01000e44 	movi	r4,57
    8d84:	8825883a 	mov	r18,r17
    8d88:	9dc00044 	addi	r23,r19,1
    8d8c:	99000005 	stb	r4,0(r19)
    8d90:	a023883a 	mov	r17,r20
    8d94:	dc000915 	stw	r16,36(sp)
    8d98:	003da406 	br	842c <_dtoa_r+0xbd8>
    8d9c:	d9801417 	ldw	r6,80(sp)
    8da0:	d9c01517 	ldw	r7,84(sp)
    8da4:	0009883a 	mov	r4,zero
    8da8:	014ff834 	movhi	r5,16352
    8dac:	00119c00 	call	119c0 <__subdf3>
    8db0:	880d883a 	mov	r6,r17
    8db4:	a00f883a 	mov	r7,r20
    8db8:	1009883a 	mov	r4,r2
    8dbc:	180b883a 	mov	r5,r3
    8dc0:	00110d80 	call	110d8 <__gedf2>
    8dc4:	00bc7c0e 	bge	zero,r2,7fb8 <_dtoa_r+0x764>
    8dc8:	01000c04 	movi	r4,48
    8dcc:	00000106 	br	8dd4 <_dtoa_r+0x1580>
    8dd0:	102f883a 	mov	r23,r2
    8dd4:	b8bfffc4 	addi	r2,r23,-1
    8dd8:	10c00007 	ldb	r3,0(r2)
    8ddc:	193ffc26 	beq	r3,r4,8dd0 <_dtoa_r+0x157c>
    8de0:	d9801317 	ldw	r6,76(sp)
    8de4:	d9800515 	stw	r6,20(sp)
    8de8:	003c4406 	br	7efc <_dtoa_r+0x6a8>
    8dec:	d9801317 	ldw	r6,76(sp)
    8df0:	d9800515 	stw	r6,20(sp)
    8df4:	003cea06 	br	81a0 <_dtoa_r+0x94c>
    8df8:	dd800f17 	ldw	r22,60(sp)
    8dfc:	dcc01017 	ldw	r19,64(sp)
    8e00:	dc801217 	ldw	r18,72(sp)
    8e04:	003c6c06 	br	7fb8 <_dtoa_r+0x764>
    8e08:	903e031e 	bne	r18,zero,8618 <_dtoa_r+0xdc4>
    8e0c:	003ebb06 	br	88fc <_dtoa_r+0x10a8>
    8e10:	103e6c1e 	bne	r2,zero,87c4 <_dtoa_r+0xf70>
    8e14:	4080004c 	andi	r2,r8,1
    8e18:	103e6a26 	beq	r2,zero,87c4 <_dtoa_r+0xf70>
    8e1c:	003e6606 	br	87b8 <_dtoa_r+0xf64>
    8e20:	d8c00317 	ldw	r3,12(sp)
    8e24:	00800084 	movi	r2,2
    8e28:	10c02916 	blt	r2,r3,8ed0 <_dtoa_r+0x167c>
    8e2c:	d9000c17 	ldw	r4,48(sp)
    8e30:	003e8806 	br	8854 <_dtoa_r+0x1000>
    8e34:	04000084 	movi	r16,2
    8e38:	003b9d06 	br	7cb0 <_dtoa_r+0x45c>
    8e3c:	d9001317 	ldw	r4,76(sp)
    8e40:	d9000515 	stw	r4,20(sp)
    8e44:	003cd606 	br	81a0 <_dtoa_r+0x94c>
    8e48:	d8801317 	ldw	r2,76(sp)
    8e4c:	d8800515 	stw	r2,20(sp)
    8e50:	003c2a06 	br	7efc <_dtoa_r+0x6a8>
    8e54:	d9800317 	ldw	r6,12(sp)
    8e58:	00800084 	movi	r2,2
    8e5c:	11801516 	blt	r2,r6,8eb4 <_dtoa_r+0x1660>
    8e60:	d9c00c17 	ldw	r7,48(sp)
    8e64:	d9c00615 	stw	r7,24(sp)
    8e68:	003df706 	br	8648 <_dtoa_r+0xdf4>
    8e6c:	193d3926 	beq	r3,r4,8354 <_dtoa_r+0xb00>
    8e70:	00c00f04 	movi	r3,60
    8e74:	1885c83a 	sub	r2,r3,r2
    8e78:	003ddf06 	br	85f8 <_dtoa_r+0xda4>
    8e7c:	e009883a 	mov	r4,fp
    8e80:	e0001115 	stw	zero,68(fp)
    8e84:	000b883a 	mov	r5,zero
    8e88:	000a6e40 	call	a6e4 <_Balloc>
    8e8c:	d8800715 	stw	r2,28(sp)
    8e90:	d8c00717 	ldw	r3,28(sp)
    8e94:	00bfffc4 	movi	r2,-1
    8e98:	01000044 	movi	r4,1
    8e9c:	d8800c15 	stw	r2,48(sp)
    8ea0:	e0c01015 	stw	r3,64(fp)
    8ea4:	d9000b15 	stw	r4,44(sp)
    8ea8:	d8800615 	stw	r2,24(sp)
    8eac:	d8002215 	stw	zero,136(sp)
    8eb0:	003c4106 	br	7fb8 <_dtoa_r+0x764>
    8eb4:	d8c00c17 	ldw	r3,48(sp)
    8eb8:	d8c00615 	stw	r3,24(sp)
    8ebc:	003e7006 	br	8880 <_dtoa_r+0x102c>
    8ec0:	04400044 	movi	r17,1
    8ec4:	003b2006 	br	7b48 <_dtoa_r+0x2f4>
    8ec8:	000b883a 	mov	r5,zero
    8ecc:	003b3d06 	br	7bc4 <_dtoa_r+0x370>
    8ed0:	d8800c17 	ldw	r2,48(sp)
    8ed4:	d8800615 	stw	r2,24(sp)
    8ed8:	003e6906 	br	8880 <_dtoa_r+0x102c>

00008edc <__sflush_r>:
    8edc:	2880030b 	ldhu	r2,12(r5)
    8ee0:	defffb04 	addi	sp,sp,-20
    8ee4:	dcc00315 	stw	r19,12(sp)
    8ee8:	dc400115 	stw	r17,4(sp)
    8eec:	dfc00415 	stw	ra,16(sp)
    8ef0:	dc800215 	stw	r18,8(sp)
    8ef4:	dc000015 	stw	r16,0(sp)
    8ef8:	10c0020c 	andi	r3,r2,8
    8efc:	2823883a 	mov	r17,r5
    8f00:	2027883a 	mov	r19,r4
    8f04:	1800311e 	bne	r3,zero,8fcc <__sflush_r+0xf0>
    8f08:	28c00117 	ldw	r3,4(r5)
    8f0c:	10820014 	ori	r2,r2,2048
    8f10:	2880030d 	sth	r2,12(r5)
    8f14:	00c04b0e 	bge	zero,r3,9044 <__sflush_r+0x168>
    8f18:	8a000a17 	ldw	r8,40(r17)
    8f1c:	40002326 	beq	r8,zero,8fac <__sflush_r+0xd0>
    8f20:	9c000017 	ldw	r16,0(r19)
    8f24:	10c4000c 	andi	r3,r2,4096
    8f28:	98000015 	stw	zero,0(r19)
    8f2c:	18004826 	beq	r3,zero,9050 <__sflush_r+0x174>
    8f30:	89801417 	ldw	r6,80(r17)
    8f34:	10c0010c 	andi	r3,r2,4
    8f38:	18000626 	beq	r3,zero,8f54 <__sflush_r+0x78>
    8f3c:	88c00117 	ldw	r3,4(r17)
    8f40:	88800c17 	ldw	r2,48(r17)
    8f44:	30cdc83a 	sub	r6,r6,r3
    8f48:	10000226 	beq	r2,zero,8f54 <__sflush_r+0x78>
    8f4c:	88800f17 	ldw	r2,60(r17)
    8f50:	308dc83a 	sub	r6,r6,r2
    8f54:	89400717 	ldw	r5,28(r17)
    8f58:	000f883a 	mov	r7,zero
    8f5c:	9809883a 	mov	r4,r19
    8f60:	403ee83a 	callr	r8
    8f64:	00ffffc4 	movi	r3,-1
    8f68:	10c04426 	beq	r2,r3,907c <__sflush_r+0x1a0>
    8f6c:	88c0030b 	ldhu	r3,12(r17)
    8f70:	89000417 	ldw	r4,16(r17)
    8f74:	88000115 	stw	zero,4(r17)
    8f78:	197dffcc 	andi	r5,r3,63487
    8f7c:	8940030d 	sth	r5,12(r17)
    8f80:	89000015 	stw	r4,0(r17)
    8f84:	18c4000c 	andi	r3,r3,4096
    8f88:	18002c1e 	bne	r3,zero,903c <__sflush_r+0x160>
    8f8c:	89400c17 	ldw	r5,48(r17)
    8f90:	9c000015 	stw	r16,0(r19)
    8f94:	28000526 	beq	r5,zero,8fac <__sflush_r+0xd0>
    8f98:	88801004 	addi	r2,r17,64
    8f9c:	28800226 	beq	r5,r2,8fa8 <__sflush_r+0xcc>
    8fa0:	9809883a 	mov	r4,r19
    8fa4:	00096480 	call	9648 <_free_r>
    8fa8:	88000c15 	stw	zero,48(r17)
    8fac:	0005883a 	mov	r2,zero
    8fb0:	dfc00417 	ldw	ra,16(sp)
    8fb4:	dcc00317 	ldw	r19,12(sp)
    8fb8:	dc800217 	ldw	r18,8(sp)
    8fbc:	dc400117 	ldw	r17,4(sp)
    8fc0:	dc000017 	ldw	r16,0(sp)
    8fc4:	dec00504 	addi	sp,sp,20
    8fc8:	f800283a 	ret
    8fcc:	2c800417 	ldw	r18,16(r5)
    8fd0:	903ff626 	beq	r18,zero,8fac <__sflush_r+0xd0>
    8fd4:	2c000017 	ldw	r16,0(r5)
    8fd8:	108000cc 	andi	r2,r2,3
    8fdc:	2c800015 	stw	r18,0(r5)
    8fe0:	84a1c83a 	sub	r16,r16,r18
    8fe4:	1000131e 	bne	r2,zero,9034 <__sflush_r+0x158>
    8fe8:	28800517 	ldw	r2,20(r5)
    8fec:	88800215 	stw	r2,8(r17)
    8ff0:	04000316 	blt	zero,r16,9000 <__sflush_r+0x124>
    8ff4:	003fed06 	br	8fac <__sflush_r+0xd0>
    8ff8:	90a5883a 	add	r18,r18,r2
    8ffc:	043feb0e 	bge	zero,r16,8fac <__sflush_r+0xd0>
    9000:	88800917 	ldw	r2,36(r17)
    9004:	89400717 	ldw	r5,28(r17)
    9008:	800f883a 	mov	r7,r16
    900c:	900d883a 	mov	r6,r18
    9010:	9809883a 	mov	r4,r19
    9014:	103ee83a 	callr	r2
    9018:	80a1c83a 	sub	r16,r16,r2
    901c:	00bff616 	blt	zero,r2,8ff8 <__sflush_r+0x11c>
    9020:	88c0030b 	ldhu	r3,12(r17)
    9024:	00bfffc4 	movi	r2,-1
    9028:	18c01014 	ori	r3,r3,64
    902c:	88c0030d 	sth	r3,12(r17)
    9030:	003fdf06 	br	8fb0 <__sflush_r+0xd4>
    9034:	0005883a 	mov	r2,zero
    9038:	003fec06 	br	8fec <__sflush_r+0x110>
    903c:	88801415 	stw	r2,80(r17)
    9040:	003fd206 	br	8f8c <__sflush_r+0xb0>
    9044:	28c00f17 	ldw	r3,60(r5)
    9048:	00ffb316 	blt	zero,r3,8f18 <__sflush_r+0x3c>
    904c:	003fd706 	br	8fac <__sflush_r+0xd0>
    9050:	89400717 	ldw	r5,28(r17)
    9054:	000d883a 	mov	r6,zero
    9058:	01c00044 	movi	r7,1
    905c:	9809883a 	mov	r4,r19
    9060:	403ee83a 	callr	r8
    9064:	100d883a 	mov	r6,r2
    9068:	00bfffc4 	movi	r2,-1
    906c:	30801426 	beq	r6,r2,90c0 <__sflush_r+0x1e4>
    9070:	8880030b 	ldhu	r2,12(r17)
    9074:	8a000a17 	ldw	r8,40(r17)
    9078:	003fae06 	br	8f34 <__sflush_r+0x58>
    907c:	98c00017 	ldw	r3,0(r19)
    9080:	183fba26 	beq	r3,zero,8f6c <__sflush_r+0x90>
    9084:	01000744 	movi	r4,29
    9088:	19000626 	beq	r3,r4,90a4 <__sflush_r+0x1c8>
    908c:	01000584 	movi	r4,22
    9090:	19000426 	beq	r3,r4,90a4 <__sflush_r+0x1c8>
    9094:	88c0030b 	ldhu	r3,12(r17)
    9098:	18c01014 	ori	r3,r3,64
    909c:	88c0030d 	sth	r3,12(r17)
    90a0:	003fc306 	br	8fb0 <__sflush_r+0xd4>
    90a4:	8880030b 	ldhu	r2,12(r17)
    90a8:	88c00417 	ldw	r3,16(r17)
    90ac:	88000115 	stw	zero,4(r17)
    90b0:	10bdffcc 	andi	r2,r2,63487
    90b4:	8880030d 	sth	r2,12(r17)
    90b8:	88c00015 	stw	r3,0(r17)
    90bc:	003fb306 	br	8f8c <__sflush_r+0xb0>
    90c0:	98800017 	ldw	r2,0(r19)
    90c4:	103fea26 	beq	r2,zero,9070 <__sflush_r+0x194>
    90c8:	00c00744 	movi	r3,29
    90cc:	10c00226 	beq	r2,r3,90d8 <__sflush_r+0x1fc>
    90d0:	00c00584 	movi	r3,22
    90d4:	10c0031e 	bne	r2,r3,90e4 <__sflush_r+0x208>
    90d8:	9c000015 	stw	r16,0(r19)
    90dc:	0005883a 	mov	r2,zero
    90e0:	003fb306 	br	8fb0 <__sflush_r+0xd4>
    90e4:	88c0030b 	ldhu	r3,12(r17)
    90e8:	3005883a 	mov	r2,r6
    90ec:	18c01014 	ori	r3,r3,64
    90f0:	88c0030d 	sth	r3,12(r17)
    90f4:	003fae06 	br	8fb0 <__sflush_r+0xd4>

000090f8 <_fflush_r>:
    90f8:	defffd04 	addi	sp,sp,-12
    90fc:	dc000115 	stw	r16,4(sp)
    9100:	dfc00215 	stw	ra,8(sp)
    9104:	2021883a 	mov	r16,r4
    9108:	20000226 	beq	r4,zero,9114 <_fflush_r+0x1c>
    910c:	20800e17 	ldw	r2,56(r4)
    9110:	10000c26 	beq	r2,zero,9144 <_fflush_r+0x4c>
    9114:	2880030f 	ldh	r2,12(r5)
    9118:	1000051e 	bne	r2,zero,9130 <_fflush_r+0x38>
    911c:	0005883a 	mov	r2,zero
    9120:	dfc00217 	ldw	ra,8(sp)
    9124:	dc000117 	ldw	r16,4(sp)
    9128:	dec00304 	addi	sp,sp,12
    912c:	f800283a 	ret
    9130:	8009883a 	mov	r4,r16
    9134:	dfc00217 	ldw	ra,8(sp)
    9138:	dc000117 	ldw	r16,4(sp)
    913c:	dec00304 	addi	sp,sp,12
    9140:	0008edc1 	jmpi	8edc <__sflush_r>
    9144:	d9400015 	stw	r5,0(sp)
    9148:	00094d40 	call	94d4 <__sinit>
    914c:	d9400017 	ldw	r5,0(sp)
    9150:	003ff006 	br	9114 <_fflush_r+0x1c>

00009154 <fflush>:
    9154:	20000526 	beq	r4,zero,916c <fflush+0x18>
    9158:	008000b4 	movhi	r2,2
    915c:	109bb804 	addi	r2,r2,28384
    9160:	200b883a 	mov	r5,r4
    9164:	11000017 	ldw	r4,0(r2)
    9168:	00090f81 	jmpi	90f8 <_fflush_r>
    916c:	008000b4 	movhi	r2,2
    9170:	109bb704 	addi	r2,r2,28380
    9174:	11000017 	ldw	r4,0(r2)
    9178:	01400074 	movhi	r5,1
    917c:	29643e04 	addi	r5,r5,-28424
    9180:	0009ed81 	jmpi	9ed8 <_fwalk_reent>

00009184 <__fp_unlock>:
    9184:	0005883a 	mov	r2,zero
    9188:	f800283a 	ret

0000918c <_cleanup_r>:
    918c:	01400074 	movhi	r5,1
    9190:	297aa704 	addi	r5,r5,-5476
    9194:	0009ed81 	jmpi	9ed8 <_fwalk_reent>

00009198 <__sinit.part.1>:
    9198:	defff704 	addi	sp,sp,-36
    919c:	00c00074 	movhi	r3,1
    91a0:	dfc00815 	stw	ra,32(sp)
    91a4:	ddc00715 	stw	r23,28(sp)
    91a8:	dd800615 	stw	r22,24(sp)
    91ac:	dd400515 	stw	r21,20(sp)
    91b0:	dd000415 	stw	r20,16(sp)
    91b4:	dcc00315 	stw	r19,12(sp)
    91b8:	dc800215 	stw	r18,8(sp)
    91bc:	dc400115 	stw	r17,4(sp)
    91c0:	dc000015 	stw	r16,0(sp)
    91c4:	18e46304 	addi	r3,r3,-28276
    91c8:	24000117 	ldw	r16,4(r4)
    91cc:	20c00f15 	stw	r3,60(r4)
    91d0:	2080bb04 	addi	r2,r4,748
    91d4:	00c000c4 	movi	r3,3
    91d8:	20c0b915 	stw	r3,740(r4)
    91dc:	2080ba15 	stw	r2,744(r4)
    91e0:	2000b815 	stw	zero,736(r4)
    91e4:	05c00204 	movi	r23,8
    91e8:	00800104 	movi	r2,4
    91ec:	2025883a 	mov	r18,r4
    91f0:	b80d883a 	mov	r6,r23
    91f4:	81001704 	addi	r4,r16,92
    91f8:	000b883a 	mov	r5,zero
    91fc:	80000015 	stw	zero,0(r16)
    9200:	80000115 	stw	zero,4(r16)
    9204:	80000215 	stw	zero,8(r16)
    9208:	8080030d 	sth	r2,12(r16)
    920c:	80001915 	stw	zero,100(r16)
    9210:	8000038d 	sth	zero,14(r16)
    9214:	80000415 	stw	zero,16(r16)
    9218:	80000515 	stw	zero,20(r16)
    921c:	80000615 	stw	zero,24(r16)
    9220:	000a5bc0 	call	a5bc <memset>
    9224:	05800074 	movhi	r22,1
    9228:	94400217 	ldw	r17,8(r18)
    922c:	05400074 	movhi	r21,1
    9230:	05000074 	movhi	r20,1
    9234:	04c00074 	movhi	r19,1
    9238:	b5af2e04 	addi	r22,r22,-17224
    923c:	ad6f4504 	addi	r21,r21,-17132
    9240:	a52f6404 	addi	r20,r20,-17008
    9244:	9cef7b04 	addi	r19,r19,-16916
    9248:	85800815 	stw	r22,32(r16)
    924c:	85400915 	stw	r21,36(r16)
    9250:	85000a15 	stw	r20,40(r16)
    9254:	84c00b15 	stw	r19,44(r16)
    9258:	84000715 	stw	r16,28(r16)
    925c:	00800284 	movi	r2,10
    9260:	8880030d 	sth	r2,12(r17)
    9264:	00800044 	movi	r2,1
    9268:	b80d883a 	mov	r6,r23
    926c:	89001704 	addi	r4,r17,92
    9270:	000b883a 	mov	r5,zero
    9274:	88000015 	stw	zero,0(r17)
    9278:	88000115 	stw	zero,4(r17)
    927c:	88000215 	stw	zero,8(r17)
    9280:	88001915 	stw	zero,100(r17)
    9284:	8880038d 	sth	r2,14(r17)
    9288:	88000415 	stw	zero,16(r17)
    928c:	88000515 	stw	zero,20(r17)
    9290:	88000615 	stw	zero,24(r17)
    9294:	000a5bc0 	call	a5bc <memset>
    9298:	94000317 	ldw	r16,12(r18)
    929c:	00800484 	movi	r2,18
    92a0:	8c400715 	stw	r17,28(r17)
    92a4:	8d800815 	stw	r22,32(r17)
    92a8:	8d400915 	stw	r21,36(r17)
    92ac:	8d000a15 	stw	r20,40(r17)
    92b0:	8cc00b15 	stw	r19,44(r17)
    92b4:	8080030d 	sth	r2,12(r16)
    92b8:	00800084 	movi	r2,2
    92bc:	80000015 	stw	zero,0(r16)
    92c0:	80000115 	stw	zero,4(r16)
    92c4:	80000215 	stw	zero,8(r16)
    92c8:	80001915 	stw	zero,100(r16)
    92cc:	8080038d 	sth	r2,14(r16)
    92d0:	80000415 	stw	zero,16(r16)
    92d4:	80000515 	stw	zero,20(r16)
    92d8:	80000615 	stw	zero,24(r16)
    92dc:	b80d883a 	mov	r6,r23
    92e0:	000b883a 	mov	r5,zero
    92e4:	81001704 	addi	r4,r16,92
    92e8:	000a5bc0 	call	a5bc <memset>
    92ec:	00800044 	movi	r2,1
    92f0:	84000715 	stw	r16,28(r16)
    92f4:	85800815 	stw	r22,32(r16)
    92f8:	85400915 	stw	r21,36(r16)
    92fc:	85000a15 	stw	r20,40(r16)
    9300:	84c00b15 	stw	r19,44(r16)
    9304:	90800e15 	stw	r2,56(r18)
    9308:	dfc00817 	ldw	ra,32(sp)
    930c:	ddc00717 	ldw	r23,28(sp)
    9310:	dd800617 	ldw	r22,24(sp)
    9314:	dd400517 	ldw	r21,20(sp)
    9318:	dd000417 	ldw	r20,16(sp)
    931c:	dcc00317 	ldw	r19,12(sp)
    9320:	dc800217 	ldw	r18,8(sp)
    9324:	dc400117 	ldw	r17,4(sp)
    9328:	dc000017 	ldw	r16,0(sp)
    932c:	dec00904 	addi	sp,sp,36
    9330:	f800283a 	ret

00009334 <__fp_lock>:
    9334:	0005883a 	mov	r2,zero
    9338:	f800283a 	ret

0000933c <__sfmoreglue>:
    933c:	defffc04 	addi	sp,sp,-16
    9340:	dc400115 	stw	r17,4(sp)
    9344:	2c7fffc4 	addi	r17,r5,-1
    9348:	8c401a24 	muli	r17,r17,104
    934c:	dc800215 	stw	r18,8(sp)
    9350:	2825883a 	mov	r18,r5
    9354:	89401d04 	addi	r5,r17,116
    9358:	dc000015 	stw	r16,0(sp)
    935c:	dfc00315 	stw	ra,12(sp)
    9360:	00023500 	call	2350 <_malloc_r>
    9364:	1021883a 	mov	r16,r2
    9368:	10000726 	beq	r2,zero,9388 <__sfmoreglue+0x4c>
    936c:	11000304 	addi	r4,r2,12
    9370:	10000015 	stw	zero,0(r2)
    9374:	14800115 	stw	r18,4(r2)
    9378:	11000215 	stw	r4,8(r2)
    937c:	89801a04 	addi	r6,r17,104
    9380:	000b883a 	mov	r5,zero
    9384:	000a5bc0 	call	a5bc <memset>
    9388:	8005883a 	mov	r2,r16
    938c:	dfc00317 	ldw	ra,12(sp)
    9390:	dc800217 	ldw	r18,8(sp)
    9394:	dc400117 	ldw	r17,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00404 	addi	sp,sp,16
    93a0:	f800283a 	ret

000093a4 <__sfp>:
    93a4:	defffb04 	addi	sp,sp,-20
    93a8:	dc000015 	stw	r16,0(sp)
    93ac:	040000b4 	movhi	r16,2
    93b0:	841bb704 	addi	r16,r16,28380
    93b4:	dcc00315 	stw	r19,12(sp)
    93b8:	2027883a 	mov	r19,r4
    93bc:	81000017 	ldw	r4,0(r16)
    93c0:	dfc00415 	stw	ra,16(sp)
    93c4:	dc800215 	stw	r18,8(sp)
    93c8:	20800e17 	ldw	r2,56(r4)
    93cc:	dc400115 	stw	r17,4(sp)
    93d0:	1000021e 	bne	r2,zero,93dc <__sfp+0x38>
    93d4:	00091980 	call	9198 <__sinit.part.1>
    93d8:	81000017 	ldw	r4,0(r16)
    93dc:	2480b804 	addi	r18,r4,736
    93e0:	047fffc4 	movi	r17,-1
    93e4:	91000117 	ldw	r4,4(r18)
    93e8:	94000217 	ldw	r16,8(r18)
    93ec:	213fffc4 	addi	r4,r4,-1
    93f0:	20000a16 	blt	r4,zero,941c <__sfp+0x78>
    93f4:	8080030f 	ldh	r2,12(r16)
    93f8:	10000c26 	beq	r2,zero,942c <__sfp+0x88>
    93fc:	80c01d04 	addi	r3,r16,116
    9400:	00000206 	br	940c <__sfp+0x68>
    9404:	18bfe60f 	ldh	r2,-104(r3)
    9408:	10000826 	beq	r2,zero,942c <__sfp+0x88>
    940c:	213fffc4 	addi	r4,r4,-1
    9410:	1c3ffd04 	addi	r16,r3,-12
    9414:	18c01a04 	addi	r3,r3,104
    9418:	247ffa1e 	bne	r4,r17,9404 <__sfp+0x60>
    941c:	90800017 	ldw	r2,0(r18)
    9420:	10001d26 	beq	r2,zero,9498 <__sfp+0xf4>
    9424:	1025883a 	mov	r18,r2
    9428:	003fee06 	br	93e4 <__sfp+0x40>
    942c:	00bfffc4 	movi	r2,-1
    9430:	8080038d 	sth	r2,14(r16)
    9434:	00800044 	movi	r2,1
    9438:	8080030d 	sth	r2,12(r16)
    943c:	80001915 	stw	zero,100(r16)
    9440:	80000015 	stw	zero,0(r16)
    9444:	80000215 	stw	zero,8(r16)
    9448:	80000115 	stw	zero,4(r16)
    944c:	80000415 	stw	zero,16(r16)
    9450:	80000515 	stw	zero,20(r16)
    9454:	80000615 	stw	zero,24(r16)
    9458:	01800204 	movi	r6,8
    945c:	000b883a 	mov	r5,zero
    9460:	81001704 	addi	r4,r16,92
    9464:	000a5bc0 	call	a5bc <memset>
    9468:	8005883a 	mov	r2,r16
    946c:	80000c15 	stw	zero,48(r16)
    9470:	80000d15 	stw	zero,52(r16)
    9474:	80001115 	stw	zero,68(r16)
    9478:	80001215 	stw	zero,72(r16)
    947c:	dfc00417 	ldw	ra,16(sp)
    9480:	dcc00317 	ldw	r19,12(sp)
    9484:	dc800217 	ldw	r18,8(sp)
    9488:	dc400117 	ldw	r17,4(sp)
    948c:	dc000017 	ldw	r16,0(sp)
    9490:	dec00504 	addi	sp,sp,20
    9494:	f800283a 	ret
    9498:	01400104 	movi	r5,4
    949c:	9809883a 	mov	r4,r19
    94a0:	000933c0 	call	933c <__sfmoreglue>
    94a4:	90800015 	stw	r2,0(r18)
    94a8:	103fde1e 	bne	r2,zero,9424 <__sfp+0x80>
    94ac:	00800304 	movi	r2,12
    94b0:	98800015 	stw	r2,0(r19)
    94b4:	0005883a 	mov	r2,zero
    94b8:	003ff006 	br	947c <__sfp+0xd8>

000094bc <_cleanup>:
    94bc:	008000b4 	movhi	r2,2
    94c0:	109bb704 	addi	r2,r2,28380
    94c4:	11000017 	ldw	r4,0(r2)
    94c8:	01400074 	movhi	r5,1
    94cc:	297aa704 	addi	r5,r5,-5476
    94d0:	0009ed81 	jmpi	9ed8 <_fwalk_reent>

000094d4 <__sinit>:
    94d4:	20800e17 	ldw	r2,56(r4)
    94d8:	10000126 	beq	r2,zero,94e0 <__sinit+0xc>
    94dc:	f800283a 	ret
    94e0:	00091981 	jmpi	9198 <__sinit.part.1>

000094e4 <__sfp_lock_acquire>:
    94e4:	f800283a 	ret

000094e8 <__sfp_lock_release>:
    94e8:	f800283a 	ret

000094ec <__sinit_lock_acquire>:
    94ec:	f800283a 	ret

000094f0 <__sinit_lock_release>:
    94f0:	f800283a 	ret

000094f4 <__fp_lock_all>:
    94f4:	008000b4 	movhi	r2,2
    94f8:	109bb804 	addi	r2,r2,28384
    94fc:	11000017 	ldw	r4,0(r2)
    9500:	01400074 	movhi	r5,1
    9504:	2964cd04 	addi	r5,r5,-27852
    9508:	0009e141 	jmpi	9e14 <_fwalk>

0000950c <__fp_unlock_all>:
    950c:	008000b4 	movhi	r2,2
    9510:	109bb804 	addi	r2,r2,28384
    9514:	11000017 	ldw	r4,0(r2)
    9518:	01400074 	movhi	r5,1
    951c:	29646104 	addi	r5,r5,-28284
    9520:	0009e141 	jmpi	9e14 <_fwalk>

00009524 <_malloc_trim_r>:
    9524:	defffb04 	addi	sp,sp,-20
    9528:	dcc00315 	stw	r19,12(sp)
    952c:	04c000b4 	movhi	r19,2
    9530:	dc800215 	stw	r18,8(sp)
    9534:	dc400115 	stw	r17,4(sp)
    9538:	dc000015 	stw	r16,0(sp)
    953c:	dfc00415 	stw	ra,16(sp)
    9540:	2821883a 	mov	r16,r5
    9544:	9cd37e04 	addi	r19,r19,19960
    9548:	2025883a 	mov	r18,r4
    954c:	0012f840 	call	12f84 <__malloc_lock>
    9550:	98800217 	ldw	r2,8(r19)
    9554:	14400117 	ldw	r17,4(r2)
    9558:	00bfff04 	movi	r2,-4
    955c:	88a2703a 	and	r17,r17,r2
    9560:	8c21c83a 	sub	r16,r17,r16
    9564:	8403fbc4 	addi	r16,r16,4079
    9568:	8020d33a 	srli	r16,r16,12
    956c:	0083ffc4 	movi	r2,4095
    9570:	843fffc4 	addi	r16,r16,-1
    9574:	8020933a 	slli	r16,r16,12
    9578:	1400060e 	bge	r2,r16,9594 <_malloc_trim_r+0x70>
    957c:	000b883a 	mov	r5,zero
    9580:	9009883a 	mov	r4,r18
    9584:	0002c9c0 	call	2c9c <_sbrk_r>
    9588:	98c00217 	ldw	r3,8(r19)
    958c:	1c47883a 	add	r3,r3,r17
    9590:	10c00a26 	beq	r2,r3,95bc <_malloc_trim_r+0x98>
    9594:	9009883a 	mov	r4,r18
    9598:	00130a40 	call	130a4 <__malloc_unlock>
    959c:	0005883a 	mov	r2,zero
    95a0:	dfc00417 	ldw	ra,16(sp)
    95a4:	dcc00317 	ldw	r19,12(sp)
    95a8:	dc800217 	ldw	r18,8(sp)
    95ac:	dc400117 	ldw	r17,4(sp)
    95b0:	dc000017 	ldw	r16,0(sp)
    95b4:	dec00504 	addi	sp,sp,20
    95b8:	f800283a 	ret
    95bc:	040bc83a 	sub	r5,zero,r16
    95c0:	9009883a 	mov	r4,r18
    95c4:	0002c9c0 	call	2c9c <_sbrk_r>
    95c8:	00ffffc4 	movi	r3,-1
    95cc:	10c00d26 	beq	r2,r3,9604 <_malloc_trim_r+0xe0>
    95d0:	00c000f4 	movhi	r3,3
    95d4:	18e49404 	addi	r3,r3,-28080
    95d8:	18800017 	ldw	r2,0(r3)
    95dc:	99000217 	ldw	r4,8(r19)
    95e0:	8c23c83a 	sub	r17,r17,r16
    95e4:	8c400054 	ori	r17,r17,1
    95e8:	1421c83a 	sub	r16,r2,r16
    95ec:	24400115 	stw	r17,4(r4)
    95f0:	9009883a 	mov	r4,r18
    95f4:	1c000015 	stw	r16,0(r3)
    95f8:	00130a40 	call	130a4 <__malloc_unlock>
    95fc:	00800044 	movi	r2,1
    9600:	003fe706 	br	95a0 <_malloc_trim_r+0x7c>
    9604:	000b883a 	mov	r5,zero
    9608:	9009883a 	mov	r4,r18
    960c:	0002c9c0 	call	2c9c <_sbrk_r>
    9610:	99000217 	ldw	r4,8(r19)
    9614:	014003c4 	movi	r5,15
    9618:	1107c83a 	sub	r3,r2,r4
    961c:	28ffdd0e 	bge	r5,r3,9594 <_malloc_trim_r+0x70>
    9620:	014000b4 	movhi	r5,2
    9624:	295bb504 	addi	r5,r5,28372
    9628:	29400017 	ldw	r5,0(r5)
    962c:	18c00054 	ori	r3,r3,1
    9630:	20c00115 	stw	r3,4(r4)
    9634:	00c000f4 	movhi	r3,3
    9638:	1145c83a 	sub	r2,r2,r5
    963c:	18e49404 	addi	r3,r3,-28080
    9640:	18800015 	stw	r2,0(r3)
    9644:	003fd306 	br	9594 <_malloc_trim_r+0x70>

00009648 <_free_r>:
    9648:	28004126 	beq	r5,zero,9750 <_free_r+0x108>
    964c:	defffd04 	addi	sp,sp,-12
    9650:	dc400115 	stw	r17,4(sp)
    9654:	dc000015 	stw	r16,0(sp)
    9658:	2023883a 	mov	r17,r4
    965c:	2821883a 	mov	r16,r5
    9660:	dfc00215 	stw	ra,8(sp)
    9664:	0012f840 	call	12f84 <__malloc_lock>
    9668:	81ffff17 	ldw	r7,-4(r16)
    966c:	00bfff84 	movi	r2,-2
    9670:	010000b4 	movhi	r4,2
    9674:	81bffe04 	addi	r6,r16,-8
    9678:	3884703a 	and	r2,r7,r2
    967c:	21137e04 	addi	r4,r4,19960
    9680:	308b883a 	add	r5,r6,r2
    9684:	2a400117 	ldw	r9,4(r5)
    9688:	22000217 	ldw	r8,8(r4)
    968c:	00ffff04 	movi	r3,-4
    9690:	48c6703a 	and	r3,r9,r3
    9694:	2a005726 	beq	r5,r8,97f4 <_free_r+0x1ac>
    9698:	28c00115 	stw	r3,4(r5)
    969c:	39c0004c 	andi	r7,r7,1
    96a0:	3800091e 	bne	r7,zero,96c8 <_free_r+0x80>
    96a4:	823ffe17 	ldw	r8,-8(r16)
    96a8:	22400204 	addi	r9,r4,8
    96ac:	320dc83a 	sub	r6,r6,r8
    96b0:	31c00217 	ldw	r7,8(r6)
    96b4:	1205883a 	add	r2,r2,r8
    96b8:	3a406526 	beq	r7,r9,9850 <_free_r+0x208>
    96bc:	32000317 	ldw	r8,12(r6)
    96c0:	3a000315 	stw	r8,12(r7)
    96c4:	41c00215 	stw	r7,8(r8)
    96c8:	28cf883a 	add	r7,r5,r3
    96cc:	39c00117 	ldw	r7,4(r7)
    96d0:	39c0004c 	andi	r7,r7,1
    96d4:	38003a26 	beq	r7,zero,97c0 <_free_r+0x178>
    96d8:	10c00054 	ori	r3,r2,1
    96dc:	30c00115 	stw	r3,4(r6)
    96e0:	3087883a 	add	r3,r6,r2
    96e4:	18800015 	stw	r2,0(r3)
    96e8:	00c07fc4 	movi	r3,511
    96ec:	18801936 	bltu	r3,r2,9754 <_free_r+0x10c>
    96f0:	1004d0fa 	srli	r2,r2,3
    96f4:	01c00044 	movi	r7,1
    96f8:	21400117 	ldw	r5,4(r4)
    96fc:	10c00044 	addi	r3,r2,1
    9700:	18c7883a 	add	r3,r3,r3
    9704:	1005d0ba 	srai	r2,r2,2
    9708:	18c7883a 	add	r3,r3,r3
    970c:	18c7883a 	add	r3,r3,r3
    9710:	1907883a 	add	r3,r3,r4
    9714:	3884983a 	sll	r2,r7,r2
    9718:	19c00017 	ldw	r7,0(r3)
    971c:	1a3ffe04 	addi	r8,r3,-8
    9720:	1144b03a 	or	r2,r2,r5
    9724:	32000315 	stw	r8,12(r6)
    9728:	31c00215 	stw	r7,8(r6)
    972c:	20800115 	stw	r2,4(r4)
    9730:	19800015 	stw	r6,0(r3)
    9734:	39800315 	stw	r6,12(r7)
    9738:	8809883a 	mov	r4,r17
    973c:	dfc00217 	ldw	ra,8(sp)
    9740:	dc400117 	ldw	r17,4(sp)
    9744:	dc000017 	ldw	r16,0(sp)
    9748:	dec00304 	addi	sp,sp,12
    974c:	00130a41 	jmpi	130a4 <__malloc_unlock>
    9750:	f800283a 	ret
    9754:	100ad27a 	srli	r5,r2,9
    9758:	00c00104 	movi	r3,4
    975c:	19404a36 	bltu	r3,r5,9888 <_free_r+0x240>
    9760:	100ad1ba 	srli	r5,r2,6
    9764:	28c00e44 	addi	r3,r5,57
    9768:	18c7883a 	add	r3,r3,r3
    976c:	29400e04 	addi	r5,r5,56
    9770:	18c7883a 	add	r3,r3,r3
    9774:	18c7883a 	add	r3,r3,r3
    9778:	1909883a 	add	r4,r3,r4
    977c:	20c00017 	ldw	r3,0(r4)
    9780:	01c000b4 	movhi	r7,2
    9784:	213ffe04 	addi	r4,r4,-8
    9788:	39d37e04 	addi	r7,r7,19960
    978c:	20c04426 	beq	r4,r3,98a0 <_free_r+0x258>
    9790:	01ffff04 	movi	r7,-4
    9794:	19400117 	ldw	r5,4(r3)
    9798:	29ca703a 	and	r5,r5,r7
    979c:	1140022e 	bgeu	r2,r5,97a8 <_free_r+0x160>
    97a0:	18c00217 	ldw	r3,8(r3)
    97a4:	20fffb1e 	bne	r4,r3,9794 <_free_r+0x14c>
    97a8:	19000317 	ldw	r4,12(r3)
    97ac:	31000315 	stw	r4,12(r6)
    97b0:	30c00215 	stw	r3,8(r6)
    97b4:	21800215 	stw	r6,8(r4)
    97b8:	19800315 	stw	r6,12(r3)
    97bc:	003fde06 	br	9738 <_free_r+0xf0>
    97c0:	29c00217 	ldw	r7,8(r5)
    97c4:	10c5883a 	add	r2,r2,r3
    97c8:	00c000b4 	movhi	r3,2
    97cc:	18d38004 	addi	r3,r3,19968
    97d0:	38c03b26 	beq	r7,r3,98c0 <_free_r+0x278>
    97d4:	2a000317 	ldw	r8,12(r5)
    97d8:	11400054 	ori	r5,r2,1
    97dc:	3087883a 	add	r3,r6,r2
    97e0:	3a000315 	stw	r8,12(r7)
    97e4:	41c00215 	stw	r7,8(r8)
    97e8:	31400115 	stw	r5,4(r6)
    97ec:	18800015 	stw	r2,0(r3)
    97f0:	003fbd06 	br	96e8 <_free_r+0xa0>
    97f4:	39c0004c 	andi	r7,r7,1
    97f8:	10c5883a 	add	r2,r2,r3
    97fc:	3800071e 	bne	r7,zero,981c <_free_r+0x1d4>
    9800:	81fffe17 	ldw	r7,-8(r16)
    9804:	31cdc83a 	sub	r6,r6,r7
    9808:	30c00317 	ldw	r3,12(r6)
    980c:	31400217 	ldw	r5,8(r6)
    9810:	11c5883a 	add	r2,r2,r7
    9814:	28c00315 	stw	r3,12(r5)
    9818:	19400215 	stw	r5,8(r3)
    981c:	10c00054 	ori	r3,r2,1
    9820:	30c00115 	stw	r3,4(r6)
    9824:	00c000b4 	movhi	r3,2
    9828:	18dbb604 	addi	r3,r3,28376
    982c:	18c00017 	ldw	r3,0(r3)
    9830:	21800215 	stw	r6,8(r4)
    9834:	10ffc036 	bltu	r2,r3,9738 <_free_r+0xf0>
    9838:	008000f4 	movhi	r2,3
    983c:	10a46104 	addi	r2,r2,-28284
    9840:	11400017 	ldw	r5,0(r2)
    9844:	8809883a 	mov	r4,r17
    9848:	00095240 	call	9524 <_malloc_trim_r>
    984c:	003fba06 	br	9738 <_free_r+0xf0>
    9850:	28c9883a 	add	r4,r5,r3
    9854:	21000117 	ldw	r4,4(r4)
    9858:	2100004c 	andi	r4,r4,1
    985c:	2000391e 	bne	r4,zero,9944 <_free_r+0x2fc>
    9860:	29c00217 	ldw	r7,8(r5)
    9864:	29000317 	ldw	r4,12(r5)
    9868:	1885883a 	add	r2,r3,r2
    986c:	10c00054 	ori	r3,r2,1
    9870:	39000315 	stw	r4,12(r7)
    9874:	21c00215 	stw	r7,8(r4)
    9878:	30c00115 	stw	r3,4(r6)
    987c:	308d883a 	add	r6,r6,r2
    9880:	30800015 	stw	r2,0(r6)
    9884:	003fac06 	br	9738 <_free_r+0xf0>
    9888:	00c00504 	movi	r3,20
    988c:	19401536 	bltu	r3,r5,98e4 <_free_r+0x29c>
    9890:	28c01704 	addi	r3,r5,92
    9894:	18c7883a 	add	r3,r3,r3
    9898:	294016c4 	addi	r5,r5,91
    989c:	003fb406 	br	9770 <_free_r+0x128>
    98a0:	280bd0ba 	srai	r5,r5,2
    98a4:	00c00044 	movi	r3,1
    98a8:	38800117 	ldw	r2,4(r7)
    98ac:	194a983a 	sll	r5,r3,r5
    98b0:	2007883a 	mov	r3,r4
    98b4:	2884b03a 	or	r2,r5,r2
    98b8:	38800115 	stw	r2,4(r7)
    98bc:	003fbb06 	br	97ac <_free_r+0x164>
    98c0:	21800515 	stw	r6,20(r4)
    98c4:	21800415 	stw	r6,16(r4)
    98c8:	10c00054 	ori	r3,r2,1
    98cc:	31c00315 	stw	r7,12(r6)
    98d0:	31c00215 	stw	r7,8(r6)
    98d4:	30c00115 	stw	r3,4(r6)
    98d8:	308d883a 	add	r6,r6,r2
    98dc:	30800015 	stw	r2,0(r6)
    98e0:	003f9506 	br	9738 <_free_r+0xf0>
    98e4:	00c01504 	movi	r3,84
    98e8:	19400536 	bltu	r3,r5,9900 <_free_r+0x2b8>
    98ec:	100ad33a 	srli	r5,r2,12
    98f0:	28c01bc4 	addi	r3,r5,111
    98f4:	18c7883a 	add	r3,r3,r3
    98f8:	29401b84 	addi	r5,r5,110
    98fc:	003f9c06 	br	9770 <_free_r+0x128>
    9900:	00c05504 	movi	r3,340
    9904:	19400536 	bltu	r3,r5,991c <_free_r+0x2d4>
    9908:	100ad3fa 	srli	r5,r2,15
    990c:	28c01e04 	addi	r3,r5,120
    9910:	18c7883a 	add	r3,r3,r3
    9914:	29401dc4 	addi	r5,r5,119
    9918:	003f9506 	br	9770 <_free_r+0x128>
    991c:	00c15504 	movi	r3,1364
    9920:	19400536 	bltu	r3,r5,9938 <_free_r+0x2f0>
    9924:	100ad4ba 	srli	r5,r2,18
    9928:	28c01f44 	addi	r3,r5,125
    992c:	18c7883a 	add	r3,r3,r3
    9930:	29401f04 	addi	r5,r5,124
    9934:	003f8e06 	br	9770 <_free_r+0x128>
    9938:	00c03f84 	movi	r3,254
    993c:	01401f84 	movi	r5,126
    9940:	003f8b06 	br	9770 <_free_r+0x128>
    9944:	10c00054 	ori	r3,r2,1
    9948:	30c00115 	stw	r3,4(r6)
    994c:	308d883a 	add	r6,r6,r2
    9950:	30800015 	stw	r2,0(r6)
    9954:	003f7806 	br	9738 <_free_r+0xf0>

00009958 <__sfvwrite_r>:
    9958:	30800217 	ldw	r2,8(r6)
    995c:	10006726 	beq	r2,zero,9afc <__sfvwrite_r+0x1a4>
    9960:	28c0030b 	ldhu	r3,12(r5)
    9964:	defff404 	addi	sp,sp,-48
    9968:	dd400715 	stw	r21,28(sp)
    996c:	dd000615 	stw	r20,24(sp)
    9970:	dc000215 	stw	r16,8(sp)
    9974:	dfc00b15 	stw	ra,44(sp)
    9978:	df000a15 	stw	fp,40(sp)
    997c:	ddc00915 	stw	r23,36(sp)
    9980:	dd800815 	stw	r22,32(sp)
    9984:	dcc00515 	stw	r19,20(sp)
    9988:	dc800415 	stw	r18,16(sp)
    998c:	dc400315 	stw	r17,12(sp)
    9990:	1880020c 	andi	r2,r3,8
    9994:	2821883a 	mov	r16,r5
    9998:	202b883a 	mov	r21,r4
    999c:	3029883a 	mov	r20,r6
    99a0:	10002726 	beq	r2,zero,9a40 <__sfvwrite_r+0xe8>
    99a4:	28800417 	ldw	r2,16(r5)
    99a8:	10002526 	beq	r2,zero,9a40 <__sfvwrite_r+0xe8>
    99ac:	1880008c 	andi	r2,r3,2
    99b0:	a4400017 	ldw	r17,0(r20)
    99b4:	10002a26 	beq	r2,zero,9a60 <__sfvwrite_r+0x108>
    99b8:	05a00034 	movhi	r22,32768
    99bc:	0027883a 	mov	r19,zero
    99c0:	0025883a 	mov	r18,zero
    99c4:	b5bf0004 	addi	r22,r22,-1024
    99c8:	980d883a 	mov	r6,r19
    99cc:	a809883a 	mov	r4,r21
    99d0:	90004626 	beq	r18,zero,9aec <__sfvwrite_r+0x194>
    99d4:	900f883a 	mov	r7,r18
    99d8:	b480022e 	bgeu	r22,r18,99e4 <__sfvwrite_r+0x8c>
    99dc:	01e00034 	movhi	r7,32768
    99e0:	39ff0004 	addi	r7,r7,-1024
    99e4:	80800917 	ldw	r2,36(r16)
    99e8:	81400717 	ldw	r5,28(r16)
    99ec:	103ee83a 	callr	r2
    99f0:	0080570e 	bge	zero,r2,9b50 <__sfvwrite_r+0x1f8>
    99f4:	a0c00217 	ldw	r3,8(r20)
    99f8:	98a7883a 	add	r19,r19,r2
    99fc:	90a5c83a 	sub	r18,r18,r2
    9a00:	1885c83a 	sub	r2,r3,r2
    9a04:	a0800215 	stw	r2,8(r20)
    9a08:	103fef1e 	bne	r2,zero,99c8 <__sfvwrite_r+0x70>
    9a0c:	0005883a 	mov	r2,zero
    9a10:	dfc00b17 	ldw	ra,44(sp)
    9a14:	df000a17 	ldw	fp,40(sp)
    9a18:	ddc00917 	ldw	r23,36(sp)
    9a1c:	dd800817 	ldw	r22,32(sp)
    9a20:	dd400717 	ldw	r21,28(sp)
    9a24:	dd000617 	ldw	r20,24(sp)
    9a28:	dcc00517 	ldw	r19,20(sp)
    9a2c:	dc800417 	ldw	r18,16(sp)
    9a30:	dc400317 	ldw	r17,12(sp)
    9a34:	dc000217 	ldw	r16,8(sp)
    9a38:	dec00c04 	addi	sp,sp,48
    9a3c:	f800283a 	ret
    9a40:	800b883a 	mov	r5,r16
    9a44:	a809883a 	mov	r4,r21
    9a48:	00075000 	call	7500 <__swsetup_r>
    9a4c:	1000eb1e 	bne	r2,zero,9dfc <__sfvwrite_r+0x4a4>
    9a50:	80c0030b 	ldhu	r3,12(r16)
    9a54:	a4400017 	ldw	r17,0(r20)
    9a58:	1880008c 	andi	r2,r3,2
    9a5c:	103fd61e 	bne	r2,zero,99b8 <__sfvwrite_r+0x60>
    9a60:	1880004c 	andi	r2,r3,1
    9a64:	10003f1e 	bne	r2,zero,9b64 <__sfvwrite_r+0x20c>
    9a68:	0039883a 	mov	fp,zero
    9a6c:	0025883a 	mov	r18,zero
    9a70:	90001a26 	beq	r18,zero,9adc <__sfvwrite_r+0x184>
    9a74:	1880800c 	andi	r2,r3,512
    9a78:	84c00217 	ldw	r19,8(r16)
    9a7c:	10002126 	beq	r2,zero,9b04 <__sfvwrite_r+0x1ac>
    9a80:	982f883a 	mov	r23,r19
    9a84:	94c09336 	bltu	r18,r19,9cd4 <__sfvwrite_r+0x37c>
    9a88:	1881200c 	andi	r2,r3,1152
    9a8c:	10009e1e 	bne	r2,zero,9d08 <__sfvwrite_r+0x3b0>
    9a90:	81000017 	ldw	r4,0(r16)
    9a94:	b80d883a 	mov	r6,r23
    9a98:	e00b883a 	mov	r5,fp
    9a9c:	000a4600 	call	a460 <memmove>
    9aa0:	80c00217 	ldw	r3,8(r16)
    9aa4:	81000017 	ldw	r4,0(r16)
    9aa8:	9005883a 	mov	r2,r18
    9aac:	1ce7c83a 	sub	r19,r3,r19
    9ab0:	25cf883a 	add	r7,r4,r23
    9ab4:	84c00215 	stw	r19,8(r16)
    9ab8:	81c00015 	stw	r7,0(r16)
    9abc:	a0c00217 	ldw	r3,8(r20)
    9ac0:	e0b9883a 	add	fp,fp,r2
    9ac4:	90a5c83a 	sub	r18,r18,r2
    9ac8:	18a7c83a 	sub	r19,r3,r2
    9acc:	a4c00215 	stw	r19,8(r20)
    9ad0:	983fce26 	beq	r19,zero,9a0c <__sfvwrite_r+0xb4>
    9ad4:	80c0030b 	ldhu	r3,12(r16)
    9ad8:	903fe61e 	bne	r18,zero,9a74 <__sfvwrite_r+0x11c>
    9adc:	8f000017 	ldw	fp,0(r17)
    9ae0:	8c800117 	ldw	r18,4(r17)
    9ae4:	8c400204 	addi	r17,r17,8
    9ae8:	003fe106 	br	9a70 <__sfvwrite_r+0x118>
    9aec:	8cc00017 	ldw	r19,0(r17)
    9af0:	8c800117 	ldw	r18,4(r17)
    9af4:	8c400204 	addi	r17,r17,8
    9af8:	003fb306 	br	99c8 <__sfvwrite_r+0x70>
    9afc:	0005883a 	mov	r2,zero
    9b00:	f800283a 	ret
    9b04:	81000017 	ldw	r4,0(r16)
    9b08:	80800417 	ldw	r2,16(r16)
    9b0c:	11005736 	bltu	r2,r4,9c6c <__sfvwrite_r+0x314>
    9b10:	85c00517 	ldw	r23,20(r16)
    9b14:	95c05536 	bltu	r18,r23,9c6c <__sfvwrite_r+0x314>
    9b18:	00a00034 	movhi	r2,32768
    9b1c:	10bfffc4 	addi	r2,r2,-1
    9b20:	9009883a 	mov	r4,r18
    9b24:	1480012e 	bgeu	r2,r18,9b2c <__sfvwrite_r+0x1d4>
    9b28:	1009883a 	mov	r4,r2
    9b2c:	b80b883a 	mov	r5,r23
    9b30:	000fd080 	call	fd08 <__divsi3>
    9b34:	15cf383a 	mul	r7,r2,r23
    9b38:	81400717 	ldw	r5,28(r16)
    9b3c:	80800917 	ldw	r2,36(r16)
    9b40:	e00d883a 	mov	r6,fp
    9b44:	a809883a 	mov	r4,r21
    9b48:	103ee83a 	callr	r2
    9b4c:	00bfdb16 	blt	zero,r2,9abc <__sfvwrite_r+0x164>
    9b50:	8080030b 	ldhu	r2,12(r16)
    9b54:	10801014 	ori	r2,r2,64
    9b58:	8080030d 	sth	r2,12(r16)
    9b5c:	00bfffc4 	movi	r2,-1
    9b60:	003fab06 	br	9a10 <__sfvwrite_r+0xb8>
    9b64:	0027883a 	mov	r19,zero
    9b68:	0011883a 	mov	r8,zero
    9b6c:	0039883a 	mov	fp,zero
    9b70:	0025883a 	mov	r18,zero
    9b74:	90001f26 	beq	r18,zero,9bf4 <__sfvwrite_r+0x29c>
    9b78:	40005a26 	beq	r8,zero,9ce4 <__sfvwrite_r+0x38c>
    9b7c:	982d883a 	mov	r22,r19
    9b80:	94c0012e 	bgeu	r18,r19,9b88 <__sfvwrite_r+0x230>
    9b84:	902d883a 	mov	r22,r18
    9b88:	81000017 	ldw	r4,0(r16)
    9b8c:	80800417 	ldw	r2,16(r16)
    9b90:	b02f883a 	mov	r23,r22
    9b94:	81c00517 	ldw	r7,20(r16)
    9b98:	1100032e 	bgeu	r2,r4,9ba8 <__sfvwrite_r+0x250>
    9b9c:	80c00217 	ldw	r3,8(r16)
    9ba0:	38c7883a 	add	r3,r7,r3
    9ba4:	1d801816 	blt	r3,r22,9c08 <__sfvwrite_r+0x2b0>
    9ba8:	b1c03e16 	blt	r22,r7,9ca4 <__sfvwrite_r+0x34c>
    9bac:	80800917 	ldw	r2,36(r16)
    9bb0:	81400717 	ldw	r5,28(r16)
    9bb4:	e00d883a 	mov	r6,fp
    9bb8:	da000115 	stw	r8,4(sp)
    9bbc:	a809883a 	mov	r4,r21
    9bc0:	103ee83a 	callr	r2
    9bc4:	102f883a 	mov	r23,r2
    9bc8:	da000117 	ldw	r8,4(sp)
    9bcc:	00bfe00e 	bge	zero,r2,9b50 <__sfvwrite_r+0x1f8>
    9bd0:	9de7c83a 	sub	r19,r19,r23
    9bd4:	98001f26 	beq	r19,zero,9c54 <__sfvwrite_r+0x2fc>
    9bd8:	a0800217 	ldw	r2,8(r20)
    9bdc:	e5f9883a 	add	fp,fp,r23
    9be0:	95e5c83a 	sub	r18,r18,r23
    9be4:	15efc83a 	sub	r23,r2,r23
    9be8:	a5c00215 	stw	r23,8(r20)
    9bec:	b83f8726 	beq	r23,zero,9a0c <__sfvwrite_r+0xb4>
    9bf0:	903fe11e 	bne	r18,zero,9b78 <__sfvwrite_r+0x220>
    9bf4:	8f000017 	ldw	fp,0(r17)
    9bf8:	8c800117 	ldw	r18,4(r17)
    9bfc:	0011883a 	mov	r8,zero
    9c00:	8c400204 	addi	r17,r17,8
    9c04:	003fdb06 	br	9b74 <__sfvwrite_r+0x21c>
    9c08:	180d883a 	mov	r6,r3
    9c0c:	e00b883a 	mov	r5,fp
    9c10:	da000115 	stw	r8,4(sp)
    9c14:	d8c00015 	stw	r3,0(sp)
    9c18:	000a4600 	call	a460 <memmove>
    9c1c:	d8c00017 	ldw	r3,0(sp)
    9c20:	80800017 	ldw	r2,0(r16)
    9c24:	800b883a 	mov	r5,r16
    9c28:	a809883a 	mov	r4,r21
    9c2c:	10c5883a 	add	r2,r2,r3
    9c30:	80800015 	stw	r2,0(r16)
    9c34:	d8c00015 	stw	r3,0(sp)
    9c38:	00090f80 	call	90f8 <_fflush_r>
    9c3c:	d8c00017 	ldw	r3,0(sp)
    9c40:	da000117 	ldw	r8,4(sp)
    9c44:	103fc21e 	bne	r2,zero,9b50 <__sfvwrite_r+0x1f8>
    9c48:	182f883a 	mov	r23,r3
    9c4c:	9de7c83a 	sub	r19,r19,r23
    9c50:	983fe11e 	bne	r19,zero,9bd8 <__sfvwrite_r+0x280>
    9c54:	800b883a 	mov	r5,r16
    9c58:	a809883a 	mov	r4,r21
    9c5c:	00090f80 	call	90f8 <_fflush_r>
    9c60:	103fbb1e 	bne	r2,zero,9b50 <__sfvwrite_r+0x1f8>
    9c64:	0011883a 	mov	r8,zero
    9c68:	003fdb06 	br	9bd8 <__sfvwrite_r+0x280>
    9c6c:	94c0012e 	bgeu	r18,r19,9c74 <__sfvwrite_r+0x31c>
    9c70:	9027883a 	mov	r19,r18
    9c74:	980d883a 	mov	r6,r19
    9c78:	e00b883a 	mov	r5,fp
    9c7c:	000a4600 	call	a460 <memmove>
    9c80:	80800217 	ldw	r2,8(r16)
    9c84:	80c00017 	ldw	r3,0(r16)
    9c88:	14c5c83a 	sub	r2,r2,r19
    9c8c:	1cc7883a 	add	r3,r3,r19
    9c90:	80800215 	stw	r2,8(r16)
    9c94:	80c00015 	stw	r3,0(r16)
    9c98:	10004326 	beq	r2,zero,9da8 <__sfvwrite_r+0x450>
    9c9c:	9805883a 	mov	r2,r19
    9ca0:	003f8606 	br	9abc <__sfvwrite_r+0x164>
    9ca4:	b00d883a 	mov	r6,r22
    9ca8:	e00b883a 	mov	r5,fp
    9cac:	da000115 	stw	r8,4(sp)
    9cb0:	000a4600 	call	a460 <memmove>
    9cb4:	80800217 	ldw	r2,8(r16)
    9cb8:	80c00017 	ldw	r3,0(r16)
    9cbc:	da000117 	ldw	r8,4(sp)
    9cc0:	1585c83a 	sub	r2,r2,r22
    9cc4:	1dad883a 	add	r22,r3,r22
    9cc8:	80800215 	stw	r2,8(r16)
    9ccc:	85800015 	stw	r22,0(r16)
    9cd0:	003fbf06 	br	9bd0 <__sfvwrite_r+0x278>
    9cd4:	81000017 	ldw	r4,0(r16)
    9cd8:	9027883a 	mov	r19,r18
    9cdc:	902f883a 	mov	r23,r18
    9ce0:	003f6c06 	br	9a94 <__sfvwrite_r+0x13c>
    9ce4:	900d883a 	mov	r6,r18
    9ce8:	01400284 	movi	r5,10
    9cec:	e009883a 	mov	r4,fp
    9cf0:	000a2340 	call	a234 <memchr>
    9cf4:	10003e26 	beq	r2,zero,9df0 <__sfvwrite_r+0x498>
    9cf8:	10800044 	addi	r2,r2,1
    9cfc:	1727c83a 	sub	r19,r2,fp
    9d00:	02000044 	movi	r8,1
    9d04:	003f9d06 	br	9b7c <__sfvwrite_r+0x224>
    9d08:	80800517 	ldw	r2,20(r16)
    9d0c:	81400417 	ldw	r5,16(r16)
    9d10:	81c00017 	ldw	r7,0(r16)
    9d14:	10a7883a 	add	r19,r2,r2
    9d18:	9885883a 	add	r2,r19,r2
    9d1c:	1026d7fa 	srli	r19,r2,31
    9d20:	396dc83a 	sub	r22,r7,r5
    9d24:	b1000044 	addi	r4,r22,1
    9d28:	9885883a 	add	r2,r19,r2
    9d2c:	1027d07a 	srai	r19,r2,1
    9d30:	2485883a 	add	r2,r4,r18
    9d34:	980d883a 	mov	r6,r19
    9d38:	9880022e 	bgeu	r19,r2,9d44 <__sfvwrite_r+0x3ec>
    9d3c:	1027883a 	mov	r19,r2
    9d40:	100d883a 	mov	r6,r2
    9d44:	18c1000c 	andi	r3,r3,1024
    9d48:	18001c26 	beq	r3,zero,9dbc <__sfvwrite_r+0x464>
    9d4c:	300b883a 	mov	r5,r6
    9d50:	a809883a 	mov	r4,r21
    9d54:	00023500 	call	2350 <_malloc_r>
    9d58:	102f883a 	mov	r23,r2
    9d5c:	10002926 	beq	r2,zero,9e04 <__sfvwrite_r+0x4ac>
    9d60:	81400417 	ldw	r5,16(r16)
    9d64:	b00d883a 	mov	r6,r22
    9d68:	1009883a 	mov	r4,r2
    9d6c:	000a3180 	call	a318 <memcpy>
    9d70:	8080030b 	ldhu	r2,12(r16)
    9d74:	00fedfc4 	movi	r3,-1153
    9d78:	10c4703a 	and	r2,r2,r3
    9d7c:	10802014 	ori	r2,r2,128
    9d80:	8080030d 	sth	r2,12(r16)
    9d84:	bd89883a 	add	r4,r23,r22
    9d88:	9d8fc83a 	sub	r7,r19,r22
    9d8c:	85c00415 	stw	r23,16(r16)
    9d90:	84c00515 	stw	r19,20(r16)
    9d94:	81000015 	stw	r4,0(r16)
    9d98:	9027883a 	mov	r19,r18
    9d9c:	81c00215 	stw	r7,8(r16)
    9da0:	902f883a 	mov	r23,r18
    9da4:	003f3b06 	br	9a94 <__sfvwrite_r+0x13c>
    9da8:	800b883a 	mov	r5,r16
    9dac:	a809883a 	mov	r4,r21
    9db0:	00090f80 	call	90f8 <_fflush_r>
    9db4:	103fb926 	beq	r2,zero,9c9c <__sfvwrite_r+0x344>
    9db8:	003f6506 	br	9b50 <__sfvwrite_r+0x1f8>
    9dbc:	a809883a 	mov	r4,r21
    9dc0:	000b6e00 	call	b6e0 <_realloc_r>
    9dc4:	102f883a 	mov	r23,r2
    9dc8:	103fee1e 	bne	r2,zero,9d84 <__sfvwrite_r+0x42c>
    9dcc:	81400417 	ldw	r5,16(r16)
    9dd0:	a809883a 	mov	r4,r21
    9dd4:	00096480 	call	9648 <_free_r>
    9dd8:	8080030b 	ldhu	r2,12(r16)
    9ddc:	00ffdfc4 	movi	r3,-129
    9de0:	1884703a 	and	r2,r3,r2
    9de4:	00c00304 	movi	r3,12
    9de8:	a8c00015 	stw	r3,0(r21)
    9dec:	003f5906 	br	9b54 <__sfvwrite_r+0x1fc>
    9df0:	94c00044 	addi	r19,r18,1
    9df4:	02000044 	movi	r8,1
    9df8:	003f6006 	br	9b7c <__sfvwrite_r+0x224>
    9dfc:	00bfffc4 	movi	r2,-1
    9e00:	003f0306 	br	9a10 <__sfvwrite_r+0xb8>
    9e04:	00800304 	movi	r2,12
    9e08:	a8800015 	stw	r2,0(r21)
    9e0c:	8080030b 	ldhu	r2,12(r16)
    9e10:	003f5006 	br	9b54 <__sfvwrite_r+0x1fc>

00009e14 <_fwalk>:
    9e14:	defff704 	addi	sp,sp,-36
    9e18:	dd000415 	stw	r20,16(sp)
    9e1c:	dfc00815 	stw	ra,32(sp)
    9e20:	ddc00715 	stw	r23,28(sp)
    9e24:	dd800615 	stw	r22,24(sp)
    9e28:	dd400515 	stw	r21,20(sp)
    9e2c:	dcc00315 	stw	r19,12(sp)
    9e30:	dc800215 	stw	r18,8(sp)
    9e34:	dc400115 	stw	r17,4(sp)
    9e38:	dc000015 	stw	r16,0(sp)
    9e3c:	2500b804 	addi	r20,r4,736
    9e40:	a0002326 	beq	r20,zero,9ed0 <_fwalk+0xbc>
    9e44:	282b883a 	mov	r21,r5
    9e48:	002f883a 	mov	r23,zero
    9e4c:	05800044 	movi	r22,1
    9e50:	04ffffc4 	movi	r19,-1
    9e54:	a4400117 	ldw	r17,4(r20)
    9e58:	a4800217 	ldw	r18,8(r20)
    9e5c:	8c7fffc4 	addi	r17,r17,-1
    9e60:	88000d16 	blt	r17,zero,9e98 <_fwalk+0x84>
    9e64:	94000304 	addi	r16,r18,12
    9e68:	94800384 	addi	r18,r18,14
    9e6c:	8080000b 	ldhu	r2,0(r16)
    9e70:	8c7fffc4 	addi	r17,r17,-1
    9e74:	813ffd04 	addi	r4,r16,-12
    9e78:	b080042e 	bgeu	r22,r2,9e8c <_fwalk+0x78>
    9e7c:	9080000f 	ldh	r2,0(r18)
    9e80:	14c00226 	beq	r2,r19,9e8c <_fwalk+0x78>
    9e84:	a83ee83a 	callr	r21
    9e88:	b8aeb03a 	or	r23,r23,r2
    9e8c:	84001a04 	addi	r16,r16,104
    9e90:	94801a04 	addi	r18,r18,104
    9e94:	8cfff51e 	bne	r17,r19,9e6c <_fwalk+0x58>
    9e98:	a5000017 	ldw	r20,0(r20)
    9e9c:	a03fed1e 	bne	r20,zero,9e54 <_fwalk+0x40>
    9ea0:	b805883a 	mov	r2,r23
    9ea4:	dfc00817 	ldw	ra,32(sp)
    9ea8:	ddc00717 	ldw	r23,28(sp)
    9eac:	dd800617 	ldw	r22,24(sp)
    9eb0:	dd400517 	ldw	r21,20(sp)
    9eb4:	dd000417 	ldw	r20,16(sp)
    9eb8:	dcc00317 	ldw	r19,12(sp)
    9ebc:	dc800217 	ldw	r18,8(sp)
    9ec0:	dc400117 	ldw	r17,4(sp)
    9ec4:	dc000017 	ldw	r16,0(sp)
    9ec8:	dec00904 	addi	sp,sp,36
    9ecc:	f800283a 	ret
    9ed0:	002f883a 	mov	r23,zero
    9ed4:	003ff206 	br	9ea0 <_fwalk+0x8c>

00009ed8 <_fwalk_reent>:
    9ed8:	defff704 	addi	sp,sp,-36
    9edc:	dd000415 	stw	r20,16(sp)
    9ee0:	dfc00815 	stw	ra,32(sp)
    9ee4:	ddc00715 	stw	r23,28(sp)
    9ee8:	dd800615 	stw	r22,24(sp)
    9eec:	dd400515 	stw	r21,20(sp)
    9ef0:	dcc00315 	stw	r19,12(sp)
    9ef4:	dc800215 	stw	r18,8(sp)
    9ef8:	dc400115 	stw	r17,4(sp)
    9efc:	dc000015 	stw	r16,0(sp)
    9f00:	2500b804 	addi	r20,r4,736
    9f04:	a0002326 	beq	r20,zero,9f94 <_fwalk_reent+0xbc>
    9f08:	282b883a 	mov	r21,r5
    9f0c:	2027883a 	mov	r19,r4
    9f10:	002f883a 	mov	r23,zero
    9f14:	05800044 	movi	r22,1
    9f18:	04bfffc4 	movi	r18,-1
    9f1c:	a4400117 	ldw	r17,4(r20)
    9f20:	a4000217 	ldw	r16,8(r20)
    9f24:	8c7fffc4 	addi	r17,r17,-1
    9f28:	88000c16 	blt	r17,zero,9f5c <_fwalk_reent+0x84>
    9f2c:	84000304 	addi	r16,r16,12
    9f30:	8080000b 	ldhu	r2,0(r16)
    9f34:	8c7fffc4 	addi	r17,r17,-1
    9f38:	817ffd04 	addi	r5,r16,-12
    9f3c:	b080052e 	bgeu	r22,r2,9f54 <_fwalk_reent+0x7c>
    9f40:	8080008f 	ldh	r2,2(r16)
    9f44:	9809883a 	mov	r4,r19
    9f48:	14800226 	beq	r2,r18,9f54 <_fwalk_reent+0x7c>
    9f4c:	a83ee83a 	callr	r21
    9f50:	b8aeb03a 	or	r23,r23,r2
    9f54:	84001a04 	addi	r16,r16,104
    9f58:	8cbff51e 	bne	r17,r18,9f30 <_fwalk_reent+0x58>
    9f5c:	a5000017 	ldw	r20,0(r20)
    9f60:	a03fee1e 	bne	r20,zero,9f1c <_fwalk_reent+0x44>
    9f64:	b805883a 	mov	r2,r23
    9f68:	dfc00817 	ldw	ra,32(sp)
    9f6c:	ddc00717 	ldw	r23,28(sp)
    9f70:	dd800617 	ldw	r22,24(sp)
    9f74:	dd400517 	ldw	r21,20(sp)
    9f78:	dd000417 	ldw	r20,16(sp)
    9f7c:	dcc00317 	ldw	r19,12(sp)
    9f80:	dc800217 	ldw	r18,8(sp)
    9f84:	dc400117 	ldw	r17,4(sp)
    9f88:	dc000017 	ldw	r16,0(sp)
    9f8c:	dec00904 	addi	sp,sp,36
    9f90:	f800283a 	ret
    9f94:	002f883a 	mov	r23,zero
    9f98:	003ff206 	br	9f64 <_fwalk_reent+0x8c>

00009f9c <_setlocale_r>:
    9f9c:	30001b26 	beq	r6,zero,a00c <_setlocale_r+0x70>
    9fa0:	014000b4 	movhi	r5,2
    9fa4:	defffe04 	addi	sp,sp,-8
    9fa8:	2951a404 	addi	r5,r5,18064
    9fac:	3009883a 	mov	r4,r6
    9fb0:	dc000015 	stw	r16,0(sp)
    9fb4:	dfc00115 	stw	ra,4(sp)
    9fb8:	3021883a 	mov	r16,r6
    9fbc:	000bdf40 	call	bdf4 <strcmp>
    9fc0:	1000061e 	bne	r2,zero,9fdc <_setlocale_r+0x40>
    9fc4:	008000b4 	movhi	r2,2
    9fc8:	1091a304 	addi	r2,r2,18060
    9fcc:	dfc00117 	ldw	ra,4(sp)
    9fd0:	dc000017 	ldw	r16,0(sp)
    9fd4:	dec00204 	addi	sp,sp,8
    9fd8:	f800283a 	ret
    9fdc:	014000b4 	movhi	r5,2
    9fe0:	2951a304 	addi	r5,r5,18060
    9fe4:	8009883a 	mov	r4,r16
    9fe8:	000bdf40 	call	bdf4 <strcmp>
    9fec:	103ff526 	beq	r2,zero,9fc4 <_setlocale_r+0x28>
    9ff0:	014000b4 	movhi	r5,2
    9ff4:	29518604 	addi	r5,r5,17944
    9ff8:	8009883a 	mov	r4,r16
    9ffc:	000bdf40 	call	bdf4 <strcmp>
    a000:	103ff026 	beq	r2,zero,9fc4 <_setlocale_r+0x28>
    a004:	0005883a 	mov	r2,zero
    a008:	003ff006 	br	9fcc <_setlocale_r+0x30>
    a00c:	008000b4 	movhi	r2,2
    a010:	1091a304 	addi	r2,r2,18060
    a014:	f800283a 	ret

0000a018 <__locale_charset>:
    a018:	008000b4 	movhi	r2,2
    a01c:	10959104 	addi	r2,r2,22084
    a020:	f800283a 	ret

0000a024 <__locale_mb_cur_max>:
    a024:	008000b4 	movhi	r2,2
    a028:	109bb904 	addi	r2,r2,28388
    a02c:	10800017 	ldw	r2,0(r2)
    a030:	f800283a 	ret

0000a034 <__locale_msgcharset>:
    a034:	008000b4 	movhi	r2,2
    a038:	10958904 	addi	r2,r2,22052
    a03c:	f800283a 	ret

0000a040 <__locale_cjk_lang>:
    a040:	0005883a 	mov	r2,zero
    a044:	f800283a 	ret

0000a048 <_localeconv_r>:
    a048:	008000b4 	movhi	r2,2
    a04c:	10959904 	addi	r2,r2,22116
    a050:	f800283a 	ret

0000a054 <setlocale>:
    a054:	008000b4 	movhi	r2,2
    a058:	109bb804 	addi	r2,r2,28384
    a05c:	280d883a 	mov	r6,r5
    a060:	200b883a 	mov	r5,r4
    a064:	11000017 	ldw	r4,0(r2)
    a068:	0009f9c1 	jmpi	9f9c <_setlocale_r>

0000a06c <localeconv>:
    a06c:	008000b4 	movhi	r2,2
    a070:	10959904 	addi	r2,r2,22116
    a074:	f800283a 	ret

0000a078 <__smakebuf_r>:
    a078:	2880030b 	ldhu	r2,12(r5)
    a07c:	10c0008c 	andi	r3,r2,2
    a080:	1800411e 	bne	r3,zero,a188 <__smakebuf_r+0x110>
    a084:	deffec04 	addi	sp,sp,-80
    a088:	dc000f15 	stw	r16,60(sp)
    a08c:	2821883a 	mov	r16,r5
    a090:	2940038f 	ldh	r5,14(r5)
    a094:	dc401015 	stw	r17,64(sp)
    a098:	dfc01315 	stw	ra,76(sp)
    a09c:	dcc01215 	stw	r19,72(sp)
    a0a0:	dc801115 	stw	r18,68(sp)
    a0a4:	2023883a 	mov	r17,r4
    a0a8:	28001c16 	blt	r5,zero,a11c <__smakebuf_r+0xa4>
    a0ac:	d80d883a 	mov	r6,sp
    a0b0:	000eda80 	call	eda8 <_fstat_r>
    a0b4:	10001816 	blt	r2,zero,a118 <__smakebuf_r+0xa0>
    a0b8:	d8800117 	ldw	r2,4(sp)
    a0bc:	00e00014 	movui	r3,32768
    a0c0:	10bc000c 	andi	r2,r2,61440
    a0c4:	14c80020 	cmpeqi	r19,r2,8192
    a0c8:	10c03726 	beq	r2,r3,a1a8 <__smakebuf_r+0x130>
    a0cc:	80c0030b 	ldhu	r3,12(r16)
    a0d0:	18c20014 	ori	r3,r3,2048
    a0d4:	80c0030d 	sth	r3,12(r16)
    a0d8:	00c80004 	movi	r3,8192
    a0dc:	10c0521e 	bne	r2,r3,a228 <__smakebuf_r+0x1b0>
    a0e0:	8140038f 	ldh	r5,14(r16)
    a0e4:	8809883a 	mov	r4,r17
    a0e8:	000ee040 	call	ee04 <_isatty_r>
    a0ec:	10004c26 	beq	r2,zero,a220 <__smakebuf_r+0x1a8>
    a0f0:	8080030b 	ldhu	r2,12(r16)
    a0f4:	80c010c4 	addi	r3,r16,67
    a0f8:	80c00015 	stw	r3,0(r16)
    a0fc:	10800054 	ori	r2,r2,1
    a100:	8080030d 	sth	r2,12(r16)
    a104:	00800044 	movi	r2,1
    a108:	80c00415 	stw	r3,16(r16)
    a10c:	80800515 	stw	r2,20(r16)
    a110:	04810004 	movi	r18,1024
    a114:	00000706 	br	a134 <__smakebuf_r+0xbc>
    a118:	8080030b 	ldhu	r2,12(r16)
    a11c:	10c0200c 	andi	r3,r2,128
    a120:	18001f1e 	bne	r3,zero,a1a0 <__smakebuf_r+0x128>
    a124:	04810004 	movi	r18,1024
    a128:	10820014 	ori	r2,r2,2048
    a12c:	8080030d 	sth	r2,12(r16)
    a130:	0027883a 	mov	r19,zero
    a134:	900b883a 	mov	r5,r18
    a138:	8809883a 	mov	r4,r17
    a13c:	00023500 	call	2350 <_malloc_r>
    a140:	10002c26 	beq	r2,zero,a1f4 <__smakebuf_r+0x17c>
    a144:	80c0030b 	ldhu	r3,12(r16)
    a148:	01000074 	movhi	r4,1
    a14c:	21246304 	addi	r4,r4,-28276
    a150:	89000f15 	stw	r4,60(r17)
    a154:	18c02014 	ori	r3,r3,128
    a158:	80c0030d 	sth	r3,12(r16)
    a15c:	80800015 	stw	r2,0(r16)
    a160:	80800415 	stw	r2,16(r16)
    a164:	84800515 	stw	r18,20(r16)
    a168:	98001a1e 	bne	r19,zero,a1d4 <__smakebuf_r+0x15c>
    a16c:	dfc01317 	ldw	ra,76(sp)
    a170:	dcc01217 	ldw	r19,72(sp)
    a174:	dc801117 	ldw	r18,68(sp)
    a178:	dc401017 	ldw	r17,64(sp)
    a17c:	dc000f17 	ldw	r16,60(sp)
    a180:	dec01404 	addi	sp,sp,80
    a184:	f800283a 	ret
    a188:	288010c4 	addi	r2,r5,67
    a18c:	28800015 	stw	r2,0(r5)
    a190:	28800415 	stw	r2,16(r5)
    a194:	00800044 	movi	r2,1
    a198:	28800515 	stw	r2,20(r5)
    a19c:	f800283a 	ret
    a1a0:	04801004 	movi	r18,64
    a1a4:	003fe006 	br	a128 <__smakebuf_r+0xb0>
    a1a8:	81000a17 	ldw	r4,40(r16)
    a1ac:	00c00074 	movhi	r3,1
    a1b0:	18ef6404 	addi	r3,r3,-17008
    a1b4:	20ffc51e 	bne	r4,r3,a0cc <__smakebuf_r+0x54>
    a1b8:	8080030b 	ldhu	r2,12(r16)
    a1bc:	04810004 	movi	r18,1024
    a1c0:	84801315 	stw	r18,76(r16)
    a1c4:	1484b03a 	or	r2,r2,r18
    a1c8:	8080030d 	sth	r2,12(r16)
    a1cc:	0027883a 	mov	r19,zero
    a1d0:	003fd806 	br	a134 <__smakebuf_r+0xbc>
    a1d4:	8140038f 	ldh	r5,14(r16)
    a1d8:	8809883a 	mov	r4,r17
    a1dc:	000ee040 	call	ee04 <_isatty_r>
    a1e0:	103fe226 	beq	r2,zero,a16c <__smakebuf_r+0xf4>
    a1e4:	8080030b 	ldhu	r2,12(r16)
    a1e8:	10800054 	ori	r2,r2,1
    a1ec:	8080030d 	sth	r2,12(r16)
    a1f0:	003fde06 	br	a16c <__smakebuf_r+0xf4>
    a1f4:	8080030b 	ldhu	r2,12(r16)
    a1f8:	10c0800c 	andi	r3,r2,512
    a1fc:	183fdb1e 	bne	r3,zero,a16c <__smakebuf_r+0xf4>
    a200:	10800094 	ori	r2,r2,2
    a204:	80c010c4 	addi	r3,r16,67
    a208:	8080030d 	sth	r2,12(r16)
    a20c:	00800044 	movi	r2,1
    a210:	80c00015 	stw	r3,0(r16)
    a214:	80c00415 	stw	r3,16(r16)
    a218:	80800515 	stw	r2,20(r16)
    a21c:	003fd306 	br	a16c <__smakebuf_r+0xf4>
    a220:	04810004 	movi	r18,1024
    a224:	003fc306 	br	a134 <__smakebuf_r+0xbc>
    a228:	0027883a 	mov	r19,zero
    a22c:	04810004 	movi	r18,1024
    a230:	003fc006 	br	a134 <__smakebuf_r+0xbc>

0000a234 <memchr>:
    a234:	208000cc 	andi	r2,r4,3
    a238:	280f883a 	mov	r7,r5
    a23c:	10003426 	beq	r2,zero,a310 <memchr+0xdc>
    a240:	30bfffc4 	addi	r2,r6,-1
    a244:	30001a26 	beq	r6,zero,a2b0 <memchr+0x7c>
    a248:	20c00003 	ldbu	r3,0(r4)
    a24c:	29803fcc 	andi	r6,r5,255
    a250:	30c0051e 	bne	r6,r3,a268 <memchr+0x34>
    a254:	00001806 	br	a2b8 <memchr+0x84>
    a258:	10001526 	beq	r2,zero,a2b0 <memchr+0x7c>
    a25c:	20c00003 	ldbu	r3,0(r4)
    a260:	10bfffc4 	addi	r2,r2,-1
    a264:	30c01426 	beq	r6,r3,a2b8 <memchr+0x84>
    a268:	21000044 	addi	r4,r4,1
    a26c:	20c000cc 	andi	r3,r4,3
    a270:	183ff91e 	bne	r3,zero,a258 <memchr+0x24>
    a274:	020000c4 	movi	r8,3
    a278:	40801136 	bltu	r8,r2,a2c0 <memchr+0x8c>
    a27c:	10000c26 	beq	r2,zero,a2b0 <memchr+0x7c>
    a280:	20c00003 	ldbu	r3,0(r4)
    a284:	29403fcc 	andi	r5,r5,255
    a288:	28c00b26 	beq	r5,r3,a2b8 <memchr+0x84>
    a28c:	20c00044 	addi	r3,r4,1
    a290:	39803fcc 	andi	r6,r7,255
    a294:	2089883a 	add	r4,r4,r2
    a298:	00000306 	br	a2a8 <memchr+0x74>
    a29c:	18c00044 	addi	r3,r3,1
    a2a0:	197fffc3 	ldbu	r5,-1(r3)
    a2a4:	31400526 	beq	r6,r5,a2bc <memchr+0x88>
    a2a8:	1805883a 	mov	r2,r3
    a2ac:	20fffb1e 	bne	r4,r3,a29c <memchr+0x68>
    a2b0:	0005883a 	mov	r2,zero
    a2b4:	f800283a 	ret
    a2b8:	2005883a 	mov	r2,r4
    a2bc:	f800283a 	ret
    a2c0:	28c03fcc 	andi	r3,r5,255
    a2c4:	1812923a 	slli	r9,r3,8
    a2c8:	02ffbff4 	movhi	r11,65279
    a2cc:	02a02074 	movhi	r10,32897
    a2d0:	48d2b03a 	or	r9,r9,r3
    a2d4:	4806943a 	slli	r3,r9,16
    a2d8:	5affbfc4 	addi	r11,r11,-257
    a2dc:	52a02004 	addi	r10,r10,-32640
    a2e0:	48d2b03a 	or	r9,r9,r3
    a2e4:	20c00017 	ldw	r3,0(r4)
    a2e8:	48c6f03a 	xor	r3,r9,r3
    a2ec:	1acd883a 	add	r6,r3,r11
    a2f0:	00c6303a 	nor	r3,zero,r3
    a2f4:	30c6703a 	and	r3,r6,r3
    a2f8:	1a86703a 	and	r3,r3,r10
    a2fc:	183fe01e 	bne	r3,zero,a280 <memchr+0x4c>
    a300:	10bfff04 	addi	r2,r2,-4
    a304:	21000104 	addi	r4,r4,4
    a308:	40bff636 	bltu	r8,r2,a2e4 <memchr+0xb0>
    a30c:	003fdb06 	br	a27c <memchr+0x48>
    a310:	3005883a 	mov	r2,r6
    a314:	003fd706 	br	a274 <memchr+0x40>

0000a318 <memcpy>:
    a318:	defffd04 	addi	sp,sp,-12
    a31c:	dfc00215 	stw	ra,8(sp)
    a320:	dc400115 	stw	r17,4(sp)
    a324:	dc000015 	stw	r16,0(sp)
    a328:	00c003c4 	movi	r3,15
    a32c:	2005883a 	mov	r2,r4
    a330:	1980452e 	bgeu	r3,r6,a448 <memcpy+0x130>
    a334:	2906b03a 	or	r3,r5,r4
    a338:	18c000cc 	andi	r3,r3,3
    a33c:	1800441e 	bne	r3,zero,a450 <memcpy+0x138>
    a340:	347ffc04 	addi	r17,r6,-16
    a344:	8822d13a 	srli	r17,r17,4
    a348:	28c00104 	addi	r3,r5,4
    a34c:	23400104 	addi	r13,r4,4
    a350:	8820913a 	slli	r16,r17,4
    a354:	2b000204 	addi	r12,r5,8
    a358:	22c00204 	addi	r11,r4,8
    a35c:	84000504 	addi	r16,r16,20
    a360:	2a800304 	addi	r10,r5,12
    a364:	22400304 	addi	r9,r4,12
    a368:	2c21883a 	add	r16,r5,r16
    a36c:	2811883a 	mov	r8,r5
    a370:	200f883a 	mov	r7,r4
    a374:	41000017 	ldw	r4,0(r8)
    a378:	1fc00017 	ldw	ra,0(r3)
    a37c:	63c00017 	ldw	r15,0(r12)
    a380:	39000015 	stw	r4,0(r7)
    a384:	53800017 	ldw	r14,0(r10)
    a388:	6fc00015 	stw	ra,0(r13)
    a38c:	5bc00015 	stw	r15,0(r11)
    a390:	4b800015 	stw	r14,0(r9)
    a394:	18c00404 	addi	r3,r3,16
    a398:	39c00404 	addi	r7,r7,16
    a39c:	42000404 	addi	r8,r8,16
    a3a0:	6b400404 	addi	r13,r13,16
    a3a4:	63000404 	addi	r12,r12,16
    a3a8:	5ac00404 	addi	r11,r11,16
    a3ac:	52800404 	addi	r10,r10,16
    a3b0:	4a400404 	addi	r9,r9,16
    a3b4:	1c3fef1e 	bne	r3,r16,a374 <memcpy+0x5c>
    a3b8:	89c00044 	addi	r7,r17,1
    a3bc:	380e913a 	slli	r7,r7,4
    a3c0:	310003cc 	andi	r4,r6,15
    a3c4:	02c000c4 	movi	r11,3
    a3c8:	11c7883a 	add	r3,r2,r7
    a3cc:	29cb883a 	add	r5,r5,r7
    a3d0:	5900212e 	bgeu	r11,r4,a458 <memcpy+0x140>
    a3d4:	1813883a 	mov	r9,r3
    a3d8:	2811883a 	mov	r8,r5
    a3dc:	200f883a 	mov	r7,r4
    a3e0:	42800017 	ldw	r10,0(r8)
    a3e4:	4a400104 	addi	r9,r9,4
    a3e8:	39ffff04 	addi	r7,r7,-4
    a3ec:	4abfff15 	stw	r10,-4(r9)
    a3f0:	42000104 	addi	r8,r8,4
    a3f4:	59fffa36 	bltu	r11,r7,a3e0 <memcpy+0xc8>
    a3f8:	213fff04 	addi	r4,r4,-4
    a3fc:	2008d0ba 	srli	r4,r4,2
    a400:	318000cc 	andi	r6,r6,3
    a404:	21000044 	addi	r4,r4,1
    a408:	2109883a 	add	r4,r4,r4
    a40c:	2109883a 	add	r4,r4,r4
    a410:	1907883a 	add	r3,r3,r4
    a414:	290b883a 	add	r5,r5,r4
    a418:	30000626 	beq	r6,zero,a434 <memcpy+0x11c>
    a41c:	198d883a 	add	r6,r3,r6
    a420:	29c00003 	ldbu	r7,0(r5)
    a424:	18c00044 	addi	r3,r3,1
    a428:	29400044 	addi	r5,r5,1
    a42c:	19ffffc5 	stb	r7,-1(r3)
    a430:	19bffb1e 	bne	r3,r6,a420 <memcpy+0x108>
    a434:	dfc00217 	ldw	ra,8(sp)
    a438:	dc400117 	ldw	r17,4(sp)
    a43c:	dc000017 	ldw	r16,0(sp)
    a440:	dec00304 	addi	sp,sp,12
    a444:	f800283a 	ret
    a448:	2007883a 	mov	r3,r4
    a44c:	003ff206 	br	a418 <memcpy+0x100>
    a450:	2007883a 	mov	r3,r4
    a454:	003ff106 	br	a41c <memcpy+0x104>
    a458:	200d883a 	mov	r6,r4
    a45c:	003fee06 	br	a418 <memcpy+0x100>

0000a460 <memmove>:
    a460:	2005883a 	mov	r2,r4
    a464:	29000b2e 	bgeu	r5,r4,a494 <memmove+0x34>
    a468:	298f883a 	add	r7,r5,r6
    a46c:	21c0092e 	bgeu	r4,r7,a494 <memmove+0x34>
    a470:	2187883a 	add	r3,r4,r6
    a474:	198bc83a 	sub	r5,r3,r6
    a478:	30004826 	beq	r6,zero,a59c <memmove+0x13c>
    a47c:	39ffffc4 	addi	r7,r7,-1
    a480:	39000003 	ldbu	r4,0(r7)
    a484:	18ffffc4 	addi	r3,r3,-1
    a488:	19000005 	stb	r4,0(r3)
    a48c:	28fffb1e 	bne	r5,r3,a47c <memmove+0x1c>
    a490:	f800283a 	ret
    a494:	00c003c4 	movi	r3,15
    a498:	1980412e 	bgeu	r3,r6,a5a0 <memmove+0x140>
    a49c:	2886b03a 	or	r3,r5,r2
    a4a0:	18c000cc 	andi	r3,r3,3
    a4a4:	1800401e 	bne	r3,zero,a5a8 <memmove+0x148>
    a4a8:	33fffc04 	addi	r15,r6,-16
    a4ac:	781ed13a 	srli	r15,r15,4
    a4b0:	28c00104 	addi	r3,r5,4
    a4b4:	13400104 	addi	r13,r2,4
    a4b8:	781c913a 	slli	r14,r15,4
    a4bc:	2b000204 	addi	r12,r5,8
    a4c0:	12c00204 	addi	r11,r2,8
    a4c4:	73800504 	addi	r14,r14,20
    a4c8:	2a800304 	addi	r10,r5,12
    a4cc:	12400304 	addi	r9,r2,12
    a4d0:	2b9d883a 	add	r14,r5,r14
    a4d4:	2811883a 	mov	r8,r5
    a4d8:	100f883a 	mov	r7,r2
    a4dc:	41000017 	ldw	r4,0(r8)
    a4e0:	39c00404 	addi	r7,r7,16
    a4e4:	18c00404 	addi	r3,r3,16
    a4e8:	393ffc15 	stw	r4,-16(r7)
    a4ec:	193ffc17 	ldw	r4,-16(r3)
    a4f0:	6b400404 	addi	r13,r13,16
    a4f4:	5ac00404 	addi	r11,r11,16
    a4f8:	693ffc15 	stw	r4,-16(r13)
    a4fc:	61000017 	ldw	r4,0(r12)
    a500:	4a400404 	addi	r9,r9,16
    a504:	42000404 	addi	r8,r8,16
    a508:	593ffc15 	stw	r4,-16(r11)
    a50c:	51000017 	ldw	r4,0(r10)
    a510:	63000404 	addi	r12,r12,16
    a514:	52800404 	addi	r10,r10,16
    a518:	493ffc15 	stw	r4,-16(r9)
    a51c:	1bbfef1e 	bne	r3,r14,a4dc <memmove+0x7c>
    a520:	79000044 	addi	r4,r15,1
    a524:	2008913a 	slli	r4,r4,4
    a528:	328003cc 	andi	r10,r6,15
    a52c:	02c000c4 	movi	r11,3
    a530:	1107883a 	add	r3,r2,r4
    a534:	290b883a 	add	r5,r5,r4
    a538:	5a801e2e 	bgeu	r11,r10,a5b4 <memmove+0x154>
    a53c:	1813883a 	mov	r9,r3
    a540:	2811883a 	mov	r8,r5
    a544:	500f883a 	mov	r7,r10
    a548:	41000017 	ldw	r4,0(r8)
    a54c:	4a400104 	addi	r9,r9,4
    a550:	39ffff04 	addi	r7,r7,-4
    a554:	493fff15 	stw	r4,-4(r9)
    a558:	42000104 	addi	r8,r8,4
    a55c:	59fffa36 	bltu	r11,r7,a548 <memmove+0xe8>
    a560:	513fff04 	addi	r4,r10,-4
    a564:	2008d0ba 	srli	r4,r4,2
    a568:	318000cc 	andi	r6,r6,3
    a56c:	21000044 	addi	r4,r4,1
    a570:	2109883a 	add	r4,r4,r4
    a574:	2109883a 	add	r4,r4,r4
    a578:	1907883a 	add	r3,r3,r4
    a57c:	290b883a 	add	r5,r5,r4
    a580:	30000b26 	beq	r6,zero,a5b0 <memmove+0x150>
    a584:	198d883a 	add	r6,r3,r6
    a588:	29c00003 	ldbu	r7,0(r5)
    a58c:	18c00044 	addi	r3,r3,1
    a590:	29400044 	addi	r5,r5,1
    a594:	19ffffc5 	stb	r7,-1(r3)
    a598:	19bffb1e 	bne	r3,r6,a588 <memmove+0x128>
    a59c:	f800283a 	ret
    a5a0:	1007883a 	mov	r3,r2
    a5a4:	003ff606 	br	a580 <memmove+0x120>
    a5a8:	1007883a 	mov	r3,r2
    a5ac:	003ff506 	br	a584 <memmove+0x124>
    a5b0:	f800283a 	ret
    a5b4:	500d883a 	mov	r6,r10
    a5b8:	003ff106 	br	a580 <memmove+0x120>

0000a5bc <memset>:
    a5bc:	20c000cc 	andi	r3,r4,3
    a5c0:	2005883a 	mov	r2,r4
    a5c4:	18004426 	beq	r3,zero,a6d8 <memset+0x11c>
    a5c8:	31ffffc4 	addi	r7,r6,-1
    a5cc:	30004026 	beq	r6,zero,a6d0 <memset+0x114>
    a5d0:	2813883a 	mov	r9,r5
    a5d4:	200d883a 	mov	r6,r4
    a5d8:	2007883a 	mov	r3,r4
    a5dc:	00000406 	br	a5f0 <memset+0x34>
    a5e0:	3a3fffc4 	addi	r8,r7,-1
    a5e4:	31800044 	addi	r6,r6,1
    a5e8:	38003926 	beq	r7,zero,a6d0 <memset+0x114>
    a5ec:	400f883a 	mov	r7,r8
    a5f0:	18c00044 	addi	r3,r3,1
    a5f4:	32400005 	stb	r9,0(r6)
    a5f8:	1a0000cc 	andi	r8,r3,3
    a5fc:	403ff81e 	bne	r8,zero,a5e0 <memset+0x24>
    a600:	010000c4 	movi	r4,3
    a604:	21c02d2e 	bgeu	r4,r7,a6bc <memset+0x100>
    a608:	29003fcc 	andi	r4,r5,255
    a60c:	200c923a 	slli	r6,r4,8
    a610:	3108b03a 	or	r4,r6,r4
    a614:	200c943a 	slli	r6,r4,16
    a618:	218cb03a 	or	r6,r4,r6
    a61c:	010003c4 	movi	r4,15
    a620:	21c0182e 	bgeu	r4,r7,a684 <memset+0xc8>
    a624:	3b3ffc04 	addi	r12,r7,-16
    a628:	6018d13a 	srli	r12,r12,4
    a62c:	1a000104 	addi	r8,r3,4
    a630:	1ac00204 	addi	r11,r3,8
    a634:	6008913a 	slli	r4,r12,4
    a638:	1a800304 	addi	r10,r3,12
    a63c:	1813883a 	mov	r9,r3
    a640:	21000504 	addi	r4,r4,20
    a644:	1909883a 	add	r4,r3,r4
    a648:	49800015 	stw	r6,0(r9)
    a64c:	41800015 	stw	r6,0(r8)
    a650:	59800015 	stw	r6,0(r11)
    a654:	51800015 	stw	r6,0(r10)
    a658:	42000404 	addi	r8,r8,16
    a65c:	4a400404 	addi	r9,r9,16
    a660:	5ac00404 	addi	r11,r11,16
    a664:	52800404 	addi	r10,r10,16
    a668:	413ff71e 	bne	r8,r4,a648 <memset+0x8c>
    a66c:	63000044 	addi	r12,r12,1
    a670:	6018913a 	slli	r12,r12,4
    a674:	39c003cc 	andi	r7,r7,15
    a678:	010000c4 	movi	r4,3
    a67c:	1b07883a 	add	r3,r3,r12
    a680:	21c00e2e 	bgeu	r4,r7,a6bc <memset+0x100>
    a684:	1813883a 	mov	r9,r3
    a688:	3811883a 	mov	r8,r7
    a68c:	010000c4 	movi	r4,3
    a690:	49800015 	stw	r6,0(r9)
    a694:	423fff04 	addi	r8,r8,-4
    a698:	4a400104 	addi	r9,r9,4
    a69c:	223ffc36 	bltu	r4,r8,a690 <memset+0xd4>
    a6a0:	393fff04 	addi	r4,r7,-4
    a6a4:	2008d0ba 	srli	r4,r4,2
    a6a8:	39c000cc 	andi	r7,r7,3
    a6ac:	21000044 	addi	r4,r4,1
    a6b0:	2109883a 	add	r4,r4,r4
    a6b4:	2109883a 	add	r4,r4,r4
    a6b8:	1907883a 	add	r3,r3,r4
    a6bc:	38000526 	beq	r7,zero,a6d4 <memset+0x118>
    a6c0:	19cf883a 	add	r7,r3,r7
    a6c4:	19400005 	stb	r5,0(r3)
    a6c8:	18c00044 	addi	r3,r3,1
    a6cc:	38fffd1e 	bne	r7,r3,a6c4 <memset+0x108>
    a6d0:	f800283a 	ret
    a6d4:	f800283a 	ret
    a6d8:	2007883a 	mov	r3,r4
    a6dc:	300f883a 	mov	r7,r6
    a6e0:	003fc706 	br	a600 <memset+0x44>

0000a6e4 <_Balloc>:
    a6e4:	20801317 	ldw	r2,76(r4)
    a6e8:	defffc04 	addi	sp,sp,-16
    a6ec:	dc400115 	stw	r17,4(sp)
    a6f0:	dc000015 	stw	r16,0(sp)
    a6f4:	dfc00315 	stw	ra,12(sp)
    a6f8:	dc800215 	stw	r18,8(sp)
    a6fc:	2023883a 	mov	r17,r4
    a700:	2821883a 	mov	r16,r5
    a704:	10000f26 	beq	r2,zero,a744 <_Balloc+0x60>
    a708:	8407883a 	add	r3,r16,r16
    a70c:	18c7883a 	add	r3,r3,r3
    a710:	10c7883a 	add	r3,r2,r3
    a714:	18800017 	ldw	r2,0(r3)
    a718:	10001126 	beq	r2,zero,a760 <_Balloc+0x7c>
    a71c:	11000017 	ldw	r4,0(r2)
    a720:	19000015 	stw	r4,0(r3)
    a724:	10000415 	stw	zero,16(r2)
    a728:	10000315 	stw	zero,12(r2)
    a72c:	dfc00317 	ldw	ra,12(sp)
    a730:	dc800217 	ldw	r18,8(sp)
    a734:	dc400117 	ldw	r17,4(sp)
    a738:	dc000017 	ldw	r16,0(sp)
    a73c:	dec00404 	addi	sp,sp,16
    a740:	f800283a 	ret
    a744:	01800844 	movi	r6,33
    a748:	01400104 	movi	r5,4
    a74c:	000e9d80 	call	e9d8 <_calloc_r>
    a750:	88801315 	stw	r2,76(r17)
    a754:	103fec1e 	bne	r2,zero,a708 <_Balloc+0x24>
    a758:	0005883a 	mov	r2,zero
    a75c:	003ff306 	br	a72c <_Balloc+0x48>
    a760:	01400044 	movi	r5,1
    a764:	2c24983a 	sll	r18,r5,r16
    a768:	8809883a 	mov	r4,r17
    a76c:	91800144 	addi	r6,r18,5
    a770:	318d883a 	add	r6,r6,r6
    a774:	318d883a 	add	r6,r6,r6
    a778:	000e9d80 	call	e9d8 <_calloc_r>
    a77c:	103ff626 	beq	r2,zero,a758 <_Balloc+0x74>
    a780:	14000115 	stw	r16,4(r2)
    a784:	14800215 	stw	r18,8(r2)
    a788:	003fe606 	br	a724 <_Balloc+0x40>

0000a78c <_Bfree>:
    a78c:	28000826 	beq	r5,zero,a7b0 <_Bfree+0x24>
    a790:	28c00117 	ldw	r3,4(r5)
    a794:	20801317 	ldw	r2,76(r4)
    a798:	18c7883a 	add	r3,r3,r3
    a79c:	18c7883a 	add	r3,r3,r3
    a7a0:	10c5883a 	add	r2,r2,r3
    a7a4:	10c00017 	ldw	r3,0(r2)
    a7a8:	28c00015 	stw	r3,0(r5)
    a7ac:	11400015 	stw	r5,0(r2)
    a7b0:	f800283a 	ret

0000a7b4 <__multadd>:
    a7b4:	defffa04 	addi	sp,sp,-24
    a7b8:	dc800315 	stw	r18,12(sp)
    a7bc:	dc400215 	stw	r17,8(sp)
    a7c0:	dc000115 	stw	r16,4(sp)
    a7c4:	2823883a 	mov	r17,r5
    a7c8:	2c000417 	ldw	r16,16(r5)
    a7cc:	dfc00515 	stw	ra,20(sp)
    a7d0:	dcc00415 	stw	r19,16(sp)
    a7d4:	2025883a 	mov	r18,r4
    a7d8:	29400504 	addi	r5,r5,20
    a7dc:	0011883a 	mov	r8,zero
    a7e0:	28c00017 	ldw	r3,0(r5)
    a7e4:	29400104 	addi	r5,r5,4
    a7e8:	42000044 	addi	r8,r8,1
    a7ec:	18bfffcc 	andi	r2,r3,65535
    a7f0:	1185383a 	mul	r2,r2,r6
    a7f4:	1806d43a 	srli	r3,r3,16
    a7f8:	11cf883a 	add	r7,r2,r7
    a7fc:	3808d43a 	srli	r4,r7,16
    a800:	1987383a 	mul	r3,r3,r6
    a804:	38bfffcc 	andi	r2,r7,65535
    a808:	1907883a 	add	r3,r3,r4
    a80c:	1808943a 	slli	r4,r3,16
    a810:	180ed43a 	srli	r7,r3,16
    a814:	2085883a 	add	r2,r4,r2
    a818:	28bfff15 	stw	r2,-4(r5)
    a81c:	443ff016 	blt	r8,r16,a7e0 <__multadd+0x2c>
    a820:	38000926 	beq	r7,zero,a848 <__multadd+0x94>
    a824:	88800217 	ldw	r2,8(r17)
    a828:	80800f0e 	bge	r16,r2,a868 <__multadd+0xb4>
    a82c:	80800144 	addi	r2,r16,5
    a830:	1085883a 	add	r2,r2,r2
    a834:	1085883a 	add	r2,r2,r2
    a838:	8885883a 	add	r2,r17,r2
    a83c:	11c00015 	stw	r7,0(r2)
    a840:	84000044 	addi	r16,r16,1
    a844:	8c000415 	stw	r16,16(r17)
    a848:	8805883a 	mov	r2,r17
    a84c:	dfc00517 	ldw	ra,20(sp)
    a850:	dcc00417 	ldw	r19,16(sp)
    a854:	dc800317 	ldw	r18,12(sp)
    a858:	dc400217 	ldw	r17,8(sp)
    a85c:	dc000117 	ldw	r16,4(sp)
    a860:	dec00604 	addi	sp,sp,24
    a864:	f800283a 	ret
    a868:	89400117 	ldw	r5,4(r17)
    a86c:	9009883a 	mov	r4,r18
    a870:	d9c00015 	stw	r7,0(sp)
    a874:	29400044 	addi	r5,r5,1
    a878:	000a6e40 	call	a6e4 <_Balloc>
    a87c:	89800417 	ldw	r6,16(r17)
    a880:	89400304 	addi	r5,r17,12
    a884:	11000304 	addi	r4,r2,12
    a888:	31800084 	addi	r6,r6,2
    a88c:	318d883a 	add	r6,r6,r6
    a890:	318d883a 	add	r6,r6,r6
    a894:	1027883a 	mov	r19,r2
    a898:	000a3180 	call	a318 <memcpy>
    a89c:	d9c00017 	ldw	r7,0(sp)
    a8a0:	88000a26 	beq	r17,zero,a8cc <__multadd+0x118>
    a8a4:	88c00117 	ldw	r3,4(r17)
    a8a8:	90801317 	ldw	r2,76(r18)
    a8ac:	18c7883a 	add	r3,r3,r3
    a8b0:	18c7883a 	add	r3,r3,r3
    a8b4:	10c5883a 	add	r2,r2,r3
    a8b8:	10c00017 	ldw	r3,0(r2)
    a8bc:	88c00015 	stw	r3,0(r17)
    a8c0:	14400015 	stw	r17,0(r2)
    a8c4:	9823883a 	mov	r17,r19
    a8c8:	003fd806 	br	a82c <__multadd+0x78>
    a8cc:	9823883a 	mov	r17,r19
    a8d0:	003fd606 	br	a82c <__multadd+0x78>

0000a8d4 <__s2b>:
    a8d4:	defff904 	addi	sp,sp,-28
    a8d8:	dc400115 	stw	r17,4(sp)
    a8dc:	dc000015 	stw	r16,0(sp)
    a8e0:	2023883a 	mov	r17,r4
    a8e4:	2821883a 	mov	r16,r5
    a8e8:	39000204 	addi	r4,r7,8
    a8ec:	01400244 	movi	r5,9
    a8f0:	dcc00315 	stw	r19,12(sp)
    a8f4:	dc800215 	stw	r18,8(sp)
    a8f8:	dfc00615 	stw	ra,24(sp)
    a8fc:	dd400515 	stw	r21,20(sp)
    a900:	dd000415 	stw	r20,16(sp)
    a904:	3825883a 	mov	r18,r7
    a908:	3027883a 	mov	r19,r6
    a90c:	000fd080 	call	fd08 <__divsi3>
    a910:	00c00044 	movi	r3,1
    a914:	000b883a 	mov	r5,zero
    a918:	1880030e 	bge	r3,r2,a928 <__s2b+0x54>
    a91c:	18c7883a 	add	r3,r3,r3
    a920:	29400044 	addi	r5,r5,1
    a924:	18bffd16 	blt	r3,r2,a91c <__s2b+0x48>
    a928:	8809883a 	mov	r4,r17
    a92c:	000a6e40 	call	a6e4 <_Balloc>
    a930:	d8c00717 	ldw	r3,28(sp)
    a934:	10c00515 	stw	r3,20(r2)
    a938:	00c00044 	movi	r3,1
    a93c:	10c00415 	stw	r3,16(r2)
    a940:	00c00244 	movi	r3,9
    a944:	1cc0210e 	bge	r3,r19,a9cc <__s2b+0xf8>
    a948:	80eb883a 	add	r21,r16,r3
    a94c:	a829883a 	mov	r20,r21
    a950:	84e1883a 	add	r16,r16,r19
    a954:	a1c00007 	ldb	r7,0(r20)
    a958:	01800284 	movi	r6,10
    a95c:	a5000044 	addi	r20,r20,1
    a960:	100b883a 	mov	r5,r2
    a964:	39fff404 	addi	r7,r7,-48
    a968:	8809883a 	mov	r4,r17
    a96c:	000a7b40 	call	a7b4 <__multadd>
    a970:	a43ff81e 	bne	r20,r16,a954 <__s2b+0x80>
    a974:	ace1883a 	add	r16,r21,r19
    a978:	843ffe04 	addi	r16,r16,-8
    a97c:	9c800a0e 	bge	r19,r18,a9a8 <__s2b+0xd4>
    a980:	94e5c83a 	sub	r18,r18,r19
    a984:	84a5883a 	add	r18,r16,r18
    a988:	81c00007 	ldb	r7,0(r16)
    a98c:	01800284 	movi	r6,10
    a990:	84000044 	addi	r16,r16,1
    a994:	100b883a 	mov	r5,r2
    a998:	39fff404 	addi	r7,r7,-48
    a99c:	8809883a 	mov	r4,r17
    a9a0:	000a7b40 	call	a7b4 <__multadd>
    a9a4:	84bff81e 	bne	r16,r18,a988 <__s2b+0xb4>
    a9a8:	dfc00617 	ldw	ra,24(sp)
    a9ac:	dd400517 	ldw	r21,20(sp)
    a9b0:	dd000417 	ldw	r20,16(sp)
    a9b4:	dcc00317 	ldw	r19,12(sp)
    a9b8:	dc800217 	ldw	r18,8(sp)
    a9bc:	dc400117 	ldw	r17,4(sp)
    a9c0:	dc000017 	ldw	r16,0(sp)
    a9c4:	dec00704 	addi	sp,sp,28
    a9c8:	f800283a 	ret
    a9cc:	84000284 	addi	r16,r16,10
    a9d0:	1827883a 	mov	r19,r3
    a9d4:	003fe906 	br	a97c <__s2b+0xa8>

0000a9d8 <__hi0bits>:
    a9d8:	20bfffec 	andhi	r2,r4,65535
    a9dc:	1000141e 	bne	r2,zero,aa30 <__hi0bits+0x58>
    a9e0:	2008943a 	slli	r4,r4,16
    a9e4:	00800404 	movi	r2,16
    a9e8:	20ffc02c 	andhi	r3,r4,65280
    a9ec:	1800021e 	bne	r3,zero,a9f8 <__hi0bits+0x20>
    a9f0:	2008923a 	slli	r4,r4,8
    a9f4:	10800204 	addi	r2,r2,8
    a9f8:	20fc002c 	andhi	r3,r4,61440
    a9fc:	1800021e 	bne	r3,zero,aa08 <__hi0bits+0x30>
    aa00:	2008913a 	slli	r4,r4,4
    aa04:	10800104 	addi	r2,r2,4
    aa08:	20f0002c 	andhi	r3,r4,49152
    aa0c:	1800031e 	bne	r3,zero,aa1c <__hi0bits+0x44>
    aa10:	2109883a 	add	r4,r4,r4
    aa14:	10800084 	addi	r2,r2,2
    aa18:	2109883a 	add	r4,r4,r4
    aa1c:	20000316 	blt	r4,zero,aa2c <__hi0bits+0x54>
    aa20:	2110002c 	andhi	r4,r4,16384
    aa24:	2000041e 	bne	r4,zero,aa38 <__hi0bits+0x60>
    aa28:	00800804 	movi	r2,32
    aa2c:	f800283a 	ret
    aa30:	0005883a 	mov	r2,zero
    aa34:	003fec06 	br	a9e8 <__hi0bits+0x10>
    aa38:	10800044 	addi	r2,r2,1
    aa3c:	f800283a 	ret

0000aa40 <__lo0bits>:
    aa40:	20c00017 	ldw	r3,0(r4)
    aa44:	188001cc 	andi	r2,r3,7
    aa48:	10000826 	beq	r2,zero,aa6c <__lo0bits+0x2c>
    aa4c:	1880004c 	andi	r2,r3,1
    aa50:	1000211e 	bne	r2,zero,aad8 <__lo0bits+0x98>
    aa54:	1880008c 	andi	r2,r3,2
    aa58:	1000211e 	bne	r2,zero,aae0 <__lo0bits+0xa0>
    aa5c:	1806d0ba 	srli	r3,r3,2
    aa60:	00800084 	movi	r2,2
    aa64:	20c00015 	stw	r3,0(r4)
    aa68:	f800283a 	ret
    aa6c:	18bfffcc 	andi	r2,r3,65535
    aa70:	10001326 	beq	r2,zero,aac0 <__lo0bits+0x80>
    aa74:	0005883a 	mov	r2,zero
    aa78:	19403fcc 	andi	r5,r3,255
    aa7c:	2800021e 	bne	r5,zero,aa88 <__lo0bits+0x48>
    aa80:	1806d23a 	srli	r3,r3,8
    aa84:	10800204 	addi	r2,r2,8
    aa88:	194003cc 	andi	r5,r3,15
    aa8c:	2800021e 	bne	r5,zero,aa98 <__lo0bits+0x58>
    aa90:	1806d13a 	srli	r3,r3,4
    aa94:	10800104 	addi	r2,r2,4
    aa98:	194000cc 	andi	r5,r3,3
    aa9c:	2800021e 	bne	r5,zero,aaa8 <__lo0bits+0x68>
    aaa0:	1806d0ba 	srli	r3,r3,2
    aaa4:	10800084 	addi	r2,r2,2
    aaa8:	1940004c 	andi	r5,r3,1
    aaac:	2800081e 	bne	r5,zero,aad0 <__lo0bits+0x90>
    aab0:	1806d07a 	srli	r3,r3,1
    aab4:	1800051e 	bne	r3,zero,aacc <__lo0bits+0x8c>
    aab8:	00800804 	movi	r2,32
    aabc:	f800283a 	ret
    aac0:	1806d43a 	srli	r3,r3,16
    aac4:	00800404 	movi	r2,16
    aac8:	003feb06 	br	aa78 <__lo0bits+0x38>
    aacc:	10800044 	addi	r2,r2,1
    aad0:	20c00015 	stw	r3,0(r4)
    aad4:	f800283a 	ret
    aad8:	0005883a 	mov	r2,zero
    aadc:	f800283a 	ret
    aae0:	1806d07a 	srli	r3,r3,1
    aae4:	00800044 	movi	r2,1
    aae8:	20c00015 	stw	r3,0(r4)
    aaec:	f800283a 	ret

0000aaf0 <__i2b>:
    aaf0:	defffd04 	addi	sp,sp,-12
    aaf4:	dc000015 	stw	r16,0(sp)
    aaf8:	04000044 	movi	r16,1
    aafc:	dc400115 	stw	r17,4(sp)
    ab00:	2823883a 	mov	r17,r5
    ab04:	800b883a 	mov	r5,r16
    ab08:	dfc00215 	stw	ra,8(sp)
    ab0c:	000a6e40 	call	a6e4 <_Balloc>
    ab10:	14400515 	stw	r17,20(r2)
    ab14:	14000415 	stw	r16,16(r2)
    ab18:	dfc00217 	ldw	ra,8(sp)
    ab1c:	dc400117 	ldw	r17,4(sp)
    ab20:	dc000017 	ldw	r16,0(sp)
    ab24:	dec00304 	addi	sp,sp,12
    ab28:	f800283a 	ret

0000ab2c <__multiply>:
    ab2c:	defffa04 	addi	sp,sp,-24
    ab30:	dcc00315 	stw	r19,12(sp)
    ab34:	dc800215 	stw	r18,8(sp)
    ab38:	34c00417 	ldw	r19,16(r6)
    ab3c:	2c800417 	ldw	r18,16(r5)
    ab40:	dd000415 	stw	r20,16(sp)
    ab44:	dc400115 	stw	r17,4(sp)
    ab48:	dfc00515 	stw	ra,20(sp)
    ab4c:	dc000015 	stw	r16,0(sp)
    ab50:	2829883a 	mov	r20,r5
    ab54:	3023883a 	mov	r17,r6
    ab58:	94c0050e 	bge	r18,r19,ab70 <__multiply+0x44>
    ab5c:	9007883a 	mov	r3,r18
    ab60:	3029883a 	mov	r20,r6
    ab64:	9825883a 	mov	r18,r19
    ab68:	2823883a 	mov	r17,r5
    ab6c:	1827883a 	mov	r19,r3
    ab70:	a0800217 	ldw	r2,8(r20)
    ab74:	94e1883a 	add	r16,r18,r19
    ab78:	a1400117 	ldw	r5,4(r20)
    ab7c:	1400010e 	bge	r2,r16,ab84 <__multiply+0x58>
    ab80:	29400044 	addi	r5,r5,1
    ab84:	000a6e40 	call	a6e4 <_Balloc>
    ab88:	8415883a 	add	r10,r16,r16
    ab8c:	12c00504 	addi	r11,r2,20
    ab90:	5295883a 	add	r10,r10,r10
    ab94:	5a95883a 	add	r10,r11,r10
    ab98:	5807883a 	mov	r3,r11
    ab9c:	5a80032e 	bgeu	r11,r10,abac <__multiply+0x80>
    aba0:	18000015 	stw	zero,0(r3)
    aba4:	18c00104 	addi	r3,r3,4
    aba8:	1abffd36 	bltu	r3,r10,aba0 <__multiply+0x74>
    abac:	9ce7883a 	add	r19,r19,r19
    abb0:	94a5883a 	add	r18,r18,r18
    abb4:	89800504 	addi	r6,r17,20
    abb8:	9ce7883a 	add	r19,r19,r19
    abbc:	a3400504 	addi	r13,r20,20
    abc0:	94a5883a 	add	r18,r18,r18
    abc4:	34d9883a 	add	r12,r6,r19
    abc8:	6c93883a 	add	r9,r13,r18
    abcc:	3300422e 	bgeu	r6,r12,acd8 <__multiply+0x1ac>
    abd0:	37c00017 	ldw	ra,0(r6)
    abd4:	fbffffcc 	andi	r15,ra,65535
    abd8:	78001b26 	beq	r15,zero,ac48 <__multiply+0x11c>
    abdc:	5811883a 	mov	r8,r11
    abe0:	681d883a 	mov	r14,r13
    abe4:	000f883a 	mov	r7,zero
    abe8:	71000017 	ldw	r4,0(r14)
    abec:	40c00017 	ldw	r3,0(r8)
    abf0:	73800104 	addi	r14,r14,4
    abf4:	217fffcc 	andi	r5,r4,65535
    abf8:	2bcb383a 	mul	r5,r5,r15
    abfc:	2008d43a 	srli	r4,r4,16
    ac00:	1c7fffcc 	andi	r17,r3,65535
    ac04:	2c4b883a 	add	r5,r5,r17
    ac08:	29cb883a 	add	r5,r5,r7
    ac0c:	23c9383a 	mul	r4,r4,r15
    ac10:	1806d43a 	srli	r3,r3,16
    ac14:	280ed43a 	srli	r7,r5,16
    ac18:	297fffcc 	andi	r5,r5,65535
    ac1c:	20c7883a 	add	r3,r4,r3
    ac20:	19c7883a 	add	r3,r3,r7
    ac24:	1808943a 	slli	r4,r3,16
    ac28:	4023883a 	mov	r17,r8
    ac2c:	180ed43a 	srli	r7,r3,16
    ac30:	214ab03a 	or	r5,r4,r5
    ac34:	41400015 	stw	r5,0(r8)
    ac38:	42000104 	addi	r8,r8,4
    ac3c:	727fea36 	bltu	r14,r9,abe8 <__multiply+0xbc>
    ac40:	89c00115 	stw	r7,4(r17)
    ac44:	37c00017 	ldw	ra,0(r6)
    ac48:	f83ed43a 	srli	ra,ra,16
    ac4c:	f8001f26 	beq	ra,zero,accc <__multiply+0x1a0>
    ac50:	58c00017 	ldw	r3,0(r11)
    ac54:	681d883a 	mov	r14,r13
    ac58:	581f883a 	mov	r15,r11
    ac5c:	1811883a 	mov	r8,r3
    ac60:	5825883a 	mov	r18,r11
    ac64:	000f883a 	mov	r7,zero
    ac68:	00000106 	br	ac70 <__multiply+0x144>
    ac6c:	8825883a 	mov	r18,r17
    ac70:	7140000b 	ldhu	r5,0(r14)
    ac74:	4010d43a 	srli	r8,r8,16
    ac78:	193fffcc 	andi	r4,r3,65535
    ac7c:	2fcb383a 	mul	r5,r5,ra
    ac80:	7bc00104 	addi	r15,r15,4
    ac84:	73800104 	addi	r14,r14,4
    ac88:	2a0b883a 	add	r5,r5,r8
    ac8c:	29cb883a 	add	r5,r5,r7
    ac90:	2806943a 	slli	r3,r5,16
    ac94:	94400104 	addi	r17,r18,4
    ac98:	280ad43a 	srli	r5,r5,16
    ac9c:	1908b03a 	or	r4,r3,r4
    aca0:	793fff15 	stw	r4,-4(r15)
    aca4:	70ffff17 	ldw	r3,-4(r14)
    aca8:	8a000017 	ldw	r8,0(r17)
    acac:	1806d43a 	srli	r3,r3,16
    acb0:	413fffcc 	andi	r4,r8,65535
    acb4:	1fc7383a 	mul	r3,r3,ra
    acb8:	1907883a 	add	r3,r3,r4
    acbc:	1947883a 	add	r3,r3,r5
    acc0:	180ed43a 	srli	r7,r3,16
    acc4:	727fe936 	bltu	r14,r9,ac6c <__multiply+0x140>
    acc8:	90c00115 	stw	r3,4(r18)
    accc:	31800104 	addi	r6,r6,4
    acd0:	5ac00104 	addi	r11,r11,4
    acd4:	333fbe36 	bltu	r6,r12,abd0 <__multiply+0xa4>
    acd8:	0400090e 	bge	zero,r16,ad00 <__multiply+0x1d4>
    acdc:	50ffff17 	ldw	r3,-4(r10)
    ace0:	52bfff04 	addi	r10,r10,-4
    ace4:	18000326 	beq	r3,zero,acf4 <__multiply+0x1c8>
    ace8:	00000506 	br	ad00 <__multiply+0x1d4>
    acec:	50c00017 	ldw	r3,0(r10)
    acf0:	1800031e 	bne	r3,zero,ad00 <__multiply+0x1d4>
    acf4:	843fffc4 	addi	r16,r16,-1
    acf8:	52bfff04 	addi	r10,r10,-4
    acfc:	803ffb1e 	bne	r16,zero,acec <__multiply+0x1c0>
    ad00:	14000415 	stw	r16,16(r2)
    ad04:	dfc00517 	ldw	ra,20(sp)
    ad08:	dd000417 	ldw	r20,16(sp)
    ad0c:	dcc00317 	ldw	r19,12(sp)
    ad10:	dc800217 	ldw	r18,8(sp)
    ad14:	dc400117 	ldw	r17,4(sp)
    ad18:	dc000017 	ldw	r16,0(sp)
    ad1c:	dec00604 	addi	sp,sp,24
    ad20:	f800283a 	ret

0000ad24 <__pow5mult>:
    ad24:	defffa04 	addi	sp,sp,-24
    ad28:	dcc00315 	stw	r19,12(sp)
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	dfc00515 	stw	ra,20(sp)
    ad34:	dd000415 	stw	r20,16(sp)
    ad38:	dc800215 	stw	r18,8(sp)
    ad3c:	dc400115 	stw	r17,4(sp)
    ad40:	308000cc 	andi	r2,r6,3
    ad44:	3021883a 	mov	r16,r6
    ad48:	2027883a 	mov	r19,r4
    ad4c:	10002f1e 	bne	r2,zero,ae0c <__pow5mult+0xe8>
    ad50:	2825883a 	mov	r18,r5
    ad54:	8021d0ba 	srai	r16,r16,2
    ad58:	80001a26 	beq	r16,zero,adc4 <__pow5mult+0xa0>
    ad5c:	9c401217 	ldw	r17,72(r19)
    ad60:	8800061e 	bne	r17,zero,ad7c <__pow5mult+0x58>
    ad64:	00003406 	br	ae38 <__pow5mult+0x114>
    ad68:	8021d07a 	srai	r16,r16,1
    ad6c:	80001526 	beq	r16,zero,adc4 <__pow5mult+0xa0>
    ad70:	88800017 	ldw	r2,0(r17)
    ad74:	10001c26 	beq	r2,zero,ade8 <__pow5mult+0xc4>
    ad78:	1023883a 	mov	r17,r2
    ad7c:	8080004c 	andi	r2,r16,1
    ad80:	103ff926 	beq	r2,zero,ad68 <__pow5mult+0x44>
    ad84:	880d883a 	mov	r6,r17
    ad88:	900b883a 	mov	r5,r18
    ad8c:	9809883a 	mov	r4,r19
    ad90:	000ab2c0 	call	ab2c <__multiply>
    ad94:	90001b26 	beq	r18,zero,ae04 <__pow5mult+0xe0>
    ad98:	91000117 	ldw	r4,4(r18)
    ad9c:	98c01317 	ldw	r3,76(r19)
    ada0:	8021d07a 	srai	r16,r16,1
    ada4:	2109883a 	add	r4,r4,r4
    ada8:	2109883a 	add	r4,r4,r4
    adac:	1907883a 	add	r3,r3,r4
    adb0:	19000017 	ldw	r4,0(r3)
    adb4:	91000015 	stw	r4,0(r18)
    adb8:	1c800015 	stw	r18,0(r3)
    adbc:	1025883a 	mov	r18,r2
    adc0:	803feb1e 	bne	r16,zero,ad70 <__pow5mult+0x4c>
    adc4:	9005883a 	mov	r2,r18
    adc8:	dfc00517 	ldw	ra,20(sp)
    adcc:	dd000417 	ldw	r20,16(sp)
    add0:	dcc00317 	ldw	r19,12(sp)
    add4:	dc800217 	ldw	r18,8(sp)
    add8:	dc400117 	ldw	r17,4(sp)
    addc:	dc000017 	ldw	r16,0(sp)
    ade0:	dec00604 	addi	sp,sp,24
    ade4:	f800283a 	ret
    ade8:	880d883a 	mov	r6,r17
    adec:	880b883a 	mov	r5,r17
    adf0:	9809883a 	mov	r4,r19
    adf4:	000ab2c0 	call	ab2c <__multiply>
    adf8:	88800015 	stw	r2,0(r17)
    adfc:	10000015 	stw	zero,0(r2)
    ae00:	003fdd06 	br	ad78 <__pow5mult+0x54>
    ae04:	1025883a 	mov	r18,r2
    ae08:	003fd706 	br	ad68 <__pow5mult+0x44>
    ae0c:	10bfffc4 	addi	r2,r2,-1
    ae10:	1085883a 	add	r2,r2,r2
    ae14:	00c000b4 	movhi	r3,2
    ae18:	18d1a704 	addi	r3,r3,18076
    ae1c:	1085883a 	add	r2,r2,r2
    ae20:	1885883a 	add	r2,r3,r2
    ae24:	11800017 	ldw	r6,0(r2)
    ae28:	000f883a 	mov	r7,zero
    ae2c:	000a7b40 	call	a7b4 <__multadd>
    ae30:	1025883a 	mov	r18,r2
    ae34:	003fc706 	br	ad54 <__pow5mult+0x30>
    ae38:	05000044 	movi	r20,1
    ae3c:	a00b883a 	mov	r5,r20
    ae40:	9809883a 	mov	r4,r19
    ae44:	000a6e40 	call	a6e4 <_Balloc>
    ae48:	1023883a 	mov	r17,r2
    ae4c:	00809c44 	movi	r2,625
    ae50:	88800515 	stw	r2,20(r17)
    ae54:	8d000415 	stw	r20,16(r17)
    ae58:	9c401215 	stw	r17,72(r19)
    ae5c:	88000015 	stw	zero,0(r17)
    ae60:	003fc606 	br	ad7c <__pow5mult+0x58>

0000ae64 <__lshift>:
    ae64:	defff904 	addi	sp,sp,-28
    ae68:	dd400515 	stw	r21,20(sp)
    ae6c:	dcc00315 	stw	r19,12(sp)
    ae70:	302bd17a 	srai	r21,r6,5
    ae74:	2cc00417 	ldw	r19,16(r5)
    ae78:	28800217 	ldw	r2,8(r5)
    ae7c:	dd000415 	stw	r20,16(sp)
    ae80:	ace7883a 	add	r19,r21,r19
    ae84:	dc800215 	stw	r18,8(sp)
    ae88:	dc400115 	stw	r17,4(sp)
    ae8c:	dc000015 	stw	r16,0(sp)
    ae90:	dfc00615 	stw	ra,24(sp)
    ae94:	9c000044 	addi	r16,r19,1
    ae98:	2823883a 	mov	r17,r5
    ae9c:	3029883a 	mov	r20,r6
    aea0:	2025883a 	mov	r18,r4
    aea4:	29400117 	ldw	r5,4(r5)
    aea8:	1400030e 	bge	r2,r16,aeb8 <__lshift+0x54>
    aeac:	1085883a 	add	r2,r2,r2
    aeb0:	29400044 	addi	r5,r5,1
    aeb4:	143ffd16 	blt	r2,r16,aeac <__lshift+0x48>
    aeb8:	9009883a 	mov	r4,r18
    aebc:	000a6e40 	call	a6e4 <_Balloc>
    aec0:	10c00504 	addi	r3,r2,20
    aec4:	0540070e 	bge	zero,r21,aee4 <__lshift+0x80>
    aec8:	ad6b883a 	add	r21,r21,r21
    aecc:	ad6b883a 	add	r21,r21,r21
    aed0:	1809883a 	mov	r4,r3
    aed4:	1d47883a 	add	r3,r3,r21
    aed8:	20000015 	stw	zero,0(r4)
    aedc:	21000104 	addi	r4,r4,4
    aee0:	193ffd1e 	bne	r3,r4,aed8 <__lshift+0x74>
    aee4:	8a000417 	ldw	r8,16(r17)
    aee8:	89000504 	addi	r4,r17,20
    aeec:	a18007cc 	andi	r6,r20,31
    aef0:	4211883a 	add	r8,r8,r8
    aef4:	4211883a 	add	r8,r8,r8
    aef8:	2211883a 	add	r8,r4,r8
    aefc:	30002326 	beq	r6,zero,af8c <__lshift+0x128>
    af00:	02400804 	movi	r9,32
    af04:	4993c83a 	sub	r9,r9,r6
    af08:	000b883a 	mov	r5,zero
    af0c:	21c00017 	ldw	r7,0(r4)
    af10:	1815883a 	mov	r10,r3
    af14:	18c00104 	addi	r3,r3,4
    af18:	398e983a 	sll	r7,r7,r6
    af1c:	21000104 	addi	r4,r4,4
    af20:	394ab03a 	or	r5,r7,r5
    af24:	197fff15 	stw	r5,-4(r3)
    af28:	217fff17 	ldw	r5,-4(r4)
    af2c:	2a4ad83a 	srl	r5,r5,r9
    af30:	223ff636 	bltu	r4,r8,af0c <__lshift+0xa8>
    af34:	51400115 	stw	r5,4(r10)
    af38:	28001a1e 	bne	r5,zero,afa4 <__lshift+0x140>
    af3c:	843fffc4 	addi	r16,r16,-1
    af40:	14000415 	stw	r16,16(r2)
    af44:	88000826 	beq	r17,zero,af68 <__lshift+0x104>
    af48:	89000117 	ldw	r4,4(r17)
    af4c:	90c01317 	ldw	r3,76(r18)
    af50:	2109883a 	add	r4,r4,r4
    af54:	2109883a 	add	r4,r4,r4
    af58:	1907883a 	add	r3,r3,r4
    af5c:	19000017 	ldw	r4,0(r3)
    af60:	89000015 	stw	r4,0(r17)
    af64:	1c400015 	stw	r17,0(r3)
    af68:	dfc00617 	ldw	ra,24(sp)
    af6c:	dd400517 	ldw	r21,20(sp)
    af70:	dd000417 	ldw	r20,16(sp)
    af74:	dcc00317 	ldw	r19,12(sp)
    af78:	dc800217 	ldw	r18,8(sp)
    af7c:	dc400117 	ldw	r17,4(sp)
    af80:	dc000017 	ldw	r16,0(sp)
    af84:	dec00704 	addi	sp,sp,28
    af88:	f800283a 	ret
    af8c:	21400017 	ldw	r5,0(r4)
    af90:	18c00104 	addi	r3,r3,4
    af94:	21000104 	addi	r4,r4,4
    af98:	197fff15 	stw	r5,-4(r3)
    af9c:	223ffb36 	bltu	r4,r8,af8c <__lshift+0x128>
    afa0:	003fe606 	br	af3c <__lshift+0xd8>
    afa4:	9c000084 	addi	r16,r19,2
    afa8:	003fe406 	br	af3c <__lshift+0xd8>

0000afac <__mcmp>:
    afac:	20800417 	ldw	r2,16(r4)
    afb0:	28c00417 	ldw	r3,16(r5)
    afb4:	10c5c83a 	sub	r2,r2,r3
    afb8:	1000111e 	bne	r2,zero,b000 <__mcmp+0x54>
    afbc:	18c7883a 	add	r3,r3,r3
    afc0:	18c7883a 	add	r3,r3,r3
    afc4:	21000504 	addi	r4,r4,20
    afc8:	29400504 	addi	r5,r5,20
    afcc:	20c5883a 	add	r2,r4,r3
    afd0:	28cb883a 	add	r5,r5,r3
    afd4:	00000106 	br	afdc <__mcmp+0x30>
    afd8:	20800a2e 	bgeu	r4,r2,b004 <__mcmp+0x58>
    afdc:	10bfff04 	addi	r2,r2,-4
    afe0:	297fff04 	addi	r5,r5,-4
    afe4:	11800017 	ldw	r6,0(r2)
    afe8:	28c00017 	ldw	r3,0(r5)
    afec:	30fffa26 	beq	r6,r3,afd8 <__mcmp+0x2c>
    aff0:	30c00236 	bltu	r6,r3,affc <__mcmp+0x50>
    aff4:	00800044 	movi	r2,1
    aff8:	f800283a 	ret
    affc:	00bfffc4 	movi	r2,-1
    b000:	f800283a 	ret
    b004:	0005883a 	mov	r2,zero
    b008:	f800283a 	ret

0000b00c <__mdiff>:
    b00c:	28c00417 	ldw	r3,16(r5)
    b010:	30800417 	ldw	r2,16(r6)
    b014:	defffa04 	addi	sp,sp,-24
    b018:	dcc00315 	stw	r19,12(sp)
    b01c:	dc800215 	stw	r18,8(sp)
    b020:	dfc00515 	stw	ra,20(sp)
    b024:	dd000415 	stw	r20,16(sp)
    b028:	dc400115 	stw	r17,4(sp)
    b02c:	dc000015 	stw	r16,0(sp)
    b030:	1887c83a 	sub	r3,r3,r2
    b034:	2825883a 	mov	r18,r5
    b038:	3027883a 	mov	r19,r6
    b03c:	1800141e 	bne	r3,zero,b090 <__mdiff+0x84>
    b040:	1085883a 	add	r2,r2,r2
    b044:	1085883a 	add	r2,r2,r2
    b048:	2a000504 	addi	r8,r5,20
    b04c:	34000504 	addi	r16,r6,20
    b050:	4087883a 	add	r3,r8,r2
    b054:	8085883a 	add	r2,r16,r2
    b058:	00000106 	br	b060 <__mdiff+0x54>
    b05c:	40c0592e 	bgeu	r8,r3,b1c4 <__mdiff+0x1b8>
    b060:	18ffff04 	addi	r3,r3,-4
    b064:	10bfff04 	addi	r2,r2,-4
    b068:	19c00017 	ldw	r7,0(r3)
    b06c:	11400017 	ldw	r5,0(r2)
    b070:	397ffa26 	beq	r7,r5,b05c <__mdiff+0x50>
    b074:	3940592e 	bgeu	r7,r5,b1dc <__mdiff+0x1d0>
    b078:	9005883a 	mov	r2,r18
    b07c:	4023883a 	mov	r17,r8
    b080:	9825883a 	mov	r18,r19
    b084:	05000044 	movi	r20,1
    b088:	1027883a 	mov	r19,r2
    b08c:	00000406 	br	b0a0 <__mdiff+0x94>
    b090:	18005616 	blt	r3,zero,b1ec <__mdiff+0x1e0>
    b094:	34400504 	addi	r17,r6,20
    b098:	2c000504 	addi	r16,r5,20
    b09c:	0029883a 	mov	r20,zero
    b0a0:	91400117 	ldw	r5,4(r18)
    b0a4:	000a6e40 	call	a6e4 <_Balloc>
    b0a8:	92400417 	ldw	r9,16(r18)
    b0ac:	9b000417 	ldw	r12,16(r19)
    b0b0:	12c00504 	addi	r11,r2,20
    b0b4:	4a51883a 	add	r8,r9,r9
    b0b8:	6319883a 	add	r12,r12,r12
    b0bc:	4211883a 	add	r8,r8,r8
    b0c0:	6319883a 	add	r12,r12,r12
    b0c4:	15000315 	stw	r20,12(r2)
    b0c8:	8211883a 	add	r8,r16,r8
    b0cc:	8b19883a 	add	r12,r17,r12
    b0d0:	0007883a 	mov	r3,zero
    b0d4:	81400017 	ldw	r5,0(r16)
    b0d8:	89c00017 	ldw	r7,0(r17)
    b0dc:	59800104 	addi	r6,r11,4
    b0e0:	293fffcc 	andi	r4,r5,65535
    b0e4:	20c7883a 	add	r3,r4,r3
    b0e8:	393fffcc 	andi	r4,r7,65535
    b0ec:	1909c83a 	sub	r4,r3,r4
    b0f0:	280ad43a 	srli	r5,r5,16
    b0f4:	380ed43a 	srli	r7,r7,16
    b0f8:	2007d43a 	srai	r3,r4,16
    b0fc:	213fffcc 	andi	r4,r4,65535
    b100:	29cbc83a 	sub	r5,r5,r7
    b104:	28c7883a 	add	r3,r5,r3
    b108:	180a943a 	slli	r5,r3,16
    b10c:	8c400104 	addi	r17,r17,4
    b110:	84000104 	addi	r16,r16,4
    b114:	2908b03a 	or	r4,r5,r4
    b118:	59000015 	stw	r4,0(r11)
    b11c:	1807d43a 	srai	r3,r3,16
    b120:	3015883a 	mov	r10,r6
    b124:	3017883a 	mov	r11,r6
    b128:	8b3fea36 	bltu	r17,r12,b0d4 <__mdiff+0xc8>
    b12c:	8200162e 	bgeu	r16,r8,b188 <__mdiff+0x17c>
    b130:	8017883a 	mov	r11,r16
    b134:	59400017 	ldw	r5,0(r11)
    b138:	31800104 	addi	r6,r6,4
    b13c:	5ac00104 	addi	r11,r11,4
    b140:	293fffcc 	andi	r4,r5,65535
    b144:	20c7883a 	add	r3,r4,r3
    b148:	280ed43a 	srli	r7,r5,16
    b14c:	180bd43a 	srai	r5,r3,16
    b150:	193fffcc 	andi	r4,r3,65535
    b154:	3947883a 	add	r3,r7,r5
    b158:	180a943a 	slli	r5,r3,16
    b15c:	1807d43a 	srai	r3,r3,16
    b160:	2908b03a 	or	r4,r5,r4
    b164:	313fff15 	stw	r4,-4(r6)
    b168:	5a3ff236 	bltu	r11,r8,b134 <__mdiff+0x128>
    b16c:	0406303a 	nor	r3,zero,r16
    b170:	1a07883a 	add	r3,r3,r8
    b174:	1806d0ba 	srli	r3,r3,2
    b178:	18c00044 	addi	r3,r3,1
    b17c:	18c7883a 	add	r3,r3,r3
    b180:	18c7883a 	add	r3,r3,r3
    b184:	50d5883a 	add	r10,r10,r3
    b188:	50ffff04 	addi	r3,r10,-4
    b18c:	2000041e 	bne	r4,zero,b1a0 <__mdiff+0x194>
    b190:	18ffff04 	addi	r3,r3,-4
    b194:	19000017 	ldw	r4,0(r3)
    b198:	4a7fffc4 	addi	r9,r9,-1
    b19c:	203ffc26 	beq	r4,zero,b190 <__mdiff+0x184>
    b1a0:	12400415 	stw	r9,16(r2)
    b1a4:	dfc00517 	ldw	ra,20(sp)
    b1a8:	dd000417 	ldw	r20,16(sp)
    b1ac:	dcc00317 	ldw	r19,12(sp)
    b1b0:	dc800217 	ldw	r18,8(sp)
    b1b4:	dc400117 	ldw	r17,4(sp)
    b1b8:	dc000017 	ldw	r16,0(sp)
    b1bc:	dec00604 	addi	sp,sp,24
    b1c0:	f800283a 	ret
    b1c4:	000b883a 	mov	r5,zero
    b1c8:	000a6e40 	call	a6e4 <_Balloc>
    b1cc:	00c00044 	movi	r3,1
    b1d0:	10c00415 	stw	r3,16(r2)
    b1d4:	10000515 	stw	zero,20(r2)
    b1d8:	003ff206 	br	b1a4 <__mdiff+0x198>
    b1dc:	8023883a 	mov	r17,r16
    b1e0:	0029883a 	mov	r20,zero
    b1e4:	4021883a 	mov	r16,r8
    b1e8:	003fad06 	br	b0a0 <__mdiff+0x94>
    b1ec:	9005883a 	mov	r2,r18
    b1f0:	94400504 	addi	r17,r18,20
    b1f4:	9c000504 	addi	r16,r19,20
    b1f8:	9825883a 	mov	r18,r19
    b1fc:	05000044 	movi	r20,1
    b200:	1027883a 	mov	r19,r2
    b204:	003fa606 	br	b0a0 <__mdiff+0x94>

0000b208 <__ulp>:
    b208:	295ffc2c 	andhi	r5,r5,32752
    b20c:	00bf3034 	movhi	r2,64704
    b210:	2887883a 	add	r3,r5,r2
    b214:	00c0020e 	bge	zero,r3,b220 <__ulp+0x18>
    b218:	0005883a 	mov	r2,zero
    b21c:	f800283a 	ret
    b220:	00c7c83a 	sub	r3,zero,r3
    b224:	1807d53a 	srai	r3,r3,20
    b228:	008004c4 	movi	r2,19
    b22c:	10c00b0e 	bge	r2,r3,b25c <__ulp+0x54>
    b230:	18bffb04 	addi	r2,r3,-20
    b234:	01000784 	movi	r4,30
    b238:	0007883a 	mov	r3,zero
    b23c:	20800516 	blt	r4,r2,b254 <__ulp+0x4c>
    b240:	010007c4 	movi	r4,31
    b244:	2089c83a 	sub	r4,r4,r2
    b248:	00800044 	movi	r2,1
    b24c:	1104983a 	sll	r2,r2,r4
    b250:	f800283a 	ret
    b254:	00800044 	movi	r2,1
    b258:	f800283a 	ret
    b25c:	01400234 	movhi	r5,8
    b260:	28c7d83a 	sra	r3,r5,r3
    b264:	0005883a 	mov	r2,zero
    b268:	f800283a 	ret

0000b26c <__b2d>:
    b26c:	defffa04 	addi	sp,sp,-24
    b270:	dc000015 	stw	r16,0(sp)
    b274:	24000417 	ldw	r16,16(r4)
    b278:	dc400115 	stw	r17,4(sp)
    b27c:	24400504 	addi	r17,r4,20
    b280:	8421883a 	add	r16,r16,r16
    b284:	8421883a 	add	r16,r16,r16
    b288:	8c21883a 	add	r16,r17,r16
    b28c:	dc800215 	stw	r18,8(sp)
    b290:	84bfff17 	ldw	r18,-4(r16)
    b294:	dd000415 	stw	r20,16(sp)
    b298:	dcc00315 	stw	r19,12(sp)
    b29c:	9009883a 	mov	r4,r18
    b2a0:	2829883a 	mov	r20,r5
    b2a4:	dfc00515 	stw	ra,20(sp)
    b2a8:	000a9d80 	call	a9d8 <__hi0bits>
    b2ac:	00c00804 	movi	r3,32
    b2b0:	1889c83a 	sub	r4,r3,r2
    b2b4:	a1000015 	stw	r4,0(r20)
    b2b8:	01000284 	movi	r4,10
    b2bc:	84ffff04 	addi	r19,r16,-4
    b2c0:	20801216 	blt	r4,r2,b30c <__b2d+0xa0>
    b2c4:	018002c4 	movi	r6,11
    b2c8:	308dc83a 	sub	r6,r6,r2
    b2cc:	9186d83a 	srl	r3,r18,r6
    b2d0:	18cffc34 	orhi	r3,r3,16368
    b2d4:	8cc0212e 	bgeu	r17,r19,b35c <__b2d+0xf0>
    b2d8:	813ffe17 	ldw	r4,-8(r16)
    b2dc:	218cd83a 	srl	r6,r4,r6
    b2e0:	10800544 	addi	r2,r2,21
    b2e4:	9084983a 	sll	r2,r18,r2
    b2e8:	1184b03a 	or	r2,r2,r6
    b2ec:	dfc00517 	ldw	ra,20(sp)
    b2f0:	dd000417 	ldw	r20,16(sp)
    b2f4:	dcc00317 	ldw	r19,12(sp)
    b2f8:	dc800217 	ldw	r18,8(sp)
    b2fc:	dc400117 	ldw	r17,4(sp)
    b300:	dc000017 	ldw	r16,0(sp)
    b304:	dec00604 	addi	sp,sp,24
    b308:	f800283a 	ret
    b30c:	8cc00f2e 	bgeu	r17,r19,b34c <__b2d+0xe0>
    b310:	117ffd44 	addi	r5,r2,-11
    b314:	80bffe17 	ldw	r2,-8(r16)
    b318:	28000e26 	beq	r5,zero,b354 <__b2d+0xe8>
    b31c:	1949c83a 	sub	r4,r3,r5
    b320:	9164983a 	sll	r18,r18,r5
    b324:	1106d83a 	srl	r3,r2,r4
    b328:	81bffe04 	addi	r6,r16,-8
    b32c:	948ffc34 	orhi	r18,r18,16368
    b330:	90c6b03a 	or	r3,r18,r3
    b334:	89800e2e 	bgeu	r17,r6,b370 <__b2d+0x104>
    b338:	81bffd17 	ldw	r6,-12(r16)
    b33c:	1144983a 	sll	r2,r2,r5
    b340:	310ad83a 	srl	r5,r6,r4
    b344:	2884b03a 	or	r2,r5,r2
    b348:	003fe806 	br	b2ec <__b2d+0x80>
    b34c:	10bffd44 	addi	r2,r2,-11
    b350:	1000041e 	bne	r2,zero,b364 <__b2d+0xf8>
    b354:	90cffc34 	orhi	r3,r18,16368
    b358:	003fe406 	br	b2ec <__b2d+0x80>
    b35c:	000d883a 	mov	r6,zero
    b360:	003fdf06 	br	b2e0 <__b2d+0x74>
    b364:	90a4983a 	sll	r18,r18,r2
    b368:	0005883a 	mov	r2,zero
    b36c:	003ff906 	br	b354 <__b2d+0xe8>
    b370:	1144983a 	sll	r2,r2,r5
    b374:	003fdd06 	br	b2ec <__b2d+0x80>

0000b378 <__d2b>:
    b378:	defff804 	addi	sp,sp,-32
    b37c:	dc000215 	stw	r16,8(sp)
    b380:	3021883a 	mov	r16,r6
    b384:	dc400315 	stw	r17,12(sp)
    b388:	8022907a 	slli	r17,r16,1
    b38c:	dd000615 	stw	r20,24(sp)
    b390:	2829883a 	mov	r20,r5
    b394:	01400044 	movi	r5,1
    b398:	dcc00515 	stw	r19,20(sp)
    b39c:	dc800415 	stw	r18,16(sp)
    b3a0:	dfc00715 	stw	ra,28(sp)
    b3a4:	3825883a 	mov	r18,r7
    b3a8:	8822d57a 	srli	r17,r17,21
    b3ac:	000a6e40 	call	a6e4 <_Balloc>
    b3b0:	1027883a 	mov	r19,r2
    b3b4:	00800434 	movhi	r2,16
    b3b8:	10bfffc4 	addi	r2,r2,-1
    b3bc:	808c703a 	and	r6,r16,r2
    b3c0:	88000126 	beq	r17,zero,b3c8 <__d2b+0x50>
    b3c4:	31800434 	orhi	r6,r6,16
    b3c8:	d9800015 	stw	r6,0(sp)
    b3cc:	a0002426 	beq	r20,zero,b460 <__d2b+0xe8>
    b3d0:	d9000104 	addi	r4,sp,4
    b3d4:	dd000115 	stw	r20,4(sp)
    b3d8:	000aa400 	call	aa40 <__lo0bits>
    b3dc:	d8c00017 	ldw	r3,0(sp)
    b3e0:	10002f1e 	bne	r2,zero,b4a0 <__d2b+0x128>
    b3e4:	d9000117 	ldw	r4,4(sp)
    b3e8:	99000515 	stw	r4,20(r19)
    b3ec:	1821003a 	cmpeq	r16,r3,zero
    b3f0:	01000084 	movi	r4,2
    b3f4:	2421c83a 	sub	r16,r4,r16
    b3f8:	98c00615 	stw	r3,24(r19)
    b3fc:	9c000415 	stw	r16,16(r19)
    b400:	88001f1e 	bne	r17,zero,b480 <__d2b+0x108>
    b404:	10bef384 	addi	r2,r2,-1074
    b408:	90800015 	stw	r2,0(r18)
    b40c:	00900034 	movhi	r2,16384
    b410:	10bfffc4 	addi	r2,r2,-1
    b414:	8085883a 	add	r2,r16,r2
    b418:	1085883a 	add	r2,r2,r2
    b41c:	1085883a 	add	r2,r2,r2
    b420:	9885883a 	add	r2,r19,r2
    b424:	11000517 	ldw	r4,20(r2)
    b428:	8020917a 	slli	r16,r16,5
    b42c:	000a9d80 	call	a9d8 <__hi0bits>
    b430:	d8c00817 	ldw	r3,32(sp)
    b434:	8085c83a 	sub	r2,r16,r2
    b438:	18800015 	stw	r2,0(r3)
    b43c:	9805883a 	mov	r2,r19
    b440:	dfc00717 	ldw	ra,28(sp)
    b444:	dd000617 	ldw	r20,24(sp)
    b448:	dcc00517 	ldw	r19,20(sp)
    b44c:	dc800417 	ldw	r18,16(sp)
    b450:	dc400317 	ldw	r17,12(sp)
    b454:	dc000217 	ldw	r16,8(sp)
    b458:	dec00804 	addi	sp,sp,32
    b45c:	f800283a 	ret
    b460:	d809883a 	mov	r4,sp
    b464:	000aa400 	call	aa40 <__lo0bits>
    b468:	d8c00017 	ldw	r3,0(sp)
    b46c:	04000044 	movi	r16,1
    b470:	9c000415 	stw	r16,16(r19)
    b474:	98c00515 	stw	r3,20(r19)
    b478:	10800804 	addi	r2,r2,32
    b47c:	883fe126 	beq	r17,zero,b404 <__d2b+0x8c>
    b480:	00c00d44 	movi	r3,53
    b484:	8c7ef344 	addi	r17,r17,-1075
    b488:	88a3883a 	add	r17,r17,r2
    b48c:	1885c83a 	sub	r2,r3,r2
    b490:	d8c00817 	ldw	r3,32(sp)
    b494:	94400015 	stw	r17,0(r18)
    b498:	18800015 	stw	r2,0(r3)
    b49c:	003fe706 	br	b43c <__d2b+0xc4>
    b4a0:	01000804 	movi	r4,32
    b4a4:	2089c83a 	sub	r4,r4,r2
    b4a8:	1908983a 	sll	r4,r3,r4
    b4ac:	d9400117 	ldw	r5,4(sp)
    b4b0:	1886d83a 	srl	r3,r3,r2
    b4b4:	2148b03a 	or	r4,r4,r5
    b4b8:	99000515 	stw	r4,20(r19)
    b4bc:	d8c00015 	stw	r3,0(sp)
    b4c0:	003fca06 	br	b3ec <__d2b+0x74>

0000b4c4 <__ratio>:
    b4c4:	defff904 	addi	sp,sp,-28
    b4c8:	dc400315 	stw	r17,12(sp)
    b4cc:	2823883a 	mov	r17,r5
    b4d0:	d9400104 	addi	r5,sp,4
    b4d4:	dfc00615 	stw	ra,24(sp)
    b4d8:	dcc00515 	stw	r19,20(sp)
    b4dc:	dc800415 	stw	r18,16(sp)
    b4e0:	2027883a 	mov	r19,r4
    b4e4:	dc000215 	stw	r16,8(sp)
    b4e8:	000b26c0 	call	b26c <__b2d>
    b4ec:	d80b883a 	mov	r5,sp
    b4f0:	8809883a 	mov	r4,r17
    b4f4:	1025883a 	mov	r18,r2
    b4f8:	1821883a 	mov	r16,r3
    b4fc:	000b26c0 	call	b26c <__b2d>
    b500:	8a000417 	ldw	r8,16(r17)
    b504:	99000417 	ldw	r4,16(r19)
    b508:	d9400117 	ldw	r5,4(sp)
    b50c:	2209c83a 	sub	r4,r4,r8
    b510:	2010917a 	slli	r8,r4,5
    b514:	d9000017 	ldw	r4,0(sp)
    b518:	2909c83a 	sub	r4,r5,r4
    b51c:	4109883a 	add	r4,r8,r4
    b520:	01000e0e 	bge	zero,r4,b55c <__ratio+0x98>
    b524:	2008953a 	slli	r4,r4,20
    b528:	2421883a 	add	r16,r4,r16
    b52c:	100d883a 	mov	r6,r2
    b530:	180f883a 	mov	r7,r3
    b534:	9009883a 	mov	r4,r18
    b538:	800b883a 	mov	r5,r16
    b53c:	00107680 	call	10768 <__divdf3>
    b540:	dfc00617 	ldw	ra,24(sp)
    b544:	dcc00517 	ldw	r19,20(sp)
    b548:	dc800417 	ldw	r18,16(sp)
    b54c:	dc400317 	ldw	r17,12(sp)
    b550:	dc000217 	ldw	r16,8(sp)
    b554:	dec00704 	addi	sp,sp,28
    b558:	f800283a 	ret
    b55c:	2008953a 	slli	r4,r4,20
    b560:	1907c83a 	sub	r3,r3,r4
    b564:	003ff106 	br	b52c <__ratio+0x68>

0000b568 <_mprec_log10>:
    b568:	defffe04 	addi	sp,sp,-8
    b56c:	dc000015 	stw	r16,0(sp)
    b570:	dfc00115 	stw	ra,4(sp)
    b574:	008005c4 	movi	r2,23
    b578:	2021883a 	mov	r16,r4
    b57c:	11000d0e 	bge	r2,r4,b5b4 <_mprec_log10+0x4c>
    b580:	0005883a 	mov	r2,zero
    b584:	00cffc34 	movhi	r3,16368
    b588:	843fffc4 	addi	r16,r16,-1
    b58c:	000d883a 	mov	r6,zero
    b590:	01d00934 	movhi	r7,16420
    b594:	1009883a 	mov	r4,r2
    b598:	180b883a 	mov	r5,r3
    b59c:	00112a80 	call	112a8 <__muldf3>
    b5a0:	803ff91e 	bne	r16,zero,b588 <_mprec_log10+0x20>
    b5a4:	dfc00117 	ldw	ra,4(sp)
    b5a8:	dc000017 	ldw	r16,0(sp)
    b5ac:	dec00204 	addi	sp,sp,8
    b5b0:	f800283a 	ret
    b5b4:	202090fa 	slli	r16,r4,3
    b5b8:	008000b4 	movhi	r2,2
    b5bc:	1091be04 	addi	r2,r2,18168
    b5c0:	1421883a 	add	r16,r2,r16
    b5c4:	80800017 	ldw	r2,0(r16)
    b5c8:	80c00117 	ldw	r3,4(r16)
    b5cc:	dfc00117 	ldw	ra,4(sp)
    b5d0:	dc000017 	ldw	r16,0(sp)
    b5d4:	dec00204 	addi	sp,sp,8
    b5d8:	f800283a 	ret

0000b5dc <__copybits>:
    b5dc:	297fffc4 	addi	r5,r5,-1
    b5e0:	280fd17a 	srai	r7,r5,5
    b5e4:	30c00417 	ldw	r3,16(r6)
    b5e8:	30800504 	addi	r2,r6,20
    b5ec:	39c00044 	addi	r7,r7,1
    b5f0:	18c7883a 	add	r3,r3,r3
    b5f4:	39cf883a 	add	r7,r7,r7
    b5f8:	18c7883a 	add	r3,r3,r3
    b5fc:	39cf883a 	add	r7,r7,r7
    b600:	10c7883a 	add	r3,r2,r3
    b604:	21cf883a 	add	r7,r4,r7
    b608:	10c00d2e 	bgeu	r2,r3,b640 <__copybits+0x64>
    b60c:	200b883a 	mov	r5,r4
    b610:	12000017 	ldw	r8,0(r2)
    b614:	29400104 	addi	r5,r5,4
    b618:	10800104 	addi	r2,r2,4
    b61c:	2a3fff15 	stw	r8,-4(r5)
    b620:	10fffb36 	bltu	r2,r3,b610 <__copybits+0x34>
    b624:	1985c83a 	sub	r2,r3,r6
    b628:	10bffac4 	addi	r2,r2,-21
    b62c:	1004d0ba 	srli	r2,r2,2
    b630:	10800044 	addi	r2,r2,1
    b634:	1085883a 	add	r2,r2,r2
    b638:	1085883a 	add	r2,r2,r2
    b63c:	2089883a 	add	r4,r4,r2
    b640:	21c0032e 	bgeu	r4,r7,b650 <__copybits+0x74>
    b644:	20000015 	stw	zero,0(r4)
    b648:	21000104 	addi	r4,r4,4
    b64c:	21fffd36 	bltu	r4,r7,b644 <__copybits+0x68>
    b650:	f800283a 	ret

0000b654 <__any_on>:
    b654:	20c00417 	ldw	r3,16(r4)
    b658:	2805d17a 	srai	r2,r5,5
    b65c:	21000504 	addi	r4,r4,20
    b660:	18800d0e 	bge	r3,r2,b698 <__any_on+0x44>
    b664:	18c7883a 	add	r3,r3,r3
    b668:	18c7883a 	add	r3,r3,r3
    b66c:	20c7883a 	add	r3,r4,r3
    b670:	20c0192e 	bgeu	r4,r3,b6d8 <__any_on+0x84>
    b674:	18bfff17 	ldw	r2,-4(r3)
    b678:	18ffff04 	addi	r3,r3,-4
    b67c:	1000041e 	bne	r2,zero,b690 <__any_on+0x3c>
    b680:	20c0142e 	bgeu	r4,r3,b6d4 <__any_on+0x80>
    b684:	18ffff04 	addi	r3,r3,-4
    b688:	19400017 	ldw	r5,0(r3)
    b68c:	283ffc26 	beq	r5,zero,b680 <__any_on+0x2c>
    b690:	00800044 	movi	r2,1
    b694:	f800283a 	ret
    b698:	10c00a0e 	bge	r2,r3,b6c4 <__any_on+0x70>
    b69c:	1085883a 	add	r2,r2,r2
    b6a0:	1085883a 	add	r2,r2,r2
    b6a4:	294007cc 	andi	r5,r5,31
    b6a8:	2087883a 	add	r3,r4,r2
    b6ac:	283ff026 	beq	r5,zero,b670 <__any_on+0x1c>
    b6b0:	19800017 	ldw	r6,0(r3)
    b6b4:	3144d83a 	srl	r2,r6,r5
    b6b8:	114a983a 	sll	r5,r2,r5
    b6bc:	317ff41e 	bne	r6,r5,b690 <__any_on+0x3c>
    b6c0:	003feb06 	br	b670 <__any_on+0x1c>
    b6c4:	1085883a 	add	r2,r2,r2
    b6c8:	1085883a 	add	r2,r2,r2
    b6cc:	2087883a 	add	r3,r4,r2
    b6d0:	003fe706 	br	b670 <__any_on+0x1c>
    b6d4:	f800283a 	ret
    b6d8:	0005883a 	mov	r2,zero
    b6dc:	f800283a 	ret

0000b6e0 <_realloc_r>:
    b6e0:	defff604 	addi	sp,sp,-40
    b6e4:	dc800215 	stw	r18,8(sp)
    b6e8:	dfc00915 	stw	ra,36(sp)
    b6ec:	df000815 	stw	fp,32(sp)
    b6f0:	ddc00715 	stw	r23,28(sp)
    b6f4:	dd800615 	stw	r22,24(sp)
    b6f8:	dd400515 	stw	r21,20(sp)
    b6fc:	dd000415 	stw	r20,16(sp)
    b700:	dcc00315 	stw	r19,12(sp)
    b704:	dc400115 	stw	r17,4(sp)
    b708:	dc000015 	stw	r16,0(sp)
    b70c:	3025883a 	mov	r18,r6
    b710:	2800b726 	beq	r5,zero,b9f0 <_realloc_r+0x310>
    b714:	282b883a 	mov	r21,r5
    b718:	2029883a 	mov	r20,r4
    b71c:	0012f840 	call	12f84 <__malloc_lock>
    b720:	a8bfff17 	ldw	r2,-4(r21)
    b724:	043fff04 	movi	r16,-4
    b728:	90c002c4 	addi	r3,r18,11
    b72c:	01000584 	movi	r4,22
    b730:	acfffe04 	addi	r19,r21,-8
    b734:	1420703a 	and	r16,r2,r16
    b738:	20c0332e 	bgeu	r4,r3,b808 <_realloc_r+0x128>
    b73c:	047ffe04 	movi	r17,-8
    b740:	1c62703a 	and	r17,r3,r17
    b744:	8807883a 	mov	r3,r17
    b748:	88005816 	blt	r17,zero,b8ac <_realloc_r+0x1cc>
    b74c:	8c805736 	bltu	r17,r18,b8ac <_realloc_r+0x1cc>
    b750:	80c0300e 	bge	r16,r3,b814 <_realloc_r+0x134>
    b754:	070000b4 	movhi	fp,2
    b758:	e7137e04 	addi	fp,fp,19960
    b75c:	e1c00217 	ldw	r7,8(fp)
    b760:	9c09883a 	add	r4,r19,r16
    b764:	22000117 	ldw	r8,4(r4)
    b768:	21c06326 	beq	r4,r7,b8f8 <_realloc_r+0x218>
    b76c:	017fff84 	movi	r5,-2
    b770:	414a703a 	and	r5,r8,r5
    b774:	214b883a 	add	r5,r4,r5
    b778:	29800117 	ldw	r6,4(r5)
    b77c:	3180004c 	andi	r6,r6,1
    b780:	30003f26 	beq	r6,zero,b880 <_realloc_r+0x1a0>
    b784:	1080004c 	andi	r2,r2,1
    b788:	10008326 	beq	r2,zero,b998 <_realloc_r+0x2b8>
    b78c:	900b883a 	mov	r5,r18
    b790:	a009883a 	mov	r4,r20
    b794:	00023500 	call	2350 <_malloc_r>
    b798:	1025883a 	mov	r18,r2
    b79c:	10011e26 	beq	r2,zero,bc18 <_realloc_r+0x538>
    b7a0:	a93fff17 	ldw	r4,-4(r21)
    b7a4:	10fffe04 	addi	r3,r2,-8
    b7a8:	00bfff84 	movi	r2,-2
    b7ac:	2084703a 	and	r2,r4,r2
    b7b0:	9885883a 	add	r2,r19,r2
    b7b4:	1880ee26 	beq	r3,r2,bb70 <_realloc_r+0x490>
    b7b8:	81bfff04 	addi	r6,r16,-4
    b7bc:	00800904 	movi	r2,36
    b7c0:	1180b836 	bltu	r2,r6,baa4 <_realloc_r+0x3c4>
    b7c4:	00c004c4 	movi	r3,19
    b7c8:	19809636 	bltu	r3,r6,ba24 <_realloc_r+0x344>
    b7cc:	9005883a 	mov	r2,r18
    b7d0:	a807883a 	mov	r3,r21
    b7d4:	19000017 	ldw	r4,0(r3)
    b7d8:	11000015 	stw	r4,0(r2)
    b7dc:	19000117 	ldw	r4,4(r3)
    b7e0:	11000115 	stw	r4,4(r2)
    b7e4:	18c00217 	ldw	r3,8(r3)
    b7e8:	10c00215 	stw	r3,8(r2)
    b7ec:	a80b883a 	mov	r5,r21
    b7f0:	a009883a 	mov	r4,r20
    b7f4:	00096480 	call	9648 <_free_r>
    b7f8:	a009883a 	mov	r4,r20
    b7fc:	00130a40 	call	130a4 <__malloc_unlock>
    b800:	9005883a 	mov	r2,r18
    b804:	00001206 	br	b850 <_realloc_r+0x170>
    b808:	00c00404 	movi	r3,16
    b80c:	1823883a 	mov	r17,r3
    b810:	003fce06 	br	b74c <_realloc_r+0x6c>
    b814:	a825883a 	mov	r18,r21
    b818:	8445c83a 	sub	r2,r16,r17
    b81c:	00c003c4 	movi	r3,15
    b820:	18802636 	bltu	r3,r2,b8bc <_realloc_r+0x1dc>
    b824:	99800117 	ldw	r6,4(r19)
    b828:	9c07883a 	add	r3,r19,r16
    b82c:	3180004c 	andi	r6,r6,1
    b830:	3420b03a 	or	r16,r6,r16
    b834:	9c000115 	stw	r16,4(r19)
    b838:	18800117 	ldw	r2,4(r3)
    b83c:	10800054 	ori	r2,r2,1
    b840:	18800115 	stw	r2,4(r3)
    b844:	a009883a 	mov	r4,r20
    b848:	00130a40 	call	130a4 <__malloc_unlock>
    b84c:	9005883a 	mov	r2,r18
    b850:	dfc00917 	ldw	ra,36(sp)
    b854:	df000817 	ldw	fp,32(sp)
    b858:	ddc00717 	ldw	r23,28(sp)
    b85c:	dd800617 	ldw	r22,24(sp)
    b860:	dd400517 	ldw	r21,20(sp)
    b864:	dd000417 	ldw	r20,16(sp)
    b868:	dcc00317 	ldw	r19,12(sp)
    b86c:	dc800217 	ldw	r18,8(sp)
    b870:	dc400117 	ldw	r17,4(sp)
    b874:	dc000017 	ldw	r16,0(sp)
    b878:	dec00a04 	addi	sp,sp,40
    b87c:	f800283a 	ret
    b880:	017fff04 	movi	r5,-4
    b884:	414a703a 	and	r5,r8,r5
    b888:	814d883a 	add	r6,r16,r5
    b88c:	30c01f16 	blt	r6,r3,b90c <_realloc_r+0x22c>
    b890:	20800317 	ldw	r2,12(r4)
    b894:	20c00217 	ldw	r3,8(r4)
    b898:	a825883a 	mov	r18,r21
    b89c:	3021883a 	mov	r16,r6
    b8a0:	18800315 	stw	r2,12(r3)
    b8a4:	10c00215 	stw	r3,8(r2)
    b8a8:	003fdb06 	br	b818 <_realloc_r+0x138>
    b8ac:	00800304 	movi	r2,12
    b8b0:	a0800015 	stw	r2,0(r20)
    b8b4:	0005883a 	mov	r2,zero
    b8b8:	003fe506 	br	b850 <_realloc_r+0x170>
    b8bc:	98c00117 	ldw	r3,4(r19)
    b8c0:	9c4b883a 	add	r5,r19,r17
    b8c4:	11000054 	ori	r4,r2,1
    b8c8:	18c0004c 	andi	r3,r3,1
    b8cc:	1c62b03a 	or	r17,r3,r17
    b8d0:	9c400115 	stw	r17,4(r19)
    b8d4:	29000115 	stw	r4,4(r5)
    b8d8:	2885883a 	add	r2,r5,r2
    b8dc:	10c00117 	ldw	r3,4(r2)
    b8e0:	29400204 	addi	r5,r5,8
    b8e4:	a009883a 	mov	r4,r20
    b8e8:	18c00054 	ori	r3,r3,1
    b8ec:	10c00115 	stw	r3,4(r2)
    b8f0:	00096480 	call	9648 <_free_r>
    b8f4:	003fd306 	br	b844 <_realloc_r+0x164>
    b8f8:	017fff04 	movi	r5,-4
    b8fc:	414a703a 	and	r5,r8,r5
    b900:	89800404 	addi	r6,r17,16
    b904:	8151883a 	add	r8,r16,r5
    b908:	4180590e 	bge	r8,r6,ba70 <_realloc_r+0x390>
    b90c:	1080004c 	andi	r2,r2,1
    b910:	103f9e1e 	bne	r2,zero,b78c <_realloc_r+0xac>
    b914:	adbffe17 	ldw	r22,-8(r21)
    b918:	00bfff04 	movi	r2,-4
    b91c:	9dadc83a 	sub	r22,r19,r22
    b920:	b1800117 	ldw	r6,4(r22)
    b924:	3084703a 	and	r2,r6,r2
    b928:	20002026 	beq	r4,zero,b9ac <_realloc_r+0x2cc>
    b92c:	80af883a 	add	r23,r16,r2
    b930:	b96f883a 	add	r23,r23,r5
    b934:	21c05f26 	beq	r4,r7,bab4 <_realloc_r+0x3d4>
    b938:	b8c01c16 	blt	r23,r3,b9ac <_realloc_r+0x2cc>
    b93c:	20800317 	ldw	r2,12(r4)
    b940:	20c00217 	ldw	r3,8(r4)
    b944:	81bfff04 	addi	r6,r16,-4
    b948:	01000904 	movi	r4,36
    b94c:	18800315 	stw	r2,12(r3)
    b950:	10c00215 	stw	r3,8(r2)
    b954:	b0c00217 	ldw	r3,8(r22)
    b958:	b0800317 	ldw	r2,12(r22)
    b95c:	b4800204 	addi	r18,r22,8
    b960:	18800315 	stw	r2,12(r3)
    b964:	10c00215 	stw	r3,8(r2)
    b968:	21801b36 	bltu	r4,r6,b9d8 <_realloc_r+0x2f8>
    b96c:	008004c4 	movi	r2,19
    b970:	1180352e 	bgeu	r2,r6,ba48 <_realloc_r+0x368>
    b974:	a8800017 	ldw	r2,0(r21)
    b978:	b0800215 	stw	r2,8(r22)
    b97c:	a8800117 	ldw	r2,4(r21)
    b980:	b0800315 	stw	r2,12(r22)
    b984:	008006c4 	movi	r2,27
    b988:	11807f36 	bltu	r2,r6,bb88 <_realloc_r+0x4a8>
    b98c:	b0800404 	addi	r2,r22,16
    b990:	ad400204 	addi	r21,r21,8
    b994:	00002d06 	br	ba4c <_realloc_r+0x36c>
    b998:	adbffe17 	ldw	r22,-8(r21)
    b99c:	00bfff04 	movi	r2,-4
    b9a0:	9dadc83a 	sub	r22,r19,r22
    b9a4:	b1000117 	ldw	r4,4(r22)
    b9a8:	2084703a 	and	r2,r4,r2
    b9ac:	b03f7726 	beq	r22,zero,b78c <_realloc_r+0xac>
    b9b0:	80af883a 	add	r23,r16,r2
    b9b4:	b8ff7516 	blt	r23,r3,b78c <_realloc_r+0xac>
    b9b8:	b0800317 	ldw	r2,12(r22)
    b9bc:	b0c00217 	ldw	r3,8(r22)
    b9c0:	81bfff04 	addi	r6,r16,-4
    b9c4:	01000904 	movi	r4,36
    b9c8:	18800315 	stw	r2,12(r3)
    b9cc:	10c00215 	stw	r3,8(r2)
    b9d0:	b4800204 	addi	r18,r22,8
    b9d4:	21bfe52e 	bgeu	r4,r6,b96c <_realloc_r+0x28c>
    b9d8:	a80b883a 	mov	r5,r21
    b9dc:	9009883a 	mov	r4,r18
    b9e0:	000a4600 	call	a460 <memmove>
    b9e4:	b821883a 	mov	r16,r23
    b9e8:	b027883a 	mov	r19,r22
    b9ec:	003f8a06 	br	b818 <_realloc_r+0x138>
    b9f0:	300b883a 	mov	r5,r6
    b9f4:	dfc00917 	ldw	ra,36(sp)
    b9f8:	df000817 	ldw	fp,32(sp)
    b9fc:	ddc00717 	ldw	r23,28(sp)
    ba00:	dd800617 	ldw	r22,24(sp)
    ba04:	dd400517 	ldw	r21,20(sp)
    ba08:	dd000417 	ldw	r20,16(sp)
    ba0c:	dcc00317 	ldw	r19,12(sp)
    ba10:	dc800217 	ldw	r18,8(sp)
    ba14:	dc400117 	ldw	r17,4(sp)
    ba18:	dc000017 	ldw	r16,0(sp)
    ba1c:	dec00a04 	addi	sp,sp,40
    ba20:	00023501 	jmpi	2350 <_malloc_r>
    ba24:	a8c00017 	ldw	r3,0(r21)
    ba28:	90c00015 	stw	r3,0(r18)
    ba2c:	a8c00117 	ldw	r3,4(r21)
    ba30:	90c00115 	stw	r3,4(r18)
    ba34:	00c006c4 	movi	r3,27
    ba38:	19804536 	bltu	r3,r6,bb50 <_realloc_r+0x470>
    ba3c:	90800204 	addi	r2,r18,8
    ba40:	a8c00204 	addi	r3,r21,8
    ba44:	003f6306 	br	b7d4 <_realloc_r+0xf4>
    ba48:	9005883a 	mov	r2,r18
    ba4c:	a8c00017 	ldw	r3,0(r21)
    ba50:	b821883a 	mov	r16,r23
    ba54:	b027883a 	mov	r19,r22
    ba58:	10c00015 	stw	r3,0(r2)
    ba5c:	a8c00117 	ldw	r3,4(r21)
    ba60:	10c00115 	stw	r3,4(r2)
    ba64:	a8c00217 	ldw	r3,8(r21)
    ba68:	10c00215 	stw	r3,8(r2)
    ba6c:	003f6a06 	br	b818 <_realloc_r+0x138>
    ba70:	9c67883a 	add	r19,r19,r17
    ba74:	4445c83a 	sub	r2,r8,r17
    ba78:	e4c00215 	stw	r19,8(fp)
    ba7c:	10800054 	ori	r2,r2,1
    ba80:	98800115 	stw	r2,4(r19)
    ba84:	a8bfff17 	ldw	r2,-4(r21)
    ba88:	a009883a 	mov	r4,r20
    ba8c:	1080004c 	andi	r2,r2,1
    ba90:	1462b03a 	or	r17,r2,r17
    ba94:	ac7fff15 	stw	r17,-4(r21)
    ba98:	00130a40 	call	130a4 <__malloc_unlock>
    ba9c:	a805883a 	mov	r2,r21
    baa0:	003f6b06 	br	b850 <_realloc_r+0x170>
    baa4:	a80b883a 	mov	r5,r21
    baa8:	9009883a 	mov	r4,r18
    baac:	000a4600 	call	a460 <memmove>
    bab0:	003f4e06 	br	b7ec <_realloc_r+0x10c>
    bab4:	89000404 	addi	r4,r17,16
    bab8:	b93fbc16 	blt	r23,r4,b9ac <_realloc_r+0x2cc>
    babc:	b0800317 	ldw	r2,12(r22)
    bac0:	b0c00217 	ldw	r3,8(r22)
    bac4:	81bfff04 	addi	r6,r16,-4
    bac8:	01000904 	movi	r4,36
    bacc:	18800315 	stw	r2,12(r3)
    bad0:	10c00215 	stw	r3,8(r2)
    bad4:	b4800204 	addi	r18,r22,8
    bad8:	21804336 	bltu	r4,r6,bbe8 <_realloc_r+0x508>
    badc:	008004c4 	movi	r2,19
    bae0:	11803f2e 	bgeu	r2,r6,bbe0 <_realloc_r+0x500>
    bae4:	a8800017 	ldw	r2,0(r21)
    bae8:	b0800215 	stw	r2,8(r22)
    baec:	a8800117 	ldw	r2,4(r21)
    baf0:	b0800315 	stw	r2,12(r22)
    baf4:	008006c4 	movi	r2,27
    baf8:	11803f36 	bltu	r2,r6,bbf8 <_realloc_r+0x518>
    bafc:	b0800404 	addi	r2,r22,16
    bb00:	ad400204 	addi	r21,r21,8
    bb04:	a8c00017 	ldw	r3,0(r21)
    bb08:	10c00015 	stw	r3,0(r2)
    bb0c:	a8c00117 	ldw	r3,4(r21)
    bb10:	10c00115 	stw	r3,4(r2)
    bb14:	a8c00217 	ldw	r3,8(r21)
    bb18:	10c00215 	stw	r3,8(r2)
    bb1c:	b447883a 	add	r3,r22,r17
    bb20:	bc45c83a 	sub	r2,r23,r17
    bb24:	e0c00215 	stw	r3,8(fp)
    bb28:	10800054 	ori	r2,r2,1
    bb2c:	18800115 	stw	r2,4(r3)
    bb30:	b0800117 	ldw	r2,4(r22)
    bb34:	a009883a 	mov	r4,r20
    bb38:	1080004c 	andi	r2,r2,1
    bb3c:	1462b03a 	or	r17,r2,r17
    bb40:	b4400115 	stw	r17,4(r22)
    bb44:	00130a40 	call	130a4 <__malloc_unlock>
    bb48:	9005883a 	mov	r2,r18
    bb4c:	003f4006 	br	b850 <_realloc_r+0x170>
    bb50:	a8c00217 	ldw	r3,8(r21)
    bb54:	90c00215 	stw	r3,8(r18)
    bb58:	a8c00317 	ldw	r3,12(r21)
    bb5c:	90c00315 	stw	r3,12(r18)
    bb60:	30801126 	beq	r6,r2,bba8 <_realloc_r+0x4c8>
    bb64:	90800404 	addi	r2,r18,16
    bb68:	a8c00404 	addi	r3,r21,16
    bb6c:	003f1906 	br	b7d4 <_realloc_r+0xf4>
    bb70:	90ffff17 	ldw	r3,-4(r18)
    bb74:	00bfff04 	movi	r2,-4
    bb78:	a825883a 	mov	r18,r21
    bb7c:	1884703a 	and	r2,r3,r2
    bb80:	80a1883a 	add	r16,r16,r2
    bb84:	003f2406 	br	b818 <_realloc_r+0x138>
    bb88:	a8800217 	ldw	r2,8(r21)
    bb8c:	b0800415 	stw	r2,16(r22)
    bb90:	a8800317 	ldw	r2,12(r21)
    bb94:	b0800515 	stw	r2,20(r22)
    bb98:	31000a26 	beq	r6,r4,bbc4 <_realloc_r+0x4e4>
    bb9c:	b0800604 	addi	r2,r22,24
    bba0:	ad400404 	addi	r21,r21,16
    bba4:	003fa906 	br	ba4c <_realloc_r+0x36c>
    bba8:	a9000417 	ldw	r4,16(r21)
    bbac:	90800604 	addi	r2,r18,24
    bbb0:	a8c00604 	addi	r3,r21,24
    bbb4:	91000415 	stw	r4,16(r18)
    bbb8:	a9000517 	ldw	r4,20(r21)
    bbbc:	91000515 	stw	r4,20(r18)
    bbc0:	003f0406 	br	b7d4 <_realloc_r+0xf4>
    bbc4:	a8c00417 	ldw	r3,16(r21)
    bbc8:	ad400604 	addi	r21,r21,24
    bbcc:	b0800804 	addi	r2,r22,32
    bbd0:	b0c00615 	stw	r3,24(r22)
    bbd4:	a8ffff17 	ldw	r3,-4(r21)
    bbd8:	b0c00715 	stw	r3,28(r22)
    bbdc:	003f9b06 	br	ba4c <_realloc_r+0x36c>
    bbe0:	9005883a 	mov	r2,r18
    bbe4:	003fc706 	br	bb04 <_realloc_r+0x424>
    bbe8:	a80b883a 	mov	r5,r21
    bbec:	9009883a 	mov	r4,r18
    bbf0:	000a4600 	call	a460 <memmove>
    bbf4:	003fc906 	br	bb1c <_realloc_r+0x43c>
    bbf8:	a8800217 	ldw	r2,8(r21)
    bbfc:	b0800415 	stw	r2,16(r22)
    bc00:	a8800317 	ldw	r2,12(r21)
    bc04:	b0800515 	stw	r2,20(r22)
    bc08:	31000726 	beq	r6,r4,bc28 <_realloc_r+0x548>
    bc0c:	b0800604 	addi	r2,r22,24
    bc10:	ad400404 	addi	r21,r21,16
    bc14:	003fbb06 	br	bb04 <_realloc_r+0x424>
    bc18:	a009883a 	mov	r4,r20
    bc1c:	00130a40 	call	130a4 <__malloc_unlock>
    bc20:	0005883a 	mov	r2,zero
    bc24:	003f0a06 	br	b850 <_realloc_r+0x170>
    bc28:	a8c00417 	ldw	r3,16(r21)
    bc2c:	ad400604 	addi	r21,r21,24
    bc30:	b0800804 	addi	r2,r22,32
    bc34:	b0c00615 	stw	r3,24(r22)
    bc38:	a8ffff17 	ldw	r3,-4(r21)
    bc3c:	b0c00715 	stw	r3,28(r22)
    bc40:	003fb006 	br	bb04 <_realloc_r+0x424>

0000bc44 <__fpclassifyd>:
    bc44:	00a00034 	movhi	r2,32768
    bc48:	10bfffc4 	addi	r2,r2,-1
    bc4c:	2884703a 	and	r2,r5,r2
    bc50:	10000726 	beq	r2,zero,bc70 <__fpclassifyd+0x2c>
    bc54:	00fffc34 	movhi	r3,65520
    bc58:	019ff834 	movhi	r6,32736
    bc5c:	28c7883a 	add	r3,r5,r3
    bc60:	31bfffc4 	addi	r6,r6,-1
    bc64:	30c00536 	bltu	r6,r3,bc7c <__fpclassifyd+0x38>
    bc68:	00800104 	movi	r2,4
    bc6c:	f800283a 	ret
    bc70:	2000021e 	bne	r4,zero,bc7c <__fpclassifyd+0x38>
    bc74:	00800084 	movi	r2,2
    bc78:	f800283a 	ret
    bc7c:	00dffc34 	movhi	r3,32752
    bc80:	019ff834 	movhi	r6,32736
    bc84:	28cb883a 	add	r5,r5,r3
    bc88:	31bfffc4 	addi	r6,r6,-1
    bc8c:	317ff62e 	bgeu	r6,r5,bc68 <__fpclassifyd+0x24>
    bc90:	01400434 	movhi	r5,16
    bc94:	297fffc4 	addi	r5,r5,-1
    bc98:	28800236 	bltu	r5,r2,bca4 <__fpclassifyd+0x60>
    bc9c:	008000c4 	movi	r2,3
    bca0:	f800283a 	ret
    bca4:	10c00226 	beq	r2,r3,bcb0 <__fpclassifyd+0x6c>
    bca8:	0005883a 	mov	r2,zero
    bcac:	f800283a 	ret
    bcb0:	2005003a 	cmpeq	r2,r4,zero
    bcb4:	f800283a 	ret

0000bcb8 <__sread>:
    bcb8:	defffe04 	addi	sp,sp,-8
    bcbc:	dc000015 	stw	r16,0(sp)
    bcc0:	2821883a 	mov	r16,r5
    bcc4:	2940038f 	ldh	r5,14(r5)
    bcc8:	dfc00115 	stw	ra,4(sp)
    bccc:	000eeb80 	call	eeb8 <_read_r>
    bcd0:	10000716 	blt	r2,zero,bcf0 <__sread+0x38>
    bcd4:	80c01417 	ldw	r3,80(r16)
    bcd8:	1887883a 	add	r3,r3,r2
    bcdc:	80c01415 	stw	r3,80(r16)
    bce0:	dfc00117 	ldw	ra,4(sp)
    bce4:	dc000017 	ldw	r16,0(sp)
    bce8:	dec00204 	addi	sp,sp,8
    bcec:	f800283a 	ret
    bcf0:	80c0030b 	ldhu	r3,12(r16)
    bcf4:	18fbffcc 	andi	r3,r3,61439
    bcf8:	80c0030d 	sth	r3,12(r16)
    bcfc:	dfc00117 	ldw	ra,4(sp)
    bd00:	dc000017 	ldw	r16,0(sp)
    bd04:	dec00204 	addi	sp,sp,8
    bd08:	f800283a 	ret

0000bd0c <__seofread>:
    bd0c:	0005883a 	mov	r2,zero
    bd10:	f800283a 	ret

0000bd14 <__swrite>:
    bd14:	2880030b 	ldhu	r2,12(r5)
    bd18:	defffb04 	addi	sp,sp,-20
    bd1c:	dcc00315 	stw	r19,12(sp)
    bd20:	dc800215 	stw	r18,8(sp)
    bd24:	dc400115 	stw	r17,4(sp)
    bd28:	dc000015 	stw	r16,0(sp)
    bd2c:	dfc00415 	stw	ra,16(sp)
    bd30:	10c0400c 	andi	r3,r2,256
    bd34:	2821883a 	mov	r16,r5
    bd38:	2023883a 	mov	r17,r4
    bd3c:	3025883a 	mov	r18,r6
    bd40:	3827883a 	mov	r19,r7
    bd44:	18000526 	beq	r3,zero,bd5c <__swrite+0x48>
    bd48:	2940038f 	ldh	r5,14(r5)
    bd4c:	01c00084 	movi	r7,2
    bd50:	000d883a 	mov	r6,zero
    bd54:	000ee580 	call	ee58 <_lseek_r>
    bd58:	8080030b 	ldhu	r2,12(r16)
    bd5c:	8140038f 	ldh	r5,14(r16)
    bd60:	10bbffcc 	andi	r2,r2,61439
    bd64:	980f883a 	mov	r7,r19
    bd68:	900d883a 	mov	r6,r18
    bd6c:	8809883a 	mov	r4,r17
    bd70:	8080030d 	sth	r2,12(r16)
    bd74:	dfc00417 	ldw	ra,16(sp)
    bd78:	dcc00317 	ldw	r19,12(sp)
    bd7c:	dc800217 	ldw	r18,8(sp)
    bd80:	dc400117 	ldw	r17,4(sp)
    bd84:	dc000017 	ldw	r16,0(sp)
    bd88:	dec00504 	addi	sp,sp,20
    bd8c:	000e9241 	jmpi	e924 <_write_r>

0000bd90 <__sseek>:
    bd90:	defffe04 	addi	sp,sp,-8
    bd94:	dc000015 	stw	r16,0(sp)
    bd98:	2821883a 	mov	r16,r5
    bd9c:	2940038f 	ldh	r5,14(r5)
    bda0:	dfc00115 	stw	ra,4(sp)
    bda4:	000ee580 	call	ee58 <_lseek_r>
    bda8:	00ffffc4 	movi	r3,-1
    bdac:	10c00826 	beq	r2,r3,bdd0 <__sseek+0x40>
    bdb0:	80c0030b 	ldhu	r3,12(r16)
    bdb4:	80801415 	stw	r2,80(r16)
    bdb8:	18c40014 	ori	r3,r3,4096
    bdbc:	80c0030d 	sth	r3,12(r16)
    bdc0:	dfc00117 	ldw	ra,4(sp)
    bdc4:	dc000017 	ldw	r16,0(sp)
    bdc8:	dec00204 	addi	sp,sp,8
    bdcc:	f800283a 	ret
    bdd0:	80c0030b 	ldhu	r3,12(r16)
    bdd4:	18fbffcc 	andi	r3,r3,61439
    bdd8:	80c0030d 	sth	r3,12(r16)
    bddc:	dfc00117 	ldw	ra,4(sp)
    bde0:	dc000017 	ldw	r16,0(sp)
    bde4:	dec00204 	addi	sp,sp,8
    bde8:	f800283a 	ret

0000bdec <__sclose>:
    bdec:	2940038f 	ldh	r5,14(r5)
    bdf0:	000e9841 	jmpi	e984 <_close_r>

0000bdf4 <strcmp>:
    bdf4:	2144b03a 	or	r2,r4,r5
    bdf8:	108000cc 	andi	r2,r2,3
    bdfc:	1000171e 	bne	r2,zero,be5c <strcmp+0x68>
    be00:	20800017 	ldw	r2,0(r4)
    be04:	28c00017 	ldw	r3,0(r5)
    be08:	10c0141e 	bne	r2,r3,be5c <strcmp+0x68>
    be0c:	027fbff4 	movhi	r9,65279
    be10:	4a7fbfc4 	addi	r9,r9,-257
    be14:	0086303a 	nor	r3,zero,r2
    be18:	02202074 	movhi	r8,32897
    be1c:	1245883a 	add	r2,r2,r9
    be20:	42202004 	addi	r8,r8,-32640
    be24:	10c4703a 	and	r2,r2,r3
    be28:	1204703a 	and	r2,r2,r8
    be2c:	10000226 	beq	r2,zero,be38 <strcmp+0x44>
    be30:	00002306 	br	bec0 <strcmp+0xcc>
    be34:	1000221e 	bne	r2,zero,bec0 <strcmp+0xcc>
    be38:	21000104 	addi	r4,r4,4
    be3c:	20c00017 	ldw	r3,0(r4)
    be40:	29400104 	addi	r5,r5,4
    be44:	29800017 	ldw	r6,0(r5)
    be48:	1a4f883a 	add	r7,r3,r9
    be4c:	00c4303a 	nor	r2,zero,r3
    be50:	3884703a 	and	r2,r7,r2
    be54:	1204703a 	and	r2,r2,r8
    be58:	19bff626 	beq	r3,r6,be34 <strcmp+0x40>
    be5c:	20800003 	ldbu	r2,0(r4)
    be60:	10c03fcc 	andi	r3,r2,255
    be64:	18c0201c 	xori	r3,r3,128
    be68:	18ffe004 	addi	r3,r3,-128
    be6c:	18000c26 	beq	r3,zero,bea0 <strcmp+0xac>
    be70:	29800007 	ldb	r6,0(r5)
    be74:	19800326 	beq	r3,r6,be84 <strcmp+0x90>
    be78:	00001306 	br	bec8 <strcmp+0xd4>
    be7c:	29800007 	ldb	r6,0(r5)
    be80:	11800b1e 	bne	r2,r6,beb0 <strcmp+0xbc>
    be84:	21000044 	addi	r4,r4,1
    be88:	20c00003 	ldbu	r3,0(r4)
    be8c:	29400044 	addi	r5,r5,1
    be90:	18803fcc 	andi	r2,r3,255
    be94:	1080201c 	xori	r2,r2,128
    be98:	10bfe004 	addi	r2,r2,-128
    be9c:	103ff71e 	bne	r2,zero,be7c <strcmp+0x88>
    bea0:	0007883a 	mov	r3,zero
    bea4:	28800003 	ldbu	r2,0(r5)
    bea8:	1885c83a 	sub	r2,r3,r2
    beac:	f800283a 	ret
    beb0:	28800003 	ldbu	r2,0(r5)
    beb4:	18c03fcc 	andi	r3,r3,255
    beb8:	1885c83a 	sub	r2,r3,r2
    bebc:	f800283a 	ret
    bec0:	0005883a 	mov	r2,zero
    bec4:	f800283a 	ret
    bec8:	10c03fcc 	andi	r3,r2,255
    becc:	003ff506 	br	bea4 <strcmp+0xb0>

0000bed0 <__ssprint_r>:
    bed0:	30800217 	ldw	r2,8(r6)
    bed4:	defff604 	addi	sp,sp,-40
    bed8:	dc800215 	stw	r18,8(sp)
    bedc:	dfc00915 	stw	ra,36(sp)
    bee0:	df000815 	stw	fp,32(sp)
    bee4:	ddc00715 	stw	r23,28(sp)
    bee8:	dd800615 	stw	r22,24(sp)
    beec:	dd400515 	stw	r21,20(sp)
    bef0:	dd000415 	stw	r20,16(sp)
    bef4:	dcc00315 	stw	r19,12(sp)
    bef8:	dc400115 	stw	r17,4(sp)
    befc:	dc000015 	stw	r16,0(sp)
    bf00:	3025883a 	mov	r18,r6
    bf04:	10005826 	beq	r2,zero,c068 <__ssprint_r+0x198>
    bf08:	2027883a 	mov	r19,r4
    bf0c:	35c00017 	ldw	r23,0(r6)
    bf10:	29000017 	ldw	r4,0(r5)
    bf14:	28800217 	ldw	r2,8(r5)
    bf18:	2823883a 	mov	r17,r5
    bf1c:	0039883a 	mov	fp,zero
    bf20:	0021883a 	mov	r16,zero
    bf24:	80003926 	beq	r16,zero,c00c <__ssprint_r+0x13c>
    bf28:	102b883a 	mov	r21,r2
    bf2c:	102d883a 	mov	r22,r2
    bf30:	80803a36 	bltu	r16,r2,c01c <__ssprint_r+0x14c>
    bf34:	88c0030b 	ldhu	r3,12(r17)
    bf38:	1881200c 	andi	r2,r3,1152
    bf3c:	10002626 	beq	r2,zero,bfd8 <__ssprint_r+0x108>
    bf40:	88800517 	ldw	r2,20(r17)
    bf44:	89400417 	ldw	r5,16(r17)
    bf48:	81800044 	addi	r6,r16,1
    bf4c:	108f883a 	add	r7,r2,r2
    bf50:	3885883a 	add	r2,r7,r2
    bf54:	100ed7fa 	srli	r7,r2,31
    bf58:	216dc83a 	sub	r22,r4,r5
    bf5c:	3589883a 	add	r4,r6,r22
    bf60:	3885883a 	add	r2,r7,r2
    bf64:	102bd07a 	srai	r21,r2,1
    bf68:	a80d883a 	mov	r6,r21
    bf6c:	a900022e 	bgeu	r21,r4,bf78 <__ssprint_r+0xa8>
    bf70:	202b883a 	mov	r21,r4
    bf74:	200d883a 	mov	r6,r4
    bf78:	18c1000c 	andi	r3,r3,1024
    bf7c:	18002a26 	beq	r3,zero,c028 <__ssprint_r+0x158>
    bf80:	300b883a 	mov	r5,r6
    bf84:	9809883a 	mov	r4,r19
    bf88:	00023500 	call	2350 <_malloc_r>
    bf8c:	1029883a 	mov	r20,r2
    bf90:	10002c26 	beq	r2,zero,c044 <__ssprint_r+0x174>
    bf94:	89400417 	ldw	r5,16(r17)
    bf98:	b00d883a 	mov	r6,r22
    bf9c:	1009883a 	mov	r4,r2
    bfa0:	000a3180 	call	a318 <memcpy>
    bfa4:	8880030b 	ldhu	r2,12(r17)
    bfa8:	00fedfc4 	movi	r3,-1153
    bfac:	10c4703a 	and	r2,r2,r3
    bfb0:	10802014 	ori	r2,r2,128
    bfb4:	8880030d 	sth	r2,12(r17)
    bfb8:	a589883a 	add	r4,r20,r22
    bfbc:	adadc83a 	sub	r22,r21,r22
    bfc0:	8d400515 	stw	r21,20(r17)
    bfc4:	8d800215 	stw	r22,8(r17)
    bfc8:	8d000415 	stw	r20,16(r17)
    bfcc:	89000015 	stw	r4,0(r17)
    bfd0:	802b883a 	mov	r21,r16
    bfd4:	802d883a 	mov	r22,r16
    bfd8:	b00d883a 	mov	r6,r22
    bfdc:	e00b883a 	mov	r5,fp
    bfe0:	000a4600 	call	a460 <memmove>
    bfe4:	88800217 	ldw	r2,8(r17)
    bfe8:	89000017 	ldw	r4,0(r17)
    bfec:	90c00217 	ldw	r3,8(r18)
    bff0:	1545c83a 	sub	r2,r2,r21
    bff4:	2589883a 	add	r4,r4,r22
    bff8:	88800215 	stw	r2,8(r17)
    bffc:	89000015 	stw	r4,0(r17)
    c000:	1c21c83a 	sub	r16,r3,r16
    c004:	94000215 	stw	r16,8(r18)
    c008:	80001726 	beq	r16,zero,c068 <__ssprint_r+0x198>
    c00c:	bf000017 	ldw	fp,0(r23)
    c010:	bc000117 	ldw	r16,4(r23)
    c014:	bdc00204 	addi	r23,r23,8
    c018:	003fc206 	br	bf24 <__ssprint_r+0x54>
    c01c:	802b883a 	mov	r21,r16
    c020:	802d883a 	mov	r22,r16
    c024:	003fec06 	br	bfd8 <__ssprint_r+0x108>
    c028:	9809883a 	mov	r4,r19
    c02c:	000b6e00 	call	b6e0 <_realloc_r>
    c030:	1029883a 	mov	r20,r2
    c034:	103fe01e 	bne	r2,zero,bfb8 <__ssprint_r+0xe8>
    c038:	89400417 	ldw	r5,16(r17)
    c03c:	9809883a 	mov	r4,r19
    c040:	00096480 	call	9648 <_free_r>
    c044:	88c0030b 	ldhu	r3,12(r17)
    c048:	00800304 	movi	r2,12
    c04c:	98800015 	stw	r2,0(r19)
    c050:	18c01014 	ori	r3,r3,64
    c054:	88c0030d 	sth	r3,12(r17)
    c058:	00bfffc4 	movi	r2,-1
    c05c:	90000215 	stw	zero,8(r18)
    c060:	90000115 	stw	zero,4(r18)
    c064:	00000206 	br	c070 <__ssprint_r+0x1a0>
    c068:	90000115 	stw	zero,4(r18)
    c06c:	0005883a 	mov	r2,zero
    c070:	dfc00917 	ldw	ra,36(sp)
    c074:	df000817 	ldw	fp,32(sp)
    c078:	ddc00717 	ldw	r23,28(sp)
    c07c:	dd800617 	ldw	r22,24(sp)
    c080:	dd400517 	ldw	r21,20(sp)
    c084:	dd000417 	ldw	r20,16(sp)
    c088:	dcc00317 	ldw	r19,12(sp)
    c08c:	dc800217 	ldw	r18,8(sp)
    c090:	dc400117 	ldw	r17,4(sp)
    c094:	dc000017 	ldw	r16,0(sp)
    c098:	dec00a04 	addi	sp,sp,40
    c09c:	f800283a 	ret

0000c0a0 <___svfiprintf_internal_r>:
    c0a0:	2880030b 	ldhu	r2,12(r5)
    c0a4:	deffc804 	addi	sp,sp,-224
    c0a8:	dcc03115 	stw	r19,196(sp)
    c0ac:	dfc03715 	stw	ra,220(sp)
    c0b0:	df003615 	stw	fp,216(sp)
    c0b4:	ddc03515 	stw	r23,212(sp)
    c0b8:	dd803415 	stw	r22,208(sp)
    c0bc:	dd403315 	stw	r21,204(sp)
    c0c0:	dd003215 	stw	r20,200(sp)
    c0c4:	dc803015 	stw	r18,192(sp)
    c0c8:	dc402f15 	stw	r17,188(sp)
    c0cc:	dc002e15 	stw	r16,184(sp)
    c0d0:	d9402715 	stw	r5,156(sp)
    c0d4:	d9002a15 	stw	r4,168(sp)
    c0d8:	1080200c 	andi	r2,r2,128
    c0dc:	d9c02315 	stw	r7,140(sp)
    c0e0:	3027883a 	mov	r19,r6
    c0e4:	10000226 	beq	r2,zero,c0f0 <___svfiprintf_internal_r+0x50>
    c0e8:	28800417 	ldw	r2,16(r5)
    c0ec:	10041d26 	beq	r2,zero,d164 <___svfiprintf_internal_r+0x10c4>
    c0f0:	dac01a04 	addi	r11,sp,104
    c0f4:	dac01e15 	stw	r11,120(sp)
    c0f8:	d8801e17 	ldw	r2,120(sp)
    c0fc:	dac019c4 	addi	r11,sp,103
    c100:	dd402a17 	ldw	r21,168(sp)
    c104:	ddc02717 	ldw	r23,156(sp)
    c108:	058000b4 	movhi	r22,2
    c10c:	050000b4 	movhi	r20,2
    c110:	dac01f15 	stw	r11,124(sp)
    c114:	12d7c83a 	sub	r11,r2,r11
    c118:	b591f404 	addi	r22,r22,18384
    c11c:	a511f004 	addi	r20,r20,18368
    c120:	dec01a15 	stw	sp,104(sp)
    c124:	d8001c15 	stw	zero,112(sp)
    c128:	d8001b15 	stw	zero,108(sp)
    c12c:	d811883a 	mov	r8,sp
    c130:	d8002915 	stw	zero,164(sp)
    c134:	d8002515 	stw	zero,148(sp)
    c138:	dac02b15 	stw	r11,172(sp)
    c13c:	98800007 	ldb	r2,0(r19)
    c140:	1002dd26 	beq	r2,zero,ccb8 <___svfiprintf_internal_r+0xc18>
    c144:	00c00944 	movi	r3,37
    c148:	9823883a 	mov	r17,r19
    c14c:	10c0021e 	bne	r2,r3,c158 <___svfiprintf_internal_r+0xb8>
    c150:	00001406 	br	c1a4 <___svfiprintf_internal_r+0x104>
    c154:	10c00326 	beq	r2,r3,c164 <___svfiprintf_internal_r+0xc4>
    c158:	8c400044 	addi	r17,r17,1
    c15c:	88800007 	ldb	r2,0(r17)
    c160:	103ffc1e 	bne	r2,zero,c154 <___svfiprintf_internal_r+0xb4>
    c164:	8ce1c83a 	sub	r16,r17,r19
    c168:	80000e26 	beq	r16,zero,c1a4 <___svfiprintf_internal_r+0x104>
    c16c:	d8c01c17 	ldw	r3,112(sp)
    c170:	d8801b17 	ldw	r2,108(sp)
    c174:	44c00015 	stw	r19,0(r8)
    c178:	1c07883a 	add	r3,r3,r16
    c17c:	10800044 	addi	r2,r2,1
    c180:	d8c01c15 	stw	r3,112(sp)
    c184:	44000115 	stw	r16,4(r8)
    c188:	d8801b15 	stw	r2,108(sp)
    c18c:	00c001c4 	movi	r3,7
    c190:	18831e16 	blt	r3,r2,ce0c <___svfiprintf_internal_r+0xd6c>
    c194:	42000204 	addi	r8,r8,8
    c198:	dac02517 	ldw	r11,148(sp)
    c19c:	5c17883a 	add	r11,r11,r16
    c1a0:	dac02515 	stw	r11,148(sp)
    c1a4:	88800007 	ldb	r2,0(r17)
    c1a8:	1002c526 	beq	r2,zero,ccc0 <___svfiprintf_internal_r+0xc20>
    c1ac:	88c00047 	ldb	r3,1(r17)
    c1b0:	8cc00044 	addi	r19,r17,1
    c1b4:	d8001d85 	stb	zero,118(sp)
    c1b8:	0009883a 	mov	r4,zero
    c1bc:	000f883a 	mov	r7,zero
    c1c0:	043fffc4 	movi	r16,-1
    c1c4:	d8002415 	stw	zero,144(sp)
    c1c8:	0025883a 	mov	r18,zero
    c1cc:	01401604 	movi	r5,88
    c1d0:	01800244 	movi	r6,9
    c1d4:	02800a84 	movi	r10,42
    c1d8:	02401b04 	movi	r9,108
    c1dc:	9cc00044 	addi	r19,r19,1
    c1e0:	18bff804 	addi	r2,r3,-32
    c1e4:	2881dd36 	bltu	r5,r2,c95c <___svfiprintf_internal_r+0x8bc>
    c1e8:	100490ba 	slli	r2,r2,2
    c1ec:	02c00074 	movhi	r11,1
    c1f0:	5af08004 	addi	r11,r11,-15872
    c1f4:	12c5883a 	add	r2,r2,r11
    c1f8:	10800017 	ldw	r2,0(r2)
    c1fc:	1000683a 	jmp	r2
    c200:	0000c3fc 	xorhi	zero,zero,783
    c204:	0000c95c 	xori	zero,zero,805
    c208:	0000c95c 	xori	zero,zero,805
    c20c:	0000c3f0 	cmpltui	zero,zero,783
    c210:	0000c95c 	xori	zero,zero,805
    c214:	0000c95c 	xori	zero,zero,805
    c218:	0000c95c 	xori	zero,zero,805
    c21c:	0000c95c 	xori	zero,zero,805
    c220:	0000c95c 	xori	zero,zero,805
    c224:	0000c95c 	xori	zero,zero,805
    c228:	0000c364 	muli	zero,zero,781
    c22c:	0000c540 	call	c54 <ball_movement+0x120>
    c230:	0000c95c 	xori	zero,zero,805
    c234:	0000c390 	cmplti	zero,zero,782
    c238:	0000c990 	cmplti	zero,zero,806
    c23c:	0000c95c 	xori	zero,zero,805
    c240:	0000c984 	movi	zero,806
    c244:	0000c924 	muli	zero,zero,804
    c248:	0000c924 	muli	zero,zero,804
    c24c:	0000c924 	muli	zero,zero,804
    c250:	0000c924 	muli	zero,zero,804
    c254:	0000c924 	muli	zero,zero,804
    c258:	0000c924 	muli	zero,zero,804
    c25c:	0000c924 	muli	zero,zero,804
    c260:	0000c924 	muli	zero,zero,804
    c264:	0000c924 	muli	zero,zero,804
    c268:	0000c95c 	xori	zero,zero,805
    c26c:	0000c95c 	xori	zero,zero,805
    c270:	0000c95c 	xori	zero,zero,805
    c274:	0000c95c 	xori	zero,zero,805
    c278:	0000c95c 	xori	zero,zero,805
    c27c:	0000c95c 	xori	zero,zero,805
    c280:	0000c95c 	xori	zero,zero,805
    c284:	0000c95c 	xori	zero,zero,805
    c288:	0000c95c 	xori	zero,zero,805
    c28c:	0000c95c 	xori	zero,zero,805
    c290:	0000c8c0 	call	c8c <ball_movement+0x158>
    c294:	0000c95c 	xori	zero,zero,805
    c298:	0000c95c 	xori	zero,zero,805
    c29c:	0000c95c 	xori	zero,zero,805
    c2a0:	0000c95c 	xori	zero,zero,805
    c2a4:	0000c95c 	xori	zero,zero,805
    c2a8:	0000c95c 	xori	zero,zero,805
    c2ac:	0000c95c 	xori	zero,zero,805
    c2b0:	0000c95c 	xori	zero,zero,805
    c2b4:	0000c95c 	xori	zero,zero,805
    c2b8:	0000c95c 	xori	zero,zero,805
    c2bc:	0000ca38 	rdprs	zero,zero,808
    c2c0:	0000c95c 	xori	zero,zero,805
    c2c4:	0000c95c 	xori	zero,zero,805
    c2c8:	0000c95c 	xori	zero,zero,805
    c2cc:	0000c95c 	xori	zero,zero,805
    c2d0:	0000c95c 	xori	zero,zero,805
    c2d4:	0000c9d0 	cmplti	zero,zero,807
    c2d8:	0000c95c 	xori	zero,zero,805
    c2dc:	0000c95c 	xori	zero,zero,805
    c2e0:	0000c704 	movi	zero,796
    c2e4:	0000c95c 	xori	zero,zero,805
    c2e8:	0000c95c 	xori	zero,zero,805
    c2ec:	0000c95c 	xori	zero,zero,805
    c2f0:	0000c95c 	xori	zero,zero,805
    c2f4:	0000c95c 	xori	zero,zero,805
    c2f8:	0000c95c 	xori	zero,zero,805
    c2fc:	0000c95c 	xori	zero,zero,805
    c300:	0000c95c 	xori	zero,zero,805
    c304:	0000c95c 	xori	zero,zero,805
    c308:	0000c95c 	xori	zero,zero,805
    c30c:	0000c5f4 	movhi	zero,791
    c310:	0000c7a0 	cmpeqi	zero,zero,798
    c314:	0000c95c 	xori	zero,zero,805
    c318:	0000c95c 	xori	zero,zero,805
    c31c:	0000c95c 	xori	zero,zero,805
    c320:	0000c794 	movui	zero,798
    c324:	0000c7a0 	cmpeqi	zero,zero,798
    c328:	0000c95c 	xori	zero,zero,805
    c32c:	0000c95c 	xori	zero,zero,805
    c330:	0000c784 	movi	zero,798
    c334:	0000c95c 	xori	zero,zero,805
    c338:	0000c748 	cmpgei	zero,zero,797
    c33c:	0000c550 	cmplti	zero,zero,789
    c340:	0000c39c 	xori	zero,zero,782
    c344:	0000c8b4 	movhi	zero,802
    c348:	0000c95c 	xori	zero,zero,805
    c34c:	0000c868 	cmpgeui	zero,zero,801
    c350:	0000c95c 	xori	zero,zero,805
    c354:	0000c4c0 	call	c4c <ball_movement+0x118>
    c358:	0000c95c 	xori	zero,zero,805
    c35c:	0000c95c 	xori	zero,zero,805
    c360:	0000c41c 	xori	zero,zero,784
    c364:	dac02317 	ldw	r11,140(sp)
    c368:	5ac00017 	ldw	r11,0(r11)
    c36c:	dac02415 	stw	r11,144(sp)
    c370:	dac02317 	ldw	r11,140(sp)
    c374:	58800104 	addi	r2,r11,4
    c378:	dac02417 	ldw	r11,144(sp)
    c37c:	5802e90e 	bge	r11,zero,cf24 <___svfiprintf_internal_r+0xe84>
    c380:	dac02417 	ldw	r11,144(sp)
    c384:	d8802315 	stw	r2,140(sp)
    c388:	02d7c83a 	sub	r11,zero,r11
    c38c:	dac02415 	stw	r11,144(sp)
    c390:	94800114 	ori	r18,r18,4
    c394:	98c00007 	ldb	r3,0(r19)
    c398:	003f9006 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c39c:	00800c04 	movi	r2,48
    c3a0:	dac02317 	ldw	r11,140(sp)
    c3a4:	d8801d05 	stb	r2,116(sp)
    c3a8:	00801e04 	movi	r2,120
    c3ac:	d8801d45 	stb	r2,117(sp)
    c3b0:	d8001d85 	stb	zero,118(sp)
    c3b4:	58c00104 	addi	r3,r11,4
    c3b8:	5f000017 	ldw	fp,0(r11)
    c3bc:	0013883a 	mov	r9,zero
    c3c0:	90800094 	ori	r2,r18,2
    c3c4:	80032b16 	blt	r16,zero,d074 <___svfiprintf_internal_r+0xfd4>
    c3c8:	00bfdfc4 	movi	r2,-129
    c3cc:	90a4703a 	and	r18,r18,r2
    c3d0:	d8c02315 	stw	r3,140(sp)
    c3d4:	94800094 	ori	r18,r18,2
    c3d8:	e002dc26 	beq	fp,zero,cf4c <___svfiprintf_internal_r+0xeac>
    c3dc:	010000b4 	movhi	r4,2
    c3e0:	21118704 	addi	r4,r4,17948
    c3e4:	0015883a 	mov	r10,zero
    c3e8:	d9002915 	stw	r4,164(sp)
    c3ec:	00002306 	br	c47c <___svfiprintf_internal_r+0x3dc>
    c3f0:	94800054 	ori	r18,r18,1
    c3f4:	98c00007 	ldb	r3,0(r19)
    c3f8:	003f7806 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c3fc:	38803fcc 	andi	r2,r7,255
    c400:	1080201c 	xori	r2,r2,128
    c404:	10bfe004 	addi	r2,r2,-128
    c408:	1002f31e 	bne	r2,zero,cfd8 <___svfiprintf_internal_r+0xf38>
    c40c:	01000044 	movi	r4,1
    c410:	01c00804 	movi	r7,32
    c414:	98c00007 	ldb	r3,0(r19)
    c418:	003f7006 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c41c:	21003fcc 	andi	r4,r4,255
    c420:	2003aa1e 	bne	r4,zero,d2cc <___svfiprintf_internal_r+0x122c>
    c424:	008000b4 	movhi	r2,2
    c428:	10918704 	addi	r2,r2,17948
    c42c:	d8802915 	stw	r2,164(sp)
    c430:	9080080c 	andi	r2,r18,32
    c434:	1000ba26 	beq	r2,zero,c720 <___svfiprintf_internal_r+0x680>
    c438:	dac02317 	ldw	r11,140(sp)
    c43c:	5f000017 	ldw	fp,0(r11)
    c440:	5a400117 	ldw	r9,4(r11)
    c444:	5ac00204 	addi	r11,r11,8
    c448:	dac02315 	stw	r11,140(sp)
    c44c:	9080004c 	andi	r2,r18,1
    c450:	10029026 	beq	r2,zero,ce94 <___svfiprintf_internal_r+0xdf4>
    c454:	e244b03a 	or	r2,fp,r9
    c458:	1002d41e 	bne	r2,zero,cfac <___svfiprintf_internal_r+0xf0c>
    c45c:	d8001d85 	stb	zero,118(sp)
    c460:	80030b16 	blt	r16,zero,d090 <___svfiprintf_internal_r+0xff0>
    c464:	00bfdfc4 	movi	r2,-129
    c468:	90a4703a 	and	r18,r18,r2
    c46c:	0015883a 	mov	r10,zero
    c470:	80002426 	beq	r16,zero,c504 <___svfiprintf_internal_r+0x464>
    c474:	0039883a 	mov	fp,zero
    c478:	0013883a 	mov	r9,zero
    c47c:	d9002917 	ldw	r4,164(sp)
    c480:	dc401a04 	addi	r17,sp,104
    c484:	e08003cc 	andi	r2,fp,15
    c488:	4806973a 	slli	r3,r9,28
    c48c:	2085883a 	add	r2,r4,r2
    c490:	e038d13a 	srli	fp,fp,4
    c494:	10800003 	ldbu	r2,0(r2)
    c498:	4812d13a 	srli	r9,r9,4
    c49c:	8c7fffc4 	addi	r17,r17,-1
    c4a0:	1f38b03a 	or	fp,r3,fp
    c4a4:	88800005 	stb	r2,0(r17)
    c4a8:	e244b03a 	or	r2,fp,r9
    c4ac:	103ff51e 	bne	r2,zero,c484 <___svfiprintf_internal_r+0x3e4>
    c4b0:	dac01e17 	ldw	r11,120(sp)
    c4b4:	5c57c83a 	sub	r11,r11,r17
    c4b8:	dac02115 	stw	r11,132(sp)
    c4bc:	00001406 	br	c510 <___svfiprintf_internal_r+0x470>
    c4c0:	21003fcc 	andi	r4,r4,255
    c4c4:	2003741e 	bne	r4,zero,d298 <___svfiprintf_internal_r+0x11f8>
    c4c8:	9080080c 	andi	r2,r18,32
    c4cc:	10014526 	beq	r2,zero,c9e4 <___svfiprintf_internal_r+0x944>
    c4d0:	dac02317 	ldw	r11,140(sp)
    c4d4:	d8001d85 	stb	zero,118(sp)
    c4d8:	58c00204 	addi	r3,r11,8
    c4dc:	5f000017 	ldw	fp,0(r11)
    c4e0:	5a400117 	ldw	r9,4(r11)
    c4e4:	8002d916 	blt	r16,zero,d04c <___svfiprintf_internal_r+0xfac>
    c4e8:	013fdfc4 	movi	r4,-129
    c4ec:	e244b03a 	or	r2,fp,r9
    c4f0:	d8c02315 	stw	r3,140(sp)
    c4f4:	9124703a 	and	r18,r18,r4
    c4f8:	0015883a 	mov	r10,zero
    c4fc:	1000b91e 	bne	r2,zero,c7e4 <___svfiprintf_internal_r+0x744>
    c500:	8002e61e 	bne	r16,zero,d09c <___svfiprintf_internal_r+0xffc>
    c504:	0021883a 	mov	r16,zero
    c508:	d8002115 	stw	zero,132(sp)
    c50c:	dc401a04 	addi	r17,sp,104
    c510:	d8c02117 	ldw	r3,132(sp)
    c514:	dc002015 	stw	r16,128(sp)
    c518:	80c0010e 	bge	r16,r3,c520 <___svfiprintf_internal_r+0x480>
    c51c:	d8c02015 	stw	r3,128(sp)
    c520:	52803fcc 	andi	r10,r10,255
    c524:	5280201c 	xori	r10,r10,128
    c528:	52bfe004 	addi	r10,r10,-128
    c52c:	50003c26 	beq	r10,zero,c620 <___svfiprintf_internal_r+0x580>
    c530:	dac02017 	ldw	r11,128(sp)
    c534:	5ac00044 	addi	r11,r11,1
    c538:	dac02015 	stw	r11,128(sp)
    c53c:	00003806 	br	c620 <___svfiprintf_internal_r+0x580>
    c540:	01000044 	movi	r4,1
    c544:	01c00ac4 	movi	r7,43
    c548:	98c00007 	ldb	r3,0(r19)
    c54c:	003f2306 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c550:	21003fcc 	andi	r4,r4,255
    c554:	2003481e 	bne	r4,zero,d278 <___svfiprintf_internal_r+0x11d8>
    c558:	9080080c 	andi	r2,r18,32
    c55c:	10013b26 	beq	r2,zero,ca4c <___svfiprintf_internal_r+0x9ac>
    c560:	dac02317 	ldw	r11,140(sp)
    c564:	d8001d85 	stb	zero,118(sp)
    c568:	58800204 	addi	r2,r11,8
    c56c:	5f000017 	ldw	fp,0(r11)
    c570:	5a400117 	ldw	r9,4(r11)
    c574:	8002a816 	blt	r16,zero,d018 <___svfiprintf_internal_r+0xf78>
    c578:	013fdfc4 	movi	r4,-129
    c57c:	e246b03a 	or	r3,fp,r9
    c580:	d8802315 	stw	r2,140(sp)
    c584:	9124703a 	and	r18,r18,r4
    c588:	18013c26 	beq	r3,zero,ca7c <___svfiprintf_internal_r+0x9dc>
    c58c:	0015883a 	mov	r10,zero
    c590:	dc401a04 	addi	r17,sp,104
    c594:	e006d0fa 	srli	r3,fp,3
    c598:	4808977a 	slli	r4,r9,29
    c59c:	4812d0fa 	srli	r9,r9,3
    c5a0:	e70001cc 	andi	fp,fp,7
    c5a4:	e0800c04 	addi	r2,fp,48
    c5a8:	8c7fffc4 	addi	r17,r17,-1
    c5ac:	20f8b03a 	or	fp,r4,r3
    c5b0:	88800005 	stb	r2,0(r17)
    c5b4:	e246b03a 	or	r3,fp,r9
    c5b8:	183ff61e 	bne	r3,zero,c594 <___svfiprintf_internal_r+0x4f4>
    c5bc:	90c0004c 	andi	r3,r18,1
    c5c0:	1800a526 	beq	r3,zero,c858 <___svfiprintf_internal_r+0x7b8>
    c5c4:	10803fcc 	andi	r2,r2,255
    c5c8:	1080201c 	xori	r2,r2,128
    c5cc:	10bfe004 	addi	r2,r2,-128
    c5d0:	00c00c04 	movi	r3,48
    c5d4:	10ffb626 	beq	r2,r3,c4b0 <___svfiprintf_internal_r+0x410>
    c5d8:	88ffffc5 	stb	r3,-1(r17)
    c5dc:	d8c01e17 	ldw	r3,120(sp)
    c5e0:	88bfffc4 	addi	r2,r17,-1
    c5e4:	1023883a 	mov	r17,r2
    c5e8:	1887c83a 	sub	r3,r3,r2
    c5ec:	d8c02115 	stw	r3,132(sp)
    c5f0:	003fc706 	br	c510 <___svfiprintf_internal_r+0x470>
    c5f4:	dac02317 	ldw	r11,140(sp)
    c5f8:	00c00044 	movi	r3,1
    c5fc:	d8c02015 	stw	r3,128(sp)
    c600:	58800017 	ldw	r2,0(r11)
    c604:	5ac00104 	addi	r11,r11,4
    c608:	d8001d85 	stb	zero,118(sp)
    c60c:	d8801005 	stb	r2,64(sp)
    c610:	dac02315 	stw	r11,140(sp)
    c614:	d8c02115 	stw	r3,132(sp)
    c618:	dc401004 	addi	r17,sp,64
    c61c:	0021883a 	mov	r16,zero
    c620:	90c0008c 	andi	r3,r18,2
    c624:	d8c02215 	stw	r3,136(sp)
    c628:	18000326 	beq	r3,zero,c638 <___svfiprintf_internal_r+0x598>
    c62c:	dac02017 	ldw	r11,128(sp)
    c630:	5ac00084 	addi	r11,r11,2
    c634:	dac02015 	stw	r11,128(sp)
    c638:	90c0210c 	andi	r3,r18,132
    c63c:	d8c02615 	stw	r3,152(sp)
    c640:	1801131e 	bne	r3,zero,ca90 <___svfiprintf_internal_r+0x9f0>
    c644:	dac02417 	ldw	r11,144(sp)
    c648:	d8c02017 	ldw	r3,128(sp)
    c64c:	58f9c83a 	sub	fp,r11,r3
    c650:	07010f0e 	bge	zero,fp,ca90 <___svfiprintf_internal_r+0x9f0>
    c654:	02400404 	movi	r9,16
    c658:	d8c01c17 	ldw	r3,112(sp)
    c65c:	d8801b17 	ldw	r2,108(sp)
    c660:	4f02d60e 	bge	r9,fp,d1bc <___svfiprintf_internal_r+0x111c>
    c664:	014000b4 	movhi	r5,2
    c668:	2951f404 	addi	r5,r5,18384
    c66c:	d9402815 	stw	r5,160(sp)
    c670:	028001c4 	movi	r10,7
    c674:	00000306 	br	c684 <___svfiprintf_internal_r+0x5e4>
    c678:	e73ffc04 	addi	fp,fp,-16
    c67c:	42000204 	addi	r8,r8,8
    c680:	4f00150e 	bge	r9,fp,c6d8 <___svfiprintf_internal_r+0x638>
    c684:	18c00404 	addi	r3,r3,16
    c688:	10800044 	addi	r2,r2,1
    c68c:	45800015 	stw	r22,0(r8)
    c690:	42400115 	stw	r9,4(r8)
    c694:	d8c01c15 	stw	r3,112(sp)
    c698:	d8801b15 	stw	r2,108(sp)
    c69c:	50bff60e 	bge	r10,r2,c678 <___svfiprintf_internal_r+0x5d8>
    c6a0:	d9801a04 	addi	r6,sp,104
    c6a4:	b80b883a 	mov	r5,r23
    c6a8:	a809883a 	mov	r4,r21
    c6ac:	da402c15 	stw	r9,176(sp)
    c6b0:	da802d15 	stw	r10,180(sp)
    c6b4:	000bed00 	call	bed0 <__ssprint_r>
    c6b8:	da402c17 	ldw	r9,176(sp)
    c6bc:	da802d17 	ldw	r10,180(sp)
    c6c0:	1001851e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    c6c4:	e73ffc04 	addi	fp,fp,-16
    c6c8:	d8c01c17 	ldw	r3,112(sp)
    c6cc:	d8801b17 	ldw	r2,108(sp)
    c6d0:	d811883a 	mov	r8,sp
    c6d4:	4f3feb16 	blt	r9,fp,c684 <___svfiprintf_internal_r+0x5e4>
    c6d8:	dac02817 	ldw	r11,160(sp)
    c6dc:	e0c7883a 	add	r3,fp,r3
    c6e0:	10800044 	addi	r2,r2,1
    c6e4:	42c00015 	stw	r11,0(r8)
    c6e8:	47000115 	stw	fp,4(r8)
    c6ec:	d8c01c15 	stw	r3,112(sp)
    c6f0:	d8801b15 	stw	r2,108(sp)
    c6f4:	010001c4 	movi	r4,7
    c6f8:	2081ee16 	blt	r4,r2,ceb4 <___svfiprintf_internal_r+0xe14>
    c6fc:	42000204 	addi	r8,r8,8
    c700:	0000e506 	br	ca98 <___svfiprintf_internal_r+0x9f8>
    c704:	21003fcc 	andi	r4,r4,255
    c708:	2002dd1e 	bne	r4,zero,d280 <___svfiprintf_internal_r+0x11e0>
    c70c:	008000b4 	movhi	r2,2
    c710:	10918204 	addi	r2,r2,17928
    c714:	d8802915 	stw	r2,164(sp)
    c718:	9080080c 	andi	r2,r18,32
    c71c:	103f461e 	bne	r2,zero,c438 <___svfiprintf_internal_r+0x398>
    c720:	9080040c 	andi	r2,r18,16
    c724:	10022e1e 	bne	r2,zero,cfe0 <___svfiprintf_internal_r+0xf40>
    c728:	9080100c 	andi	r2,r18,64
    c72c:	dac02317 	ldw	r11,140(sp)
    c730:	10027326 	beq	r2,zero,d100 <___svfiprintf_internal_r+0x1060>
    c734:	5f00000b 	ldhu	fp,0(r11)
    c738:	5ac00104 	addi	r11,r11,4
    c73c:	0013883a 	mov	r9,zero
    c740:	dac02315 	stw	r11,140(sp)
    c744:	003f4106 	br	c44c <___svfiprintf_internal_r+0x3ac>
    c748:	21003fcc 	andi	r4,r4,255
    c74c:	2002e11e 	bne	r4,zero,d2d4 <___svfiprintf_internal_r+0x1234>
    c750:	9080080c 	andi	r2,r18,32
    c754:	1002011e 	bne	r2,zero,cf5c <___svfiprintf_internal_r+0xebc>
    c758:	9080040c 	andi	r2,r18,16
    c75c:	10023e1e 	bne	r2,zero,d058 <___svfiprintf_internal_r+0xfb8>
    c760:	9480100c 	andi	r18,r18,64
    c764:	90023c26 	beq	r18,zero,d058 <___svfiprintf_internal_r+0xfb8>
    c768:	dac02317 	ldw	r11,140(sp)
    c76c:	58800017 	ldw	r2,0(r11)
    c770:	5ac00104 	addi	r11,r11,4
    c774:	dac02315 	stw	r11,140(sp)
    c778:	dac02517 	ldw	r11,148(sp)
    c77c:	12c0000d 	sth	r11,0(r2)
    c780:	003e6e06 	br	c13c <___svfiprintf_internal_r+0x9c>
    c784:	98c00007 	ldb	r3,0(r19)
    c788:	1a422926 	beq	r3,r9,d030 <___svfiprintf_internal_r+0xf90>
    c78c:	94800414 	ori	r18,r18,16
    c790:	003e9206 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c794:	94801014 	ori	r18,r18,64
    c798:	98c00007 	ldb	r3,0(r19)
    c79c:	003e8f06 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c7a0:	21003fcc 	andi	r4,r4,255
    c7a4:	2002c71e 	bne	r4,zero,d2c4 <___svfiprintf_internal_r+0x1224>
    c7a8:	9080080c 	andi	r2,r18,32
    c7ac:	10004926 	beq	r2,zero,c8d4 <___svfiprintf_internal_r+0x834>
    c7b0:	dac02317 	ldw	r11,140(sp)
    c7b4:	58800117 	ldw	r2,4(r11)
    c7b8:	5f000017 	ldw	fp,0(r11)
    c7bc:	5ac00204 	addi	r11,r11,8
    c7c0:	dac02315 	stw	r11,140(sp)
    c7c4:	1013883a 	mov	r9,r2
    c7c8:	10004b16 	blt	r2,zero,c8f8 <___svfiprintf_internal_r+0x858>
    c7cc:	da801d83 	ldbu	r10,118(sp)
    c7d0:	8001cb16 	blt	r16,zero,cf00 <___svfiprintf_internal_r+0xe60>
    c7d4:	00ffdfc4 	movi	r3,-129
    c7d8:	e244b03a 	or	r2,fp,r9
    c7dc:	90e4703a 	and	r18,r18,r3
    c7e0:	103f4726 	beq	r2,zero,c500 <___svfiprintf_internal_r+0x460>
    c7e4:	48008c26 	beq	r9,zero,ca18 <___svfiprintf_internal_r+0x978>
    c7e8:	dc802015 	stw	r18,128(sp)
    c7ec:	dc002115 	stw	r16,132(sp)
    c7f0:	dc401a04 	addi	r17,sp,104
    c7f4:	e021883a 	mov	r16,fp
    c7f8:	da002215 	stw	r8,136(sp)
    c7fc:	5039883a 	mov	fp,r10
    c800:	4825883a 	mov	r18,r9
    c804:	8009883a 	mov	r4,r16
    c808:	900b883a 	mov	r5,r18
    c80c:	01800284 	movi	r6,10
    c810:	000f883a 	mov	r7,zero
    c814:	000f7d00 	call	f7d0 <__umoddi3>
    c818:	10800c04 	addi	r2,r2,48
    c81c:	8c7fffc4 	addi	r17,r17,-1
    c820:	8009883a 	mov	r4,r16
    c824:	900b883a 	mov	r5,r18
    c828:	88800005 	stb	r2,0(r17)
    c82c:	01800284 	movi	r6,10
    c830:	000f883a 	mov	r7,zero
    c834:	000f2580 	call	f258 <__udivdi3>
    c838:	1021883a 	mov	r16,r2
    c83c:	10c4b03a 	or	r2,r2,r3
    c840:	1825883a 	mov	r18,r3
    c844:	103fef1e 	bne	r2,zero,c804 <___svfiprintf_internal_r+0x764>
    c848:	dc802017 	ldw	r18,128(sp)
    c84c:	dc002117 	ldw	r16,132(sp)
    c850:	da002217 	ldw	r8,136(sp)
    c854:	e015883a 	mov	r10,fp
    c858:	d8c01e17 	ldw	r3,120(sp)
    c85c:	1c47c83a 	sub	r3,r3,r17
    c860:	d8c02115 	stw	r3,132(sp)
    c864:	003f2a06 	br	c510 <___svfiprintf_internal_r+0x470>
    c868:	dac02317 	ldw	r11,140(sp)
    c86c:	d8001d85 	stb	zero,118(sp)
    c870:	5c400017 	ldw	r17,0(r11)
    c874:	5f000104 	addi	fp,r11,4
    c878:	88022f26 	beq	r17,zero,d138 <___svfiprintf_internal_r+0x1098>
    c87c:	80022516 	blt	r16,zero,d114 <___svfiprintf_internal_r+0x1074>
    c880:	800d883a 	mov	r6,r16
    c884:	000b883a 	mov	r5,zero
    c888:	8809883a 	mov	r4,r17
    c88c:	da002c15 	stw	r8,176(sp)
    c890:	000a2340 	call	a234 <memchr>
    c894:	da002c17 	ldw	r8,176(sp)
    c898:	10026426 	beq	r2,zero,d22c <___svfiprintf_internal_r+0x118c>
    c89c:	1445c83a 	sub	r2,r2,r17
    c8a0:	d8802115 	stw	r2,132(sp)
    c8a4:	da801d83 	ldbu	r10,118(sp)
    c8a8:	df002315 	stw	fp,140(sp)
    c8ac:	0021883a 	mov	r16,zero
    c8b0:	003f1706 	br	c510 <___svfiprintf_internal_r+0x470>
    c8b4:	94800814 	ori	r18,r18,32
    c8b8:	98c00007 	ldb	r3,0(r19)
    c8bc:	003e4706 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c8c0:	21003fcc 	andi	r4,r4,255
    c8c4:	2002701e 	bne	r4,zero,d288 <___svfiprintf_internal_r+0x11e8>
    c8c8:	94800414 	ori	r18,r18,16
    c8cc:	9080080c 	andi	r2,r18,32
    c8d0:	103fb71e 	bne	r2,zero,c7b0 <___svfiprintf_internal_r+0x710>
    c8d4:	9080040c 	andi	r2,r18,16
    c8d8:	1001ab26 	beq	r2,zero,cf88 <___svfiprintf_internal_r+0xee8>
    c8dc:	dac02317 	ldw	r11,140(sp)
    c8e0:	5f000017 	ldw	fp,0(r11)
    c8e4:	5ac00104 	addi	r11,r11,4
    c8e8:	dac02315 	stw	r11,140(sp)
    c8ec:	e013d7fa 	srai	r9,fp,31
    c8f0:	4805883a 	mov	r2,r9
    c8f4:	103fb50e 	bge	r2,zero,c7cc <___svfiprintf_internal_r+0x72c>
    c8f8:	0739c83a 	sub	fp,zero,fp
    c8fc:	02800b44 	movi	r10,45
    c900:	e004c03a 	cmpne	r2,fp,zero
    c904:	0253c83a 	sub	r9,zero,r9
    c908:	da801d85 	stb	r10,118(sp)
    c90c:	4893c83a 	sub	r9,r9,r2
    c910:	80023016 	blt	r16,zero,d1d4 <___svfiprintf_internal_r+0x1134>
    c914:	00bfdfc4 	movi	r2,-129
    c918:	90a4703a 	and	r18,r18,r2
    c91c:	483fb21e 	bne	r9,zero,c7e8 <___svfiprintf_internal_r+0x748>
    c920:	00003d06 	br	ca18 <___svfiprintf_internal_r+0x978>
    c924:	9817883a 	mov	r11,r19
    c928:	d8002415 	stw	zero,144(sp)
    c92c:	18bff404 	addi	r2,r3,-48
    c930:	0019883a 	mov	r12,zero
    c934:	58c00007 	ldb	r3,0(r11)
    c938:	630002a4 	muli	r12,r12,10
    c93c:	9cc00044 	addi	r19,r19,1
    c940:	9817883a 	mov	r11,r19
    c944:	1319883a 	add	r12,r2,r12
    c948:	18bff404 	addi	r2,r3,-48
    c94c:	30bff92e 	bgeu	r6,r2,c934 <___svfiprintf_internal_r+0x894>
    c950:	db002415 	stw	r12,144(sp)
    c954:	18bff804 	addi	r2,r3,-32
    c958:	28be232e 	bgeu	r5,r2,c1e8 <___svfiprintf_internal_r+0x148>
    c95c:	21003fcc 	andi	r4,r4,255
    c960:	20024b1e 	bne	r4,zero,d290 <___svfiprintf_internal_r+0x11f0>
    c964:	1800d626 	beq	r3,zero,ccc0 <___svfiprintf_internal_r+0xc20>
    c968:	02c00044 	movi	r11,1
    c96c:	dac02015 	stw	r11,128(sp)
    c970:	d8c01005 	stb	r3,64(sp)
    c974:	d8001d85 	stb	zero,118(sp)
    c978:	dac02115 	stw	r11,132(sp)
    c97c:	dc401004 	addi	r17,sp,64
    c980:	003f2606 	br	c61c <___svfiprintf_internal_r+0x57c>
    c984:	94802014 	ori	r18,r18,128
    c988:	98c00007 	ldb	r3,0(r19)
    c98c:	003e1306 	br	c1dc <___svfiprintf_internal_r+0x13c>
    c990:	98c00007 	ldb	r3,0(r19)
    c994:	9ac00044 	addi	r11,r19,1
    c998:	1a822b26 	beq	r3,r10,d248 <___svfiprintf_internal_r+0x11a8>
    c99c:	18bff404 	addi	r2,r3,-48
    c9a0:	0021883a 	mov	r16,zero
    c9a4:	30821e36 	bltu	r6,r2,d220 <___svfiprintf_internal_r+0x1180>
    c9a8:	58c00007 	ldb	r3,0(r11)
    c9ac:	840002a4 	muli	r16,r16,10
    c9b0:	5cc00044 	addi	r19,r11,1
    c9b4:	9817883a 	mov	r11,r19
    c9b8:	80a1883a 	add	r16,r16,r2
    c9bc:	18bff404 	addi	r2,r3,-48
    c9c0:	30bff92e 	bgeu	r6,r2,c9a8 <___svfiprintf_internal_r+0x908>
    c9c4:	803e060e 	bge	r16,zero,c1e0 <___svfiprintf_internal_r+0x140>
    c9c8:	043fffc4 	movi	r16,-1
    c9cc:	003e0406 	br	c1e0 <___svfiprintf_internal_r+0x140>
    c9d0:	21003fcc 	andi	r4,r4,255
    c9d4:	2002371e 	bne	r4,zero,d2b4 <___svfiprintf_internal_r+0x1214>
    c9d8:	94800414 	ori	r18,r18,16
    c9dc:	9080080c 	andi	r2,r18,32
    c9e0:	103ebb1e 	bne	r2,zero,c4d0 <___svfiprintf_internal_r+0x430>
    c9e4:	9080040c 	andi	r2,r18,16
    c9e8:	10013b26 	beq	r2,zero,ced8 <___svfiprintf_internal_r+0xe38>
    c9ec:	dac02317 	ldw	r11,140(sp)
    c9f0:	d8001d85 	stb	zero,118(sp)
    c9f4:	0013883a 	mov	r9,zero
    c9f8:	58800104 	addi	r2,r11,4
    c9fc:	5f000017 	ldw	fp,0(r11)
    ca00:	80013d16 	blt	r16,zero,cef8 <___svfiprintf_internal_r+0xe58>
    ca04:	00ffdfc4 	movi	r3,-129
    ca08:	d8802315 	stw	r2,140(sp)
    ca0c:	90e4703a 	and	r18,r18,r3
    ca10:	0015883a 	mov	r10,zero
    ca14:	e03eba26 	beq	fp,zero,c500 <___svfiprintf_internal_r+0x460>
    ca18:	00800244 	movi	r2,9
    ca1c:	173f7236 	bltu	r2,fp,c7e8 <___svfiprintf_internal_r+0x748>
    ca20:	dac02b17 	ldw	r11,172(sp)
    ca24:	e7000c04 	addi	fp,fp,48
    ca28:	df0019c5 	stb	fp,103(sp)
    ca2c:	dac02115 	stw	r11,132(sp)
    ca30:	dc4019c4 	addi	r17,sp,103
    ca34:	003eb606 	br	c510 <___svfiprintf_internal_r+0x470>
    ca38:	21003fcc 	andi	r4,r4,255
    ca3c:	20021f1e 	bne	r4,zero,d2bc <___svfiprintf_internal_r+0x121c>
    ca40:	94800414 	ori	r18,r18,16
    ca44:	9080080c 	andi	r2,r18,32
    ca48:	103ec51e 	bne	r2,zero,c560 <___svfiprintf_internal_r+0x4c0>
    ca4c:	9080040c 	andi	r2,r18,16
    ca50:	10016926 	beq	r2,zero,cff8 <___svfiprintf_internal_r+0xf58>
    ca54:	dac02317 	ldw	r11,140(sp)
    ca58:	d8001d85 	stb	zero,118(sp)
    ca5c:	0013883a 	mov	r9,zero
    ca60:	58800104 	addi	r2,r11,4
    ca64:	5f000017 	ldw	fp,0(r11)
    ca68:	80016b16 	blt	r16,zero,d018 <___svfiprintf_internal_r+0xf78>
    ca6c:	00ffdfc4 	movi	r3,-129
    ca70:	d8802315 	stw	r2,140(sp)
    ca74:	90e4703a 	and	r18,r18,r3
    ca78:	e03ec41e 	bne	fp,zero,c58c <___svfiprintf_internal_r+0x4ec>
    ca7c:	0015883a 	mov	r10,zero
    ca80:	8001c226 	beq	r16,zero,d18c <___svfiprintf_internal_r+0x10ec>
    ca84:	0039883a 	mov	fp,zero
    ca88:	0013883a 	mov	r9,zero
    ca8c:	003ec006 	br	c590 <___svfiprintf_internal_r+0x4f0>
    ca90:	d8c01c17 	ldw	r3,112(sp)
    ca94:	d8801b17 	ldw	r2,108(sp)
    ca98:	d9001d87 	ldb	r4,118(sp)
    ca9c:	20000b26 	beq	r4,zero,cacc <___svfiprintf_internal_r+0xa2c>
    caa0:	d9001d84 	addi	r4,sp,118
    caa4:	18c00044 	addi	r3,r3,1
    caa8:	10800044 	addi	r2,r2,1
    caac:	41000015 	stw	r4,0(r8)
    cab0:	01000044 	movi	r4,1
    cab4:	41000115 	stw	r4,4(r8)
    cab8:	d8c01c15 	stw	r3,112(sp)
    cabc:	d8801b15 	stw	r2,108(sp)
    cac0:	010001c4 	movi	r4,7
    cac4:	2080e116 	blt	r4,r2,ce4c <___svfiprintf_internal_r+0xdac>
    cac8:	42000204 	addi	r8,r8,8
    cacc:	dac02217 	ldw	r11,136(sp)
    cad0:	58000b26 	beq	r11,zero,cb00 <___svfiprintf_internal_r+0xa60>
    cad4:	d9001d04 	addi	r4,sp,116
    cad8:	18c00084 	addi	r3,r3,2
    cadc:	10800044 	addi	r2,r2,1
    cae0:	41000015 	stw	r4,0(r8)
    cae4:	01000084 	movi	r4,2
    cae8:	41000115 	stw	r4,4(r8)
    caec:	d8c01c15 	stw	r3,112(sp)
    caf0:	d8801b15 	stw	r2,108(sp)
    caf4:	010001c4 	movi	r4,7
    caf8:	2080dd16 	blt	r4,r2,ce70 <___svfiprintf_internal_r+0xdd0>
    cafc:	42000204 	addi	r8,r8,8
    cb00:	dac02617 	ldw	r11,152(sp)
    cb04:	01002004 	movi	r4,128
    cb08:	59008426 	beq	r11,r4,cd1c <___svfiprintf_internal_r+0xc7c>
    cb0c:	dac02117 	ldw	r11,132(sp)
    cb10:	82e1c83a 	sub	r16,r16,r11
    cb14:	0400270e 	bge	zero,r16,cbb4 <___svfiprintf_internal_r+0xb14>
    cb18:	01c00404 	movi	r7,16
    cb1c:	3c016a0e 	bge	r7,r16,d0c8 <___svfiprintf_internal_r+0x1028>
    cb20:	014000b4 	movhi	r5,2
    cb24:	2951f004 	addi	r5,r5,18368
    cb28:	d9402215 	stw	r5,136(sp)
    cb2c:	070001c4 	movi	fp,7
    cb30:	00000306 	br	cb40 <___svfiprintf_internal_r+0xaa0>
    cb34:	843ffc04 	addi	r16,r16,-16
    cb38:	42000204 	addi	r8,r8,8
    cb3c:	3c00130e 	bge	r7,r16,cb8c <___svfiprintf_internal_r+0xaec>
    cb40:	18c00404 	addi	r3,r3,16
    cb44:	10800044 	addi	r2,r2,1
    cb48:	45000015 	stw	r20,0(r8)
    cb4c:	41c00115 	stw	r7,4(r8)
    cb50:	d8c01c15 	stw	r3,112(sp)
    cb54:	d8801b15 	stw	r2,108(sp)
    cb58:	e0bff60e 	bge	fp,r2,cb34 <___svfiprintf_internal_r+0xa94>
    cb5c:	d9801a04 	addi	r6,sp,104
    cb60:	b80b883a 	mov	r5,r23
    cb64:	a809883a 	mov	r4,r21
    cb68:	d9c02c15 	stw	r7,176(sp)
    cb6c:	000bed00 	call	bed0 <__ssprint_r>
    cb70:	d9c02c17 	ldw	r7,176(sp)
    cb74:	1000581e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cb78:	843ffc04 	addi	r16,r16,-16
    cb7c:	d8c01c17 	ldw	r3,112(sp)
    cb80:	d8801b17 	ldw	r2,108(sp)
    cb84:	d811883a 	mov	r8,sp
    cb88:	3c3fed16 	blt	r7,r16,cb40 <___svfiprintf_internal_r+0xaa0>
    cb8c:	dac02217 	ldw	r11,136(sp)
    cb90:	1c07883a 	add	r3,r3,r16
    cb94:	10800044 	addi	r2,r2,1
    cb98:	42c00015 	stw	r11,0(r8)
    cb9c:	44000115 	stw	r16,4(r8)
    cba0:	d8c01c15 	stw	r3,112(sp)
    cba4:	d8801b15 	stw	r2,108(sp)
    cba8:	010001c4 	movi	r4,7
    cbac:	20809e16 	blt	r4,r2,ce28 <___svfiprintf_internal_r+0xd88>
    cbb0:	42000204 	addi	r8,r8,8
    cbb4:	dac02117 	ldw	r11,132(sp)
    cbb8:	10800044 	addi	r2,r2,1
    cbbc:	44400015 	stw	r17,0(r8)
    cbc0:	58c7883a 	add	r3,r11,r3
    cbc4:	42c00115 	stw	r11,4(r8)
    cbc8:	d8c01c15 	stw	r3,112(sp)
    cbcc:	d8801b15 	stw	r2,108(sp)
    cbd0:	010001c4 	movi	r4,7
    cbd4:	20807f16 	blt	r4,r2,cdd4 <___svfiprintf_internal_r+0xd34>
    cbd8:	42000204 	addi	r8,r8,8
    cbdc:	9480010c 	andi	r18,r18,4
    cbe0:	90002926 	beq	r18,zero,cc88 <___svfiprintf_internal_r+0xbe8>
    cbe4:	dac02417 	ldw	r11,144(sp)
    cbe8:	d8802017 	ldw	r2,128(sp)
    cbec:	58a1c83a 	sub	r16,r11,r2
    cbf0:	0400250e 	bge	zero,r16,cc88 <___svfiprintf_internal_r+0xbe8>
    cbf4:	04400404 	movi	r17,16
    cbf8:	d8801b17 	ldw	r2,108(sp)
    cbfc:	8c017c0e 	bge	r17,r16,d1f0 <___svfiprintf_internal_r+0x1150>
    cc00:	014000b4 	movhi	r5,2
    cc04:	2951f404 	addi	r5,r5,18384
    cc08:	d9402815 	stw	r5,160(sp)
    cc0c:	048001c4 	movi	r18,7
    cc10:	00000306 	br	cc20 <___svfiprintf_internal_r+0xb80>
    cc14:	843ffc04 	addi	r16,r16,-16
    cc18:	42000204 	addi	r8,r8,8
    cc1c:	8c00110e 	bge	r17,r16,cc64 <___svfiprintf_internal_r+0xbc4>
    cc20:	18c00404 	addi	r3,r3,16
    cc24:	10800044 	addi	r2,r2,1
    cc28:	45800015 	stw	r22,0(r8)
    cc2c:	44400115 	stw	r17,4(r8)
    cc30:	d8c01c15 	stw	r3,112(sp)
    cc34:	d8801b15 	stw	r2,108(sp)
    cc38:	90bff60e 	bge	r18,r2,cc14 <___svfiprintf_internal_r+0xb74>
    cc3c:	d9801a04 	addi	r6,sp,104
    cc40:	b80b883a 	mov	r5,r23
    cc44:	a809883a 	mov	r4,r21
    cc48:	000bed00 	call	bed0 <__ssprint_r>
    cc4c:	1000221e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cc50:	843ffc04 	addi	r16,r16,-16
    cc54:	d8c01c17 	ldw	r3,112(sp)
    cc58:	d8801b17 	ldw	r2,108(sp)
    cc5c:	d811883a 	mov	r8,sp
    cc60:	8c3fef16 	blt	r17,r16,cc20 <___svfiprintf_internal_r+0xb80>
    cc64:	dac02817 	ldw	r11,160(sp)
    cc68:	1c07883a 	add	r3,r3,r16
    cc6c:	10800044 	addi	r2,r2,1
    cc70:	42c00015 	stw	r11,0(r8)
    cc74:	44000115 	stw	r16,4(r8)
    cc78:	d8c01c15 	stw	r3,112(sp)
    cc7c:	d8801b15 	stw	r2,108(sp)
    cc80:	010001c4 	movi	r4,7
    cc84:	2080aa16 	blt	r4,r2,cf30 <___svfiprintf_internal_r+0xe90>
    cc88:	d8802417 	ldw	r2,144(sp)
    cc8c:	dac02017 	ldw	r11,128(sp)
    cc90:	12c0010e 	bge	r2,r11,cc98 <___svfiprintf_internal_r+0xbf8>
    cc94:	5805883a 	mov	r2,r11
    cc98:	dac02517 	ldw	r11,148(sp)
    cc9c:	5897883a 	add	r11,r11,r2
    cca0:	dac02515 	stw	r11,148(sp)
    cca4:	1800531e 	bne	r3,zero,cdf4 <___svfiprintf_internal_r+0xd54>
    cca8:	98800007 	ldb	r2,0(r19)
    ccac:	d8001b15 	stw	zero,108(sp)
    ccb0:	d811883a 	mov	r8,sp
    ccb4:	103d231e 	bne	r2,zero,c144 <___svfiprintf_internal_r+0xa4>
    ccb8:	9823883a 	mov	r17,r19
    ccbc:	003d3906 	br	c1a4 <___svfiprintf_internal_r+0x104>
    ccc0:	d8801c17 	ldw	r2,112(sp)
    ccc4:	10000426 	beq	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    ccc8:	d9402717 	ldw	r5,156(sp)
    cccc:	d9002a17 	ldw	r4,168(sp)
    ccd0:	d9801a04 	addi	r6,sp,104
    ccd4:	000bed00 	call	bed0 <__ssprint_r>
    ccd8:	dac02717 	ldw	r11,156(sp)
    ccdc:	d8802517 	ldw	r2,148(sp)
    cce0:	58c0030b 	ldhu	r3,12(r11)
    cce4:	18c0100c 	andi	r3,r3,64
    cce8:	1801381e 	bne	r3,zero,d1cc <___svfiprintf_internal_r+0x112c>
    ccec:	dfc03717 	ldw	ra,220(sp)
    ccf0:	df003617 	ldw	fp,216(sp)
    ccf4:	ddc03517 	ldw	r23,212(sp)
    ccf8:	dd803417 	ldw	r22,208(sp)
    ccfc:	dd403317 	ldw	r21,204(sp)
    cd00:	dd003217 	ldw	r20,200(sp)
    cd04:	dcc03117 	ldw	r19,196(sp)
    cd08:	dc803017 	ldw	r18,192(sp)
    cd0c:	dc402f17 	ldw	r17,188(sp)
    cd10:	dc002e17 	ldw	r16,184(sp)
    cd14:	dec03804 	addi	sp,sp,224
    cd18:	f800283a 	ret
    cd1c:	dac02417 	ldw	r11,144(sp)
    cd20:	d9002017 	ldw	r4,128(sp)
    cd24:	5939c83a 	sub	fp,r11,r4
    cd28:	073f780e 	bge	zero,fp,cb0c <___svfiprintf_internal_r+0xa6c>
    cd2c:	02400404 	movi	r9,16
    cd30:	4f01370e 	bge	r9,fp,d210 <___svfiprintf_internal_r+0x1170>
    cd34:	02c000b4 	movhi	r11,2
    cd38:	5ad1f004 	addi	r11,r11,18368
    cd3c:	dac02215 	stw	r11,136(sp)
    cd40:	028001c4 	movi	r10,7
    cd44:	00000306 	br	cd54 <___svfiprintf_internal_r+0xcb4>
    cd48:	e73ffc04 	addi	fp,fp,-16
    cd4c:	42000204 	addi	r8,r8,8
    cd50:	4f00150e 	bge	r9,fp,cda8 <___svfiprintf_internal_r+0xd08>
    cd54:	18c00404 	addi	r3,r3,16
    cd58:	10800044 	addi	r2,r2,1
    cd5c:	45000015 	stw	r20,0(r8)
    cd60:	42400115 	stw	r9,4(r8)
    cd64:	d8c01c15 	stw	r3,112(sp)
    cd68:	d8801b15 	stw	r2,108(sp)
    cd6c:	50bff60e 	bge	r10,r2,cd48 <___svfiprintf_internal_r+0xca8>
    cd70:	d9801a04 	addi	r6,sp,104
    cd74:	b80b883a 	mov	r5,r23
    cd78:	a809883a 	mov	r4,r21
    cd7c:	da402c15 	stw	r9,176(sp)
    cd80:	da802d15 	stw	r10,180(sp)
    cd84:	000bed00 	call	bed0 <__ssprint_r>
    cd88:	da402c17 	ldw	r9,176(sp)
    cd8c:	da802d17 	ldw	r10,180(sp)
    cd90:	103fd11e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cd94:	e73ffc04 	addi	fp,fp,-16
    cd98:	d8c01c17 	ldw	r3,112(sp)
    cd9c:	d8801b17 	ldw	r2,108(sp)
    cda0:	d811883a 	mov	r8,sp
    cda4:	4f3feb16 	blt	r9,fp,cd54 <___svfiprintf_internal_r+0xcb4>
    cda8:	dac02217 	ldw	r11,136(sp)
    cdac:	1f07883a 	add	r3,r3,fp
    cdb0:	10800044 	addi	r2,r2,1
    cdb4:	42c00015 	stw	r11,0(r8)
    cdb8:	47000115 	stw	fp,4(r8)
    cdbc:	d8c01c15 	stw	r3,112(sp)
    cdc0:	d8801b15 	stw	r2,108(sp)
    cdc4:	010001c4 	movi	r4,7
    cdc8:	2080b616 	blt	r4,r2,d0a4 <___svfiprintf_internal_r+0x1004>
    cdcc:	42000204 	addi	r8,r8,8
    cdd0:	003f4e06 	br	cb0c <___svfiprintf_internal_r+0xa6c>
    cdd4:	d9801a04 	addi	r6,sp,104
    cdd8:	b80b883a 	mov	r5,r23
    cddc:	a809883a 	mov	r4,r21
    cde0:	000bed00 	call	bed0 <__ssprint_r>
    cde4:	103fbc1e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cde8:	d8c01c17 	ldw	r3,112(sp)
    cdec:	d811883a 	mov	r8,sp
    cdf0:	003f7a06 	br	cbdc <___svfiprintf_internal_r+0xb3c>
    cdf4:	d9801a04 	addi	r6,sp,104
    cdf8:	b80b883a 	mov	r5,r23
    cdfc:	a809883a 	mov	r4,r21
    ce00:	000bed00 	call	bed0 <__ssprint_r>
    ce04:	103fa826 	beq	r2,zero,cca8 <___svfiprintf_internal_r+0xc08>
    ce08:	003fb306 	br	ccd8 <___svfiprintf_internal_r+0xc38>
    ce0c:	d9801a04 	addi	r6,sp,104
    ce10:	b80b883a 	mov	r5,r23
    ce14:	a809883a 	mov	r4,r21
    ce18:	000bed00 	call	bed0 <__ssprint_r>
    ce1c:	103fae1e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    ce20:	d811883a 	mov	r8,sp
    ce24:	003cdc06 	br	c198 <___svfiprintf_internal_r+0xf8>
    ce28:	d9801a04 	addi	r6,sp,104
    ce2c:	b80b883a 	mov	r5,r23
    ce30:	a809883a 	mov	r4,r21
    ce34:	000bed00 	call	bed0 <__ssprint_r>
    ce38:	103fa71e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    ce3c:	d8c01c17 	ldw	r3,112(sp)
    ce40:	d8801b17 	ldw	r2,108(sp)
    ce44:	d811883a 	mov	r8,sp
    ce48:	003f5a06 	br	cbb4 <___svfiprintf_internal_r+0xb14>
    ce4c:	d9801a04 	addi	r6,sp,104
    ce50:	b80b883a 	mov	r5,r23
    ce54:	a809883a 	mov	r4,r21
    ce58:	000bed00 	call	bed0 <__ssprint_r>
    ce5c:	103f9e1e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    ce60:	d8c01c17 	ldw	r3,112(sp)
    ce64:	d8801b17 	ldw	r2,108(sp)
    ce68:	d811883a 	mov	r8,sp
    ce6c:	003f1706 	br	cacc <___svfiprintf_internal_r+0xa2c>
    ce70:	d9801a04 	addi	r6,sp,104
    ce74:	b80b883a 	mov	r5,r23
    ce78:	a809883a 	mov	r4,r21
    ce7c:	000bed00 	call	bed0 <__ssprint_r>
    ce80:	103f951e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    ce84:	d8c01c17 	ldw	r3,112(sp)
    ce88:	d8801b17 	ldw	r2,108(sp)
    ce8c:	d811883a 	mov	r8,sp
    ce90:	003f1b06 	br	cb00 <___svfiprintf_internal_r+0xa60>
    ce94:	d8001d85 	stb	zero,118(sp)
    ce98:	80007b16 	blt	r16,zero,d088 <___svfiprintf_internal_r+0xfe8>
    ce9c:	00ffdfc4 	movi	r3,-129
    cea0:	e244b03a 	or	r2,fp,r9
    cea4:	90e4703a 	and	r18,r18,r3
    cea8:	103d7026 	beq	r2,zero,c46c <___svfiprintf_internal_r+0x3cc>
    ceac:	0015883a 	mov	r10,zero
    ceb0:	003d7206 	br	c47c <___svfiprintf_internal_r+0x3dc>
    ceb4:	d9801a04 	addi	r6,sp,104
    ceb8:	b80b883a 	mov	r5,r23
    cebc:	a809883a 	mov	r4,r21
    cec0:	000bed00 	call	bed0 <__ssprint_r>
    cec4:	103f841e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cec8:	d8c01c17 	ldw	r3,112(sp)
    cecc:	d8801b17 	ldw	r2,108(sp)
    ced0:	d811883a 	mov	r8,sp
    ced4:	003ef006 	br	ca98 <___svfiprintf_internal_r+0x9f8>
    ced8:	9080100c 	andi	r2,r18,64
    cedc:	d8001d85 	stb	zero,118(sp)
    cee0:	dac02317 	ldw	r11,140(sp)
    cee4:	10008126 	beq	r2,zero,d0ec <___svfiprintf_internal_r+0x104c>
    cee8:	58800104 	addi	r2,r11,4
    ceec:	5f00000b 	ldhu	fp,0(r11)
    cef0:	0013883a 	mov	r9,zero
    cef4:	803ec30e 	bge	r16,zero,ca04 <___svfiprintf_internal_r+0x964>
    cef8:	d8802315 	stw	r2,140(sp)
    cefc:	0015883a 	mov	r10,zero
    cf00:	e244b03a 	or	r2,fp,r9
    cf04:	103e371e 	bne	r2,zero,c7e4 <___svfiprintf_internal_r+0x744>
    cf08:	00800044 	movi	r2,1
    cf0c:	10803fcc 	andi	r2,r2,255
    cf10:	00c00044 	movi	r3,1
    cf14:	10c06126 	beq	r2,r3,d09c <___svfiprintf_internal_r+0xffc>
    cf18:	00c00084 	movi	r3,2
    cf1c:	10fd5526 	beq	r2,r3,c474 <___svfiprintf_internal_r+0x3d4>
    cf20:	003ed806 	br	ca84 <___svfiprintf_internal_r+0x9e4>
    cf24:	d8802315 	stw	r2,140(sp)
    cf28:	98c00007 	ldb	r3,0(r19)
    cf2c:	003cab06 	br	c1dc <___svfiprintf_internal_r+0x13c>
    cf30:	d9801a04 	addi	r6,sp,104
    cf34:	b80b883a 	mov	r5,r23
    cf38:	a809883a 	mov	r4,r21
    cf3c:	000bed00 	call	bed0 <__ssprint_r>
    cf40:	103f651e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    cf44:	d8c01c17 	ldw	r3,112(sp)
    cf48:	003f4f06 	br	cc88 <___svfiprintf_internal_r+0xbe8>
    cf4c:	008000b4 	movhi	r2,2
    cf50:	10918704 	addi	r2,r2,17948
    cf54:	d8802915 	stw	r2,164(sp)
    cf58:	003d4406 	br	c46c <___svfiprintf_internal_r+0x3cc>
    cf5c:	dac02317 	ldw	r11,140(sp)
    cf60:	58800017 	ldw	r2,0(r11)
    cf64:	dac02517 	ldw	r11,148(sp)
    cf68:	5807d7fa 	srai	r3,r11,31
    cf6c:	dac02317 	ldw	r11,140(sp)
    cf70:	10c00115 	stw	r3,4(r2)
    cf74:	5ac00104 	addi	r11,r11,4
    cf78:	dac02315 	stw	r11,140(sp)
    cf7c:	dac02517 	ldw	r11,148(sp)
    cf80:	12c00015 	stw	r11,0(r2)
    cf84:	003c6d06 	br	c13c <___svfiprintf_internal_r+0x9c>
    cf88:	9080100c 	andi	r2,r18,64
    cf8c:	dac02317 	ldw	r11,140(sp)
    cf90:	103e5326 	beq	r2,zero,c8e0 <___svfiprintf_internal_r+0x840>
    cf94:	5f00000f 	ldh	fp,0(r11)
    cf98:	5ac00104 	addi	r11,r11,4
    cf9c:	dac02315 	stw	r11,140(sp)
    cfa0:	e013d7fa 	srai	r9,fp,31
    cfa4:	4805883a 	mov	r2,r9
    cfa8:	003e0706 	br	c7c8 <___svfiprintf_internal_r+0x728>
    cfac:	00800c04 	movi	r2,48
    cfb0:	d8801d05 	stb	r2,116(sp)
    cfb4:	d8c01d45 	stb	r3,117(sp)
    cfb8:	d8001d85 	stb	zero,118(sp)
    cfbc:	90800094 	ori	r2,r18,2
    cfc0:	80008f16 	blt	r16,zero,d200 <___svfiprintf_internal_r+0x1160>
    cfc4:	00bfdfc4 	movi	r2,-129
    cfc8:	90a4703a 	and	r18,r18,r2
    cfcc:	94800094 	ori	r18,r18,2
    cfd0:	0015883a 	mov	r10,zero
    cfd4:	003d2906 	br	c47c <___svfiprintf_internal_r+0x3dc>
    cfd8:	98c00007 	ldb	r3,0(r19)
    cfdc:	003c7f06 	br	c1dc <___svfiprintf_internal_r+0x13c>
    cfe0:	dac02317 	ldw	r11,140(sp)
    cfe4:	0013883a 	mov	r9,zero
    cfe8:	5f000017 	ldw	fp,0(r11)
    cfec:	5ac00104 	addi	r11,r11,4
    cff0:	dac02315 	stw	r11,140(sp)
    cff4:	003d1506 	br	c44c <___svfiprintf_internal_r+0x3ac>
    cff8:	9080100c 	andi	r2,r18,64
    cffc:	d8001d85 	stb	zero,118(sp)
    d000:	dac02317 	ldw	r11,140(sp)
    d004:	10003426 	beq	r2,zero,d0d8 <___svfiprintf_internal_r+0x1038>
    d008:	58800104 	addi	r2,r11,4
    d00c:	5f00000b 	ldhu	fp,0(r11)
    d010:	0013883a 	mov	r9,zero
    d014:	803e950e 	bge	r16,zero,ca6c <___svfiprintf_internal_r+0x9cc>
    d018:	e246b03a 	or	r3,fp,r9
    d01c:	d8802315 	stw	r2,140(sp)
    d020:	183d5a1e 	bne	r3,zero,c58c <___svfiprintf_internal_r+0x4ec>
    d024:	0015883a 	mov	r10,zero
    d028:	0005883a 	mov	r2,zero
    d02c:	003fb706 	br	cf0c <___svfiprintf_internal_r+0xe6c>
    d030:	98c00043 	ldbu	r3,1(r19)
    d034:	94800814 	ori	r18,r18,32
    d038:	9cc00044 	addi	r19,r19,1
    d03c:	18c03fcc 	andi	r3,r3,255
    d040:	18c0201c 	xori	r3,r3,128
    d044:	18ffe004 	addi	r3,r3,-128
    d048:	003c6406 	br	c1dc <___svfiprintf_internal_r+0x13c>
    d04c:	d8c02315 	stw	r3,140(sp)
    d050:	0015883a 	mov	r10,zero
    d054:	003faa06 	br	cf00 <___svfiprintf_internal_r+0xe60>
    d058:	dac02317 	ldw	r11,140(sp)
    d05c:	58800017 	ldw	r2,0(r11)
    d060:	5ac00104 	addi	r11,r11,4
    d064:	dac02315 	stw	r11,140(sp)
    d068:	dac02517 	ldw	r11,148(sp)
    d06c:	12c00015 	stw	r11,0(r2)
    d070:	003c3206 	br	c13c <___svfiprintf_internal_r+0x9c>
    d074:	010000b4 	movhi	r4,2
    d078:	21118704 	addi	r4,r4,17948
    d07c:	d9002915 	stw	r4,164(sp)
    d080:	d8c02315 	stw	r3,140(sp)
    d084:	1025883a 	mov	r18,r2
    d088:	e244b03a 	or	r2,fp,r9
    d08c:	103f871e 	bne	r2,zero,ceac <___svfiprintf_internal_r+0xe0c>
    d090:	0015883a 	mov	r10,zero
    d094:	00800084 	movi	r2,2
    d098:	003f9c06 	br	cf0c <___svfiprintf_internal_r+0xe6c>
    d09c:	0039883a 	mov	fp,zero
    d0a0:	003e5f06 	br	ca20 <___svfiprintf_internal_r+0x980>
    d0a4:	d9801a04 	addi	r6,sp,104
    d0a8:	b80b883a 	mov	r5,r23
    d0ac:	a809883a 	mov	r4,r21
    d0b0:	000bed00 	call	bed0 <__ssprint_r>
    d0b4:	103f081e 	bne	r2,zero,ccd8 <___svfiprintf_internal_r+0xc38>
    d0b8:	d8c01c17 	ldw	r3,112(sp)
    d0bc:	d8801b17 	ldw	r2,108(sp)
    d0c0:	d811883a 	mov	r8,sp
    d0c4:	003e9106 	br	cb0c <___svfiprintf_internal_r+0xa6c>
    d0c8:	010000b4 	movhi	r4,2
    d0cc:	2111f004 	addi	r4,r4,18368
    d0d0:	d9002215 	stw	r4,136(sp)
    d0d4:	003ead06 	br	cb8c <___svfiprintf_internal_r+0xaec>
    d0d8:	58800104 	addi	r2,r11,4
    d0dc:	5f000017 	ldw	fp,0(r11)
    d0e0:	0013883a 	mov	r9,zero
    d0e4:	803e610e 	bge	r16,zero,ca6c <___svfiprintf_internal_r+0x9cc>
    d0e8:	003fcb06 	br	d018 <___svfiprintf_internal_r+0xf78>
    d0ec:	58800104 	addi	r2,r11,4
    d0f0:	5f000017 	ldw	fp,0(r11)
    d0f4:	0013883a 	mov	r9,zero
    d0f8:	803e420e 	bge	r16,zero,ca04 <___svfiprintf_internal_r+0x964>
    d0fc:	003f7e06 	br	cef8 <___svfiprintf_internal_r+0xe58>
    d100:	5f000017 	ldw	fp,0(r11)
    d104:	5ac00104 	addi	r11,r11,4
    d108:	0013883a 	mov	r9,zero
    d10c:	dac02315 	stw	r11,140(sp)
    d110:	003cce06 	br	c44c <___svfiprintf_internal_r+0x3ac>
    d114:	8809883a 	mov	r4,r17
    d118:	da002c15 	stw	r8,176(sp)
    d11c:	0002fc00 	call	2fc0 <strlen>
    d120:	d8802115 	stw	r2,132(sp)
    d124:	da801d83 	ldbu	r10,118(sp)
    d128:	df002315 	stw	fp,140(sp)
    d12c:	0021883a 	mov	r16,zero
    d130:	da002c17 	ldw	r8,176(sp)
    d134:	003cf606 	br	c510 <___svfiprintf_internal_r+0x470>
    d138:	00800184 	movi	r2,6
    d13c:	1400012e 	bgeu	r2,r16,d144 <___svfiprintf_internal_r+0x10a4>
    d140:	1021883a 	mov	r16,r2
    d144:	dc002115 	stw	r16,132(sp)
    d148:	8005883a 	mov	r2,r16
    d14c:	80003c16 	blt	r16,zero,d240 <___svfiprintf_internal_r+0x11a0>
    d150:	044000b4 	movhi	r17,2
    d154:	d8802015 	stw	r2,128(sp)
    d158:	df002315 	stw	fp,140(sp)
    d15c:	8c518c04 	addi	r17,r17,17968
    d160:	003d2e06 	br	c61c <___svfiprintf_internal_r+0x57c>
    d164:	04001004 	movi	r16,64
    d168:	800b883a 	mov	r5,r16
    d16c:	00023500 	call	2350 <_malloc_r>
    d170:	dac02717 	ldw	r11,156(sp)
    d174:	58800015 	stw	r2,0(r11)
    d178:	58800415 	stw	r2,16(r11)
    d17c:	10004826 	beq	r2,zero,d2a0 <___svfiprintf_internal_r+0x1200>
    d180:	dac02717 	ldw	r11,156(sp)
    d184:	5c000515 	stw	r16,20(r11)
    d188:	003bd906 	br	c0f0 <___svfiprintf_internal_r+0x50>
    d18c:	9080004c 	andi	r2,r18,1
    d190:	0015883a 	mov	r10,zero
    d194:	10000626 	beq	r2,zero,d1b0 <___svfiprintf_internal_r+0x1110>
    d198:	dac02b17 	ldw	r11,172(sp)
    d19c:	00800c04 	movi	r2,48
    d1a0:	d88019c5 	stb	r2,103(sp)
    d1a4:	dac02115 	stw	r11,132(sp)
    d1a8:	dc4019c4 	addi	r17,sp,103
    d1ac:	003cd806 	br	c510 <___svfiprintf_internal_r+0x470>
    d1b0:	d8002115 	stw	zero,132(sp)
    d1b4:	dc401a04 	addi	r17,sp,104
    d1b8:	003cd506 	br	c510 <___svfiprintf_internal_r+0x470>
    d1bc:	010000b4 	movhi	r4,2
    d1c0:	2111f404 	addi	r4,r4,18384
    d1c4:	d9002815 	stw	r4,160(sp)
    d1c8:	003d4306 	br	c6d8 <___svfiprintf_internal_r+0x638>
    d1cc:	00bfffc4 	movi	r2,-1
    d1d0:	003ec606 	br	ccec <___svfiprintf_internal_r+0xc4c>
    d1d4:	00800044 	movi	r2,1
    d1d8:	10803fcc 	andi	r2,r2,255
    d1dc:	00c00044 	movi	r3,1
    d1e0:	10fd8026 	beq	r2,r3,c7e4 <___svfiprintf_internal_r+0x744>
    d1e4:	00c00084 	movi	r3,2
    d1e8:	10fca426 	beq	r2,r3,c47c <___svfiprintf_internal_r+0x3dc>
    d1ec:	003ce806 	br	c590 <___svfiprintf_internal_r+0x4f0>
    d1f0:	010000b4 	movhi	r4,2
    d1f4:	2111f404 	addi	r4,r4,18384
    d1f8:	d9002815 	stw	r4,160(sp)
    d1fc:	003e9906 	br	cc64 <___svfiprintf_internal_r+0xbc4>
    d200:	1025883a 	mov	r18,r2
    d204:	0015883a 	mov	r10,zero
    d208:	00800084 	movi	r2,2
    d20c:	003ff206 	br	d1d8 <___svfiprintf_internal_r+0x1138>
    d210:	014000b4 	movhi	r5,2
    d214:	2951f004 	addi	r5,r5,18368
    d218:	d9402215 	stw	r5,136(sp)
    d21c:	003ee206 	br	cda8 <___svfiprintf_internal_r+0xd08>
    d220:	5827883a 	mov	r19,r11
    d224:	0021883a 	mov	r16,zero
    d228:	003bed06 	br	c1e0 <___svfiprintf_internal_r+0x140>
    d22c:	dc002115 	stw	r16,132(sp)
    d230:	da801d83 	ldbu	r10,118(sp)
    d234:	df002315 	stw	fp,140(sp)
    d238:	0021883a 	mov	r16,zero
    d23c:	003cb406 	br	c510 <___svfiprintf_internal_r+0x470>
    d240:	0005883a 	mov	r2,zero
    d244:	003fc206 	br	d150 <___svfiprintf_internal_r+0x10b0>
    d248:	d8802317 	ldw	r2,140(sp)
    d24c:	98c00043 	ldbu	r3,1(r19)
    d250:	5827883a 	mov	r19,r11
    d254:	14000017 	ldw	r16,0(r2)
    d258:	10800104 	addi	r2,r2,4
    d25c:	d8802315 	stw	r2,140(sp)
    d260:	803f760e 	bge	r16,zero,d03c <___svfiprintf_internal_r+0xf9c>
    d264:	18c03fcc 	andi	r3,r3,255
    d268:	18c0201c 	xori	r3,r3,128
    d26c:	043fffc4 	movi	r16,-1
    d270:	18ffe004 	addi	r3,r3,-128
    d274:	003bd906 	br	c1dc <___svfiprintf_internal_r+0x13c>
    d278:	d9c01d85 	stb	r7,118(sp)
    d27c:	003cb606 	br	c558 <___svfiprintf_internal_r+0x4b8>
    d280:	d9c01d85 	stb	r7,118(sp)
    d284:	003d2106 	br	c70c <___svfiprintf_internal_r+0x66c>
    d288:	d9c01d85 	stb	r7,118(sp)
    d28c:	003d8e06 	br	c8c8 <___svfiprintf_internal_r+0x828>
    d290:	d9c01d85 	stb	r7,118(sp)
    d294:	003db306 	br	c964 <___svfiprintf_internal_r+0x8c4>
    d298:	d9c01d85 	stb	r7,118(sp)
    d29c:	003c8a06 	br	c4c8 <___svfiprintf_internal_r+0x428>
    d2a0:	dac02a17 	ldw	r11,168(sp)
    d2a4:	00800304 	movi	r2,12
    d2a8:	58800015 	stw	r2,0(r11)
    d2ac:	00bfffc4 	movi	r2,-1
    d2b0:	003e8e06 	br	ccec <___svfiprintf_internal_r+0xc4c>
    d2b4:	d9c01d85 	stb	r7,118(sp)
    d2b8:	003dc706 	br	c9d8 <___svfiprintf_internal_r+0x938>
    d2bc:	d9c01d85 	stb	r7,118(sp)
    d2c0:	003ddf06 	br	ca40 <___svfiprintf_internal_r+0x9a0>
    d2c4:	d9c01d85 	stb	r7,118(sp)
    d2c8:	003d3706 	br	c7a8 <___svfiprintf_internal_r+0x708>
    d2cc:	d9c01d85 	stb	r7,118(sp)
    d2d0:	003c5406 	br	c424 <___svfiprintf_internal_r+0x384>
    d2d4:	d9c01d85 	stb	r7,118(sp)
    d2d8:	003d1d06 	br	c750 <___svfiprintf_internal_r+0x6b0>

0000d2dc <__sprint_r.part.0>:
    d2dc:	28801917 	ldw	r2,100(r5)
    d2e0:	defff604 	addi	sp,sp,-40
    d2e4:	dd400515 	stw	r21,20(sp)
    d2e8:	dfc00915 	stw	ra,36(sp)
    d2ec:	df000815 	stw	fp,32(sp)
    d2f0:	ddc00715 	stw	r23,28(sp)
    d2f4:	dd800615 	stw	r22,24(sp)
    d2f8:	dd000415 	stw	r20,16(sp)
    d2fc:	dcc00315 	stw	r19,12(sp)
    d300:	dc800215 	stw	r18,8(sp)
    d304:	dc400115 	stw	r17,4(sp)
    d308:	dc000015 	stw	r16,0(sp)
    d30c:	1088000c 	andi	r2,r2,8192
    d310:	302b883a 	mov	r21,r6
    d314:	10002e26 	beq	r2,zero,d3d0 <__sprint_r.part.0+0xf4>
    d318:	30800217 	ldw	r2,8(r6)
    d31c:	35800017 	ldw	r22,0(r6)
    d320:	10002926 	beq	r2,zero,d3c8 <__sprint_r.part.0+0xec>
    d324:	2827883a 	mov	r19,r5
    d328:	2029883a 	mov	r20,r4
    d32c:	b5c00104 	addi	r23,r22,4
    d330:	04bfffc4 	movi	r18,-1
    d334:	bc400017 	ldw	r17,0(r23)
    d338:	b4000017 	ldw	r16,0(r22)
    d33c:	0039883a 	mov	fp,zero
    d340:	8822d0ba 	srli	r17,r17,2
    d344:	8800031e 	bne	r17,zero,d354 <__sprint_r.part.0+0x78>
    d348:	00001806 	br	d3ac <__sprint_r.part.0+0xd0>
    d34c:	84000104 	addi	r16,r16,4
    d350:	8f001526 	beq	r17,fp,d3a8 <__sprint_r.part.0+0xcc>
    d354:	81400017 	ldw	r5,0(r16)
    d358:	980d883a 	mov	r6,r19
    d35c:	a009883a 	mov	r4,r20
    d360:	000ed040 	call	ed04 <_fputwc_r>
    d364:	e7000044 	addi	fp,fp,1
    d368:	14bff81e 	bne	r2,r18,d34c <__sprint_r.part.0+0x70>
    d36c:	9005883a 	mov	r2,r18
    d370:	a8000215 	stw	zero,8(r21)
    d374:	a8000115 	stw	zero,4(r21)
    d378:	dfc00917 	ldw	ra,36(sp)
    d37c:	df000817 	ldw	fp,32(sp)
    d380:	ddc00717 	ldw	r23,28(sp)
    d384:	dd800617 	ldw	r22,24(sp)
    d388:	dd400517 	ldw	r21,20(sp)
    d38c:	dd000417 	ldw	r20,16(sp)
    d390:	dcc00317 	ldw	r19,12(sp)
    d394:	dc800217 	ldw	r18,8(sp)
    d398:	dc400117 	ldw	r17,4(sp)
    d39c:	dc000017 	ldw	r16,0(sp)
    d3a0:	dec00a04 	addi	sp,sp,40
    d3a4:	f800283a 	ret
    d3a8:	a8800217 	ldw	r2,8(r21)
    d3ac:	8c63883a 	add	r17,r17,r17
    d3b0:	8c63883a 	add	r17,r17,r17
    d3b4:	1445c83a 	sub	r2,r2,r17
    d3b8:	a8800215 	stw	r2,8(r21)
    d3bc:	b5800204 	addi	r22,r22,8
    d3c0:	bdc00204 	addi	r23,r23,8
    d3c4:	103fdb1e 	bne	r2,zero,d334 <__sprint_r.part.0+0x58>
    d3c8:	0005883a 	mov	r2,zero
    d3cc:	003fe806 	br	d370 <__sprint_r.part.0+0x94>
    d3d0:	00099580 	call	9958 <__sfvwrite_r>
    d3d4:	003fe606 	br	d370 <__sprint_r.part.0+0x94>

0000d3d8 <__sprint_r>:
    d3d8:	30c00217 	ldw	r3,8(r6)
    d3dc:	18000126 	beq	r3,zero,d3e4 <__sprint_r+0xc>
    d3e0:	000d2dc1 	jmpi	d2dc <__sprint_r.part.0>
    d3e4:	30000115 	stw	zero,4(r6)
    d3e8:	0005883a 	mov	r2,zero
    d3ec:	f800283a 	ret

0000d3f0 <___vfiprintf_internal_r>:
    d3f0:	deffc904 	addi	sp,sp,-220
    d3f4:	df003515 	stw	fp,212(sp)
    d3f8:	dd003115 	stw	r20,196(sp)
    d3fc:	dfc03615 	stw	ra,216(sp)
    d400:	ddc03415 	stw	r23,208(sp)
    d404:	dd803315 	stw	r22,204(sp)
    d408:	dd403215 	stw	r21,200(sp)
    d40c:	dcc03015 	stw	r19,192(sp)
    d410:	dc802f15 	stw	r18,188(sp)
    d414:	dc402e15 	stw	r17,184(sp)
    d418:	dc002d15 	stw	r16,180(sp)
    d41c:	d9002015 	stw	r4,128(sp)
    d420:	d9c02215 	stw	r7,136(sp)
    d424:	2829883a 	mov	r20,r5
    d428:	3039883a 	mov	fp,r6
    d42c:	20000226 	beq	r4,zero,d438 <___vfiprintf_internal_r+0x48>
    d430:	20800e17 	ldw	r2,56(r4)
    d434:	1000cf26 	beq	r2,zero,d774 <___vfiprintf_internal_r+0x384>
    d438:	a080030b 	ldhu	r2,12(r20)
    d43c:	10c8000c 	andi	r3,r2,8192
    d440:	1800061e 	bne	r3,zero,d45c <___vfiprintf_internal_r+0x6c>
    d444:	a1001917 	ldw	r4,100(r20)
    d448:	00f7ffc4 	movi	r3,-8193
    d44c:	10880014 	ori	r2,r2,8192
    d450:	20c6703a 	and	r3,r4,r3
    d454:	a080030d 	sth	r2,12(r20)
    d458:	a0c01915 	stw	r3,100(r20)
    d45c:	10c0020c 	andi	r3,r2,8
    d460:	1800a926 	beq	r3,zero,d708 <___vfiprintf_internal_r+0x318>
    d464:	a0c00417 	ldw	r3,16(r20)
    d468:	1800a726 	beq	r3,zero,d708 <___vfiprintf_internal_r+0x318>
    d46c:	1080068c 	andi	r2,r2,26
    d470:	00c00284 	movi	r3,10
    d474:	10c0ac26 	beq	r2,r3,d728 <___vfiprintf_internal_r+0x338>
    d478:	da801a04 	addi	r10,sp,104
    d47c:	da801e15 	stw	r10,120(sp)
    d480:	d8801e17 	ldw	r2,120(sp)
    d484:	da8019c4 	addi	r10,sp,103
    d488:	058000b4 	movhi	r22,2
    d48c:	05c000b4 	movhi	r23,2
    d490:	da801f15 	stw	r10,124(sp)
    d494:	1295c83a 	sub	r10,r2,r10
    d498:	b591fc04 	addi	r22,r22,18416
    d49c:	bdd1f804 	addi	r23,r23,18400
    d4a0:	dec01a15 	stw	sp,104(sp)
    d4a4:	d8001c15 	stw	zero,112(sp)
    d4a8:	d8001b15 	stw	zero,108(sp)
    d4ac:	d8002615 	stw	zero,152(sp)
    d4b0:	d8002315 	stw	zero,140(sp)
    d4b4:	da802715 	stw	r10,156(sp)
    d4b8:	d811883a 	mov	r8,sp
    d4bc:	dd002115 	stw	r20,132(sp)
    d4c0:	e021883a 	mov	r16,fp
    d4c4:	80800007 	ldb	r2,0(r16)
    d4c8:	1003ea26 	beq	r2,zero,e474 <___vfiprintf_internal_r+0x1084>
    d4cc:	00c00944 	movi	r3,37
    d4d0:	8025883a 	mov	r18,r16
    d4d4:	10c0021e 	bne	r2,r3,d4e0 <___vfiprintf_internal_r+0xf0>
    d4d8:	00001606 	br	d534 <___vfiprintf_internal_r+0x144>
    d4dc:	10c00326 	beq	r2,r3,d4ec <___vfiprintf_internal_r+0xfc>
    d4e0:	94800044 	addi	r18,r18,1
    d4e4:	90800007 	ldb	r2,0(r18)
    d4e8:	103ffc1e 	bne	r2,zero,d4dc <___vfiprintf_internal_r+0xec>
    d4ec:	9423c83a 	sub	r17,r18,r16
    d4f0:	88001026 	beq	r17,zero,d534 <___vfiprintf_internal_r+0x144>
    d4f4:	d8c01c17 	ldw	r3,112(sp)
    d4f8:	d8801b17 	ldw	r2,108(sp)
    d4fc:	44000015 	stw	r16,0(r8)
    d500:	88c7883a 	add	r3,r17,r3
    d504:	10800044 	addi	r2,r2,1
    d508:	44400115 	stw	r17,4(r8)
    d50c:	d8c01c15 	stw	r3,112(sp)
    d510:	d8801b15 	stw	r2,108(sp)
    d514:	010001c4 	movi	r4,7
    d518:	2080760e 	bge	r4,r2,d6f4 <___vfiprintf_internal_r+0x304>
    d51c:	1803821e 	bne	r3,zero,e328 <___vfiprintf_internal_r+0xf38>
    d520:	da802317 	ldw	r10,140(sp)
    d524:	d8001b15 	stw	zero,108(sp)
    d528:	d811883a 	mov	r8,sp
    d52c:	5455883a 	add	r10,r10,r17
    d530:	da802315 	stw	r10,140(sp)
    d534:	90800007 	ldb	r2,0(r18)
    d538:	10044626 	beq	r2,zero,e654 <___vfiprintf_internal_r+0x1264>
    d53c:	90c00047 	ldb	r3,1(r18)
    d540:	94000044 	addi	r16,r18,1
    d544:	d8001d85 	stb	zero,118(sp)
    d548:	0009883a 	mov	r4,zero
    d54c:	000f883a 	mov	r7,zero
    d550:	027fffc4 	movi	r9,-1
    d554:	0023883a 	mov	r17,zero
    d558:	0029883a 	mov	r20,zero
    d55c:	01401604 	movi	r5,88
    d560:	01800244 	movi	r6,9
    d564:	03400a84 	movi	r13,42
    d568:	03001b04 	movi	r12,108
    d56c:	84000044 	addi	r16,r16,1
    d570:	18bff804 	addi	r2,r3,-32
    d574:	28827336 	bltu	r5,r2,df44 <___vfiprintf_internal_r+0xb54>
    d578:	100490ba 	slli	r2,r2,2
    d57c:	02800074 	movhi	r10,1
    d580:	52b56404 	addi	r10,r10,-10864
    d584:	1285883a 	add	r2,r2,r10
    d588:	10800017 	ldw	r2,0(r2)
    d58c:	1000683a 	jmp	r2
    d590:	0000dc78 	rdprs	zero,zero,881
    d594:	0000df44 	movi	zero,893
    d598:	0000df44 	movi	zero,893
    d59c:	0000dc98 	cmpnei	zero,zero,882
    d5a0:	0000df44 	movi	zero,893
    d5a4:	0000df44 	movi	zero,893
    d5a8:	0000df44 	movi	zero,893
    d5ac:	0000df44 	movi	zero,893
    d5b0:	0000df44 	movi	zero,893
    d5b4:	0000df44 	movi	zero,893
    d5b8:	0000de80 	call	de8 <BallTask+0x78>
    d5bc:	0000de9c 	xori	zero,zero,890
    d5c0:	0000df44 	movi	zero,893
    d5c4:	0000d784 	movi	zero,862
    d5c8:	0000deac 	andhi	zero,zero,890
    d5cc:	0000df44 	movi	zero,893
    d5d0:	0000dca4 	muli	zero,zero,882
    d5d4:	0000dcb0 	cmpltui	zero,zero,882
    d5d8:	0000dcb0 	cmpltui	zero,zero,882
    d5dc:	0000dcb0 	cmpltui	zero,zero,882
    d5e0:	0000dcb0 	cmpltui	zero,zero,882
    d5e4:	0000dcb0 	cmpltui	zero,zero,882
    d5e8:	0000dcb0 	cmpltui	zero,zero,882
    d5ec:	0000dcb0 	cmpltui	zero,zero,882
    d5f0:	0000dcb0 	cmpltui	zero,zero,882
    d5f4:	0000dcb0 	cmpltui	zero,zero,882
    d5f8:	0000df44 	movi	zero,893
    d5fc:	0000df44 	movi	zero,893
    d600:	0000df44 	movi	zero,893
    d604:	0000df44 	movi	zero,893
    d608:	0000df44 	movi	zero,893
    d60c:	0000df44 	movi	zero,893
    d610:	0000df44 	movi	zero,893
    d614:	0000df44 	movi	zero,893
    d618:	0000df44 	movi	zero,893
    d61c:	0000df44 	movi	zero,893
    d620:	0000dcdc 	xori	zero,zero,883
    d624:	0000df44 	movi	zero,893
    d628:	0000df44 	movi	zero,893
    d62c:	0000df44 	movi	zero,893
    d630:	0000df44 	movi	zero,893
    d634:	0000df44 	movi	zero,893
    d638:	0000df44 	movi	zero,893
    d63c:	0000df44 	movi	zero,893
    d640:	0000df44 	movi	zero,893
    d644:	0000df44 	movi	zero,893
    d648:	0000df44 	movi	zero,893
    d64c:	0000dd14 	movui	zero,884
    d650:	0000df44 	movi	zero,893
    d654:	0000df44 	movi	zero,893
    d658:	0000df44 	movi	zero,893
    d65c:	0000df44 	movi	zero,893
    d660:	0000df44 	movi	zero,893
    d664:	0000dd6c 	andhi	zero,zero,885
    d668:	0000df44 	movi	zero,893
    d66c:	0000df44 	movi	zero,893
    d670:	0000dddc 	xori	zero,zero,887
    d674:	0000df44 	movi	zero,893
    d678:	0000df44 	movi	zero,893
    d67c:	0000df44 	movi	zero,893
    d680:	0000df44 	movi	zero,893
    d684:	0000df44 	movi	zero,893
    d688:	0000df44 	movi	zero,893
    d68c:	0000df44 	movi	zero,893
    d690:	0000df44 	movi	zero,893
    d694:	0000df44 	movi	zero,893
    d698:	0000df44 	movi	zero,893
    d69c:	0000db88 	cmpgei	zero,zero,878
    d6a0:	0000dbb4 	movhi	zero,878
    d6a4:	0000df44 	movi	zero,893
    d6a8:	0000df44 	movi	zero,893
    d6ac:	0000df44 	movi	zero,893
    d6b0:	0000deec 	andhi	zero,zero,891
    d6b4:	0000dbb4 	movhi	zero,878
    d6b8:	0000df44 	movi	zero,893
    d6bc:	0000df44 	movi	zero,893
    d6c0:	0000da48 	cmpgei	zero,zero,873
    d6c4:	0000df44 	movi	zero,893
    d6c8:	0000da58 	cmpnei	zero,zero,873
    d6cc:	0000da94 	movui	zero,874
    d6d0:	0000d790 	cmplti	zero,zero,862
    d6d4:	0000da3c 	xorhi	zero,zero,872
    d6d8:	0000df44 	movi	zero,893
    d6dc:	0000de18 	cmpnei	zero,zero,888
    d6e0:	0000df44 	movi	zero,893
    d6e4:	0000de70 	cmpltui	zero,zero,889
    d6e8:	0000df44 	movi	zero,893
    d6ec:	0000df44 	movi	zero,893
    d6f0:	0000db34 	movhi	zero,876
    d6f4:	42000204 	addi	r8,r8,8
    d6f8:	da802317 	ldw	r10,140(sp)
    d6fc:	5455883a 	add	r10,r10,r17
    d700:	da802315 	stw	r10,140(sp)
    d704:	003f8b06 	br	d534 <___vfiprintf_internal_r+0x144>
    d708:	d9002017 	ldw	r4,128(sp)
    d70c:	a00b883a 	mov	r5,r20
    d710:	00075000 	call	7500 <__swsetup_r>
    d714:	1003b11e 	bne	r2,zero,e5dc <___vfiprintf_internal_r+0x11ec>
    d718:	a080030b 	ldhu	r2,12(r20)
    d71c:	00c00284 	movi	r3,10
    d720:	1080068c 	andi	r2,r2,26
    d724:	10ff541e 	bne	r2,r3,d478 <___vfiprintf_internal_r+0x88>
    d728:	a080038f 	ldh	r2,14(r20)
    d72c:	103f5216 	blt	r2,zero,d478 <___vfiprintf_internal_r+0x88>
    d730:	d9c02217 	ldw	r7,136(sp)
    d734:	d9002017 	ldw	r4,128(sp)
    d738:	e00d883a 	mov	r6,fp
    d73c:	a00b883a 	mov	r5,r20
    d740:	000e8680 	call	e868 <__sbprintf>
    d744:	dfc03617 	ldw	ra,216(sp)
    d748:	df003517 	ldw	fp,212(sp)
    d74c:	ddc03417 	ldw	r23,208(sp)
    d750:	dd803317 	ldw	r22,204(sp)
    d754:	dd403217 	ldw	r21,200(sp)
    d758:	dd003117 	ldw	r20,196(sp)
    d75c:	dcc03017 	ldw	r19,192(sp)
    d760:	dc802f17 	ldw	r18,188(sp)
    d764:	dc402e17 	ldw	r17,184(sp)
    d768:	dc002d17 	ldw	r16,180(sp)
    d76c:	dec03704 	addi	sp,sp,220
    d770:	f800283a 	ret
    d774:	00094d40 	call	94d4 <__sinit>
    d778:	003f2f06 	br	d438 <___vfiprintf_internal_r+0x48>
    d77c:	0463c83a 	sub	r17,zero,r17
    d780:	d8802215 	stw	r2,136(sp)
    d784:	a5000114 	ori	r20,r20,4
    d788:	80c00007 	ldb	r3,0(r16)
    d78c:	003f7706 	br	d56c <___vfiprintf_internal_r+0x17c>
    d790:	00800c04 	movi	r2,48
    d794:	da802217 	ldw	r10,136(sp)
    d798:	d8801d05 	stb	r2,116(sp)
    d79c:	00801e04 	movi	r2,120
    d7a0:	d8801d45 	stb	r2,117(sp)
    d7a4:	d8001d85 	stb	zero,118(sp)
    d7a8:	50c00104 	addi	r3,r10,4
    d7ac:	54800017 	ldw	r18,0(r10)
    d7b0:	0027883a 	mov	r19,zero
    d7b4:	a0800094 	ori	r2,r20,2
    d7b8:	48030b16 	blt	r9,zero,e3e8 <___vfiprintf_internal_r+0xff8>
    d7bc:	00bfdfc4 	movi	r2,-129
    d7c0:	a096703a 	and	r11,r20,r2
    d7c4:	d8c02215 	stw	r3,136(sp)
    d7c8:	5d000094 	ori	r20,r11,2
    d7cc:	90032b1e 	bne	r18,zero,e47c <___vfiprintf_internal_r+0x108c>
    d7d0:	008000b4 	movhi	r2,2
    d7d4:	10918704 	addi	r2,r2,17948
    d7d8:	d8802615 	stw	r2,152(sp)
    d7dc:	0039883a 	mov	fp,zero
    d7e0:	48017b1e 	bne	r9,zero,ddd0 <___vfiprintf_internal_r+0x9e0>
    d7e4:	0013883a 	mov	r9,zero
    d7e8:	0027883a 	mov	r19,zero
    d7ec:	dd401a04 	addi	r21,sp,104
    d7f0:	4825883a 	mov	r18,r9
    d7f4:	4cc0010e 	bge	r9,r19,d7fc <___vfiprintf_internal_r+0x40c>
    d7f8:	9825883a 	mov	r18,r19
    d7fc:	e7003fcc 	andi	fp,fp,255
    d800:	e700201c 	xori	fp,fp,128
    d804:	e73fe004 	addi	fp,fp,-128
    d808:	e0000126 	beq	fp,zero,d810 <___vfiprintf_internal_r+0x420>
    d80c:	94800044 	addi	r18,r18,1
    d810:	a380008c 	andi	r14,r20,2
    d814:	70000126 	beq	r14,zero,d81c <___vfiprintf_internal_r+0x42c>
    d818:	94800084 	addi	r18,r18,2
    d81c:	a700210c 	andi	fp,r20,132
    d820:	e001df1e 	bne	fp,zero,dfa0 <___vfiprintf_internal_r+0xbb0>
    d824:	8c87c83a 	sub	r3,r17,r18
    d828:	00c1dd0e 	bge	zero,r3,dfa0 <___vfiprintf_internal_r+0xbb0>
    d82c:	01c00404 	movi	r7,16
    d830:	d8801c17 	ldw	r2,112(sp)
    d834:	38c3ad0e 	bge	r7,r3,e6ec <___vfiprintf_internal_r+0x12fc>
    d838:	028000b4 	movhi	r10,2
    d83c:	5291fc04 	addi	r10,r10,18416
    d840:	dc002915 	stw	r16,164(sp)
    d844:	d9801b17 	ldw	r6,108(sp)
    d848:	da802415 	stw	r10,144(sp)
    d84c:	03c001c4 	movi	r15,7
    d850:	da402515 	stw	r9,148(sp)
    d854:	db802815 	stw	r14,160(sp)
    d858:	1821883a 	mov	r16,r3
    d85c:	00000506 	br	d874 <___vfiprintf_internal_r+0x484>
    d860:	31400084 	addi	r5,r6,2
    d864:	42000204 	addi	r8,r8,8
    d868:	200d883a 	mov	r6,r4
    d86c:	843ffc04 	addi	r16,r16,-16
    d870:	3c000d0e 	bge	r7,r16,d8a8 <___vfiprintf_internal_r+0x4b8>
    d874:	10800404 	addi	r2,r2,16
    d878:	31000044 	addi	r4,r6,1
    d87c:	45800015 	stw	r22,0(r8)
    d880:	41c00115 	stw	r7,4(r8)
    d884:	d8801c15 	stw	r2,112(sp)
    d888:	d9001b15 	stw	r4,108(sp)
    d88c:	793ff40e 	bge	r15,r4,d860 <___vfiprintf_internal_r+0x470>
    d890:	1001b51e 	bne	r2,zero,df68 <___vfiprintf_internal_r+0xb78>
    d894:	843ffc04 	addi	r16,r16,-16
    d898:	000d883a 	mov	r6,zero
    d89c:	01400044 	movi	r5,1
    d8a0:	d811883a 	mov	r8,sp
    d8a4:	3c3ff316 	blt	r7,r16,d874 <___vfiprintf_internal_r+0x484>
    d8a8:	8007883a 	mov	r3,r16
    d8ac:	da402517 	ldw	r9,148(sp)
    d8b0:	db802817 	ldw	r14,160(sp)
    d8b4:	dc002917 	ldw	r16,164(sp)
    d8b8:	da802417 	ldw	r10,144(sp)
    d8bc:	1885883a 	add	r2,r3,r2
    d8c0:	40c00115 	stw	r3,4(r8)
    d8c4:	42800015 	stw	r10,0(r8)
    d8c8:	d8801c15 	stw	r2,112(sp)
    d8cc:	d9401b15 	stw	r5,108(sp)
    d8d0:	00c001c4 	movi	r3,7
    d8d4:	19426016 	blt	r3,r5,e258 <___vfiprintf_internal_r+0xe68>
    d8d8:	d8c01d87 	ldb	r3,118(sp)
    d8dc:	42000204 	addi	r8,r8,8
    d8e0:	29000044 	addi	r4,r5,1
    d8e4:	1801b31e 	bne	r3,zero,dfb4 <___vfiprintf_internal_r+0xbc4>
    d8e8:	7001c026 	beq	r14,zero,dfec <___vfiprintf_internal_r+0xbfc>
    d8ec:	d8c01d04 	addi	r3,sp,116
    d8f0:	10800084 	addi	r2,r2,2
    d8f4:	40c00015 	stw	r3,0(r8)
    d8f8:	00c00084 	movi	r3,2
    d8fc:	40c00115 	stw	r3,4(r8)
    d900:	d8801c15 	stw	r2,112(sp)
    d904:	d9001b15 	stw	r4,108(sp)
    d908:	00c001c4 	movi	r3,7
    d90c:	1902650e 	bge	r3,r4,e2a4 <___vfiprintf_internal_r+0xeb4>
    d910:	10029a1e 	bne	r2,zero,e37c <___vfiprintf_internal_r+0xf8c>
    d914:	00c02004 	movi	r3,128
    d918:	01000044 	movi	r4,1
    d91c:	000b883a 	mov	r5,zero
    d920:	d811883a 	mov	r8,sp
    d924:	e0c1b31e 	bne	fp,r3,dff4 <___vfiprintf_internal_r+0xc04>
    d928:	8cb9c83a 	sub	fp,r17,r18
    d92c:	0701b10e 	bge	zero,fp,dff4 <___vfiprintf_internal_r+0xc04>
    d930:	01c00404 	movi	r7,16
    d934:	3f03890e 	bge	r7,fp,e75c <___vfiprintf_internal_r+0x136c>
    d938:	00c000b4 	movhi	r3,2
    d93c:	18d1f804 	addi	r3,r3,18400
    d940:	d8c02415 	stw	r3,144(sp)
    d944:	8007883a 	mov	r3,r16
    d948:	034001c4 	movi	r13,7
    d94c:	e021883a 	mov	r16,fp
    d950:	da402515 	stw	r9,148(sp)
    d954:	1839883a 	mov	fp,r3
    d958:	00000506 	br	d970 <___vfiprintf_internal_r+0x580>
    d95c:	29800084 	addi	r6,r5,2
    d960:	42000204 	addi	r8,r8,8
    d964:	180b883a 	mov	r5,r3
    d968:	843ffc04 	addi	r16,r16,-16
    d96c:	3c000d0e 	bge	r7,r16,d9a4 <___vfiprintf_internal_r+0x5b4>
    d970:	10800404 	addi	r2,r2,16
    d974:	28c00044 	addi	r3,r5,1
    d978:	45c00015 	stw	r23,0(r8)
    d97c:	41c00115 	stw	r7,4(r8)
    d980:	d8801c15 	stw	r2,112(sp)
    d984:	d8c01b15 	stw	r3,108(sp)
    d988:	68fff40e 	bge	r13,r3,d95c <___vfiprintf_internal_r+0x56c>
    d98c:	1002241e 	bne	r2,zero,e220 <___vfiprintf_internal_r+0xe30>
    d990:	843ffc04 	addi	r16,r16,-16
    d994:	01800044 	movi	r6,1
    d998:	000b883a 	mov	r5,zero
    d99c:	d811883a 	mov	r8,sp
    d9a0:	3c3ff316 	blt	r7,r16,d970 <___vfiprintf_internal_r+0x580>
    d9a4:	da402517 	ldw	r9,148(sp)
    d9a8:	e007883a 	mov	r3,fp
    d9ac:	8039883a 	mov	fp,r16
    d9b0:	1821883a 	mov	r16,r3
    d9b4:	d8c02417 	ldw	r3,144(sp)
    d9b8:	1705883a 	add	r2,r2,fp
    d9bc:	47000115 	stw	fp,4(r8)
    d9c0:	40c00015 	stw	r3,0(r8)
    d9c4:	d8801c15 	stw	r2,112(sp)
    d9c8:	d9801b15 	stw	r6,108(sp)
    d9cc:	00c001c4 	movi	r3,7
    d9d0:	19827616 	blt	r3,r6,e3ac <___vfiprintf_internal_r+0xfbc>
    d9d4:	4cf9c83a 	sub	fp,r9,r19
    d9d8:	42000204 	addi	r8,r8,8
    d9dc:	31000044 	addi	r4,r6,1
    d9e0:	300b883a 	mov	r5,r6
    d9e4:	07018516 	blt	zero,fp,dffc <___vfiprintf_internal_r+0xc0c>
    d9e8:	9885883a 	add	r2,r19,r2
    d9ec:	45400015 	stw	r21,0(r8)
    d9f0:	44c00115 	stw	r19,4(r8)
    d9f4:	d8801c15 	stw	r2,112(sp)
    d9f8:	d9001b15 	stw	r4,108(sp)
    d9fc:	00c001c4 	movi	r3,7
    da00:	1901dd0e 	bge	r3,r4,e178 <___vfiprintf_internal_r+0xd88>
    da04:	1002401e 	bne	r2,zero,e308 <___vfiprintf_internal_r+0xf18>
    da08:	d8001b15 	stw	zero,108(sp)
    da0c:	a2c0010c 	andi	r11,r20,4
    da10:	58000226 	beq	r11,zero,da1c <___vfiprintf_internal_r+0x62c>
    da14:	8ca7c83a 	sub	r19,r17,r18
    da18:	04c2f216 	blt	zero,r19,e5e4 <___vfiprintf_internal_r+0x11f4>
    da1c:	8c80010e 	bge	r17,r18,da24 <___vfiprintf_internal_r+0x634>
    da20:	9023883a 	mov	r17,r18
    da24:	da802317 	ldw	r10,140(sp)
    da28:	5455883a 	add	r10,r10,r17
    da2c:	da802315 	stw	r10,140(sp)
    da30:	d8001b15 	stw	zero,108(sp)
    da34:	d811883a 	mov	r8,sp
    da38:	003ea206 	br	d4c4 <___vfiprintf_internal_r+0xd4>
    da3c:	a5000814 	ori	r20,r20,32
    da40:	80c00007 	ldb	r3,0(r16)
    da44:	003ec906 	br	d56c <___vfiprintf_internal_r+0x17c>
    da48:	80c00007 	ldb	r3,0(r16)
    da4c:	1b030926 	beq	r3,r12,e674 <___vfiprintf_internal_r+0x1284>
    da50:	a5000414 	ori	r20,r20,16
    da54:	003ec506 	br	d56c <___vfiprintf_internal_r+0x17c>
    da58:	21003fcc 	andi	r4,r4,255
    da5c:	20035e1e 	bne	r4,zero,e7d8 <___vfiprintf_internal_r+0x13e8>
    da60:	a080080c 	andi	r2,r20,32
    da64:	1002a526 	beq	r2,zero,e4fc <___vfiprintf_internal_r+0x110c>
    da68:	da802217 	ldw	r10,136(sp)
    da6c:	50800017 	ldw	r2,0(r10)
    da70:	da802317 	ldw	r10,140(sp)
    da74:	5007d7fa 	srai	r3,r10,31
    da78:	da802217 	ldw	r10,136(sp)
    da7c:	10c00115 	stw	r3,4(r2)
    da80:	52800104 	addi	r10,r10,4
    da84:	da802215 	stw	r10,136(sp)
    da88:	da802317 	ldw	r10,140(sp)
    da8c:	12800015 	stw	r10,0(r2)
    da90:	003e8c06 	br	d4c4 <___vfiprintf_internal_r+0xd4>
    da94:	21003fcc 	andi	r4,r4,255
    da98:	2003511e 	bne	r4,zero,e7e0 <___vfiprintf_internal_r+0x13f0>
    da9c:	a080080c 	andi	r2,r20,32
    daa0:	1000a126 	beq	r2,zero,dd28 <___vfiprintf_internal_r+0x938>
    daa4:	da802217 	ldw	r10,136(sp)
    daa8:	d8001d85 	stb	zero,118(sp)
    daac:	50800204 	addi	r2,r10,8
    dab0:	54800017 	ldw	r18,0(r10)
    dab4:	54c00117 	ldw	r19,4(r10)
    dab8:	4802b416 	blt	r9,zero,e58c <___vfiprintf_internal_r+0x119c>
    dabc:	013fdfc4 	movi	r4,-129
    dac0:	94c6b03a 	or	r3,r18,r19
    dac4:	d8802215 	stw	r2,136(sp)
    dac8:	a128703a 	and	r20,r20,r4
    dacc:	1800a226 	beq	r3,zero,dd58 <___vfiprintf_internal_r+0x968>
    dad0:	0039883a 	mov	fp,zero
    dad4:	dd401a04 	addi	r21,sp,104
    dad8:	9006d0fa 	srli	r3,r18,3
    dadc:	9808977a 	slli	r4,r19,29
    dae0:	9826d0fa 	srli	r19,r19,3
    dae4:	948001cc 	andi	r18,r18,7
    dae8:	90800c04 	addi	r2,r18,48
    daec:	ad7fffc4 	addi	r21,r21,-1
    daf0:	20e4b03a 	or	r18,r4,r3
    daf4:	a8800005 	stb	r2,0(r21)
    daf8:	94c6b03a 	or	r3,r18,r19
    dafc:	183ff61e 	bne	r3,zero,dad8 <___vfiprintf_internal_r+0x6e8>
    db00:	a0c0004c 	andi	r3,r20,1
    db04:	18005926 	beq	r3,zero,dc6c <___vfiprintf_internal_r+0x87c>
    db08:	10803fcc 	andi	r2,r2,255
    db0c:	1080201c 	xori	r2,r2,128
    db10:	10bfe004 	addi	r2,r2,-128
    db14:	00c00c04 	movi	r3,48
    db18:	10c05426 	beq	r2,r3,dc6c <___vfiprintf_internal_r+0x87c>
    db1c:	da801e17 	ldw	r10,120(sp)
    db20:	a8bfffc4 	addi	r2,r21,-1
    db24:	a8ffffc5 	stb	r3,-1(r21)
    db28:	50a7c83a 	sub	r19,r10,r2
    db2c:	102b883a 	mov	r21,r2
    db30:	003f2f06 	br	d7f0 <___vfiprintf_internal_r+0x400>
    db34:	21003fcc 	andi	r4,r4,255
    db38:	2003421e 	bne	r4,zero,e844 <___vfiprintf_internal_r+0x1454>
    db3c:	008000b4 	movhi	r2,2
    db40:	10918704 	addi	r2,r2,17948
    db44:	d8802615 	stw	r2,152(sp)
    db48:	a080080c 	andi	r2,r20,32
    db4c:	1000aa26 	beq	r2,zero,ddf8 <___vfiprintf_internal_r+0xa08>
    db50:	da802217 	ldw	r10,136(sp)
    db54:	54800017 	ldw	r18,0(r10)
    db58:	54c00117 	ldw	r19,4(r10)
    db5c:	52800204 	addi	r10,r10,8
    db60:	da802215 	stw	r10,136(sp)
    db64:	a080004c 	andi	r2,r20,1
    db68:	1001d226 	beq	r2,zero,e2b4 <___vfiprintf_internal_r+0xec4>
    db6c:	94c4b03a 	or	r2,r18,r19
    db70:	1002351e 	bne	r2,zero,e448 <___vfiprintf_internal_r+0x1058>
    db74:	d8001d85 	stb	zero,118(sp)
    db78:	48022216 	blt	r9,zero,e404 <___vfiprintf_internal_r+0x1014>
    db7c:	00bfdfc4 	movi	r2,-129
    db80:	a0a8703a 	and	r20,r20,r2
    db84:	003f1506 	br	d7dc <___vfiprintf_internal_r+0x3ec>
    db88:	da802217 	ldw	r10,136(sp)
    db8c:	04800044 	movi	r18,1
    db90:	d8001d85 	stb	zero,118(sp)
    db94:	50800017 	ldw	r2,0(r10)
    db98:	52800104 	addi	r10,r10,4
    db9c:	da802215 	stw	r10,136(sp)
    dba0:	d8801005 	stb	r2,64(sp)
    dba4:	9027883a 	mov	r19,r18
    dba8:	dd401004 	addi	r21,sp,64
    dbac:	0013883a 	mov	r9,zero
    dbb0:	003f1706 	br	d810 <___vfiprintf_internal_r+0x420>
    dbb4:	21003fcc 	andi	r4,r4,255
    dbb8:	2003201e 	bne	r4,zero,e83c <___vfiprintf_internal_r+0x144c>
    dbbc:	a080080c 	andi	r2,r20,32
    dbc0:	10004b26 	beq	r2,zero,dcf0 <___vfiprintf_internal_r+0x900>
    dbc4:	da802217 	ldw	r10,136(sp)
    dbc8:	50800117 	ldw	r2,4(r10)
    dbcc:	54800017 	ldw	r18,0(r10)
    dbd0:	52800204 	addi	r10,r10,8
    dbd4:	da802215 	stw	r10,136(sp)
    dbd8:	1027883a 	mov	r19,r2
    dbdc:	10022c16 	blt	r2,zero,e490 <___vfiprintf_internal_r+0x10a0>
    dbe0:	df001d83 	ldbu	fp,118(sp)
    dbe4:	48007216 	blt	r9,zero,ddb0 <___vfiprintf_internal_r+0x9c0>
    dbe8:	00ffdfc4 	movi	r3,-129
    dbec:	94c4b03a 	or	r2,r18,r19
    dbf0:	a0e8703a 	and	r20,r20,r3
    dbf4:	1000cc26 	beq	r2,zero,df28 <___vfiprintf_internal_r+0xb38>
    dbf8:	98021026 	beq	r19,zero,e43c <___vfiprintf_internal_r+0x104c>
    dbfc:	dc402415 	stw	r17,144(sp)
    dc00:	dc002515 	stw	r16,148(sp)
    dc04:	9823883a 	mov	r17,r19
    dc08:	9021883a 	mov	r16,r18
    dc0c:	dd401a04 	addi	r21,sp,104
    dc10:	4825883a 	mov	r18,r9
    dc14:	4027883a 	mov	r19,r8
    dc18:	8009883a 	mov	r4,r16
    dc1c:	880b883a 	mov	r5,r17
    dc20:	01800284 	movi	r6,10
    dc24:	000f883a 	mov	r7,zero
    dc28:	000f7d00 	call	f7d0 <__umoddi3>
    dc2c:	10800c04 	addi	r2,r2,48
    dc30:	ad7fffc4 	addi	r21,r21,-1
    dc34:	8009883a 	mov	r4,r16
    dc38:	880b883a 	mov	r5,r17
    dc3c:	a8800005 	stb	r2,0(r21)
    dc40:	01800284 	movi	r6,10
    dc44:	000f883a 	mov	r7,zero
    dc48:	000f2580 	call	f258 <__udivdi3>
    dc4c:	1021883a 	mov	r16,r2
    dc50:	10c4b03a 	or	r2,r2,r3
    dc54:	1823883a 	mov	r17,r3
    dc58:	103fef1e 	bne	r2,zero,dc18 <___vfiprintf_internal_r+0x828>
    dc5c:	dc402417 	ldw	r17,144(sp)
    dc60:	dc002517 	ldw	r16,148(sp)
    dc64:	9013883a 	mov	r9,r18
    dc68:	9811883a 	mov	r8,r19
    dc6c:	da801e17 	ldw	r10,120(sp)
    dc70:	5567c83a 	sub	r19,r10,r21
    dc74:	003ede06 	br	d7f0 <___vfiprintf_internal_r+0x400>
    dc78:	38803fcc 	andi	r2,r7,255
    dc7c:	1080201c 	xori	r2,r2,128
    dc80:	10bfe004 	addi	r2,r2,-128
    dc84:	1002371e 	bne	r2,zero,e564 <___vfiprintf_internal_r+0x1174>
    dc88:	01000044 	movi	r4,1
    dc8c:	01c00804 	movi	r7,32
    dc90:	80c00007 	ldb	r3,0(r16)
    dc94:	003e3506 	br	d56c <___vfiprintf_internal_r+0x17c>
    dc98:	a5000054 	ori	r20,r20,1
    dc9c:	80c00007 	ldb	r3,0(r16)
    dca0:	003e3206 	br	d56c <___vfiprintf_internal_r+0x17c>
    dca4:	a5002014 	ori	r20,r20,128
    dca8:	80c00007 	ldb	r3,0(r16)
    dcac:	003e2f06 	br	d56c <___vfiprintf_internal_r+0x17c>
    dcb0:	8015883a 	mov	r10,r16
    dcb4:	0023883a 	mov	r17,zero
    dcb8:	18bff404 	addi	r2,r3,-48
    dcbc:	50c00007 	ldb	r3,0(r10)
    dcc0:	8c4002a4 	muli	r17,r17,10
    dcc4:	84000044 	addi	r16,r16,1
    dcc8:	8015883a 	mov	r10,r16
    dccc:	1463883a 	add	r17,r2,r17
    dcd0:	18bff404 	addi	r2,r3,-48
    dcd4:	30bff92e 	bgeu	r6,r2,dcbc <___vfiprintf_internal_r+0x8cc>
    dcd8:	003e2506 	br	d570 <___vfiprintf_internal_r+0x180>
    dcdc:	21003fcc 	andi	r4,r4,255
    dce0:	2002d41e 	bne	r4,zero,e834 <___vfiprintf_internal_r+0x1444>
    dce4:	a5000414 	ori	r20,r20,16
    dce8:	a080080c 	andi	r2,r20,32
    dcec:	103fb51e 	bne	r2,zero,dbc4 <___vfiprintf_internal_r+0x7d4>
    dcf0:	a080040c 	andi	r2,r20,16
    dcf4:	1001f826 	beq	r2,zero,e4d8 <___vfiprintf_internal_r+0x10e8>
    dcf8:	da802217 	ldw	r10,136(sp)
    dcfc:	54800017 	ldw	r18,0(r10)
    dd00:	52800104 	addi	r10,r10,4
    dd04:	da802215 	stw	r10,136(sp)
    dd08:	9027d7fa 	srai	r19,r18,31
    dd0c:	9805883a 	mov	r2,r19
    dd10:	003fb206 	br	dbdc <___vfiprintf_internal_r+0x7ec>
    dd14:	21003fcc 	andi	r4,r4,255
    dd18:	2002c41e 	bne	r4,zero,e82c <___vfiprintf_internal_r+0x143c>
    dd1c:	a5000414 	ori	r20,r20,16
    dd20:	a080080c 	andi	r2,r20,32
    dd24:	103f5f1e 	bne	r2,zero,daa4 <___vfiprintf_internal_r+0x6b4>
    dd28:	a080040c 	andi	r2,r20,16
    dd2c:	10020f26 	beq	r2,zero,e56c <___vfiprintf_internal_r+0x117c>
    dd30:	da802217 	ldw	r10,136(sp)
    dd34:	d8001d85 	stb	zero,118(sp)
    dd38:	0027883a 	mov	r19,zero
    dd3c:	50800104 	addi	r2,r10,4
    dd40:	54800017 	ldw	r18,0(r10)
    dd44:	48021116 	blt	r9,zero,e58c <___vfiprintf_internal_r+0x119c>
    dd48:	00ffdfc4 	movi	r3,-129
    dd4c:	d8802215 	stw	r2,136(sp)
    dd50:	a0e8703a 	and	r20,r20,r3
    dd54:	903f5e1e 	bne	r18,zero,dad0 <___vfiprintf_internal_r+0x6e0>
    dd58:	0039883a 	mov	fp,zero
    dd5c:	4802a626 	beq	r9,zero,e7f8 <___vfiprintf_internal_r+0x1408>
    dd60:	0025883a 	mov	r18,zero
    dd64:	0027883a 	mov	r19,zero
    dd68:	003f5a06 	br	dad4 <___vfiprintf_internal_r+0x6e4>
    dd6c:	21003fcc 	andi	r4,r4,255
    dd70:	20029f1e 	bne	r4,zero,e7f0 <___vfiprintf_internal_r+0x1400>
    dd74:	a5000414 	ori	r20,r20,16
    dd78:	a080080c 	andi	r2,r20,32
    dd7c:	10005e1e 	bne	r2,zero,def8 <___vfiprintf_internal_r+0xb08>
    dd80:	a080040c 	andi	r2,r20,16
    dd84:	1001a21e 	bne	r2,zero,e410 <___vfiprintf_internal_r+0x1020>
    dd88:	a080100c 	andi	r2,r20,64
    dd8c:	d8001d85 	stb	zero,118(sp)
    dd90:	da802217 	ldw	r10,136(sp)
    dd94:	1002231e 	bne	r2,zero,e624 <___vfiprintf_internal_r+0x1234>
    dd98:	50800104 	addi	r2,r10,4
    dd9c:	54800017 	ldw	r18,0(r10)
    dda0:	0027883a 	mov	r19,zero
    dda4:	4801a00e 	bge	r9,zero,e428 <___vfiprintf_internal_r+0x1038>
    dda8:	d8802215 	stw	r2,136(sp)
    ddac:	0039883a 	mov	fp,zero
    ddb0:	94c4b03a 	or	r2,r18,r19
    ddb4:	103f901e 	bne	r2,zero,dbf8 <___vfiprintf_internal_r+0x808>
    ddb8:	00800044 	movi	r2,1
    ddbc:	10803fcc 	andi	r2,r2,255
    ddc0:	00c00044 	movi	r3,1
    ddc4:	10c05926 	beq	r2,r3,df2c <___vfiprintf_internal_r+0xb3c>
    ddc8:	00c00084 	movi	r3,2
    ddcc:	10ffe41e 	bne	r2,r3,dd60 <___vfiprintf_internal_r+0x970>
    ddd0:	0025883a 	mov	r18,zero
    ddd4:	0027883a 	mov	r19,zero
    ddd8:	00013d06 	br	e2d0 <___vfiprintf_internal_r+0xee0>
    dddc:	21003fcc 	andi	r4,r4,255
    dde0:	2002811e 	bne	r4,zero,e7e8 <___vfiprintf_internal_r+0x13f8>
    dde4:	008000b4 	movhi	r2,2
    dde8:	10918204 	addi	r2,r2,17928
    ddec:	d8802615 	stw	r2,152(sp)
    ddf0:	a080080c 	andi	r2,r20,32
    ddf4:	103f561e 	bne	r2,zero,db50 <___vfiprintf_internal_r+0x760>
    ddf8:	a080040c 	andi	r2,r20,16
    ddfc:	1001d126 	beq	r2,zero,e544 <___vfiprintf_internal_r+0x1154>
    de00:	da802217 	ldw	r10,136(sp)
    de04:	0027883a 	mov	r19,zero
    de08:	54800017 	ldw	r18,0(r10)
    de0c:	52800104 	addi	r10,r10,4
    de10:	da802215 	stw	r10,136(sp)
    de14:	003f5306 	br	db64 <___vfiprintf_internal_r+0x774>
    de18:	da802217 	ldw	r10,136(sp)
    de1c:	d8001d85 	stb	zero,118(sp)
    de20:	55400017 	ldw	r21,0(r10)
    de24:	50c00104 	addi	r3,r10,4
    de28:	a8024226 	beq	r21,zero,e734 <___vfiprintf_internal_r+0x1344>
    de2c:	48021816 	blt	r9,zero,e690 <___vfiprintf_internal_r+0x12a0>
    de30:	480d883a 	mov	r6,r9
    de34:	000b883a 	mov	r5,zero
    de38:	a809883a 	mov	r4,r21
    de3c:	d8c02a15 	stw	r3,168(sp)
    de40:	da002b15 	stw	r8,172(sp)
    de44:	da402c15 	stw	r9,176(sp)
    de48:	000a2340 	call	a234 <memchr>
    de4c:	d8c02a17 	ldw	r3,168(sp)
    de50:	da002b17 	ldw	r8,172(sp)
    de54:	da402c17 	ldw	r9,176(sp)
    de58:	10024826 	beq	r2,zero,e77c <___vfiprintf_internal_r+0x138c>
    de5c:	1567c83a 	sub	r19,r2,r21
    de60:	df001d83 	ldbu	fp,118(sp)
    de64:	d8c02215 	stw	r3,136(sp)
    de68:	0013883a 	mov	r9,zero
    de6c:	003e6006 	br	d7f0 <___vfiprintf_internal_r+0x400>
    de70:	21003fcc 	andi	r4,r4,255
    de74:	203fc026 	beq	r4,zero,dd78 <___vfiprintf_internal_r+0x988>
    de78:	d9c01d85 	stb	r7,118(sp)
    de7c:	003fbe06 	br	dd78 <___vfiprintf_internal_r+0x988>
    de80:	da802217 	ldw	r10,136(sp)
    de84:	54400017 	ldw	r17,0(r10)
    de88:	50800104 	addi	r2,r10,4
    de8c:	883e3b16 	blt	r17,zero,d77c <___vfiprintf_internal_r+0x38c>
    de90:	d8802215 	stw	r2,136(sp)
    de94:	80c00007 	ldb	r3,0(r16)
    de98:	003db406 	br	d56c <___vfiprintf_internal_r+0x17c>
    de9c:	01000044 	movi	r4,1
    dea0:	01c00ac4 	movi	r7,43
    dea4:	80c00007 	ldb	r3,0(r16)
    dea8:	003db006 	br	d56c <___vfiprintf_internal_r+0x17c>
    deac:	80c00007 	ldb	r3,0(r16)
    deb0:	82800044 	addi	r10,r16,1
    deb4:	1b423c26 	beq	r3,r13,e7a8 <___vfiprintf_internal_r+0x13b8>
    deb8:	18bff404 	addi	r2,r3,-48
    debc:	0013883a 	mov	r9,zero
    dec0:	30822b36 	bltu	r6,r2,e770 <___vfiprintf_internal_r+0x1380>
    dec4:	50c00007 	ldb	r3,0(r10)
    dec8:	4a4002a4 	muli	r9,r9,10
    decc:	54000044 	addi	r16,r10,1
    ded0:	8015883a 	mov	r10,r16
    ded4:	4893883a 	add	r9,r9,r2
    ded8:	18bff404 	addi	r2,r3,-48
    dedc:	30bff92e 	bgeu	r6,r2,dec4 <___vfiprintf_internal_r+0xad4>
    dee0:	483da30e 	bge	r9,zero,d570 <___vfiprintf_internal_r+0x180>
    dee4:	027fffc4 	movi	r9,-1
    dee8:	003da106 	br	d570 <___vfiprintf_internal_r+0x180>
    deec:	a5001014 	ori	r20,r20,64
    def0:	80c00007 	ldb	r3,0(r16)
    def4:	003d9d06 	br	d56c <___vfiprintf_internal_r+0x17c>
    def8:	da802217 	ldw	r10,136(sp)
    defc:	d8001d85 	stb	zero,118(sp)
    df00:	50c00204 	addi	r3,r10,8
    df04:	54800017 	ldw	r18,0(r10)
    df08:	54c00117 	ldw	r19,4(r10)
    df0c:	4801ca16 	blt	r9,zero,e638 <___vfiprintf_internal_r+0x1248>
    df10:	013fdfc4 	movi	r4,-129
    df14:	94c4b03a 	or	r2,r18,r19
    df18:	d8c02215 	stw	r3,136(sp)
    df1c:	a128703a 	and	r20,r20,r4
    df20:	0039883a 	mov	fp,zero
    df24:	103f341e 	bne	r2,zero,dbf8 <___vfiprintf_internal_r+0x808>
    df28:	483e2e26 	beq	r9,zero,d7e4 <___vfiprintf_internal_r+0x3f4>
    df2c:	0025883a 	mov	r18,zero
    df30:	94800c04 	addi	r18,r18,48
    df34:	dc8019c5 	stb	r18,103(sp)
    df38:	dcc02717 	ldw	r19,156(sp)
    df3c:	dd4019c4 	addi	r21,sp,103
    df40:	003e2b06 	br	d7f0 <___vfiprintf_internal_r+0x400>
    df44:	21003fcc 	andi	r4,r4,255
    df48:	2002361e 	bne	r4,zero,e824 <___vfiprintf_internal_r+0x1434>
    df4c:	1801c126 	beq	r3,zero,e654 <___vfiprintf_internal_r+0x1264>
    df50:	04800044 	movi	r18,1
    df54:	d8c01005 	stb	r3,64(sp)
    df58:	d8001d85 	stb	zero,118(sp)
    df5c:	9027883a 	mov	r19,r18
    df60:	dd401004 	addi	r21,sp,64
    df64:	003f1106 	br	dbac <___vfiprintf_internal_r+0x7bc>
    df68:	d9402117 	ldw	r5,132(sp)
    df6c:	d9002017 	ldw	r4,128(sp)
    df70:	d9801a04 	addi	r6,sp,104
    df74:	d9c02b15 	stw	r7,172(sp)
    df78:	dbc02a15 	stw	r15,168(sp)
    df7c:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    df80:	d9c02b17 	ldw	r7,172(sp)
    df84:	dbc02a17 	ldw	r15,168(sp)
    df88:	10006d1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    df8c:	d9801b17 	ldw	r6,108(sp)
    df90:	d8801c17 	ldw	r2,112(sp)
    df94:	d811883a 	mov	r8,sp
    df98:	31400044 	addi	r5,r6,1
    df9c:	003e3306 	br	d86c <___vfiprintf_internal_r+0x47c>
    dfa0:	d9401b17 	ldw	r5,108(sp)
    dfa4:	d8801c17 	ldw	r2,112(sp)
    dfa8:	29000044 	addi	r4,r5,1
    dfac:	d8c01d87 	ldb	r3,118(sp)
    dfb0:	183e4d26 	beq	r3,zero,d8e8 <___vfiprintf_internal_r+0x4f8>
    dfb4:	00c00044 	movi	r3,1
    dfb8:	d9401d84 	addi	r5,sp,118
    dfbc:	10c5883a 	add	r2,r2,r3
    dfc0:	41400015 	stw	r5,0(r8)
    dfc4:	40c00115 	stw	r3,4(r8)
    dfc8:	d8801c15 	stw	r2,112(sp)
    dfcc:	d9001b15 	stw	r4,108(sp)
    dfd0:	014001c4 	movi	r5,7
    dfd4:	2900a90e 	bge	r5,r4,e27c <___vfiprintf_internal_r+0xe8c>
    dfd8:	1000da1e 	bne	r2,zero,e344 <___vfiprintf_internal_r+0xf54>
    dfdc:	7000ab1e 	bne	r14,zero,e28c <___vfiprintf_internal_r+0xe9c>
    dfe0:	000b883a 	mov	r5,zero
    dfe4:	1809883a 	mov	r4,r3
    dfe8:	d811883a 	mov	r8,sp
    dfec:	00c02004 	movi	r3,128
    dff0:	e0fe4d26 	beq	fp,r3,d928 <___vfiprintf_internal_r+0x538>
    dff4:	4cf9c83a 	sub	fp,r9,r19
    dff8:	073e7b0e 	bge	zero,fp,d9e8 <___vfiprintf_internal_r+0x5f8>
    dffc:	01c00404 	movi	r7,16
    e000:	3f01900e 	bge	r7,fp,e644 <___vfiprintf_internal_r+0x1254>
    e004:	00c000b4 	movhi	r3,2
    e008:	18d1f804 	addi	r3,r3,18400
    e00c:	d8c02415 	stw	r3,144(sp)
    e010:	034001c4 	movi	r13,7
    e014:	00000506 	br	e02c <___vfiprintf_internal_r+0xc3c>
    e018:	29000084 	addi	r4,r5,2
    e01c:	42000204 	addi	r8,r8,8
    e020:	180b883a 	mov	r5,r3
    e024:	e73ffc04 	addi	fp,fp,-16
    e028:	3f000d0e 	bge	r7,fp,e060 <___vfiprintf_internal_r+0xc70>
    e02c:	10800404 	addi	r2,r2,16
    e030:	28c00044 	addi	r3,r5,1
    e034:	45c00015 	stw	r23,0(r8)
    e038:	41c00115 	stw	r7,4(r8)
    e03c:	d8801c15 	stw	r2,112(sp)
    e040:	d8c01b15 	stw	r3,108(sp)
    e044:	68fff40e 	bge	r13,r3,e018 <___vfiprintf_internal_r+0xc28>
    e048:	1000101e 	bne	r2,zero,e08c <___vfiprintf_internal_r+0xc9c>
    e04c:	e73ffc04 	addi	fp,fp,-16
    e050:	01000044 	movi	r4,1
    e054:	000b883a 	mov	r5,zero
    e058:	d811883a 	mov	r8,sp
    e05c:	3f3ff316 	blt	r7,fp,e02c <___vfiprintf_internal_r+0xc3c>
    e060:	da802417 	ldw	r10,144(sp)
    e064:	1705883a 	add	r2,r2,fp
    e068:	47000115 	stw	fp,4(r8)
    e06c:	42800015 	stw	r10,0(r8)
    e070:	d8801c15 	stw	r2,112(sp)
    e074:	d9001b15 	stw	r4,108(sp)
    e078:	00c001c4 	movi	r3,7
    e07c:	19003616 	blt	r3,r4,e158 <___vfiprintf_internal_r+0xd68>
    e080:	42000204 	addi	r8,r8,8
    e084:	21000044 	addi	r4,r4,1
    e088:	003e5706 	br	d9e8 <___vfiprintf_internal_r+0x5f8>
    e08c:	d9402117 	ldw	r5,132(sp)
    e090:	d9002017 	ldw	r4,128(sp)
    e094:	d9801a04 	addi	r6,sp,104
    e098:	d9c02b15 	stw	r7,172(sp)
    e09c:	db402a15 	stw	r13,168(sp)
    e0a0:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e0a4:	d9c02b17 	ldw	r7,172(sp)
    e0a8:	db402a17 	ldw	r13,168(sp)
    e0ac:	1000241e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e0b0:	d9401b17 	ldw	r5,108(sp)
    e0b4:	d8801c17 	ldw	r2,112(sp)
    e0b8:	d811883a 	mov	r8,sp
    e0bc:	29000044 	addi	r4,r5,1
    e0c0:	003fd806 	br	e024 <___vfiprintf_internal_r+0xc34>
    e0c4:	d9401b17 	ldw	r5,108(sp)
    e0c8:	00c000b4 	movhi	r3,2
    e0cc:	18d1fc04 	addi	r3,r3,18416
    e0d0:	d8c02415 	stw	r3,144(sp)
    e0d4:	29400044 	addi	r5,r5,1
    e0d8:	d8c02417 	ldw	r3,144(sp)
    e0dc:	14c5883a 	add	r2,r2,r19
    e0e0:	44c00115 	stw	r19,4(r8)
    e0e4:	40c00015 	stw	r3,0(r8)
    e0e8:	d8801c15 	stw	r2,112(sp)
    e0ec:	d9401b15 	stw	r5,108(sp)
    e0f0:	00c001c4 	movi	r3,7
    e0f4:	1940070e 	bge	r3,r5,e114 <___vfiprintf_internal_r+0xd24>
    e0f8:	103e4826 	beq	r2,zero,da1c <___vfiprintf_internal_r+0x62c>
    e0fc:	d9402117 	ldw	r5,132(sp)
    e100:	d9002017 	ldw	r4,128(sp)
    e104:	d9801a04 	addi	r6,sp,104
    e108:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e10c:	10000c1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e110:	d8801c17 	ldw	r2,112(sp)
    e114:	8c80010e 	bge	r17,r18,e11c <___vfiprintf_internal_r+0xd2c>
    e118:	9023883a 	mov	r17,r18
    e11c:	da802317 	ldw	r10,140(sp)
    e120:	5455883a 	add	r10,r10,r17
    e124:	da802315 	stw	r10,140(sp)
    e128:	103e4126 	beq	r2,zero,da30 <___vfiprintf_internal_r+0x640>
    e12c:	d9402117 	ldw	r5,132(sp)
    e130:	d9002017 	ldw	r4,128(sp)
    e134:	d9801a04 	addi	r6,sp,104
    e138:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e13c:	103e3c26 	beq	r2,zero,da30 <___vfiprintf_internal_r+0x640>
    e140:	dd002117 	ldw	r20,132(sp)
    e144:	a080030b 	ldhu	r2,12(r20)
    e148:	1080100c 	andi	r2,r2,64
    e14c:	1001231e 	bne	r2,zero,e5dc <___vfiprintf_internal_r+0x11ec>
    e150:	d8802317 	ldw	r2,140(sp)
    e154:	003d7b06 	br	d744 <___vfiprintf_internal_r+0x354>
    e158:	1000991e 	bne	r2,zero,e3c0 <___vfiprintf_internal_r+0xfd0>
    e15c:	00c00044 	movi	r3,1
    e160:	9805883a 	mov	r2,r19
    e164:	dd400015 	stw	r21,0(sp)
    e168:	dcc00115 	stw	r19,4(sp)
    e16c:	dcc01c15 	stw	r19,112(sp)
    e170:	d8c01b15 	stw	r3,108(sp)
    e174:	d811883a 	mov	r8,sp
    e178:	42000204 	addi	r8,r8,8
    e17c:	a2c0010c 	andi	r11,r20,4
    e180:	583fe426 	beq	r11,zero,e114 <___vfiprintf_internal_r+0xd24>
    e184:	8ca7c83a 	sub	r19,r17,r18
    e188:	04ffe20e 	bge	zero,r19,e114 <___vfiprintf_internal_r+0xd24>
    e18c:	01c00404 	movi	r7,16
    e190:	3cffcc0e 	bge	r7,r19,e0c4 <___vfiprintf_internal_r+0xcd4>
    e194:	028000b4 	movhi	r10,2
    e198:	5291fc04 	addi	r10,r10,18416
    e19c:	d9001b17 	ldw	r4,108(sp)
    e1a0:	da802415 	stw	r10,144(sp)
    e1a4:	382b883a 	mov	r21,r7
    e1a8:	050001c4 	movi	r20,7
    e1ac:	df002017 	ldw	fp,128(sp)
    e1b0:	00000506 	br	e1c8 <___vfiprintf_internal_r+0xdd8>
    e1b4:	21400084 	addi	r5,r4,2
    e1b8:	42000204 	addi	r8,r8,8
    e1bc:	1809883a 	mov	r4,r3
    e1c0:	9cfffc04 	addi	r19,r19,-16
    e1c4:	acffc40e 	bge	r21,r19,e0d8 <___vfiprintf_internal_r+0xce8>
    e1c8:	10800404 	addi	r2,r2,16
    e1cc:	20c00044 	addi	r3,r4,1
    e1d0:	45800015 	stw	r22,0(r8)
    e1d4:	45400115 	stw	r21,4(r8)
    e1d8:	d8801c15 	stw	r2,112(sp)
    e1dc:	d8c01b15 	stw	r3,108(sp)
    e1e0:	a0fff40e 	bge	r20,r3,e1b4 <___vfiprintf_internal_r+0xdc4>
    e1e4:	1000041e 	bne	r2,zero,e1f8 <___vfiprintf_internal_r+0xe08>
    e1e8:	01400044 	movi	r5,1
    e1ec:	0009883a 	mov	r4,zero
    e1f0:	d811883a 	mov	r8,sp
    e1f4:	003ff206 	br	e1c0 <___vfiprintf_internal_r+0xdd0>
    e1f8:	d9402117 	ldw	r5,132(sp)
    e1fc:	d9801a04 	addi	r6,sp,104
    e200:	e009883a 	mov	r4,fp
    e204:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e208:	103fcd1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e20c:	d9001b17 	ldw	r4,108(sp)
    e210:	d8801c17 	ldw	r2,112(sp)
    e214:	d811883a 	mov	r8,sp
    e218:	21400044 	addi	r5,r4,1
    e21c:	003fe806 	br	e1c0 <___vfiprintf_internal_r+0xdd0>
    e220:	d9402117 	ldw	r5,132(sp)
    e224:	d9002017 	ldw	r4,128(sp)
    e228:	d9801a04 	addi	r6,sp,104
    e22c:	d9c02b15 	stw	r7,172(sp)
    e230:	db402a15 	stw	r13,168(sp)
    e234:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e238:	d9c02b17 	ldw	r7,172(sp)
    e23c:	db402a17 	ldw	r13,168(sp)
    e240:	103fbf1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e244:	d9401b17 	ldw	r5,108(sp)
    e248:	d8801c17 	ldw	r2,112(sp)
    e24c:	d811883a 	mov	r8,sp
    e250:	29800044 	addi	r6,r5,1
    e254:	003dc406 	br	d968 <___vfiprintf_internal_r+0x578>
    e258:	1000d21e 	bne	r2,zero,e5a4 <___vfiprintf_internal_r+0x11b4>
    e25c:	d8c01d87 	ldb	r3,118(sp)
    e260:	18009526 	beq	r3,zero,e4b8 <___vfiprintf_internal_r+0x10c8>
    e264:	00800044 	movi	r2,1
    e268:	d8c01d84 	addi	r3,sp,118
    e26c:	1009883a 	mov	r4,r2
    e270:	d8c00015 	stw	r3,0(sp)
    e274:	d8800115 	stw	r2,4(sp)
    e278:	d811883a 	mov	r8,sp
    e27c:	200b883a 	mov	r5,r4
    e280:	42000204 	addi	r8,r8,8
    e284:	21000044 	addi	r4,r4,1
    e288:	003d9706 	br	d8e8 <___vfiprintf_internal_r+0x4f8>
    e28c:	d9001d04 	addi	r4,sp,116
    e290:	00800084 	movi	r2,2
    e294:	d9000015 	stw	r4,0(sp)
    e298:	d8800115 	stw	r2,4(sp)
    e29c:	1809883a 	mov	r4,r3
    e2a0:	d811883a 	mov	r8,sp
    e2a4:	200b883a 	mov	r5,r4
    e2a8:	42000204 	addi	r8,r8,8
    e2ac:	21000044 	addi	r4,r4,1
    e2b0:	003f4e06 	br	dfec <___vfiprintf_internal_r+0xbfc>
    e2b4:	d8001d85 	stb	zero,118(sp)
    e2b8:	48005016 	blt	r9,zero,e3fc <___vfiprintf_internal_r+0x100c>
    e2bc:	00ffdfc4 	movi	r3,-129
    e2c0:	94c4b03a 	or	r2,r18,r19
    e2c4:	a0e8703a 	and	r20,r20,r3
    e2c8:	103d4426 	beq	r2,zero,d7dc <___vfiprintf_internal_r+0x3ec>
    e2cc:	0039883a 	mov	fp,zero
    e2d0:	d9002617 	ldw	r4,152(sp)
    e2d4:	dd401a04 	addi	r21,sp,104
    e2d8:	908003cc 	andi	r2,r18,15
    e2dc:	9806973a 	slli	r3,r19,28
    e2e0:	2085883a 	add	r2,r4,r2
    e2e4:	9024d13a 	srli	r18,r18,4
    e2e8:	10800003 	ldbu	r2,0(r2)
    e2ec:	9826d13a 	srli	r19,r19,4
    e2f0:	ad7fffc4 	addi	r21,r21,-1
    e2f4:	1ca4b03a 	or	r18,r3,r18
    e2f8:	a8800005 	stb	r2,0(r21)
    e2fc:	94c4b03a 	or	r2,r18,r19
    e300:	103ff51e 	bne	r2,zero,e2d8 <___vfiprintf_internal_r+0xee8>
    e304:	003e5906 	br	dc6c <___vfiprintf_internal_r+0x87c>
    e308:	d9402117 	ldw	r5,132(sp)
    e30c:	d9002017 	ldw	r4,128(sp)
    e310:	d9801a04 	addi	r6,sp,104
    e314:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e318:	103f891e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e31c:	d8801c17 	ldw	r2,112(sp)
    e320:	d811883a 	mov	r8,sp
    e324:	003f9506 	br	e17c <___vfiprintf_internal_r+0xd8c>
    e328:	d9402117 	ldw	r5,132(sp)
    e32c:	d9002017 	ldw	r4,128(sp)
    e330:	d9801a04 	addi	r6,sp,104
    e334:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e338:	103f811e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e33c:	d811883a 	mov	r8,sp
    e340:	003ced06 	br	d6f8 <___vfiprintf_internal_r+0x308>
    e344:	d9402117 	ldw	r5,132(sp)
    e348:	d9002017 	ldw	r4,128(sp)
    e34c:	d9801a04 	addi	r6,sp,104
    e350:	da402c15 	stw	r9,176(sp)
    e354:	db802a15 	stw	r14,168(sp)
    e358:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e35c:	da402c17 	ldw	r9,176(sp)
    e360:	db802a17 	ldw	r14,168(sp)
    e364:	103f761e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e368:	d9401b17 	ldw	r5,108(sp)
    e36c:	d8801c17 	ldw	r2,112(sp)
    e370:	d811883a 	mov	r8,sp
    e374:	29000044 	addi	r4,r5,1
    e378:	003d5b06 	br	d8e8 <___vfiprintf_internal_r+0x4f8>
    e37c:	d9402117 	ldw	r5,132(sp)
    e380:	d9002017 	ldw	r4,128(sp)
    e384:	d9801a04 	addi	r6,sp,104
    e388:	da402c15 	stw	r9,176(sp)
    e38c:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e390:	da402c17 	ldw	r9,176(sp)
    e394:	103f6a1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e398:	d9401b17 	ldw	r5,108(sp)
    e39c:	d8801c17 	ldw	r2,112(sp)
    e3a0:	d811883a 	mov	r8,sp
    e3a4:	29000044 	addi	r4,r5,1
    e3a8:	003f1006 	br	dfec <___vfiprintf_internal_r+0xbfc>
    e3ac:	1000c31e 	bne	r2,zero,e6bc <___vfiprintf_internal_r+0x12cc>
    e3b0:	01000044 	movi	r4,1
    e3b4:	000b883a 	mov	r5,zero
    e3b8:	d811883a 	mov	r8,sp
    e3bc:	003f0d06 	br	dff4 <___vfiprintf_internal_r+0xc04>
    e3c0:	d9402117 	ldw	r5,132(sp)
    e3c4:	d9002017 	ldw	r4,128(sp)
    e3c8:	d9801a04 	addi	r6,sp,104
    e3cc:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e3d0:	103f5b1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e3d4:	d9001b17 	ldw	r4,108(sp)
    e3d8:	d8801c17 	ldw	r2,112(sp)
    e3dc:	d811883a 	mov	r8,sp
    e3e0:	21000044 	addi	r4,r4,1
    e3e4:	003d8006 	br	d9e8 <___vfiprintf_internal_r+0x5f8>
    e3e8:	010000b4 	movhi	r4,2
    e3ec:	21118704 	addi	r4,r4,17948
    e3f0:	d9002615 	stw	r4,152(sp)
    e3f4:	d8c02215 	stw	r3,136(sp)
    e3f8:	1029883a 	mov	r20,r2
    e3fc:	94c4b03a 	or	r2,r18,r19
    e400:	103fb21e 	bne	r2,zero,e2cc <___vfiprintf_internal_r+0xedc>
    e404:	0039883a 	mov	fp,zero
    e408:	00800084 	movi	r2,2
    e40c:	003e6b06 	br	ddbc <___vfiprintf_internal_r+0x9cc>
    e410:	da802217 	ldw	r10,136(sp)
    e414:	d8001d85 	stb	zero,118(sp)
    e418:	0027883a 	mov	r19,zero
    e41c:	50800104 	addi	r2,r10,4
    e420:	54800017 	ldw	r18,0(r10)
    e424:	483e6016 	blt	r9,zero,dda8 <___vfiprintf_internal_r+0x9b8>
    e428:	00ffdfc4 	movi	r3,-129
    e42c:	d8802215 	stw	r2,136(sp)
    e430:	a0e8703a 	and	r20,r20,r3
    e434:	0039883a 	mov	fp,zero
    e438:	903ebb26 	beq	r18,zero,df28 <___vfiprintf_internal_r+0xb38>
    e43c:	00800244 	movi	r2,9
    e440:	14bdee36 	bltu	r2,r18,dbfc <___vfiprintf_internal_r+0x80c>
    e444:	003eba06 	br	df30 <___vfiprintf_internal_r+0xb40>
    e448:	00800c04 	movi	r2,48
    e44c:	d8c01d45 	stb	r3,117(sp)
    e450:	d8801d05 	stb	r2,116(sp)
    e454:	d8001d85 	stb	zero,118(sp)
    e458:	a0c00094 	ori	r3,r20,2
    e45c:	4800a916 	blt	r9,zero,e704 <___vfiprintf_internal_r+0x1314>
    e460:	00bfdfc4 	movi	r2,-129
    e464:	a096703a 	and	r11,r20,r2
    e468:	5d000094 	ori	r20,r11,2
    e46c:	0039883a 	mov	fp,zero
    e470:	003f9706 	br	e2d0 <___vfiprintf_internal_r+0xee0>
    e474:	8025883a 	mov	r18,r16
    e478:	003c2e06 	br	d534 <___vfiprintf_internal_r+0x144>
    e47c:	008000b4 	movhi	r2,2
    e480:	10918704 	addi	r2,r2,17948
    e484:	0039883a 	mov	fp,zero
    e488:	d8802615 	stw	r2,152(sp)
    e48c:	003f9006 	br	e2d0 <___vfiprintf_internal_r+0xee0>
    e490:	04a5c83a 	sub	r18,zero,r18
    e494:	07000b44 	movi	fp,45
    e498:	9004c03a 	cmpne	r2,r18,zero
    e49c:	04e7c83a 	sub	r19,zero,r19
    e4a0:	df001d85 	stb	fp,118(sp)
    e4a4:	98a7c83a 	sub	r19,r19,r2
    e4a8:	48009f16 	blt	r9,zero,e728 <___vfiprintf_internal_r+0x1338>
    e4ac:	00bfdfc4 	movi	r2,-129
    e4b0:	a0a8703a 	and	r20,r20,r2
    e4b4:	003dd006 	br	dbf8 <___vfiprintf_internal_r+0x808>
    e4b8:	70004c26 	beq	r14,zero,e5ec <___vfiprintf_internal_r+0x11fc>
    e4bc:	00800084 	movi	r2,2
    e4c0:	d8c01d04 	addi	r3,sp,116
    e4c4:	d8c00015 	stw	r3,0(sp)
    e4c8:	d8800115 	stw	r2,4(sp)
    e4cc:	01000044 	movi	r4,1
    e4d0:	d811883a 	mov	r8,sp
    e4d4:	003f7306 	br	e2a4 <___vfiprintf_internal_r+0xeb4>
    e4d8:	a080100c 	andi	r2,r20,64
    e4dc:	da802217 	ldw	r10,136(sp)
    e4e0:	103e0626 	beq	r2,zero,dcfc <___vfiprintf_internal_r+0x90c>
    e4e4:	5480000f 	ldh	r18,0(r10)
    e4e8:	52800104 	addi	r10,r10,4
    e4ec:	da802215 	stw	r10,136(sp)
    e4f0:	9027d7fa 	srai	r19,r18,31
    e4f4:	9805883a 	mov	r2,r19
    e4f8:	003db806 	br	dbdc <___vfiprintf_internal_r+0x7ec>
    e4fc:	a080040c 	andi	r2,r20,16
    e500:	1000091e 	bne	r2,zero,e528 <___vfiprintf_internal_r+0x1138>
    e504:	a2c0100c 	andi	r11,r20,64
    e508:	58000726 	beq	r11,zero,e528 <___vfiprintf_internal_r+0x1138>
    e50c:	da802217 	ldw	r10,136(sp)
    e510:	50800017 	ldw	r2,0(r10)
    e514:	52800104 	addi	r10,r10,4
    e518:	da802215 	stw	r10,136(sp)
    e51c:	da802317 	ldw	r10,140(sp)
    e520:	1280000d 	sth	r10,0(r2)
    e524:	003be706 	br	d4c4 <___vfiprintf_internal_r+0xd4>
    e528:	da802217 	ldw	r10,136(sp)
    e52c:	50800017 	ldw	r2,0(r10)
    e530:	52800104 	addi	r10,r10,4
    e534:	da802215 	stw	r10,136(sp)
    e538:	da802317 	ldw	r10,140(sp)
    e53c:	12800015 	stw	r10,0(r2)
    e540:	003be006 	br	d4c4 <___vfiprintf_internal_r+0xd4>
    e544:	a080100c 	andi	r2,r20,64
    e548:	da802217 	ldw	r10,136(sp)
    e54c:	10003026 	beq	r2,zero,e610 <___vfiprintf_internal_r+0x1220>
    e550:	5480000b 	ldhu	r18,0(r10)
    e554:	52800104 	addi	r10,r10,4
    e558:	0027883a 	mov	r19,zero
    e55c:	da802215 	stw	r10,136(sp)
    e560:	003d8006 	br	db64 <___vfiprintf_internal_r+0x774>
    e564:	80c00007 	ldb	r3,0(r16)
    e568:	003c0006 	br	d56c <___vfiprintf_internal_r+0x17c>
    e56c:	a080100c 	andi	r2,r20,64
    e570:	d8001d85 	stb	zero,118(sp)
    e574:	da802217 	ldw	r10,136(sp)
    e578:	1000201e 	bne	r2,zero,e5fc <___vfiprintf_internal_r+0x120c>
    e57c:	50800104 	addi	r2,r10,4
    e580:	54800017 	ldw	r18,0(r10)
    e584:	0027883a 	mov	r19,zero
    e588:	483def0e 	bge	r9,zero,dd48 <___vfiprintf_internal_r+0x958>
    e58c:	94c6b03a 	or	r3,r18,r19
    e590:	d8802215 	stw	r2,136(sp)
    e594:	183d4e1e 	bne	r3,zero,dad0 <___vfiprintf_internal_r+0x6e0>
    e598:	0039883a 	mov	fp,zero
    e59c:	0005883a 	mov	r2,zero
    e5a0:	003e0606 	br	ddbc <___vfiprintf_internal_r+0x9cc>
    e5a4:	d9402117 	ldw	r5,132(sp)
    e5a8:	d9002017 	ldw	r4,128(sp)
    e5ac:	d9801a04 	addi	r6,sp,104
    e5b0:	da402c15 	stw	r9,176(sp)
    e5b4:	db802a15 	stw	r14,168(sp)
    e5b8:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e5bc:	da402c17 	ldw	r9,176(sp)
    e5c0:	db802a17 	ldw	r14,168(sp)
    e5c4:	103ede1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e5c8:	d9401b17 	ldw	r5,108(sp)
    e5cc:	d8801c17 	ldw	r2,112(sp)
    e5d0:	d811883a 	mov	r8,sp
    e5d4:	29000044 	addi	r4,r5,1
    e5d8:	003e7406 	br	dfac <___vfiprintf_internal_r+0xbbc>
    e5dc:	00bfffc4 	movi	r2,-1
    e5e0:	003c5806 	br	d744 <___vfiprintf_internal_r+0x354>
    e5e4:	d811883a 	mov	r8,sp
    e5e8:	003ee806 	br	e18c <___vfiprintf_internal_r+0xd9c>
    e5ec:	000b883a 	mov	r5,zero
    e5f0:	01000044 	movi	r4,1
    e5f4:	d811883a 	mov	r8,sp
    e5f8:	003e7c06 	br	dfec <___vfiprintf_internal_r+0xbfc>
    e5fc:	50800104 	addi	r2,r10,4
    e600:	5480000b 	ldhu	r18,0(r10)
    e604:	0027883a 	mov	r19,zero
    e608:	483dcf0e 	bge	r9,zero,dd48 <___vfiprintf_internal_r+0x958>
    e60c:	003fdf06 	br	e58c <___vfiprintf_internal_r+0x119c>
    e610:	54800017 	ldw	r18,0(r10)
    e614:	52800104 	addi	r10,r10,4
    e618:	0027883a 	mov	r19,zero
    e61c:	da802215 	stw	r10,136(sp)
    e620:	003d5006 	br	db64 <___vfiprintf_internal_r+0x774>
    e624:	50800104 	addi	r2,r10,4
    e628:	5480000b 	ldhu	r18,0(r10)
    e62c:	0027883a 	mov	r19,zero
    e630:	483f7d0e 	bge	r9,zero,e428 <___vfiprintf_internal_r+0x1038>
    e634:	003ddc06 	br	dda8 <___vfiprintf_internal_r+0x9b8>
    e638:	d8c02215 	stw	r3,136(sp)
    e63c:	0039883a 	mov	fp,zero
    e640:	003ddb06 	br	ddb0 <___vfiprintf_internal_r+0x9c0>
    e644:	028000b4 	movhi	r10,2
    e648:	5291f804 	addi	r10,r10,18400
    e64c:	da802415 	stw	r10,144(sp)
    e650:	003e8306 	br	e060 <___vfiprintf_internal_r+0xc70>
    e654:	d8801c17 	ldw	r2,112(sp)
    e658:	dd002117 	ldw	r20,132(sp)
    e65c:	103eb926 	beq	r2,zero,e144 <___vfiprintf_internal_r+0xd54>
    e660:	d9002017 	ldw	r4,128(sp)
    e664:	d9801a04 	addi	r6,sp,104
    e668:	a00b883a 	mov	r5,r20
    e66c:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e670:	003eb406 	br	e144 <___vfiprintf_internal_r+0xd54>
    e674:	80c00043 	ldbu	r3,1(r16)
    e678:	a5000814 	ori	r20,r20,32
    e67c:	84000044 	addi	r16,r16,1
    e680:	18c03fcc 	andi	r3,r3,255
    e684:	18c0201c 	xori	r3,r3,128
    e688:	18ffe004 	addi	r3,r3,-128
    e68c:	003bb706 	br	d56c <___vfiprintf_internal_r+0x17c>
    e690:	a809883a 	mov	r4,r21
    e694:	d8c02a15 	stw	r3,168(sp)
    e698:	da002b15 	stw	r8,172(sp)
    e69c:	0002fc00 	call	2fc0 <strlen>
    e6a0:	d8c02a17 	ldw	r3,168(sp)
    e6a4:	1027883a 	mov	r19,r2
    e6a8:	df001d83 	ldbu	fp,118(sp)
    e6ac:	d8c02215 	stw	r3,136(sp)
    e6b0:	0013883a 	mov	r9,zero
    e6b4:	da002b17 	ldw	r8,172(sp)
    e6b8:	003c4d06 	br	d7f0 <___vfiprintf_internal_r+0x400>
    e6bc:	d9402117 	ldw	r5,132(sp)
    e6c0:	d9002017 	ldw	r4,128(sp)
    e6c4:	d9801a04 	addi	r6,sp,104
    e6c8:	da402c15 	stw	r9,176(sp)
    e6cc:	000d2dc0 	call	d2dc <__sprint_r.part.0>
    e6d0:	da402c17 	ldw	r9,176(sp)
    e6d4:	103e9a1e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0xd50>
    e6d8:	d9401b17 	ldw	r5,108(sp)
    e6dc:	d8801c17 	ldw	r2,112(sp)
    e6e0:	d811883a 	mov	r8,sp
    e6e4:	29000044 	addi	r4,r5,1
    e6e8:	003e4206 	br	dff4 <___vfiprintf_internal_r+0xc04>
    e6ec:	d9401b17 	ldw	r5,108(sp)
    e6f0:	010000b4 	movhi	r4,2
    e6f4:	2111fc04 	addi	r4,r4,18416
    e6f8:	d9002415 	stw	r4,144(sp)
    e6fc:	29400044 	addi	r5,r5,1
    e700:	003c6d06 	br	d8b8 <___vfiprintf_internal_r+0x4c8>
    e704:	0039883a 	mov	fp,zero
    e708:	00800084 	movi	r2,2
    e70c:	10803fcc 	andi	r2,r2,255
    e710:	01000044 	movi	r4,1
    e714:	11001e26 	beq	r2,r4,e790 <___vfiprintf_internal_r+0x13a0>
    e718:	01000084 	movi	r4,2
    e71c:	11001e1e 	bne	r2,r4,e798 <___vfiprintf_internal_r+0x13a8>
    e720:	1829883a 	mov	r20,r3
    e724:	003eea06 	br	e2d0 <___vfiprintf_internal_r+0xee0>
    e728:	a007883a 	mov	r3,r20
    e72c:	00800044 	movi	r2,1
    e730:	003ff606 	br	e70c <___vfiprintf_internal_r+0x131c>
    e734:	00800184 	movi	r2,6
    e738:	1240012e 	bgeu	r2,r9,e740 <___vfiprintf_internal_r+0x1350>
    e73c:	1013883a 	mov	r9,r2
    e740:	4827883a 	mov	r19,r9
    e744:	4825883a 	mov	r18,r9
    e748:	48001516 	blt	r9,zero,e7a0 <___vfiprintf_internal_r+0x13b0>
    e74c:	054000b4 	movhi	r21,2
    e750:	d8c02215 	stw	r3,136(sp)
    e754:	ad518c04 	addi	r21,r21,17968
    e758:	003d1406 	br	dbac <___vfiprintf_internal_r+0x7bc>
    e75c:	028000b4 	movhi	r10,2
    e760:	5291f804 	addi	r10,r10,18400
    e764:	da802415 	stw	r10,144(sp)
    e768:	200d883a 	mov	r6,r4
    e76c:	003c9106 	br	d9b4 <___vfiprintf_internal_r+0x5c4>
    e770:	5021883a 	mov	r16,r10
    e774:	0013883a 	mov	r9,zero
    e778:	003b7d06 	br	d570 <___vfiprintf_internal_r+0x180>
    e77c:	4827883a 	mov	r19,r9
    e780:	df001d83 	ldbu	fp,118(sp)
    e784:	d8c02215 	stw	r3,136(sp)
    e788:	0013883a 	mov	r9,zero
    e78c:	003c1806 	br	d7f0 <___vfiprintf_internal_r+0x400>
    e790:	1829883a 	mov	r20,r3
    e794:	003d1806 	br	dbf8 <___vfiprintf_internal_r+0x808>
    e798:	1829883a 	mov	r20,r3
    e79c:	003ccd06 	br	dad4 <___vfiprintf_internal_r+0x6e4>
    e7a0:	0025883a 	mov	r18,zero
    e7a4:	003fe906 	br	e74c <___vfiprintf_internal_r+0x135c>
    e7a8:	d8802217 	ldw	r2,136(sp)
    e7ac:	80c00043 	ldbu	r3,1(r16)
    e7b0:	5021883a 	mov	r16,r10
    e7b4:	12400017 	ldw	r9,0(r2)
    e7b8:	10800104 	addi	r2,r2,4
    e7bc:	d8802215 	stw	r2,136(sp)
    e7c0:	483faf0e 	bge	r9,zero,e680 <___vfiprintf_internal_r+0x1290>
    e7c4:	18c03fcc 	andi	r3,r3,255
    e7c8:	18c0201c 	xori	r3,r3,128
    e7cc:	027fffc4 	movi	r9,-1
    e7d0:	18ffe004 	addi	r3,r3,-128
    e7d4:	003b6506 	br	d56c <___vfiprintf_internal_r+0x17c>
    e7d8:	d9c01d85 	stb	r7,118(sp)
    e7dc:	003ca006 	br	da60 <___vfiprintf_internal_r+0x670>
    e7e0:	d9c01d85 	stb	r7,118(sp)
    e7e4:	003cad06 	br	da9c <___vfiprintf_internal_r+0x6ac>
    e7e8:	d9c01d85 	stb	r7,118(sp)
    e7ec:	003d7d06 	br	dde4 <___vfiprintf_internal_r+0x9f4>
    e7f0:	d9c01d85 	stb	r7,118(sp)
    e7f4:	003d5f06 	br	dd74 <___vfiprintf_internal_r+0x984>
    e7f8:	a080004c 	andi	r2,r20,1
    e7fc:	0039883a 	mov	fp,zero
    e800:	10000526 	beq	r2,zero,e818 <___vfiprintf_internal_r+0x1428>
    e804:	00800c04 	movi	r2,48
    e808:	d88019c5 	stb	r2,103(sp)
    e80c:	dcc02717 	ldw	r19,156(sp)
    e810:	dd4019c4 	addi	r21,sp,103
    e814:	003bf606 	br	d7f0 <___vfiprintf_internal_r+0x400>
    e818:	0027883a 	mov	r19,zero
    e81c:	dd401a04 	addi	r21,sp,104
    e820:	003bf306 	br	d7f0 <___vfiprintf_internal_r+0x400>
    e824:	d9c01d85 	stb	r7,118(sp)
    e828:	003dc806 	br	df4c <___vfiprintf_internal_r+0xb5c>
    e82c:	d9c01d85 	stb	r7,118(sp)
    e830:	003d3a06 	br	dd1c <___vfiprintf_internal_r+0x92c>
    e834:	d9c01d85 	stb	r7,118(sp)
    e838:	003d2a06 	br	dce4 <___vfiprintf_internal_r+0x8f4>
    e83c:	d9c01d85 	stb	r7,118(sp)
    e840:	003cde06 	br	dbbc <___vfiprintf_internal_r+0x7cc>
    e844:	d9c01d85 	stb	r7,118(sp)
    e848:	003cbc06 	br	db3c <___vfiprintf_internal_r+0x74c>

0000e84c <__vfiprintf_internal>:
    e84c:	008000b4 	movhi	r2,2
    e850:	109bb804 	addi	r2,r2,28384
    e854:	300f883a 	mov	r7,r6
    e858:	280d883a 	mov	r6,r5
    e85c:	200b883a 	mov	r5,r4
    e860:	11000017 	ldw	r4,0(r2)
    e864:	000d3f01 	jmpi	d3f0 <___vfiprintf_internal_r>

0000e868 <__sbprintf>:
    e868:	2880030b 	ldhu	r2,12(r5)
    e86c:	2ac01917 	ldw	r11,100(r5)
    e870:	2a80038b 	ldhu	r10,14(r5)
    e874:	2a400717 	ldw	r9,28(r5)
    e878:	2a000917 	ldw	r8,36(r5)
    e87c:	defee204 	addi	sp,sp,-1144
    e880:	00c10004 	movi	r3,1024
    e884:	dc011a15 	stw	r16,1128(sp)
    e888:	10bfff4c 	andi	r2,r2,65533
    e88c:	2821883a 	mov	r16,r5
    e890:	d8cb883a 	add	r5,sp,r3
    e894:	dc811c15 	stw	r18,1136(sp)
    e898:	dc411b15 	stw	r17,1132(sp)
    e89c:	dfc11d15 	stw	ra,1140(sp)
    e8a0:	2025883a 	mov	r18,r4
    e8a4:	d881030d 	sth	r2,1036(sp)
    e8a8:	dac11915 	stw	r11,1124(sp)
    e8ac:	da81038d 	sth	r10,1038(sp)
    e8b0:	da410715 	stw	r9,1052(sp)
    e8b4:	da010915 	stw	r8,1060(sp)
    e8b8:	dec10015 	stw	sp,1024(sp)
    e8bc:	dec10415 	stw	sp,1040(sp)
    e8c0:	d8c10215 	stw	r3,1032(sp)
    e8c4:	d8c10515 	stw	r3,1044(sp)
    e8c8:	d8010615 	stw	zero,1048(sp)
    e8cc:	000d3f00 	call	d3f0 <___vfiprintf_internal_r>
    e8d0:	1023883a 	mov	r17,r2
    e8d4:	10000416 	blt	r2,zero,e8e8 <__sbprintf+0x80>
    e8d8:	d9410004 	addi	r5,sp,1024
    e8dc:	9009883a 	mov	r4,r18
    e8e0:	00090f80 	call	90f8 <_fflush_r>
    e8e4:	10000d1e 	bne	r2,zero,e91c <__sbprintf+0xb4>
    e8e8:	d881030b 	ldhu	r2,1036(sp)
    e8ec:	1080100c 	andi	r2,r2,64
    e8f0:	10000326 	beq	r2,zero,e900 <__sbprintf+0x98>
    e8f4:	8080030b 	ldhu	r2,12(r16)
    e8f8:	10801014 	ori	r2,r2,64
    e8fc:	8080030d 	sth	r2,12(r16)
    e900:	8805883a 	mov	r2,r17
    e904:	dfc11d17 	ldw	ra,1140(sp)
    e908:	dc811c17 	ldw	r18,1136(sp)
    e90c:	dc411b17 	ldw	r17,1132(sp)
    e910:	dc011a17 	ldw	r16,1128(sp)
    e914:	dec11e04 	addi	sp,sp,1144
    e918:	f800283a 	ret
    e91c:	047fffc4 	movi	r17,-1
    e920:	003ff106 	br	e8e8 <__sbprintf+0x80>

0000e924 <_write_r>:
    e924:	defffd04 	addi	sp,sp,-12
    e928:	2805883a 	mov	r2,r5
    e92c:	dc000015 	stw	r16,0(sp)
    e930:	040000f4 	movhi	r16,3
    e934:	dc400115 	stw	r17,4(sp)
    e938:	300b883a 	mov	r5,r6
    e93c:	84246204 	addi	r16,r16,-28280
    e940:	2023883a 	mov	r17,r4
    e944:	380d883a 	mov	r6,r7
    e948:	1009883a 	mov	r4,r2
    e94c:	dfc00215 	stw	ra,8(sp)
    e950:	80000015 	stw	zero,0(r16)
    e954:	0012d680 	call	12d68 <write>
    e958:	00ffffc4 	movi	r3,-1
    e95c:	10c00526 	beq	r2,r3,e974 <_write_r+0x50>
    e960:	dfc00217 	ldw	ra,8(sp)
    e964:	dc400117 	ldw	r17,4(sp)
    e968:	dc000017 	ldw	r16,0(sp)
    e96c:	dec00304 	addi	sp,sp,12
    e970:	f800283a 	ret
    e974:	80c00017 	ldw	r3,0(r16)
    e978:	183ff926 	beq	r3,zero,e960 <_write_r+0x3c>
    e97c:	88c00015 	stw	r3,0(r17)
    e980:	003ff706 	br	e960 <_write_r+0x3c>

0000e984 <_close_r>:
    e984:	defffd04 	addi	sp,sp,-12
    e988:	dc000015 	stw	r16,0(sp)
    e98c:	040000f4 	movhi	r16,3
    e990:	dc400115 	stw	r17,4(sp)
    e994:	84246204 	addi	r16,r16,-28280
    e998:	2023883a 	mov	r17,r4
    e99c:	2809883a 	mov	r4,r5
    e9a0:	dfc00215 	stw	ra,8(sp)
    e9a4:	80000015 	stw	zero,0(r16)
    e9a8:	00125600 	call	12560 <close>
    e9ac:	00ffffc4 	movi	r3,-1
    e9b0:	10c00526 	beq	r2,r3,e9c8 <_close_r+0x44>
    e9b4:	dfc00217 	ldw	ra,8(sp)
    e9b8:	dc400117 	ldw	r17,4(sp)
    e9bc:	dc000017 	ldw	r16,0(sp)
    e9c0:	dec00304 	addi	sp,sp,12
    e9c4:	f800283a 	ret
    e9c8:	80c00017 	ldw	r3,0(r16)
    e9cc:	183ff926 	beq	r3,zero,e9b4 <_close_r+0x30>
    e9d0:	88c00015 	stw	r3,0(r17)
    e9d4:	003ff706 	br	e9b4 <_close_r+0x30>

0000e9d8 <_calloc_r>:
    e9d8:	298b383a 	mul	r5,r5,r6
    e9dc:	defffe04 	addi	sp,sp,-8
    e9e0:	dfc00115 	stw	ra,4(sp)
    e9e4:	dc000015 	stw	r16,0(sp)
    e9e8:	00023500 	call	2350 <_malloc_r>
    e9ec:	10002926 	beq	r2,zero,ea94 <_calloc_r+0xbc>
    e9f0:	11bfff17 	ldw	r6,-4(r2)
    e9f4:	1021883a 	mov	r16,r2
    e9f8:	00bfff04 	movi	r2,-4
    e9fc:	308c703a 	and	r6,r6,r2
    ea00:	00c00904 	movi	r3,36
    ea04:	308d883a 	add	r6,r6,r2
    ea08:	19801636 	bltu	r3,r6,ea64 <_calloc_r+0x8c>
    ea0c:	008004c4 	movi	r2,19
    ea10:	11800b2e 	bgeu	r2,r6,ea40 <_calloc_r+0x68>
    ea14:	80000015 	stw	zero,0(r16)
    ea18:	80000115 	stw	zero,4(r16)
    ea1c:	008006c4 	movi	r2,27
    ea20:	11801a2e 	bgeu	r2,r6,ea8c <_calloc_r+0xb4>
    ea24:	80000215 	stw	zero,8(r16)
    ea28:	80000315 	stw	zero,12(r16)
    ea2c:	30c0151e 	bne	r6,r3,ea84 <_calloc_r+0xac>
    ea30:	80000415 	stw	zero,16(r16)
    ea34:	80800604 	addi	r2,r16,24
    ea38:	80000515 	stw	zero,20(r16)
    ea3c:	00000106 	br	ea44 <_calloc_r+0x6c>
    ea40:	8005883a 	mov	r2,r16
    ea44:	10000015 	stw	zero,0(r2)
    ea48:	10000115 	stw	zero,4(r2)
    ea4c:	10000215 	stw	zero,8(r2)
    ea50:	8005883a 	mov	r2,r16
    ea54:	dfc00117 	ldw	ra,4(sp)
    ea58:	dc000017 	ldw	r16,0(sp)
    ea5c:	dec00204 	addi	sp,sp,8
    ea60:	f800283a 	ret
    ea64:	000b883a 	mov	r5,zero
    ea68:	8009883a 	mov	r4,r16
    ea6c:	000a5bc0 	call	a5bc <memset>
    ea70:	8005883a 	mov	r2,r16
    ea74:	dfc00117 	ldw	ra,4(sp)
    ea78:	dc000017 	ldw	r16,0(sp)
    ea7c:	dec00204 	addi	sp,sp,8
    ea80:	f800283a 	ret
    ea84:	80800404 	addi	r2,r16,16
    ea88:	003fee06 	br	ea44 <_calloc_r+0x6c>
    ea8c:	80800204 	addi	r2,r16,8
    ea90:	003fec06 	br	ea44 <_calloc_r+0x6c>
    ea94:	0005883a 	mov	r2,zero
    ea98:	003fee06 	br	ea54 <_calloc_r+0x7c>

0000ea9c <_fclose_r>:
    ea9c:	28003926 	beq	r5,zero,eb84 <_fclose_r+0xe8>
    eaa0:	defffc04 	addi	sp,sp,-16
    eaa4:	dc400115 	stw	r17,4(sp)
    eaa8:	dc000015 	stw	r16,0(sp)
    eaac:	dfc00315 	stw	ra,12(sp)
    eab0:	dc800215 	stw	r18,8(sp)
    eab4:	2023883a 	mov	r17,r4
    eab8:	2821883a 	mov	r16,r5
    eabc:	20000226 	beq	r4,zero,eac8 <_fclose_r+0x2c>
    eac0:	20800e17 	ldw	r2,56(r4)
    eac4:	10002726 	beq	r2,zero,eb64 <_fclose_r+0xc8>
    eac8:	8080030f 	ldh	r2,12(r16)
    eacc:	1000071e 	bne	r2,zero,eaec <_fclose_r+0x50>
    ead0:	0005883a 	mov	r2,zero
    ead4:	dfc00317 	ldw	ra,12(sp)
    ead8:	dc800217 	ldw	r18,8(sp)
    eadc:	dc400117 	ldw	r17,4(sp)
    eae0:	dc000017 	ldw	r16,0(sp)
    eae4:	dec00404 	addi	sp,sp,16
    eae8:	f800283a 	ret
    eaec:	800b883a 	mov	r5,r16
    eaf0:	8809883a 	mov	r4,r17
    eaf4:	0008edc0 	call	8edc <__sflush_r>
    eaf8:	1025883a 	mov	r18,r2
    eafc:	80800b17 	ldw	r2,44(r16)
    eb00:	10000426 	beq	r2,zero,eb14 <_fclose_r+0x78>
    eb04:	81400717 	ldw	r5,28(r16)
    eb08:	8809883a 	mov	r4,r17
    eb0c:	103ee83a 	callr	r2
    eb10:	10001616 	blt	r2,zero,eb6c <_fclose_r+0xd0>
    eb14:	8080030b 	ldhu	r2,12(r16)
    eb18:	1080200c 	andi	r2,r2,128
    eb1c:	1000151e 	bne	r2,zero,eb74 <_fclose_r+0xd8>
    eb20:	81400c17 	ldw	r5,48(r16)
    eb24:	28000526 	beq	r5,zero,eb3c <_fclose_r+0xa0>
    eb28:	80801004 	addi	r2,r16,64
    eb2c:	28800226 	beq	r5,r2,eb38 <_fclose_r+0x9c>
    eb30:	8809883a 	mov	r4,r17
    eb34:	00096480 	call	9648 <_free_r>
    eb38:	80000c15 	stw	zero,48(r16)
    eb3c:	81401117 	ldw	r5,68(r16)
    eb40:	28000326 	beq	r5,zero,eb50 <_fclose_r+0xb4>
    eb44:	8809883a 	mov	r4,r17
    eb48:	00096480 	call	9648 <_free_r>
    eb4c:	80001115 	stw	zero,68(r16)
    eb50:	00094e40 	call	94e4 <__sfp_lock_acquire>
    eb54:	8000030d 	sth	zero,12(r16)
    eb58:	00094e80 	call	94e8 <__sfp_lock_release>
    eb5c:	9005883a 	mov	r2,r18
    eb60:	003fdc06 	br	ead4 <_fclose_r+0x38>
    eb64:	00094d40 	call	94d4 <__sinit>
    eb68:	003fd706 	br	eac8 <_fclose_r+0x2c>
    eb6c:	04bfffc4 	movi	r18,-1
    eb70:	003fe806 	br	eb14 <_fclose_r+0x78>
    eb74:	81400417 	ldw	r5,16(r16)
    eb78:	8809883a 	mov	r4,r17
    eb7c:	00096480 	call	9648 <_free_r>
    eb80:	003fe706 	br	eb20 <_fclose_r+0x84>
    eb84:	0005883a 	mov	r2,zero
    eb88:	f800283a 	ret

0000eb8c <fclose>:
    eb8c:	008000b4 	movhi	r2,2
    eb90:	109bb804 	addi	r2,r2,28384
    eb94:	200b883a 	mov	r5,r4
    eb98:	11000017 	ldw	r4,0(r2)
    eb9c:	000ea9c1 	jmpi	ea9c <_fclose_r>

0000eba0 <__fputwc>:
    eba0:	defff804 	addi	sp,sp,-32
    eba4:	dcc00415 	stw	r19,16(sp)
    eba8:	dc800315 	stw	r18,12(sp)
    ebac:	dc000115 	stw	r16,4(sp)
    ebb0:	dfc00715 	stw	ra,28(sp)
    ebb4:	dd400615 	stw	r21,24(sp)
    ebb8:	dd000515 	stw	r20,20(sp)
    ebbc:	dc400215 	stw	r17,8(sp)
    ebc0:	2027883a 	mov	r19,r4
    ebc4:	2825883a 	mov	r18,r5
    ebc8:	3021883a 	mov	r16,r6
    ebcc:	000a0240 	call	a024 <__locale_mb_cur_max>
    ebd0:	00c00044 	movi	r3,1
    ebd4:	10c03e26 	beq	r2,r3,ecd0 <__fputwc+0x130>
    ebd8:	81c01704 	addi	r7,r16,92
    ebdc:	900d883a 	mov	r6,r18
    ebe0:	d80b883a 	mov	r5,sp
    ebe4:	9809883a 	mov	r4,r19
    ebe8:	000f0700 	call	f070 <_wcrtomb_r>
    ebec:	1029883a 	mov	r20,r2
    ebf0:	00bfffc4 	movi	r2,-1
    ebf4:	a0802026 	beq	r20,r2,ec78 <__fputwc+0xd8>
    ebf8:	d9400003 	ldbu	r5,0(sp)
    ebfc:	a0001c26 	beq	r20,zero,ec70 <__fputwc+0xd0>
    ec00:	0023883a 	mov	r17,zero
    ec04:	05400284 	movi	r21,10
    ec08:	00000906 	br	ec30 <__fputwc+0x90>
    ec0c:	80800017 	ldw	r2,0(r16)
    ec10:	11400005 	stb	r5,0(r2)
    ec14:	80c00017 	ldw	r3,0(r16)
    ec18:	18c00044 	addi	r3,r3,1
    ec1c:	80c00015 	stw	r3,0(r16)
    ec20:	8c400044 	addi	r17,r17,1
    ec24:	dc45883a 	add	r2,sp,r17
    ec28:	8d00112e 	bgeu	r17,r20,ec70 <__fputwc+0xd0>
    ec2c:	11400003 	ldbu	r5,0(r2)
    ec30:	80c00217 	ldw	r3,8(r16)
    ec34:	18ffffc4 	addi	r3,r3,-1
    ec38:	80c00215 	stw	r3,8(r16)
    ec3c:	183ff30e 	bge	r3,zero,ec0c <__fputwc+0x6c>
    ec40:	80800617 	ldw	r2,24(r16)
    ec44:	18801916 	blt	r3,r2,ecac <__fputwc+0x10c>
    ec48:	80800017 	ldw	r2,0(r16)
    ec4c:	11400005 	stb	r5,0(r2)
    ec50:	80800017 	ldw	r2,0(r16)
    ec54:	10c00003 	ldbu	r3,0(r2)
    ec58:	10800044 	addi	r2,r2,1
    ec5c:	1d402326 	beq	r3,r21,ecec <__fputwc+0x14c>
    ec60:	80800015 	stw	r2,0(r16)
    ec64:	8c400044 	addi	r17,r17,1
    ec68:	dc45883a 	add	r2,sp,r17
    ec6c:	8d3fef36 	bltu	r17,r20,ec2c <__fputwc+0x8c>
    ec70:	9005883a 	mov	r2,r18
    ec74:	00000406 	br	ec88 <__fputwc+0xe8>
    ec78:	80c0030b 	ldhu	r3,12(r16)
    ec7c:	a005883a 	mov	r2,r20
    ec80:	18c01014 	ori	r3,r3,64
    ec84:	80c0030d 	sth	r3,12(r16)
    ec88:	dfc00717 	ldw	ra,28(sp)
    ec8c:	dd400617 	ldw	r21,24(sp)
    ec90:	dd000517 	ldw	r20,20(sp)
    ec94:	dcc00417 	ldw	r19,16(sp)
    ec98:	dc800317 	ldw	r18,12(sp)
    ec9c:	dc400217 	ldw	r17,8(sp)
    eca0:	dc000117 	ldw	r16,4(sp)
    eca4:	dec00804 	addi	sp,sp,32
    eca8:	f800283a 	ret
    ecac:	800d883a 	mov	r6,r16
    ecb0:	29403fcc 	andi	r5,r5,255
    ecb4:	9809883a 	mov	r4,r19
    ecb8:	000ef180 	call	ef18 <__swbuf_r>
    ecbc:	10bfffe0 	cmpeqi	r2,r2,-1
    ecc0:	10803fcc 	andi	r2,r2,255
    ecc4:	103fd626 	beq	r2,zero,ec20 <__fputwc+0x80>
    ecc8:	00bfffc4 	movi	r2,-1
    eccc:	003fee06 	br	ec88 <__fputwc+0xe8>
    ecd0:	90ffffc4 	addi	r3,r18,-1
    ecd4:	01003f84 	movi	r4,254
    ecd8:	20ffbf36 	bltu	r4,r3,ebd8 <__fputwc+0x38>
    ecdc:	900b883a 	mov	r5,r18
    ece0:	dc800005 	stb	r18,0(sp)
    ece4:	1029883a 	mov	r20,r2
    ece8:	003fc506 	br	ec00 <__fputwc+0x60>
    ecec:	800d883a 	mov	r6,r16
    ecf0:	a80b883a 	mov	r5,r21
    ecf4:	9809883a 	mov	r4,r19
    ecf8:	000ef180 	call	ef18 <__swbuf_r>
    ecfc:	10bfffe0 	cmpeqi	r2,r2,-1
    ed00:	003fef06 	br	ecc0 <__fputwc+0x120>

0000ed04 <_fputwc_r>:
    ed04:	3080030b 	ldhu	r2,12(r6)
    ed08:	10c8000c 	andi	r3,r2,8192
    ed0c:	1800051e 	bne	r3,zero,ed24 <_fputwc_r+0x20>
    ed10:	30c01917 	ldw	r3,100(r6)
    ed14:	10880014 	ori	r2,r2,8192
    ed18:	3080030d 	sth	r2,12(r6)
    ed1c:	18880014 	ori	r2,r3,8192
    ed20:	30801915 	stw	r2,100(r6)
    ed24:	000eba01 	jmpi	eba0 <__fputwc>

0000ed28 <fputwc>:
    ed28:	008000b4 	movhi	r2,2
    ed2c:	defffc04 	addi	sp,sp,-16
    ed30:	109bb804 	addi	r2,r2,28384
    ed34:	dc000115 	stw	r16,4(sp)
    ed38:	14000017 	ldw	r16,0(r2)
    ed3c:	dc400215 	stw	r17,8(sp)
    ed40:	dfc00315 	stw	ra,12(sp)
    ed44:	2023883a 	mov	r17,r4
    ed48:	80000226 	beq	r16,zero,ed54 <fputwc+0x2c>
    ed4c:	80800e17 	ldw	r2,56(r16)
    ed50:	10001026 	beq	r2,zero,ed94 <fputwc+0x6c>
    ed54:	2880030b 	ldhu	r2,12(r5)
    ed58:	10c8000c 	andi	r3,r2,8192
    ed5c:	1800051e 	bne	r3,zero,ed74 <fputwc+0x4c>
    ed60:	28c01917 	ldw	r3,100(r5)
    ed64:	10880014 	ori	r2,r2,8192
    ed68:	2880030d 	sth	r2,12(r5)
    ed6c:	18880014 	ori	r2,r3,8192
    ed70:	28801915 	stw	r2,100(r5)
    ed74:	280d883a 	mov	r6,r5
    ed78:	8009883a 	mov	r4,r16
    ed7c:	880b883a 	mov	r5,r17
    ed80:	dfc00317 	ldw	ra,12(sp)
    ed84:	dc400217 	ldw	r17,8(sp)
    ed88:	dc000117 	ldw	r16,4(sp)
    ed8c:	dec00404 	addi	sp,sp,16
    ed90:	000eba01 	jmpi	eba0 <__fputwc>
    ed94:	8009883a 	mov	r4,r16
    ed98:	d9400015 	stw	r5,0(sp)
    ed9c:	00094d40 	call	94d4 <__sinit>
    eda0:	d9400017 	ldw	r5,0(sp)
    eda4:	003feb06 	br	ed54 <fputwc+0x2c>

0000eda8 <_fstat_r>:
    eda8:	defffd04 	addi	sp,sp,-12
    edac:	2805883a 	mov	r2,r5
    edb0:	dc000015 	stw	r16,0(sp)
    edb4:	040000f4 	movhi	r16,3
    edb8:	dc400115 	stw	r17,4(sp)
    edbc:	84246204 	addi	r16,r16,-28280
    edc0:	2023883a 	mov	r17,r4
    edc4:	300b883a 	mov	r5,r6
    edc8:	1009883a 	mov	r4,r2
    edcc:	dfc00215 	stw	ra,8(sp)
    edd0:	80000015 	stw	zero,0(r16)
    edd4:	00126980 	call	12698 <fstat>
    edd8:	00ffffc4 	movi	r3,-1
    eddc:	10c00526 	beq	r2,r3,edf4 <_fstat_r+0x4c>
    ede0:	dfc00217 	ldw	ra,8(sp)
    ede4:	dc400117 	ldw	r17,4(sp)
    ede8:	dc000017 	ldw	r16,0(sp)
    edec:	dec00304 	addi	sp,sp,12
    edf0:	f800283a 	ret
    edf4:	80c00017 	ldw	r3,0(r16)
    edf8:	183ff926 	beq	r3,zero,ede0 <_fstat_r+0x38>
    edfc:	88c00015 	stw	r3,0(r17)
    ee00:	003ff706 	br	ede0 <_fstat_r+0x38>

0000ee04 <_isatty_r>:
    ee04:	defffd04 	addi	sp,sp,-12
    ee08:	dc000015 	stw	r16,0(sp)
    ee0c:	040000f4 	movhi	r16,3
    ee10:	dc400115 	stw	r17,4(sp)
    ee14:	84246204 	addi	r16,r16,-28280
    ee18:	2023883a 	mov	r17,r4
    ee1c:	2809883a 	mov	r4,r5
    ee20:	dfc00215 	stw	ra,8(sp)
    ee24:	80000015 	stw	zero,0(r16)
    ee28:	00127840 	call	12784 <isatty>
    ee2c:	00ffffc4 	movi	r3,-1
    ee30:	10c00526 	beq	r2,r3,ee48 <_isatty_r+0x44>
    ee34:	dfc00217 	ldw	ra,8(sp)
    ee38:	dc400117 	ldw	r17,4(sp)
    ee3c:	dc000017 	ldw	r16,0(sp)
    ee40:	dec00304 	addi	sp,sp,12
    ee44:	f800283a 	ret
    ee48:	80c00017 	ldw	r3,0(r16)
    ee4c:	183ff926 	beq	r3,zero,ee34 <_isatty_r+0x30>
    ee50:	88c00015 	stw	r3,0(r17)
    ee54:	003ff706 	br	ee34 <_isatty_r+0x30>

0000ee58 <_lseek_r>:
    ee58:	defffd04 	addi	sp,sp,-12
    ee5c:	2805883a 	mov	r2,r5
    ee60:	dc000015 	stw	r16,0(sp)
    ee64:	040000f4 	movhi	r16,3
    ee68:	dc400115 	stw	r17,4(sp)
    ee6c:	300b883a 	mov	r5,r6
    ee70:	84246204 	addi	r16,r16,-28280
    ee74:	2023883a 	mov	r17,r4
    ee78:	380d883a 	mov	r6,r7
    ee7c:	1009883a 	mov	r4,r2
    ee80:	dfc00215 	stw	ra,8(sp)
    ee84:	80000015 	stw	zero,0(r16)
    ee88:	00129500 	call	12950 <lseek>
    ee8c:	00ffffc4 	movi	r3,-1
    ee90:	10c00526 	beq	r2,r3,eea8 <_lseek_r+0x50>
    ee94:	dfc00217 	ldw	ra,8(sp)
    ee98:	dc400117 	ldw	r17,4(sp)
    ee9c:	dc000017 	ldw	r16,0(sp)
    eea0:	dec00304 	addi	sp,sp,12
    eea4:	f800283a 	ret
    eea8:	80c00017 	ldw	r3,0(r16)
    eeac:	183ff926 	beq	r3,zero,ee94 <_lseek_r+0x3c>
    eeb0:	88c00015 	stw	r3,0(r17)
    eeb4:	003ff706 	br	ee94 <_lseek_r+0x3c>

0000eeb8 <_read_r>:
    eeb8:	defffd04 	addi	sp,sp,-12
    eebc:	2805883a 	mov	r2,r5
    eec0:	dc000015 	stw	r16,0(sp)
    eec4:	040000f4 	movhi	r16,3
    eec8:	dc400115 	stw	r17,4(sp)
    eecc:	300b883a 	mov	r5,r6
    eed0:	84246204 	addi	r16,r16,-28280
    eed4:	2023883a 	mov	r17,r4
    eed8:	380d883a 	mov	r6,r7
    eedc:	1009883a 	mov	r4,r2
    eee0:	dfc00215 	stw	ra,8(sp)
    eee4:	80000015 	stw	zero,0(r16)
    eee8:	0012b1c0 	call	12b1c <read>
    eeec:	00ffffc4 	movi	r3,-1
    eef0:	10c00526 	beq	r2,r3,ef08 <_read_r+0x50>
    eef4:	dfc00217 	ldw	ra,8(sp)
    eef8:	dc400117 	ldw	r17,4(sp)
    eefc:	dc000017 	ldw	r16,0(sp)
    ef00:	dec00304 	addi	sp,sp,12
    ef04:	f800283a 	ret
    ef08:	80c00017 	ldw	r3,0(r16)
    ef0c:	183ff926 	beq	r3,zero,eef4 <_read_r+0x3c>
    ef10:	88c00015 	stw	r3,0(r17)
    ef14:	003ff706 	br	eef4 <_read_r+0x3c>

0000ef18 <__swbuf_r>:
    ef18:	defffb04 	addi	sp,sp,-20
    ef1c:	dcc00315 	stw	r19,12(sp)
    ef20:	dc800215 	stw	r18,8(sp)
    ef24:	dc000015 	stw	r16,0(sp)
    ef28:	dfc00415 	stw	ra,16(sp)
    ef2c:	dc400115 	stw	r17,4(sp)
    ef30:	2025883a 	mov	r18,r4
    ef34:	2827883a 	mov	r19,r5
    ef38:	3021883a 	mov	r16,r6
    ef3c:	20000226 	beq	r4,zero,ef48 <__swbuf_r+0x30>
    ef40:	20800e17 	ldw	r2,56(r4)
    ef44:	10004226 	beq	r2,zero,f050 <__swbuf_r+0x138>
    ef48:	80800617 	ldw	r2,24(r16)
    ef4c:	8100030b 	ldhu	r4,12(r16)
    ef50:	80800215 	stw	r2,8(r16)
    ef54:	2080020c 	andi	r2,r4,8
    ef58:	10003626 	beq	r2,zero,f034 <__swbuf_r+0x11c>
    ef5c:	80c00417 	ldw	r3,16(r16)
    ef60:	18003426 	beq	r3,zero,f034 <__swbuf_r+0x11c>
    ef64:	2088000c 	andi	r2,r4,8192
    ef68:	9c403fcc 	andi	r17,r19,255
    ef6c:	10001a26 	beq	r2,zero,efd8 <__swbuf_r+0xc0>
    ef70:	80800017 	ldw	r2,0(r16)
    ef74:	81000517 	ldw	r4,20(r16)
    ef78:	10c7c83a 	sub	r3,r2,r3
    ef7c:	1900200e 	bge	r3,r4,f000 <__swbuf_r+0xe8>
    ef80:	18c00044 	addi	r3,r3,1
    ef84:	81000217 	ldw	r4,8(r16)
    ef88:	11400044 	addi	r5,r2,1
    ef8c:	81400015 	stw	r5,0(r16)
    ef90:	213fffc4 	addi	r4,r4,-1
    ef94:	81000215 	stw	r4,8(r16)
    ef98:	14c00005 	stb	r19,0(r2)
    ef9c:	80800517 	ldw	r2,20(r16)
    efa0:	10c01e26 	beq	r2,r3,f01c <__swbuf_r+0x104>
    efa4:	8080030b 	ldhu	r2,12(r16)
    efa8:	1080004c 	andi	r2,r2,1
    efac:	10000226 	beq	r2,zero,efb8 <__swbuf_r+0xa0>
    efb0:	00800284 	movi	r2,10
    efb4:	88801926 	beq	r17,r2,f01c <__swbuf_r+0x104>
    efb8:	8805883a 	mov	r2,r17
    efbc:	dfc00417 	ldw	ra,16(sp)
    efc0:	dcc00317 	ldw	r19,12(sp)
    efc4:	dc800217 	ldw	r18,8(sp)
    efc8:	dc400117 	ldw	r17,4(sp)
    efcc:	dc000017 	ldw	r16,0(sp)
    efd0:	dec00504 	addi	sp,sp,20
    efd4:	f800283a 	ret
    efd8:	81401917 	ldw	r5,100(r16)
    efdc:	00b7ffc4 	movi	r2,-8193
    efe0:	21080014 	ori	r4,r4,8192
    efe4:	2884703a 	and	r2,r5,r2
    efe8:	80801915 	stw	r2,100(r16)
    efec:	80800017 	ldw	r2,0(r16)
    eff0:	8100030d 	sth	r4,12(r16)
    eff4:	81000517 	ldw	r4,20(r16)
    eff8:	10c7c83a 	sub	r3,r2,r3
    effc:	193fe016 	blt	r3,r4,ef80 <__swbuf_r+0x68>
    f000:	800b883a 	mov	r5,r16
    f004:	9009883a 	mov	r4,r18
    f008:	00090f80 	call	90f8 <_fflush_r>
    f00c:	1000071e 	bne	r2,zero,f02c <__swbuf_r+0x114>
    f010:	80800017 	ldw	r2,0(r16)
    f014:	00c00044 	movi	r3,1
    f018:	003fda06 	br	ef84 <__swbuf_r+0x6c>
    f01c:	800b883a 	mov	r5,r16
    f020:	9009883a 	mov	r4,r18
    f024:	00090f80 	call	90f8 <_fflush_r>
    f028:	103fe326 	beq	r2,zero,efb8 <__swbuf_r+0xa0>
    f02c:	00bfffc4 	movi	r2,-1
    f030:	003fe206 	br	efbc <__swbuf_r+0xa4>
    f034:	800b883a 	mov	r5,r16
    f038:	9009883a 	mov	r4,r18
    f03c:	00075000 	call	7500 <__swsetup_r>
    f040:	103ffa1e 	bne	r2,zero,f02c <__swbuf_r+0x114>
    f044:	8100030b 	ldhu	r4,12(r16)
    f048:	80c00417 	ldw	r3,16(r16)
    f04c:	003fc506 	br	ef64 <__swbuf_r+0x4c>
    f050:	00094d40 	call	94d4 <__sinit>
    f054:	003fbc06 	br	ef48 <__swbuf_r+0x30>

0000f058 <__swbuf>:
    f058:	008000b4 	movhi	r2,2
    f05c:	109bb804 	addi	r2,r2,28384
    f060:	280d883a 	mov	r6,r5
    f064:	200b883a 	mov	r5,r4
    f068:	11000017 	ldw	r4,0(r2)
    f06c:	000ef181 	jmpi	ef18 <__swbuf_r>

0000f070 <_wcrtomb_r>:
    f070:	defff604 	addi	sp,sp,-40
    f074:	008000b4 	movhi	r2,2
    f078:	dc800815 	stw	r18,32(sp)
    f07c:	dc400715 	stw	r17,28(sp)
    f080:	dc000615 	stw	r16,24(sp)
    f084:	109bba04 	addi	r2,r2,28392
    f088:	dfc00915 	stw	ra,36(sp)
    f08c:	2021883a 	mov	r16,r4
    f090:	3823883a 	mov	r17,r7
    f094:	14800017 	ldw	r18,0(r2)
    f098:	28001426 	beq	r5,zero,f0ec <_wcrtomb_r+0x7c>
    f09c:	d9400415 	stw	r5,16(sp)
    f0a0:	d9800515 	stw	r6,20(sp)
    f0a4:	000a0180 	call	a018 <__locale_charset>
    f0a8:	d9800517 	ldw	r6,20(sp)
    f0ac:	d9400417 	ldw	r5,16(sp)
    f0b0:	100f883a 	mov	r7,r2
    f0b4:	dc400015 	stw	r17,0(sp)
    f0b8:	8009883a 	mov	r4,r16
    f0bc:	903ee83a 	callr	r18
    f0c0:	00ffffc4 	movi	r3,-1
    f0c4:	10c0031e 	bne	r2,r3,f0d4 <_wcrtomb_r+0x64>
    f0c8:	88000015 	stw	zero,0(r17)
    f0cc:	00c02284 	movi	r3,138
    f0d0:	80c00015 	stw	r3,0(r16)
    f0d4:	dfc00917 	ldw	ra,36(sp)
    f0d8:	dc800817 	ldw	r18,32(sp)
    f0dc:	dc400717 	ldw	r17,28(sp)
    f0e0:	dc000617 	ldw	r16,24(sp)
    f0e4:	dec00a04 	addi	sp,sp,40
    f0e8:	f800283a 	ret
    f0ec:	000a0180 	call	a018 <__locale_charset>
    f0f0:	100f883a 	mov	r7,r2
    f0f4:	dc400015 	stw	r17,0(sp)
    f0f8:	000d883a 	mov	r6,zero
    f0fc:	d9400104 	addi	r5,sp,4
    f100:	8009883a 	mov	r4,r16
    f104:	903ee83a 	callr	r18
    f108:	003fed06 	br	f0c0 <_wcrtomb_r+0x50>

0000f10c <wcrtomb>:
    f10c:	defff604 	addi	sp,sp,-40
    f110:	008000b4 	movhi	r2,2
    f114:	dc800615 	stw	r18,24(sp)
    f118:	dc400515 	stw	r17,20(sp)
    f11c:	109bb804 	addi	r2,r2,28384
    f120:	dfc00915 	stw	ra,36(sp)
    f124:	dd000815 	stw	r20,32(sp)
    f128:	dcc00715 	stw	r19,28(sp)
    f12c:	dc000415 	stw	r16,16(sp)
    f130:	3025883a 	mov	r18,r6
    f134:	14400017 	ldw	r17,0(r2)
    f138:	20001926 	beq	r4,zero,f1a0 <wcrtomb+0x94>
    f13c:	008000b4 	movhi	r2,2
    f140:	109bba04 	addi	r2,r2,28392
    f144:	15000017 	ldw	r20,0(r2)
    f148:	2021883a 	mov	r16,r4
    f14c:	2827883a 	mov	r19,r5
    f150:	000a0180 	call	a018 <__locale_charset>
    f154:	100f883a 	mov	r7,r2
    f158:	dc800015 	stw	r18,0(sp)
    f15c:	980d883a 	mov	r6,r19
    f160:	800b883a 	mov	r5,r16
    f164:	8809883a 	mov	r4,r17
    f168:	a03ee83a 	callr	r20
    f16c:	00ffffc4 	movi	r3,-1
    f170:	10c0031e 	bne	r2,r3,f180 <wcrtomb+0x74>
    f174:	90000015 	stw	zero,0(r18)
    f178:	00c02284 	movi	r3,138
    f17c:	88c00015 	stw	r3,0(r17)
    f180:	dfc00917 	ldw	ra,36(sp)
    f184:	dd000817 	ldw	r20,32(sp)
    f188:	dcc00717 	ldw	r19,28(sp)
    f18c:	dc800617 	ldw	r18,24(sp)
    f190:	dc400517 	ldw	r17,20(sp)
    f194:	dc000417 	ldw	r16,16(sp)
    f198:	dec00a04 	addi	sp,sp,40
    f19c:	f800283a 	ret
    f1a0:	008000b4 	movhi	r2,2
    f1a4:	109bba04 	addi	r2,r2,28392
    f1a8:	14000017 	ldw	r16,0(r2)
    f1ac:	000a0180 	call	a018 <__locale_charset>
    f1b0:	100f883a 	mov	r7,r2
    f1b4:	dc800015 	stw	r18,0(sp)
    f1b8:	000d883a 	mov	r6,zero
    f1bc:	d9400104 	addi	r5,sp,4
    f1c0:	8809883a 	mov	r4,r17
    f1c4:	803ee83a 	callr	r16
    f1c8:	003fe806 	br	f16c <wcrtomb+0x60>

0000f1cc <__ascii_wctomb>:
    f1cc:	28000526 	beq	r5,zero,f1e4 <__ascii_wctomb+0x18>
    f1d0:	00803fc4 	movi	r2,255
    f1d4:	11800536 	bltu	r2,r6,f1ec <__ascii_wctomb+0x20>
    f1d8:	29800005 	stb	r6,0(r5)
    f1dc:	00800044 	movi	r2,1
    f1e0:	f800283a 	ret
    f1e4:	0005883a 	mov	r2,zero
    f1e8:	f800283a 	ret
    f1ec:	00802284 	movi	r2,138
    f1f0:	20800015 	stw	r2,0(r4)
    f1f4:	00bfffc4 	movi	r2,-1
    f1f8:	f800283a 	ret

0000f1fc <_wctomb_r>:
    f1fc:	008000b4 	movhi	r2,2
    f200:	defff904 	addi	sp,sp,-28
    f204:	109bba04 	addi	r2,r2,28392
    f208:	dfc00615 	stw	ra,24(sp)
    f20c:	dc400515 	stw	r17,20(sp)
    f210:	dc000415 	stw	r16,16(sp)
    f214:	3823883a 	mov	r17,r7
    f218:	14000017 	ldw	r16,0(r2)
    f21c:	d9000115 	stw	r4,4(sp)
    f220:	d9400215 	stw	r5,8(sp)
    f224:	d9800315 	stw	r6,12(sp)
    f228:	000a0180 	call	a018 <__locale_charset>
    f22c:	d9800317 	ldw	r6,12(sp)
    f230:	d9400217 	ldw	r5,8(sp)
    f234:	d9000117 	ldw	r4,4(sp)
    f238:	100f883a 	mov	r7,r2
    f23c:	dc400015 	stw	r17,0(sp)
    f240:	803ee83a 	callr	r16
    f244:	dfc00617 	ldw	ra,24(sp)
    f248:	dc400517 	ldw	r17,20(sp)
    f24c:	dc000417 	ldw	r16,16(sp)
    f250:	dec00704 	addi	sp,sp,28
    f254:	f800283a 	ret

0000f258 <__udivdi3>:
    f258:	defff504 	addi	sp,sp,-44
    f25c:	dcc00415 	stw	r19,16(sp)
    f260:	dc000115 	stw	r16,4(sp)
    f264:	dfc00a15 	stw	ra,40(sp)
    f268:	df000915 	stw	fp,36(sp)
    f26c:	ddc00815 	stw	r23,32(sp)
    f270:	dd800715 	stw	r22,28(sp)
    f274:	dd400615 	stw	r21,24(sp)
    f278:	dd000515 	stw	r20,20(sp)
    f27c:	dc800315 	stw	r18,12(sp)
    f280:	dc400215 	stw	r17,8(sp)
    f284:	2027883a 	mov	r19,r4
    f288:	2821883a 	mov	r16,r5
    f28c:	3800411e 	bne	r7,zero,f394 <__udivdi3+0x13c>
    f290:	3023883a 	mov	r17,r6
    f294:	2025883a 	mov	r18,r4
    f298:	2980522e 	bgeu	r5,r6,f3e4 <__udivdi3+0x18c>
    f29c:	00bfffd4 	movui	r2,65535
    f2a0:	282d883a 	mov	r22,r5
    f2a4:	1180a836 	bltu	r2,r6,f548 <__udivdi3+0x2f0>
    f2a8:	00803fc4 	movi	r2,255
    f2ac:	1185803a 	cmpltu	r2,r2,r6
    f2b0:	100490fa 	slli	r2,r2,3
    f2b4:	3086d83a 	srl	r3,r6,r2
    f2b8:	010000b4 	movhi	r4,2
    f2bc:	21120004 	addi	r4,r4,18432
    f2c0:	20c7883a 	add	r3,r4,r3
    f2c4:	18c00003 	ldbu	r3,0(r3)
    f2c8:	1885883a 	add	r2,r3,r2
    f2cc:	00c00804 	movi	r3,32
    f2d0:	1887c83a 	sub	r3,r3,r2
    f2d4:	18000526 	beq	r3,zero,f2ec <__udivdi3+0x94>
    f2d8:	80e0983a 	sll	r16,r16,r3
    f2dc:	9884d83a 	srl	r2,r19,r2
    f2e0:	30e2983a 	sll	r17,r6,r3
    f2e4:	98e4983a 	sll	r18,r19,r3
    f2e8:	142cb03a 	or	r22,r2,r16
    f2ec:	882ad43a 	srli	r21,r17,16
    f2f0:	b009883a 	mov	r4,r22
    f2f4:	8d3fffcc 	andi	r20,r17,65535
    f2f8:	a80b883a 	mov	r5,r21
    f2fc:	000fe640 	call	fe64 <__umodsi3>
    f300:	b009883a 	mov	r4,r22
    f304:	a80b883a 	mov	r5,r21
    f308:	1027883a 	mov	r19,r2
    f30c:	000fe000 	call	fe00 <__udivsi3>
    f310:	102d883a 	mov	r22,r2
    f314:	9826943a 	slli	r19,r19,16
    f318:	9004d43a 	srli	r2,r18,16
    f31c:	a5a1383a 	mul	r16,r20,r22
    f320:	14c4b03a 	or	r2,r2,r19
    f324:	1400052e 	bgeu	r2,r16,f33c <__udivdi3+0xe4>
    f328:	1445883a 	add	r2,r2,r17
    f32c:	b0ffffc4 	addi	r3,r22,-1
    f330:	14400136 	bltu	r2,r17,f338 <__udivdi3+0xe0>
    f334:	14012336 	bltu	r2,r16,f7c4 <__udivdi3+0x56c>
    f338:	182d883a 	mov	r22,r3
    f33c:	1421c83a 	sub	r16,r2,r16
    f340:	a80b883a 	mov	r5,r21
    f344:	8009883a 	mov	r4,r16
    f348:	000fe640 	call	fe64 <__umodsi3>
    f34c:	1027883a 	mov	r19,r2
    f350:	a80b883a 	mov	r5,r21
    f354:	8009883a 	mov	r4,r16
    f358:	000fe000 	call	fe00 <__udivsi3>
    f35c:	9826943a 	slli	r19,r19,16
    f360:	a0a9383a 	mul	r20,r20,r2
    f364:	94bfffcc 	andi	r18,r18,65535
    f368:	94e4b03a 	or	r18,r18,r19
    f36c:	9500052e 	bgeu	r18,r20,f384 <__udivdi3+0x12c>
    f370:	8ca5883a 	add	r18,r17,r18
    f374:	10ffffc4 	addi	r3,r2,-1
    f378:	9440f136 	bltu	r18,r17,f740 <__udivdi3+0x4e8>
    f37c:	9500f02e 	bgeu	r18,r20,f740 <__udivdi3+0x4e8>
    f380:	10bfff84 	addi	r2,r2,-2
    f384:	b00c943a 	slli	r6,r22,16
    f388:	0007883a 	mov	r3,zero
    f38c:	3084b03a 	or	r2,r6,r2
    f390:	00005906 	br	f4f8 <__udivdi3+0x2a0>
    f394:	29c05636 	bltu	r5,r7,f4f0 <__udivdi3+0x298>
    f398:	00bfffd4 	movui	r2,65535
    f39c:	11c0622e 	bgeu	r2,r7,f528 <__udivdi3+0x2d0>
    f3a0:	00804034 	movhi	r2,256
    f3a4:	10bfffc4 	addi	r2,r2,-1
    f3a8:	11c0ee36 	bltu	r2,r7,f764 <__udivdi3+0x50c>
    f3ac:	00800404 	movi	r2,16
    f3b0:	3886d83a 	srl	r3,r7,r2
    f3b4:	010000b4 	movhi	r4,2
    f3b8:	21120004 	addi	r4,r4,18432
    f3bc:	20c7883a 	add	r3,r4,r3
    f3c0:	18c00003 	ldbu	r3,0(r3)
    f3c4:	05400804 	movi	r21,32
    f3c8:	1885883a 	add	r2,r3,r2
    f3cc:	a8abc83a 	sub	r21,r21,r2
    f3d0:	a800621e 	bne	r21,zero,f55c <__udivdi3+0x304>
    f3d4:	3c00e936 	bltu	r7,r16,f77c <__udivdi3+0x524>
    f3d8:	9985403a 	cmpgeu	r2,r19,r6
    f3dc:	0007883a 	mov	r3,zero
    f3e0:	00004506 	br	f4f8 <__udivdi3+0x2a0>
    f3e4:	3000041e 	bne	r6,zero,f3f8 <__udivdi3+0x1a0>
    f3e8:	000b883a 	mov	r5,zero
    f3ec:	01000044 	movi	r4,1
    f3f0:	000fe000 	call	fe00 <__udivsi3>
    f3f4:	1023883a 	mov	r17,r2
    f3f8:	00bfffd4 	movui	r2,65535
    f3fc:	14404e2e 	bgeu	r2,r17,f538 <__udivdi3+0x2e0>
    f400:	00804034 	movhi	r2,256
    f404:	10bfffc4 	addi	r2,r2,-1
    f408:	1440d836 	bltu	r2,r17,f76c <__udivdi3+0x514>
    f40c:	00800404 	movi	r2,16
    f410:	8886d83a 	srl	r3,r17,r2
    f414:	010000b4 	movhi	r4,2
    f418:	21120004 	addi	r4,r4,18432
    f41c:	20c7883a 	add	r3,r4,r3
    f420:	18c00003 	ldbu	r3,0(r3)
    f424:	1885883a 	add	r2,r3,r2
    f428:	00c00804 	movi	r3,32
    f42c:	1887c83a 	sub	r3,r3,r2
    f430:	18008f1e 	bne	r3,zero,f670 <__udivdi3+0x418>
    f434:	882ad43a 	srli	r21,r17,16
    f438:	8461c83a 	sub	r16,r16,r17
    f43c:	8d3fffcc 	andi	r20,r17,65535
    f440:	00c00044 	movi	r3,1
    f444:	8009883a 	mov	r4,r16
    f448:	a80b883a 	mov	r5,r21
    f44c:	d8c00015 	stw	r3,0(sp)
    f450:	000fe640 	call	fe64 <__umodsi3>
    f454:	8009883a 	mov	r4,r16
    f458:	a80b883a 	mov	r5,r21
    f45c:	1027883a 	mov	r19,r2
    f460:	000fe000 	call	fe00 <__udivsi3>
    f464:	9826943a 	slli	r19,r19,16
    f468:	9008d43a 	srli	r4,r18,16
    f46c:	1521383a 	mul	r16,r2,r20
    f470:	102d883a 	mov	r22,r2
    f474:	24c8b03a 	or	r4,r4,r19
    f478:	d8c00017 	ldw	r3,0(sp)
    f47c:	2400052e 	bgeu	r4,r16,f494 <__udivdi3+0x23c>
    f480:	2449883a 	add	r4,r4,r17
    f484:	b0bfffc4 	addi	r2,r22,-1
    f488:	24400136 	bltu	r4,r17,f490 <__udivdi3+0x238>
    f48c:	2400ca36 	bltu	r4,r16,f7b8 <__udivdi3+0x560>
    f490:	102d883a 	mov	r22,r2
    f494:	2421c83a 	sub	r16,r4,r16
    f498:	a80b883a 	mov	r5,r21
    f49c:	8009883a 	mov	r4,r16
    f4a0:	d8c00015 	stw	r3,0(sp)
    f4a4:	000fe640 	call	fe64 <__umodsi3>
    f4a8:	1027883a 	mov	r19,r2
    f4ac:	a80b883a 	mov	r5,r21
    f4b0:	8009883a 	mov	r4,r16
    f4b4:	000fe000 	call	fe00 <__udivsi3>
    f4b8:	9826943a 	slli	r19,r19,16
    f4bc:	1529383a 	mul	r20,r2,r20
    f4c0:	94bfffcc 	andi	r18,r18,65535
    f4c4:	94e4b03a 	or	r18,r18,r19
    f4c8:	d8c00017 	ldw	r3,0(sp)
    f4cc:	9500052e 	bgeu	r18,r20,f4e4 <__udivdi3+0x28c>
    f4d0:	8ca5883a 	add	r18,r17,r18
    f4d4:	113fffc4 	addi	r4,r2,-1
    f4d8:	94409736 	bltu	r18,r17,f738 <__udivdi3+0x4e0>
    f4dc:	9500962e 	bgeu	r18,r20,f738 <__udivdi3+0x4e0>
    f4e0:	10bfff84 	addi	r2,r2,-2
    f4e4:	b00c943a 	slli	r6,r22,16
    f4e8:	3084b03a 	or	r2,r6,r2
    f4ec:	00000206 	br	f4f8 <__udivdi3+0x2a0>
    f4f0:	0007883a 	mov	r3,zero
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	dfc00a17 	ldw	ra,40(sp)
    f4fc:	df000917 	ldw	fp,36(sp)
    f500:	ddc00817 	ldw	r23,32(sp)
    f504:	dd800717 	ldw	r22,28(sp)
    f508:	dd400617 	ldw	r21,24(sp)
    f50c:	dd000517 	ldw	r20,20(sp)
    f510:	dcc00417 	ldw	r19,16(sp)
    f514:	dc800317 	ldw	r18,12(sp)
    f518:	dc400217 	ldw	r17,8(sp)
    f51c:	dc000117 	ldw	r16,4(sp)
    f520:	dec00b04 	addi	sp,sp,44
    f524:	f800283a 	ret
    f528:	00803fc4 	movi	r2,255
    f52c:	11c5803a 	cmpltu	r2,r2,r7
    f530:	100490fa 	slli	r2,r2,3
    f534:	003f9e06 	br	f3b0 <__udivdi3+0x158>
    f538:	00803fc4 	movi	r2,255
    f53c:	1445803a 	cmpltu	r2,r2,r17
    f540:	100490fa 	slli	r2,r2,3
    f544:	003fb206 	br	f410 <__udivdi3+0x1b8>
    f548:	00804034 	movhi	r2,256
    f54c:	10bfffc4 	addi	r2,r2,-1
    f550:	11808836 	bltu	r2,r6,f774 <__udivdi3+0x51c>
    f554:	00800404 	movi	r2,16
    f558:	003f5606 	br	f2b4 <__udivdi3+0x5c>
    f55c:	30aed83a 	srl	r23,r6,r2
    f560:	3d4e983a 	sll	r7,r7,r21
    f564:	80acd83a 	srl	r22,r16,r2
    f568:	9884d83a 	srl	r2,r19,r2
    f56c:	3deeb03a 	or	r23,r7,r23
    f570:	b824d43a 	srli	r18,r23,16
    f574:	8560983a 	sll	r16,r16,r21
    f578:	b009883a 	mov	r4,r22
    f57c:	900b883a 	mov	r5,r18
    f580:	3568983a 	sll	r20,r6,r21
    f584:	1420b03a 	or	r16,r2,r16
    f588:	000fe640 	call	fe64 <__umodsi3>
    f58c:	b009883a 	mov	r4,r22
    f590:	900b883a 	mov	r5,r18
    f594:	1023883a 	mov	r17,r2
    f598:	000fe000 	call	fe00 <__udivsi3>
    f59c:	8808943a 	slli	r4,r17,16
    f5a0:	bf3fffcc 	andi	fp,r23,65535
    f5a4:	8006d43a 	srli	r3,r16,16
    f5a8:	e0a3383a 	mul	r17,fp,r2
    f5ac:	100d883a 	mov	r6,r2
    f5b0:	1906b03a 	or	r3,r3,r4
    f5b4:	1c40042e 	bgeu	r3,r17,f5c8 <__udivdi3+0x370>
    f5b8:	1dc7883a 	add	r3,r3,r23
    f5bc:	10bfffc4 	addi	r2,r2,-1
    f5c0:	1dc0752e 	bgeu	r3,r23,f798 <__udivdi3+0x540>
    f5c4:	100d883a 	mov	r6,r2
    f5c8:	1c63c83a 	sub	r17,r3,r17
    f5cc:	900b883a 	mov	r5,r18
    f5d0:	8809883a 	mov	r4,r17
    f5d4:	d9800015 	stw	r6,0(sp)
    f5d8:	000fe640 	call	fe64 <__umodsi3>
    f5dc:	102d883a 	mov	r22,r2
    f5e0:	8809883a 	mov	r4,r17
    f5e4:	900b883a 	mov	r5,r18
    f5e8:	000fe000 	call	fe00 <__udivsi3>
    f5ec:	b02c943a 	slli	r22,r22,16
    f5f0:	e089383a 	mul	r4,fp,r2
    f5f4:	843fffcc 	andi	r16,r16,65535
    f5f8:	85a0b03a 	or	r16,r16,r22
    f5fc:	d9800017 	ldw	r6,0(sp)
    f600:	8100042e 	bgeu	r16,r4,f614 <__udivdi3+0x3bc>
    f604:	85e1883a 	add	r16,r16,r23
    f608:	10ffffc4 	addi	r3,r2,-1
    f60c:	85c05e2e 	bgeu	r16,r23,f788 <__udivdi3+0x530>
    f610:	1805883a 	mov	r2,r3
    f614:	300c943a 	slli	r6,r6,16
    f618:	a17fffcc 	andi	r5,r20,65535
    f61c:	a028d43a 	srli	r20,r20,16
    f620:	3084b03a 	or	r2,r6,r2
    f624:	10ffffcc 	andi	r3,r2,65535
    f628:	100cd43a 	srli	r6,r2,16
    f62c:	194f383a 	mul	r7,r3,r5
    f630:	1d07383a 	mul	r3,r3,r20
    f634:	314b383a 	mul	r5,r6,r5
    f638:	3810d43a 	srli	r8,r7,16
    f63c:	8121c83a 	sub	r16,r16,r4
    f640:	1947883a 	add	r3,r3,r5
    f644:	40c7883a 	add	r3,r8,r3
    f648:	350d383a 	mul	r6,r6,r20
    f64c:	1940022e 	bgeu	r3,r5,f658 <__udivdi3+0x400>
    f650:	01000074 	movhi	r4,1
    f654:	310d883a 	add	r6,r6,r4
    f658:	1828d43a 	srli	r20,r3,16
    f65c:	a18d883a 	add	r6,r20,r6
    f660:	81803e36 	bltu	r16,r6,f75c <__udivdi3+0x504>
    f664:	81803826 	beq	r16,r6,f748 <__udivdi3+0x4f0>
    f668:	0007883a 	mov	r3,zero
    f66c:	003fa206 	br	f4f8 <__udivdi3+0x2a0>
    f670:	88e2983a 	sll	r17,r17,r3
    f674:	80a8d83a 	srl	r20,r16,r2
    f678:	80e0983a 	sll	r16,r16,r3
    f67c:	882ad43a 	srli	r21,r17,16
    f680:	9884d83a 	srl	r2,r19,r2
    f684:	a009883a 	mov	r4,r20
    f688:	a80b883a 	mov	r5,r21
    f68c:	142eb03a 	or	r23,r2,r16
    f690:	98e4983a 	sll	r18,r19,r3
    f694:	000fe640 	call	fe64 <__umodsi3>
    f698:	a009883a 	mov	r4,r20
    f69c:	a80b883a 	mov	r5,r21
    f6a0:	1021883a 	mov	r16,r2
    f6a4:	000fe000 	call	fe00 <__udivsi3>
    f6a8:	1039883a 	mov	fp,r2
    f6ac:	8d3fffcc 	andi	r20,r17,65535
    f6b0:	8020943a 	slli	r16,r16,16
    f6b4:	b804d43a 	srli	r2,r23,16
    f6b8:	a72d383a 	mul	r22,r20,fp
    f6bc:	1404b03a 	or	r2,r2,r16
    f6c0:	1580062e 	bgeu	r2,r22,f6dc <__udivdi3+0x484>
    f6c4:	1445883a 	add	r2,r2,r17
    f6c8:	e0ffffc4 	addi	r3,fp,-1
    f6cc:	14403836 	bltu	r2,r17,f7b0 <__udivdi3+0x558>
    f6d0:	1580372e 	bgeu	r2,r22,f7b0 <__udivdi3+0x558>
    f6d4:	e73fff84 	addi	fp,fp,-2
    f6d8:	1445883a 	add	r2,r2,r17
    f6dc:	15adc83a 	sub	r22,r2,r22
    f6e0:	a80b883a 	mov	r5,r21
    f6e4:	b009883a 	mov	r4,r22
    f6e8:	000fe640 	call	fe64 <__umodsi3>
    f6ec:	1027883a 	mov	r19,r2
    f6f0:	b009883a 	mov	r4,r22
    f6f4:	a80b883a 	mov	r5,r21
    f6f8:	000fe000 	call	fe00 <__udivsi3>
    f6fc:	9826943a 	slli	r19,r19,16
    f700:	a0a1383a 	mul	r16,r20,r2
    f704:	b93fffcc 	andi	r4,r23,65535
    f708:	24c8b03a 	or	r4,r4,r19
    f70c:	2400062e 	bgeu	r4,r16,f728 <__udivdi3+0x4d0>
    f710:	2449883a 	add	r4,r4,r17
    f714:	10ffffc4 	addi	r3,r2,-1
    f718:	24402336 	bltu	r4,r17,f7a8 <__udivdi3+0x550>
    f71c:	2400222e 	bgeu	r4,r16,f7a8 <__udivdi3+0x550>
    f720:	10bfff84 	addi	r2,r2,-2
    f724:	2449883a 	add	r4,r4,r17
    f728:	e038943a 	slli	fp,fp,16
    f72c:	2421c83a 	sub	r16,r4,r16
    f730:	e086b03a 	or	r3,fp,r2
    f734:	003f4306 	br	f444 <__udivdi3+0x1ec>
    f738:	2005883a 	mov	r2,r4
    f73c:	003f6906 	br	f4e4 <__udivdi3+0x28c>
    f740:	1805883a 	mov	r2,r3
    f744:	003f0f06 	br	f384 <__udivdi3+0x12c>
    f748:	1806943a 	slli	r3,r3,16
    f74c:	9d66983a 	sll	r19,r19,r21
    f750:	39ffffcc 	andi	r7,r7,65535
    f754:	19c7883a 	add	r3,r3,r7
    f758:	98ffc32e 	bgeu	r19,r3,f668 <__udivdi3+0x410>
    f75c:	10bfffc4 	addi	r2,r2,-1
    f760:	003fc106 	br	f668 <__udivdi3+0x410>
    f764:	00800604 	movi	r2,24
    f768:	003f1106 	br	f3b0 <__udivdi3+0x158>
    f76c:	00800604 	movi	r2,24
    f770:	003f2706 	br	f410 <__udivdi3+0x1b8>
    f774:	00800604 	movi	r2,24
    f778:	003ece06 	br	f2b4 <__udivdi3+0x5c>
    f77c:	0007883a 	mov	r3,zero
    f780:	00800044 	movi	r2,1
    f784:	003f5c06 	br	f4f8 <__udivdi3+0x2a0>
    f788:	813fa12e 	bgeu	r16,r4,f610 <__udivdi3+0x3b8>
    f78c:	10bfff84 	addi	r2,r2,-2
    f790:	85e1883a 	add	r16,r16,r23
    f794:	003f9f06 	br	f614 <__udivdi3+0x3bc>
    f798:	1c7f8a2e 	bgeu	r3,r17,f5c4 <__udivdi3+0x36c>
    f79c:	31bfff84 	addi	r6,r6,-2
    f7a0:	1dc7883a 	add	r3,r3,r23
    f7a4:	003f8806 	br	f5c8 <__udivdi3+0x370>
    f7a8:	1805883a 	mov	r2,r3
    f7ac:	003fde06 	br	f728 <__udivdi3+0x4d0>
    f7b0:	1839883a 	mov	fp,r3
    f7b4:	003fc906 	br	f6dc <__udivdi3+0x484>
    f7b8:	b5bfff84 	addi	r22,r22,-2
    f7bc:	2449883a 	add	r4,r4,r17
    f7c0:	003f3406 	br	f494 <__udivdi3+0x23c>
    f7c4:	b5bfff84 	addi	r22,r22,-2
    f7c8:	1445883a 	add	r2,r2,r17
    f7cc:	003edb06 	br	f33c <__udivdi3+0xe4>

0000f7d0 <__umoddi3>:
    f7d0:	defff404 	addi	sp,sp,-48
    f7d4:	df000a15 	stw	fp,40(sp)
    f7d8:	dc400315 	stw	r17,12(sp)
    f7dc:	dc000215 	stw	r16,8(sp)
    f7e0:	dfc00b15 	stw	ra,44(sp)
    f7e4:	ddc00915 	stw	r23,36(sp)
    f7e8:	dd800815 	stw	r22,32(sp)
    f7ec:	dd400715 	stw	r21,28(sp)
    f7f0:	dd000615 	stw	r20,24(sp)
    f7f4:	dcc00515 	stw	r19,20(sp)
    f7f8:	dc800415 	stw	r18,16(sp)
    f7fc:	2021883a 	mov	r16,r4
    f800:	2823883a 	mov	r17,r5
    f804:	2839883a 	mov	fp,r5
    f808:	38003c1e 	bne	r7,zero,f8fc <__umoddi3+0x12c>
    f80c:	3027883a 	mov	r19,r6
    f810:	2029883a 	mov	r20,r4
    f814:	2980512e 	bgeu	r5,r6,f95c <__umoddi3+0x18c>
    f818:	00bfffd4 	movui	r2,65535
    f81c:	11809a36 	bltu	r2,r6,fa88 <__umoddi3+0x2b8>
    f820:	01003fc4 	movi	r4,255
    f824:	2189803a 	cmpltu	r4,r4,r6
    f828:	200890fa 	slli	r4,r4,3
    f82c:	3104d83a 	srl	r2,r6,r4
    f830:	00c000b4 	movhi	r3,2
    f834:	18d20004 	addi	r3,r3,18432
    f838:	1885883a 	add	r2,r3,r2
    f83c:	10c00003 	ldbu	r3,0(r2)
    f840:	00800804 	movi	r2,32
    f844:	1909883a 	add	r4,r3,r4
    f848:	1125c83a 	sub	r18,r2,r4
    f84c:	90000526 	beq	r18,zero,f864 <__umoddi3+0x94>
    f850:	8ca2983a 	sll	r17,r17,r18
    f854:	8108d83a 	srl	r4,r16,r4
    f858:	34a6983a 	sll	r19,r6,r18
    f85c:	84a8983a 	sll	r20,r16,r18
    f860:	2478b03a 	or	fp,r4,r17
    f864:	982ed43a 	srli	r23,r19,16
    f868:	e009883a 	mov	r4,fp
    f86c:	9dbfffcc 	andi	r22,r19,65535
    f870:	b80b883a 	mov	r5,r23
    f874:	000fe640 	call	fe64 <__umodsi3>
    f878:	e009883a 	mov	r4,fp
    f87c:	b80b883a 	mov	r5,r23
    f880:	102b883a 	mov	r21,r2
    f884:	000fe000 	call	fe00 <__udivsi3>
    f888:	a806943a 	slli	r3,r21,16
    f88c:	a008d43a 	srli	r4,r20,16
    f890:	b085383a 	mul	r2,r22,r2
    f894:	20c8b03a 	or	r4,r4,r3
    f898:	2080032e 	bgeu	r4,r2,f8a8 <__umoddi3+0xd8>
    f89c:	24c9883a 	add	r4,r4,r19
    f8a0:	24c00136 	bltu	r4,r19,f8a8 <__umoddi3+0xd8>
    f8a4:	20811036 	bltu	r4,r2,fce8 <__umoddi3+0x518>
    f8a8:	20abc83a 	sub	r21,r4,r2
    f8ac:	b80b883a 	mov	r5,r23
    f8b0:	a809883a 	mov	r4,r21
    f8b4:	000fe640 	call	fe64 <__umodsi3>
    f8b8:	1023883a 	mov	r17,r2
    f8bc:	b80b883a 	mov	r5,r23
    f8c0:	a809883a 	mov	r4,r21
    f8c4:	000fe000 	call	fe00 <__udivsi3>
    f8c8:	8822943a 	slli	r17,r17,16
    f8cc:	b085383a 	mul	r2,r22,r2
    f8d0:	a0ffffcc 	andi	r3,r20,65535
    f8d4:	1c46b03a 	or	r3,r3,r17
    f8d8:	1880042e 	bgeu	r3,r2,f8ec <__umoddi3+0x11c>
    f8dc:	1cc7883a 	add	r3,r3,r19
    f8e0:	1cc00236 	bltu	r3,r19,f8ec <__umoddi3+0x11c>
    f8e4:	1880012e 	bgeu	r3,r2,f8ec <__umoddi3+0x11c>
    f8e8:	1cc7883a 	add	r3,r3,r19
    f8ec:	1885c83a 	sub	r2,r3,r2
    f8f0:	1484d83a 	srl	r2,r2,r18
    f8f4:	0007883a 	mov	r3,zero
    f8f8:	00004f06 	br	fa38 <__umoddi3+0x268>
    f8fc:	29c04c36 	bltu	r5,r7,fa30 <__umoddi3+0x260>
    f900:	00bfffd4 	movui	r2,65535
    f904:	11c0582e 	bgeu	r2,r7,fa68 <__umoddi3+0x298>
    f908:	00804034 	movhi	r2,256
    f90c:	10bfffc4 	addi	r2,r2,-1
    f910:	11c0e736 	bltu	r2,r7,fcb0 <__umoddi3+0x4e0>
    f914:	01000404 	movi	r4,16
    f918:	3904d83a 	srl	r2,r7,r4
    f91c:	00c000b4 	movhi	r3,2
    f920:	18d20004 	addi	r3,r3,18432
    f924:	1885883a 	add	r2,r3,r2
    f928:	14c00003 	ldbu	r19,0(r2)
    f92c:	00c00804 	movi	r3,32
    f930:	9927883a 	add	r19,r19,r4
    f934:	1ce9c83a 	sub	r20,r3,r19
    f938:	a000581e 	bne	r20,zero,fa9c <__umoddi3+0x2cc>
    f93c:	3c400136 	bltu	r7,r17,f944 <__umoddi3+0x174>
    f940:	8180eb36 	bltu	r16,r6,fcf0 <__umoddi3+0x520>
    f944:	8185c83a 	sub	r2,r16,r6
    f948:	89e3c83a 	sub	r17,r17,r7
    f94c:	8089803a 	cmpltu	r4,r16,r2
    f950:	8939c83a 	sub	fp,r17,r4
    f954:	e007883a 	mov	r3,fp
    f958:	00003706 	br	fa38 <__umoddi3+0x268>
    f95c:	3000041e 	bne	r6,zero,f970 <__umoddi3+0x1a0>
    f960:	000b883a 	mov	r5,zero
    f964:	01000044 	movi	r4,1
    f968:	000fe000 	call	fe00 <__udivsi3>
    f96c:	1027883a 	mov	r19,r2
    f970:	00bfffd4 	movui	r2,65535
    f974:	14c0402e 	bgeu	r2,r19,fa78 <__umoddi3+0x2a8>
    f978:	00804034 	movhi	r2,256
    f97c:	10bfffc4 	addi	r2,r2,-1
    f980:	14c0cd36 	bltu	r2,r19,fcb8 <__umoddi3+0x4e8>
    f984:	00800404 	movi	r2,16
    f988:	9886d83a 	srl	r3,r19,r2
    f98c:	010000b4 	movhi	r4,2
    f990:	21120004 	addi	r4,r4,18432
    f994:	20c7883a 	add	r3,r4,r3
    f998:	18c00003 	ldbu	r3,0(r3)
    f99c:	1887883a 	add	r3,r3,r2
    f9a0:	00800804 	movi	r2,32
    f9a4:	10e5c83a 	sub	r18,r2,r3
    f9a8:	9000901e 	bne	r18,zero,fbec <__umoddi3+0x41c>
    f9ac:	982cd43a 	srli	r22,r19,16
    f9b0:	8ce3c83a 	sub	r17,r17,r19
    f9b4:	9d7fffcc 	andi	r21,r19,65535
    f9b8:	b00b883a 	mov	r5,r22
    f9bc:	8809883a 	mov	r4,r17
    f9c0:	000fe640 	call	fe64 <__umodsi3>
    f9c4:	8809883a 	mov	r4,r17
    f9c8:	b00b883a 	mov	r5,r22
    f9cc:	1021883a 	mov	r16,r2
    f9d0:	000fe000 	call	fe00 <__udivsi3>
    f9d4:	8006943a 	slli	r3,r16,16
    f9d8:	a008d43a 	srli	r4,r20,16
    f9dc:	1545383a 	mul	r2,r2,r21
    f9e0:	20c8b03a 	or	r4,r4,r3
    f9e4:	2080042e 	bgeu	r4,r2,f9f8 <__umoddi3+0x228>
    f9e8:	24c9883a 	add	r4,r4,r19
    f9ec:	24c00236 	bltu	r4,r19,f9f8 <__umoddi3+0x228>
    f9f0:	2080012e 	bgeu	r4,r2,f9f8 <__umoddi3+0x228>
    f9f4:	24c9883a 	add	r4,r4,r19
    f9f8:	20a1c83a 	sub	r16,r4,r2
    f9fc:	b00b883a 	mov	r5,r22
    fa00:	8009883a 	mov	r4,r16
    fa04:	000fe640 	call	fe64 <__umodsi3>
    fa08:	1023883a 	mov	r17,r2
    fa0c:	b00b883a 	mov	r5,r22
    fa10:	8009883a 	mov	r4,r16
    fa14:	000fe000 	call	fe00 <__udivsi3>
    fa18:	8822943a 	slli	r17,r17,16
    fa1c:	1545383a 	mul	r2,r2,r21
    fa20:	a53fffcc 	andi	r20,r20,65535
    fa24:	a446b03a 	or	r3,r20,r17
    fa28:	18bfb02e 	bgeu	r3,r2,f8ec <__umoddi3+0x11c>
    fa2c:	003fab06 	br	f8dc <__umoddi3+0x10c>
    fa30:	2005883a 	mov	r2,r4
    fa34:	2807883a 	mov	r3,r5
    fa38:	dfc00b17 	ldw	ra,44(sp)
    fa3c:	df000a17 	ldw	fp,40(sp)
    fa40:	ddc00917 	ldw	r23,36(sp)
    fa44:	dd800817 	ldw	r22,32(sp)
    fa48:	dd400717 	ldw	r21,28(sp)
    fa4c:	dd000617 	ldw	r20,24(sp)
    fa50:	dcc00517 	ldw	r19,20(sp)
    fa54:	dc800417 	ldw	r18,16(sp)
    fa58:	dc400317 	ldw	r17,12(sp)
    fa5c:	dc000217 	ldw	r16,8(sp)
    fa60:	dec00c04 	addi	sp,sp,48
    fa64:	f800283a 	ret
    fa68:	04c03fc4 	movi	r19,255
    fa6c:	99c9803a 	cmpltu	r4,r19,r7
    fa70:	200890fa 	slli	r4,r4,3
    fa74:	003fa806 	br	f918 <__umoddi3+0x148>
    fa78:	00803fc4 	movi	r2,255
    fa7c:	14c5803a 	cmpltu	r2,r2,r19
    fa80:	100490fa 	slli	r2,r2,3
    fa84:	003fc006 	br	f988 <__umoddi3+0x1b8>
    fa88:	00804034 	movhi	r2,256
    fa8c:	10bfffc4 	addi	r2,r2,-1
    fa90:	11808b36 	bltu	r2,r6,fcc0 <__umoddi3+0x4f0>
    fa94:	01000404 	movi	r4,16
    fa98:	003f6406 	br	f82c <__umoddi3+0x5c>
    fa9c:	34c4d83a 	srl	r2,r6,r19
    faa0:	3d0e983a 	sll	r7,r7,r20
    faa4:	8cf8d83a 	srl	fp,r17,r19
    faa8:	8d10983a 	sll	r8,r17,r20
    faac:	38aab03a 	or	r21,r7,r2
    fab0:	a82cd43a 	srli	r22,r21,16
    fab4:	84e2d83a 	srl	r17,r16,r19
    fab8:	e009883a 	mov	r4,fp
    fabc:	b00b883a 	mov	r5,r22
    fac0:	8a22b03a 	or	r17,r17,r8
    fac4:	3524983a 	sll	r18,r6,r20
    fac8:	000fe640 	call	fe64 <__umodsi3>
    facc:	e009883a 	mov	r4,fp
    fad0:	b00b883a 	mov	r5,r22
    fad4:	102f883a 	mov	r23,r2
    fad8:	000fe000 	call	fe00 <__udivsi3>
    fadc:	100d883a 	mov	r6,r2
    fae0:	b808943a 	slli	r4,r23,16
    fae4:	aa3fffcc 	andi	r8,r21,65535
    fae8:	8804d43a 	srli	r2,r17,16
    faec:	41af383a 	mul	r23,r8,r6
    faf0:	8520983a 	sll	r16,r16,r20
    faf4:	1104b03a 	or	r2,r2,r4
    faf8:	15c0042e 	bgeu	r2,r23,fb0c <__umoddi3+0x33c>
    fafc:	1545883a 	add	r2,r2,r21
    fb00:	30ffffc4 	addi	r3,r6,-1
    fb04:	1540742e 	bgeu	r2,r21,fcd8 <__umoddi3+0x508>
    fb08:	180d883a 	mov	r6,r3
    fb0c:	15efc83a 	sub	r23,r2,r23
    fb10:	b00b883a 	mov	r5,r22
    fb14:	b809883a 	mov	r4,r23
    fb18:	d9800115 	stw	r6,4(sp)
    fb1c:	da000015 	stw	r8,0(sp)
    fb20:	000fe640 	call	fe64 <__umodsi3>
    fb24:	b00b883a 	mov	r5,r22
    fb28:	b809883a 	mov	r4,r23
    fb2c:	1039883a 	mov	fp,r2
    fb30:	000fe000 	call	fe00 <__udivsi3>
    fb34:	da000017 	ldw	r8,0(sp)
    fb38:	e038943a 	slli	fp,fp,16
    fb3c:	100b883a 	mov	r5,r2
    fb40:	4089383a 	mul	r4,r8,r2
    fb44:	8a3fffcc 	andi	r8,r17,65535
    fb48:	4710b03a 	or	r8,r8,fp
    fb4c:	d9800117 	ldw	r6,4(sp)
    fb50:	4100042e 	bgeu	r8,r4,fb64 <__umoddi3+0x394>
    fb54:	4551883a 	add	r8,r8,r21
    fb58:	10bfffc4 	addi	r2,r2,-1
    fb5c:	45405a2e 	bgeu	r8,r21,fcc8 <__umoddi3+0x4f8>
    fb60:	100b883a 	mov	r5,r2
    fb64:	300c943a 	slli	r6,r6,16
    fb68:	91ffffcc 	andi	r7,r18,65535
    fb6c:	9004d43a 	srli	r2,r18,16
    fb70:	314cb03a 	or	r6,r6,r5
    fb74:	317fffcc 	andi	r5,r6,65535
    fb78:	300cd43a 	srli	r6,r6,16
    fb7c:	29d3383a 	mul	r9,r5,r7
    fb80:	288b383a 	mul	r5,r5,r2
    fb84:	31cf383a 	mul	r7,r6,r7
    fb88:	4806d43a 	srli	r3,r9,16
    fb8c:	4111c83a 	sub	r8,r8,r4
    fb90:	29cb883a 	add	r5,r5,r7
    fb94:	194b883a 	add	r5,r3,r5
    fb98:	3085383a 	mul	r2,r6,r2
    fb9c:	29c0022e 	bgeu	r5,r7,fba8 <__umoddi3+0x3d8>
    fba0:	00c00074 	movhi	r3,1
    fba4:	10c5883a 	add	r2,r2,r3
    fba8:	2808d43a 	srli	r4,r5,16
    fbac:	280a943a 	slli	r5,r5,16
    fbb0:	4a7fffcc 	andi	r9,r9,65535
    fbb4:	2085883a 	add	r2,r4,r2
    fbb8:	2a4b883a 	add	r5,r5,r9
    fbbc:	40803636 	bltu	r8,r2,fc98 <__umoddi3+0x4c8>
    fbc0:	40804d26 	beq	r8,r2,fcf8 <__umoddi3+0x528>
    fbc4:	4089c83a 	sub	r4,r8,r2
    fbc8:	280f883a 	mov	r7,r5
    fbcc:	81cfc83a 	sub	r7,r16,r7
    fbd0:	81c7803a 	cmpltu	r3,r16,r7
    fbd4:	20c7c83a 	sub	r3,r4,r3
    fbd8:	1cc4983a 	sll	r2,r3,r19
    fbdc:	3d0ed83a 	srl	r7,r7,r20
    fbe0:	1d06d83a 	srl	r3,r3,r20
    fbe4:	11c4b03a 	or	r2,r2,r7
    fbe8:	003f9306 	br	fa38 <__umoddi3+0x268>
    fbec:	9ca6983a 	sll	r19,r19,r18
    fbf0:	88e8d83a 	srl	r20,r17,r3
    fbf4:	80c4d83a 	srl	r2,r16,r3
    fbf8:	982cd43a 	srli	r22,r19,16
    fbfc:	8ca2983a 	sll	r17,r17,r18
    fc00:	a009883a 	mov	r4,r20
    fc04:	b00b883a 	mov	r5,r22
    fc08:	1478b03a 	or	fp,r2,r17
    fc0c:	000fe640 	call	fe64 <__umodsi3>
    fc10:	a009883a 	mov	r4,r20
    fc14:	b00b883a 	mov	r5,r22
    fc18:	1023883a 	mov	r17,r2
    fc1c:	000fe000 	call	fe00 <__udivsi3>
    fc20:	9d7fffcc 	andi	r21,r19,65535
    fc24:	880a943a 	slli	r5,r17,16
    fc28:	e008d43a 	srli	r4,fp,16
    fc2c:	a885383a 	mul	r2,r21,r2
    fc30:	84a8983a 	sll	r20,r16,r18
    fc34:	2148b03a 	or	r4,r4,r5
    fc38:	2080042e 	bgeu	r4,r2,fc4c <__umoddi3+0x47c>
    fc3c:	24c9883a 	add	r4,r4,r19
    fc40:	24c00236 	bltu	r4,r19,fc4c <__umoddi3+0x47c>
    fc44:	2080012e 	bgeu	r4,r2,fc4c <__umoddi3+0x47c>
    fc48:	24c9883a 	add	r4,r4,r19
    fc4c:	20a3c83a 	sub	r17,r4,r2
    fc50:	b00b883a 	mov	r5,r22
    fc54:	8809883a 	mov	r4,r17
    fc58:	000fe640 	call	fe64 <__umodsi3>
    fc5c:	102f883a 	mov	r23,r2
    fc60:	8809883a 	mov	r4,r17
    fc64:	b00b883a 	mov	r5,r22
    fc68:	000fe000 	call	fe00 <__udivsi3>
    fc6c:	b82e943a 	slli	r23,r23,16
    fc70:	a885383a 	mul	r2,r21,r2
    fc74:	e13fffcc 	andi	r4,fp,65535
    fc78:	25c8b03a 	or	r4,r4,r23
    fc7c:	2080042e 	bgeu	r4,r2,fc90 <__umoddi3+0x4c0>
    fc80:	24c9883a 	add	r4,r4,r19
    fc84:	24c00236 	bltu	r4,r19,fc90 <__umoddi3+0x4c0>
    fc88:	2080012e 	bgeu	r4,r2,fc90 <__umoddi3+0x4c0>
    fc8c:	24c9883a 	add	r4,r4,r19
    fc90:	20a3c83a 	sub	r17,r4,r2
    fc94:	003f4806 	br	f9b8 <__umoddi3+0x1e8>
    fc98:	2c8fc83a 	sub	r7,r5,r18
    fc9c:	1545c83a 	sub	r2,r2,r21
    fca0:	29cb803a 	cmpltu	r5,r5,r7
    fca4:	1145c83a 	sub	r2,r2,r5
    fca8:	4089c83a 	sub	r4,r8,r2
    fcac:	003fc706 	br	fbcc <__umoddi3+0x3fc>
    fcb0:	01000604 	movi	r4,24
    fcb4:	003f1806 	br	f918 <__umoddi3+0x148>
    fcb8:	00800604 	movi	r2,24
    fcbc:	003f3206 	br	f988 <__umoddi3+0x1b8>
    fcc0:	01000604 	movi	r4,24
    fcc4:	003ed906 	br	f82c <__umoddi3+0x5c>
    fcc8:	413fa52e 	bgeu	r8,r4,fb60 <__umoddi3+0x390>
    fccc:	297fff84 	addi	r5,r5,-2
    fcd0:	4551883a 	add	r8,r8,r21
    fcd4:	003fa306 	br	fb64 <__umoddi3+0x394>
    fcd8:	15ff8b2e 	bgeu	r2,r23,fb08 <__umoddi3+0x338>
    fcdc:	31bfff84 	addi	r6,r6,-2
    fce0:	1545883a 	add	r2,r2,r21
    fce4:	003f8906 	br	fb0c <__umoddi3+0x33c>
    fce8:	24c9883a 	add	r4,r4,r19
    fcec:	003eee06 	br	f8a8 <__umoddi3+0xd8>
    fcf0:	8005883a 	mov	r2,r16
    fcf4:	003f1706 	br	f954 <__umoddi3+0x184>
    fcf8:	817fe736 	bltu	r16,r5,fc98 <__umoddi3+0x4c8>
    fcfc:	280f883a 	mov	r7,r5
    fd00:	0009883a 	mov	r4,zero
    fd04:	003fb106 	br	fbcc <__umoddi3+0x3fc>

0000fd08 <__divsi3>:
    fd08:	20001b16 	blt	r4,zero,fd78 <__divsi3+0x70>
    fd0c:	000f883a 	mov	r7,zero
    fd10:	28001616 	blt	r5,zero,fd6c <__divsi3+0x64>
    fd14:	200d883a 	mov	r6,r4
    fd18:	29001a2e 	bgeu	r5,r4,fd84 <__divsi3+0x7c>
    fd1c:	00800804 	movi	r2,32
    fd20:	00c00044 	movi	r3,1
    fd24:	00000106 	br	fd2c <__divsi3+0x24>
    fd28:	10000d26 	beq	r2,zero,fd60 <__divsi3+0x58>
    fd2c:	294b883a 	add	r5,r5,r5
    fd30:	10bfffc4 	addi	r2,r2,-1
    fd34:	18c7883a 	add	r3,r3,r3
    fd38:	293ffb36 	bltu	r5,r4,fd28 <__divsi3+0x20>
    fd3c:	0005883a 	mov	r2,zero
    fd40:	18000726 	beq	r3,zero,fd60 <__divsi3+0x58>
    fd44:	0005883a 	mov	r2,zero
    fd48:	31400236 	bltu	r6,r5,fd54 <__divsi3+0x4c>
    fd4c:	314dc83a 	sub	r6,r6,r5
    fd50:	10c4b03a 	or	r2,r2,r3
    fd54:	1806d07a 	srli	r3,r3,1
    fd58:	280ad07a 	srli	r5,r5,1
    fd5c:	183ffa1e 	bne	r3,zero,fd48 <__divsi3+0x40>
    fd60:	38000126 	beq	r7,zero,fd68 <__divsi3+0x60>
    fd64:	0085c83a 	sub	r2,zero,r2
    fd68:	f800283a 	ret
    fd6c:	014bc83a 	sub	r5,zero,r5
    fd70:	39c0005c 	xori	r7,r7,1
    fd74:	003fe706 	br	fd14 <__divsi3+0xc>
    fd78:	0109c83a 	sub	r4,zero,r4
    fd7c:	01c00044 	movi	r7,1
    fd80:	003fe306 	br	fd10 <__divsi3+0x8>
    fd84:	00c00044 	movi	r3,1
    fd88:	003fee06 	br	fd44 <__divsi3+0x3c>

0000fd8c <__modsi3>:
    fd8c:	20001716 	blt	r4,zero,fdec <__modsi3+0x60>
    fd90:	000f883a 	mov	r7,zero
    fd94:	2005883a 	mov	r2,r4
    fd98:	28001216 	blt	r5,zero,fde4 <__modsi3+0x58>
    fd9c:	2900162e 	bgeu	r5,r4,fdf8 <__modsi3+0x6c>
    fda0:	01800804 	movi	r6,32
    fda4:	00c00044 	movi	r3,1
    fda8:	00000106 	br	fdb0 <__modsi3+0x24>
    fdac:	30000a26 	beq	r6,zero,fdd8 <__modsi3+0x4c>
    fdb0:	294b883a 	add	r5,r5,r5
    fdb4:	31bfffc4 	addi	r6,r6,-1
    fdb8:	18c7883a 	add	r3,r3,r3
    fdbc:	293ffb36 	bltu	r5,r4,fdac <__modsi3+0x20>
    fdc0:	18000526 	beq	r3,zero,fdd8 <__modsi3+0x4c>
    fdc4:	1806d07a 	srli	r3,r3,1
    fdc8:	11400136 	bltu	r2,r5,fdd0 <__modsi3+0x44>
    fdcc:	1145c83a 	sub	r2,r2,r5
    fdd0:	280ad07a 	srli	r5,r5,1
    fdd4:	183ffb1e 	bne	r3,zero,fdc4 <__modsi3+0x38>
    fdd8:	38000126 	beq	r7,zero,fde0 <__modsi3+0x54>
    fddc:	0085c83a 	sub	r2,zero,r2
    fde0:	f800283a 	ret
    fde4:	014bc83a 	sub	r5,zero,r5
    fde8:	003fec06 	br	fd9c <__modsi3+0x10>
    fdec:	0109c83a 	sub	r4,zero,r4
    fdf0:	01c00044 	movi	r7,1
    fdf4:	003fe706 	br	fd94 <__modsi3+0x8>
    fdf8:	00c00044 	movi	r3,1
    fdfc:	003ff106 	br	fdc4 <__modsi3+0x38>

0000fe00 <__udivsi3>:
    fe00:	200d883a 	mov	r6,r4
    fe04:	2900152e 	bgeu	r5,r4,fe5c <__udivsi3+0x5c>
    fe08:	28001416 	blt	r5,zero,fe5c <__udivsi3+0x5c>
    fe0c:	00800804 	movi	r2,32
    fe10:	00c00044 	movi	r3,1
    fe14:	00000206 	br	fe20 <__udivsi3+0x20>
    fe18:	10000e26 	beq	r2,zero,fe54 <__udivsi3+0x54>
    fe1c:	28000516 	blt	r5,zero,fe34 <__udivsi3+0x34>
    fe20:	294b883a 	add	r5,r5,r5
    fe24:	10bfffc4 	addi	r2,r2,-1
    fe28:	18c7883a 	add	r3,r3,r3
    fe2c:	293ffa36 	bltu	r5,r4,fe18 <__udivsi3+0x18>
    fe30:	18000826 	beq	r3,zero,fe54 <__udivsi3+0x54>
    fe34:	0005883a 	mov	r2,zero
    fe38:	31400236 	bltu	r6,r5,fe44 <__udivsi3+0x44>
    fe3c:	314dc83a 	sub	r6,r6,r5
    fe40:	10c4b03a 	or	r2,r2,r3
    fe44:	1806d07a 	srli	r3,r3,1
    fe48:	280ad07a 	srli	r5,r5,1
    fe4c:	183ffa1e 	bne	r3,zero,fe38 <__udivsi3+0x38>
    fe50:	f800283a 	ret
    fe54:	0005883a 	mov	r2,zero
    fe58:	f800283a 	ret
    fe5c:	00c00044 	movi	r3,1
    fe60:	003ff406 	br	fe34 <__udivsi3+0x34>

0000fe64 <__umodsi3>:
    fe64:	2005883a 	mov	r2,r4
    fe68:	2900122e 	bgeu	r5,r4,feb4 <__umodsi3+0x50>
    fe6c:	28001116 	blt	r5,zero,feb4 <__umodsi3+0x50>
    fe70:	01800804 	movi	r6,32
    fe74:	00c00044 	movi	r3,1
    fe78:	00000206 	br	fe84 <__umodsi3+0x20>
    fe7c:	30000c26 	beq	r6,zero,feb0 <__umodsi3+0x4c>
    fe80:	28000516 	blt	r5,zero,fe98 <__umodsi3+0x34>
    fe84:	294b883a 	add	r5,r5,r5
    fe88:	31bfffc4 	addi	r6,r6,-1
    fe8c:	18c7883a 	add	r3,r3,r3
    fe90:	293ffa36 	bltu	r5,r4,fe7c <__umodsi3+0x18>
    fe94:	18000626 	beq	r3,zero,feb0 <__umodsi3+0x4c>
    fe98:	1806d07a 	srli	r3,r3,1
    fe9c:	11400136 	bltu	r2,r5,fea4 <__umodsi3+0x40>
    fea0:	1145c83a 	sub	r2,r2,r5
    fea4:	280ad07a 	srli	r5,r5,1
    fea8:	183ffb1e 	bne	r3,zero,fe98 <__umodsi3+0x34>
    feac:	f800283a 	ret
    feb0:	f800283a 	ret
    feb4:	00c00044 	movi	r3,1
    feb8:	003ff706 	br	fe98 <__umodsi3+0x34>

0000febc <__adddf3>:
    febc:	02c00434 	movhi	r11,16
    fec0:	5affffc4 	addi	r11,r11,-1
    fec4:	2806d7fa 	srli	r3,r5,31
    fec8:	2ad4703a 	and	r10,r5,r11
    fecc:	3ad2703a 	and	r9,r7,r11
    fed0:	3804d53a 	srli	r2,r7,20
    fed4:	3018d77a 	srli	r12,r6,29
    fed8:	280ad53a 	srli	r5,r5,20
    fedc:	501490fa 	slli	r10,r10,3
    fee0:	2010d77a 	srli	r8,r4,29
    fee4:	481290fa 	slli	r9,r9,3
    fee8:	380ed7fa 	srli	r7,r7,31
    feec:	defffb04 	addi	sp,sp,-20
    fef0:	dc800215 	stw	r18,8(sp)
    fef4:	dc400115 	stw	r17,4(sp)
    fef8:	dc000015 	stw	r16,0(sp)
    fefc:	dfc00415 	stw	ra,16(sp)
    ff00:	dcc00315 	stw	r19,12(sp)
    ff04:	1c803fcc 	andi	r18,r3,255
    ff08:	2c01ffcc 	andi	r16,r5,2047
    ff0c:	5210b03a 	or	r8,r10,r8
    ff10:	202290fa 	slli	r17,r4,3
    ff14:	1081ffcc 	andi	r2,r2,2047
    ff18:	4b12b03a 	or	r9,r9,r12
    ff1c:	300c90fa 	slli	r6,r6,3
    ff20:	91c07526 	beq	r18,r7,100f8 <__adddf3+0x23c>
    ff24:	8087c83a 	sub	r3,r16,r2
    ff28:	00c0ab0e 	bge	zero,r3,101d8 <__adddf3+0x31c>
    ff2c:	10002a1e 	bne	r2,zero,ffd8 <__adddf3+0x11c>
    ff30:	4984b03a 	or	r2,r9,r6
    ff34:	1000961e 	bne	r2,zero,10190 <__adddf3+0x2d4>
    ff38:	888001cc 	andi	r2,r17,7
    ff3c:	10000726 	beq	r2,zero,ff5c <__adddf3+0xa0>
    ff40:	888003cc 	andi	r2,r17,15
    ff44:	00c00104 	movi	r3,4
    ff48:	10c00426 	beq	r2,r3,ff5c <__adddf3+0xa0>
    ff4c:	88c7883a 	add	r3,r17,r3
    ff50:	1c63803a 	cmpltu	r17,r3,r17
    ff54:	4451883a 	add	r8,r8,r17
    ff58:	1823883a 	mov	r17,r3
    ff5c:	4080202c 	andhi	r2,r8,128
    ff60:	10005926 	beq	r2,zero,100c8 <__adddf3+0x20c>
    ff64:	84000044 	addi	r16,r16,1
    ff68:	0081ffc4 	movi	r2,2047
    ff6c:	8080ba26 	beq	r16,r2,10258 <__adddf3+0x39c>
    ff70:	00bfe034 	movhi	r2,65408
    ff74:	10bfffc4 	addi	r2,r2,-1
    ff78:	4090703a 	and	r8,r8,r2
    ff7c:	4004977a 	slli	r2,r8,29
    ff80:	4010927a 	slli	r8,r8,9
    ff84:	8822d0fa 	srli	r17,r17,3
    ff88:	8401ffcc 	andi	r16,r16,2047
    ff8c:	4010d33a 	srli	r8,r8,12
    ff90:	9007883a 	mov	r3,r18
    ff94:	1444b03a 	or	r2,r2,r17
    ff98:	8401ffcc 	andi	r16,r16,2047
    ff9c:	8020953a 	slli	r16,r16,20
    ffa0:	18c03fcc 	andi	r3,r3,255
    ffa4:	01000434 	movhi	r4,16
    ffa8:	213fffc4 	addi	r4,r4,-1
    ffac:	180697fa 	slli	r3,r3,31
    ffb0:	4110703a 	and	r8,r8,r4
    ffb4:	4410b03a 	or	r8,r8,r16
    ffb8:	40c6b03a 	or	r3,r8,r3
    ffbc:	dfc00417 	ldw	ra,16(sp)
    ffc0:	dcc00317 	ldw	r19,12(sp)
    ffc4:	dc800217 	ldw	r18,8(sp)
    ffc8:	dc400117 	ldw	r17,4(sp)
    ffcc:	dc000017 	ldw	r16,0(sp)
    ffd0:	dec00504 	addi	sp,sp,20
    ffd4:	f800283a 	ret
    ffd8:	0081ffc4 	movi	r2,2047
    ffdc:	80bfd626 	beq	r16,r2,ff38 <__adddf3+0x7c>
    ffe0:	4a402034 	orhi	r9,r9,128
    ffe4:	00800e04 	movi	r2,56
    ffe8:	10c09f16 	blt	r2,r3,10268 <__adddf3+0x3ac>
    ffec:	008007c4 	movi	r2,31
    fff0:	10c0c216 	blt	r2,r3,102fc <__adddf3+0x440>
    fff4:	00800804 	movi	r2,32
    fff8:	10c5c83a 	sub	r2,r2,r3
    fffc:	488a983a 	sll	r5,r9,r2
   10000:	30c8d83a 	srl	r4,r6,r3
   10004:	3084983a 	sll	r2,r6,r2
   10008:	48c6d83a 	srl	r3,r9,r3
   1000c:	290cb03a 	or	r6,r5,r4
   10010:	1004c03a 	cmpne	r2,r2,zero
   10014:	308cb03a 	or	r6,r6,r2
   10018:	898dc83a 	sub	r6,r17,r6
   1001c:	89a3803a 	cmpltu	r17,r17,r6
   10020:	40d1c83a 	sub	r8,r8,r3
   10024:	4451c83a 	sub	r8,r8,r17
   10028:	3023883a 	mov	r17,r6
   1002c:	4080202c 	andhi	r2,r8,128
   10030:	10002326 	beq	r2,zero,100c0 <__adddf3+0x204>
   10034:	04c02034 	movhi	r19,128
   10038:	9cffffc4 	addi	r19,r19,-1
   1003c:	44e6703a 	and	r19,r8,r19
   10040:	98007626 	beq	r19,zero,1021c <__adddf3+0x360>
   10044:	9809883a 	mov	r4,r19
   10048:	00124c00 	call	124c0 <__clzsi2>
   1004c:	10fffe04 	addi	r3,r2,-8
   10050:	010007c4 	movi	r4,31
   10054:	20c07716 	blt	r4,r3,10234 <__adddf3+0x378>
   10058:	00800804 	movi	r2,32
   1005c:	10c5c83a 	sub	r2,r2,r3
   10060:	8884d83a 	srl	r2,r17,r2
   10064:	98d0983a 	sll	r8,r19,r3
   10068:	88e2983a 	sll	r17,r17,r3
   1006c:	1204b03a 	or	r2,r2,r8
   10070:	1c007416 	blt	r3,r16,10244 <__adddf3+0x388>
   10074:	1c21c83a 	sub	r16,r3,r16
   10078:	82000044 	addi	r8,r16,1
   1007c:	00c007c4 	movi	r3,31
   10080:	1a009116 	blt	r3,r8,102c8 <__adddf3+0x40c>
   10084:	00c00804 	movi	r3,32
   10088:	1a07c83a 	sub	r3,r3,r8
   1008c:	8a08d83a 	srl	r4,r17,r8
   10090:	88e2983a 	sll	r17,r17,r3
   10094:	10c6983a 	sll	r3,r2,r3
   10098:	1210d83a 	srl	r8,r2,r8
   1009c:	8804c03a 	cmpne	r2,r17,zero
   100a0:	1906b03a 	or	r3,r3,r4
   100a4:	18a2b03a 	or	r17,r3,r2
   100a8:	0021883a 	mov	r16,zero
   100ac:	003fa206 	br	ff38 <__adddf3+0x7c>
   100b0:	1890b03a 	or	r8,r3,r2
   100b4:	40017d26 	beq	r8,zero,106ac <__adddf3+0x7f0>
   100b8:	1011883a 	mov	r8,r2
   100bc:	1823883a 	mov	r17,r3
   100c0:	888001cc 	andi	r2,r17,7
   100c4:	103f9e1e 	bne	r2,zero,ff40 <__adddf3+0x84>
   100c8:	4004977a 	slli	r2,r8,29
   100cc:	8822d0fa 	srli	r17,r17,3
   100d0:	4010d0fa 	srli	r8,r8,3
   100d4:	9007883a 	mov	r3,r18
   100d8:	1444b03a 	or	r2,r2,r17
   100dc:	0101ffc4 	movi	r4,2047
   100e0:	81002426 	beq	r16,r4,10174 <__adddf3+0x2b8>
   100e4:	8120703a 	and	r16,r16,r4
   100e8:	01000434 	movhi	r4,16
   100ec:	213fffc4 	addi	r4,r4,-1
   100f0:	4110703a 	and	r8,r8,r4
   100f4:	003fa806 	br	ff98 <__adddf3+0xdc>
   100f8:	8089c83a 	sub	r4,r16,r2
   100fc:	01005e0e 	bge	zero,r4,10278 <__adddf3+0x3bc>
   10100:	10002b26 	beq	r2,zero,101b0 <__adddf3+0x2f4>
   10104:	0081ffc4 	movi	r2,2047
   10108:	80bf8b26 	beq	r16,r2,ff38 <__adddf3+0x7c>
   1010c:	4a402034 	orhi	r9,r9,128
   10110:	00800e04 	movi	r2,56
   10114:	1100a40e 	bge	r2,r4,103a8 <__adddf3+0x4ec>
   10118:	498cb03a 	or	r6,r9,r6
   1011c:	300ac03a 	cmpne	r5,r6,zero
   10120:	0013883a 	mov	r9,zero
   10124:	2c4b883a 	add	r5,r5,r17
   10128:	2c63803a 	cmpltu	r17,r5,r17
   1012c:	4a11883a 	add	r8,r9,r8
   10130:	8a11883a 	add	r8,r17,r8
   10134:	2823883a 	mov	r17,r5
   10138:	4080202c 	andhi	r2,r8,128
   1013c:	103fe026 	beq	r2,zero,100c0 <__adddf3+0x204>
   10140:	84000044 	addi	r16,r16,1
   10144:	0081ffc4 	movi	r2,2047
   10148:	8080d226 	beq	r16,r2,10494 <__adddf3+0x5d8>
   1014c:	00bfe034 	movhi	r2,65408
   10150:	10bfffc4 	addi	r2,r2,-1
   10154:	4090703a 	and	r8,r8,r2
   10158:	880ad07a 	srli	r5,r17,1
   1015c:	400897fa 	slli	r4,r8,31
   10160:	88c0004c 	andi	r3,r17,1
   10164:	28e2b03a 	or	r17,r5,r3
   10168:	4010d07a 	srli	r8,r8,1
   1016c:	2462b03a 	or	r17,r4,r17
   10170:	003f7106 	br	ff38 <__adddf3+0x7c>
   10174:	4088b03a 	or	r4,r8,r2
   10178:	20014526 	beq	r4,zero,10690 <__adddf3+0x7d4>
   1017c:	01000434 	movhi	r4,16
   10180:	42000234 	orhi	r8,r8,8
   10184:	213fffc4 	addi	r4,r4,-1
   10188:	4110703a 	and	r8,r8,r4
   1018c:	003f8206 	br	ff98 <__adddf3+0xdc>
   10190:	18ffffc4 	addi	r3,r3,-1
   10194:	1800491e 	bne	r3,zero,102bc <__adddf3+0x400>
   10198:	898bc83a 	sub	r5,r17,r6
   1019c:	8963803a 	cmpltu	r17,r17,r5
   101a0:	4251c83a 	sub	r8,r8,r9
   101a4:	4451c83a 	sub	r8,r8,r17
   101a8:	2823883a 	mov	r17,r5
   101ac:	003f9f06 	br	1002c <__adddf3+0x170>
   101b0:	4984b03a 	or	r2,r9,r6
   101b4:	103f6026 	beq	r2,zero,ff38 <__adddf3+0x7c>
   101b8:	213fffc4 	addi	r4,r4,-1
   101bc:	2000931e 	bne	r4,zero,1040c <__adddf3+0x550>
   101c0:	898d883a 	add	r6,r17,r6
   101c4:	3463803a 	cmpltu	r17,r6,r17
   101c8:	4251883a 	add	r8,r8,r9
   101cc:	8a11883a 	add	r8,r17,r8
   101d0:	3023883a 	mov	r17,r6
   101d4:	003fd806 	br	10138 <__adddf3+0x27c>
   101d8:	1800541e 	bne	r3,zero,1032c <__adddf3+0x470>
   101dc:	80800044 	addi	r2,r16,1
   101e0:	1081ffcc 	andi	r2,r2,2047
   101e4:	00c00044 	movi	r3,1
   101e8:	1880a00e 	bge	r3,r2,1046c <__adddf3+0x5b0>
   101ec:	8989c83a 	sub	r4,r17,r6
   101f0:	8905803a 	cmpltu	r2,r17,r4
   101f4:	4267c83a 	sub	r19,r8,r9
   101f8:	98a7c83a 	sub	r19,r19,r2
   101fc:	9880202c 	andhi	r2,r19,128
   10200:	10006326 	beq	r2,zero,10390 <__adddf3+0x4d4>
   10204:	3463c83a 	sub	r17,r6,r17
   10208:	4a07c83a 	sub	r3,r9,r8
   1020c:	344d803a 	cmpltu	r6,r6,r17
   10210:	19a7c83a 	sub	r19,r3,r6
   10214:	3825883a 	mov	r18,r7
   10218:	983f8a1e 	bne	r19,zero,10044 <__adddf3+0x188>
   1021c:	8809883a 	mov	r4,r17
   10220:	00124c00 	call	124c0 <__clzsi2>
   10224:	10800804 	addi	r2,r2,32
   10228:	10fffe04 	addi	r3,r2,-8
   1022c:	010007c4 	movi	r4,31
   10230:	20ff890e 	bge	r4,r3,10058 <__adddf3+0x19c>
   10234:	10bff604 	addi	r2,r2,-40
   10238:	8884983a 	sll	r2,r17,r2
   1023c:	0023883a 	mov	r17,zero
   10240:	1c3f8c0e 	bge	r3,r16,10074 <__adddf3+0x1b8>
   10244:	023fe034 	movhi	r8,65408
   10248:	423fffc4 	addi	r8,r8,-1
   1024c:	80e1c83a 	sub	r16,r16,r3
   10250:	1210703a 	and	r8,r2,r8
   10254:	003f3806 	br	ff38 <__adddf3+0x7c>
   10258:	9007883a 	mov	r3,r18
   1025c:	0011883a 	mov	r8,zero
   10260:	0005883a 	mov	r2,zero
   10264:	003f4c06 	br	ff98 <__adddf3+0xdc>
   10268:	498cb03a 	or	r6,r9,r6
   1026c:	300cc03a 	cmpne	r6,r6,zero
   10270:	0007883a 	mov	r3,zero
   10274:	003f6806 	br	10018 <__adddf3+0x15c>
   10278:	20009c1e 	bne	r4,zero,104ec <__adddf3+0x630>
   1027c:	80800044 	addi	r2,r16,1
   10280:	1141ffcc 	andi	r5,r2,2047
   10284:	01000044 	movi	r4,1
   10288:	2140670e 	bge	r4,r5,10428 <__adddf3+0x56c>
   1028c:	0101ffc4 	movi	r4,2047
   10290:	11007f26 	beq	r2,r4,10490 <__adddf3+0x5d4>
   10294:	898d883a 	add	r6,r17,r6
   10298:	4247883a 	add	r3,r8,r9
   1029c:	3451803a 	cmpltu	r8,r6,r17
   102a0:	40d1883a 	add	r8,r8,r3
   102a4:	402297fa 	slli	r17,r8,31
   102a8:	300cd07a 	srli	r6,r6,1
   102ac:	4010d07a 	srli	r8,r8,1
   102b0:	1021883a 	mov	r16,r2
   102b4:	89a2b03a 	or	r17,r17,r6
   102b8:	003f1f06 	br	ff38 <__adddf3+0x7c>
   102bc:	0081ffc4 	movi	r2,2047
   102c0:	80bf481e 	bne	r16,r2,ffe4 <__adddf3+0x128>
   102c4:	003f1c06 	br	ff38 <__adddf3+0x7c>
   102c8:	843ff844 	addi	r16,r16,-31
   102cc:	01000804 	movi	r4,32
   102d0:	1406d83a 	srl	r3,r2,r16
   102d4:	41005026 	beq	r8,r4,10418 <__adddf3+0x55c>
   102d8:	01001004 	movi	r4,64
   102dc:	2211c83a 	sub	r8,r4,r8
   102e0:	1204983a 	sll	r2,r2,r8
   102e4:	88a2b03a 	or	r17,r17,r2
   102e8:	8822c03a 	cmpne	r17,r17,zero
   102ec:	1c62b03a 	or	r17,r3,r17
   102f0:	0011883a 	mov	r8,zero
   102f4:	0021883a 	mov	r16,zero
   102f8:	003f7106 	br	100c0 <__adddf3+0x204>
   102fc:	193ff804 	addi	r4,r3,-32
   10300:	00800804 	movi	r2,32
   10304:	4908d83a 	srl	r4,r9,r4
   10308:	18804526 	beq	r3,r2,10420 <__adddf3+0x564>
   1030c:	00801004 	movi	r2,64
   10310:	10c5c83a 	sub	r2,r2,r3
   10314:	4886983a 	sll	r3,r9,r2
   10318:	198cb03a 	or	r6,r3,r6
   1031c:	300cc03a 	cmpne	r6,r6,zero
   10320:	218cb03a 	or	r6,r4,r6
   10324:	0007883a 	mov	r3,zero
   10328:	003f3b06 	br	10018 <__adddf3+0x15c>
   1032c:	80002a26 	beq	r16,zero,103d8 <__adddf3+0x51c>
   10330:	0101ffc4 	movi	r4,2047
   10334:	11006826 	beq	r2,r4,104d8 <__adddf3+0x61c>
   10338:	00c7c83a 	sub	r3,zero,r3
   1033c:	42002034 	orhi	r8,r8,128
   10340:	01000e04 	movi	r4,56
   10344:	20c07c16 	blt	r4,r3,10538 <__adddf3+0x67c>
   10348:	010007c4 	movi	r4,31
   1034c:	20c0da16 	blt	r4,r3,106b8 <__adddf3+0x7fc>
   10350:	01000804 	movi	r4,32
   10354:	20c9c83a 	sub	r4,r4,r3
   10358:	4114983a 	sll	r10,r8,r4
   1035c:	88cad83a 	srl	r5,r17,r3
   10360:	8908983a 	sll	r4,r17,r4
   10364:	40c6d83a 	srl	r3,r8,r3
   10368:	5162b03a 	or	r17,r10,r5
   1036c:	2008c03a 	cmpne	r4,r4,zero
   10370:	8922b03a 	or	r17,r17,r4
   10374:	3463c83a 	sub	r17,r6,r17
   10378:	48c7c83a 	sub	r3,r9,r3
   1037c:	344d803a 	cmpltu	r6,r6,r17
   10380:	1991c83a 	sub	r8,r3,r6
   10384:	1021883a 	mov	r16,r2
   10388:	3825883a 	mov	r18,r7
   1038c:	003f2706 	br	1002c <__adddf3+0x170>
   10390:	24d0b03a 	or	r8,r4,r19
   10394:	40001b1e 	bne	r8,zero,10404 <__adddf3+0x548>
   10398:	0005883a 	mov	r2,zero
   1039c:	0007883a 	mov	r3,zero
   103a0:	0021883a 	mov	r16,zero
   103a4:	003f4d06 	br	100dc <__adddf3+0x220>
   103a8:	008007c4 	movi	r2,31
   103ac:	11003c16 	blt	r2,r4,104a0 <__adddf3+0x5e4>
   103b0:	00800804 	movi	r2,32
   103b4:	1105c83a 	sub	r2,r2,r4
   103b8:	488e983a 	sll	r7,r9,r2
   103bc:	310ad83a 	srl	r5,r6,r4
   103c0:	3084983a 	sll	r2,r6,r2
   103c4:	4912d83a 	srl	r9,r9,r4
   103c8:	394ab03a 	or	r5,r7,r5
   103cc:	1004c03a 	cmpne	r2,r2,zero
   103d0:	288ab03a 	or	r5,r5,r2
   103d4:	003f5306 	br	10124 <__adddf3+0x268>
   103d8:	4448b03a 	or	r4,r8,r17
   103dc:	20003e26 	beq	r4,zero,104d8 <__adddf3+0x61c>
   103e0:	00c6303a 	nor	r3,zero,r3
   103e4:	18003a1e 	bne	r3,zero,104d0 <__adddf3+0x614>
   103e8:	3463c83a 	sub	r17,r6,r17
   103ec:	4a07c83a 	sub	r3,r9,r8
   103f0:	344d803a 	cmpltu	r6,r6,r17
   103f4:	1991c83a 	sub	r8,r3,r6
   103f8:	1021883a 	mov	r16,r2
   103fc:	3825883a 	mov	r18,r7
   10400:	003f0a06 	br	1002c <__adddf3+0x170>
   10404:	2023883a 	mov	r17,r4
   10408:	003f0d06 	br	10040 <__adddf3+0x184>
   1040c:	0081ffc4 	movi	r2,2047
   10410:	80bf3f1e 	bne	r16,r2,10110 <__adddf3+0x254>
   10414:	003ec806 	br	ff38 <__adddf3+0x7c>
   10418:	0005883a 	mov	r2,zero
   1041c:	003fb106 	br	102e4 <__adddf3+0x428>
   10420:	0007883a 	mov	r3,zero
   10424:	003fbc06 	br	10318 <__adddf3+0x45c>
   10428:	4444b03a 	or	r2,r8,r17
   1042c:	8000871e 	bne	r16,zero,1064c <__adddf3+0x790>
   10430:	1000ba26 	beq	r2,zero,1071c <__adddf3+0x860>
   10434:	4984b03a 	or	r2,r9,r6
   10438:	103ebf26 	beq	r2,zero,ff38 <__adddf3+0x7c>
   1043c:	8985883a 	add	r2,r17,r6
   10440:	4247883a 	add	r3,r8,r9
   10444:	1451803a 	cmpltu	r8,r2,r17
   10448:	40d1883a 	add	r8,r8,r3
   1044c:	40c0202c 	andhi	r3,r8,128
   10450:	1023883a 	mov	r17,r2
   10454:	183f1a26 	beq	r3,zero,100c0 <__adddf3+0x204>
   10458:	00bfe034 	movhi	r2,65408
   1045c:	10bfffc4 	addi	r2,r2,-1
   10460:	2021883a 	mov	r16,r4
   10464:	4090703a 	and	r8,r8,r2
   10468:	003eb306 	br	ff38 <__adddf3+0x7c>
   1046c:	4444b03a 	or	r2,r8,r17
   10470:	8000291e 	bne	r16,zero,10518 <__adddf3+0x65c>
   10474:	10004b1e 	bne	r2,zero,105a4 <__adddf3+0x6e8>
   10478:	4990b03a 	or	r8,r9,r6
   1047c:	40008b26 	beq	r8,zero,106ac <__adddf3+0x7f0>
   10480:	4811883a 	mov	r8,r9
   10484:	3023883a 	mov	r17,r6
   10488:	3825883a 	mov	r18,r7
   1048c:	003eaa06 	br	ff38 <__adddf3+0x7c>
   10490:	1021883a 	mov	r16,r2
   10494:	0011883a 	mov	r8,zero
   10498:	0005883a 	mov	r2,zero
   1049c:	003f0f06 	br	100dc <__adddf3+0x220>
   104a0:	217ff804 	addi	r5,r4,-32
   104a4:	00800804 	movi	r2,32
   104a8:	494ad83a 	srl	r5,r9,r5
   104ac:	20807d26 	beq	r4,r2,106a4 <__adddf3+0x7e8>
   104b0:	00801004 	movi	r2,64
   104b4:	1109c83a 	sub	r4,r2,r4
   104b8:	4912983a 	sll	r9,r9,r4
   104bc:	498cb03a 	or	r6,r9,r6
   104c0:	300cc03a 	cmpne	r6,r6,zero
   104c4:	298ab03a 	or	r5,r5,r6
   104c8:	0013883a 	mov	r9,zero
   104cc:	003f1506 	br	10124 <__adddf3+0x268>
   104d0:	0101ffc4 	movi	r4,2047
   104d4:	113f9a1e 	bne	r2,r4,10340 <__adddf3+0x484>
   104d8:	4811883a 	mov	r8,r9
   104dc:	3023883a 	mov	r17,r6
   104e0:	1021883a 	mov	r16,r2
   104e4:	3825883a 	mov	r18,r7
   104e8:	003e9306 	br	ff38 <__adddf3+0x7c>
   104ec:	8000161e 	bne	r16,zero,10548 <__adddf3+0x68c>
   104f0:	444ab03a 	or	r5,r8,r17
   104f4:	28005126 	beq	r5,zero,1063c <__adddf3+0x780>
   104f8:	0108303a 	nor	r4,zero,r4
   104fc:	20004d1e 	bne	r4,zero,10634 <__adddf3+0x778>
   10500:	89a3883a 	add	r17,r17,r6
   10504:	4253883a 	add	r9,r8,r9
   10508:	898d803a 	cmpltu	r6,r17,r6
   1050c:	3251883a 	add	r8,r6,r9
   10510:	1021883a 	mov	r16,r2
   10514:	003f0806 	br	10138 <__adddf3+0x27c>
   10518:	1000301e 	bne	r2,zero,105dc <__adddf3+0x720>
   1051c:	4984b03a 	or	r2,r9,r6
   10520:	10007126 	beq	r2,zero,106e8 <__adddf3+0x82c>
   10524:	4811883a 	mov	r8,r9
   10528:	3023883a 	mov	r17,r6
   1052c:	3825883a 	mov	r18,r7
   10530:	0401ffc4 	movi	r16,2047
   10534:	003e8006 	br	ff38 <__adddf3+0x7c>
   10538:	4462b03a 	or	r17,r8,r17
   1053c:	8822c03a 	cmpne	r17,r17,zero
   10540:	0007883a 	mov	r3,zero
   10544:	003f8b06 	br	10374 <__adddf3+0x4b8>
   10548:	0141ffc4 	movi	r5,2047
   1054c:	11403b26 	beq	r2,r5,1063c <__adddf3+0x780>
   10550:	0109c83a 	sub	r4,zero,r4
   10554:	42002034 	orhi	r8,r8,128
   10558:	01400e04 	movi	r5,56
   1055c:	29006716 	blt	r5,r4,106fc <__adddf3+0x840>
   10560:	014007c4 	movi	r5,31
   10564:	29007016 	blt	r5,r4,10728 <__adddf3+0x86c>
   10568:	01400804 	movi	r5,32
   1056c:	290bc83a 	sub	r5,r5,r4
   10570:	4154983a 	sll	r10,r8,r5
   10574:	890ed83a 	srl	r7,r17,r4
   10578:	894a983a 	sll	r5,r17,r5
   1057c:	4108d83a 	srl	r4,r8,r4
   10580:	51e2b03a 	or	r17,r10,r7
   10584:	280ac03a 	cmpne	r5,r5,zero
   10588:	8962b03a 	or	r17,r17,r5
   1058c:	89a3883a 	add	r17,r17,r6
   10590:	2253883a 	add	r9,r4,r9
   10594:	898d803a 	cmpltu	r6,r17,r6
   10598:	3251883a 	add	r8,r6,r9
   1059c:	1021883a 	mov	r16,r2
   105a0:	003ee506 	br	10138 <__adddf3+0x27c>
   105a4:	4984b03a 	or	r2,r9,r6
   105a8:	103e6326 	beq	r2,zero,ff38 <__adddf3+0x7c>
   105ac:	8987c83a 	sub	r3,r17,r6
   105b0:	88c9803a 	cmpltu	r4,r17,r3
   105b4:	4245c83a 	sub	r2,r8,r9
   105b8:	1105c83a 	sub	r2,r2,r4
   105bc:	1100202c 	andhi	r4,r2,128
   105c0:	203ebb26 	beq	r4,zero,100b0 <__adddf3+0x1f4>
   105c4:	3463c83a 	sub	r17,r6,r17
   105c8:	4a07c83a 	sub	r3,r9,r8
   105cc:	344d803a 	cmpltu	r6,r6,r17
   105d0:	1991c83a 	sub	r8,r3,r6
   105d4:	3825883a 	mov	r18,r7
   105d8:	003e5706 	br	ff38 <__adddf3+0x7c>
   105dc:	4984b03a 	or	r2,r9,r6
   105e0:	10002e26 	beq	r2,zero,1069c <__adddf3+0x7e0>
   105e4:	4004d0fa 	srli	r2,r8,3
   105e8:	8822d0fa 	srli	r17,r17,3
   105ec:	4010977a 	slli	r8,r8,29
   105f0:	10c0022c 	andhi	r3,r2,8
   105f4:	4462b03a 	or	r17,r8,r17
   105f8:	18000826 	beq	r3,zero,1061c <__adddf3+0x760>
   105fc:	4808d0fa 	srli	r4,r9,3
   10600:	20c0022c 	andhi	r3,r4,8
   10604:	1800051e 	bne	r3,zero,1061c <__adddf3+0x760>
   10608:	300cd0fa 	srli	r6,r6,3
   1060c:	4806977a 	slli	r3,r9,29
   10610:	2005883a 	mov	r2,r4
   10614:	3825883a 	mov	r18,r7
   10618:	19a2b03a 	or	r17,r3,r6
   1061c:	8810d77a 	srli	r8,r17,29
   10620:	100490fa 	slli	r2,r2,3
   10624:	882290fa 	slli	r17,r17,3
   10628:	0401ffc4 	movi	r16,2047
   1062c:	4090b03a 	or	r8,r8,r2
   10630:	003e4106 	br	ff38 <__adddf3+0x7c>
   10634:	0141ffc4 	movi	r5,2047
   10638:	117fc71e 	bne	r2,r5,10558 <__adddf3+0x69c>
   1063c:	4811883a 	mov	r8,r9
   10640:	3023883a 	mov	r17,r6
   10644:	1021883a 	mov	r16,r2
   10648:	003e3b06 	br	ff38 <__adddf3+0x7c>
   1064c:	10002f26 	beq	r2,zero,1070c <__adddf3+0x850>
   10650:	4984b03a 	or	r2,r9,r6
   10654:	10001126 	beq	r2,zero,1069c <__adddf3+0x7e0>
   10658:	4004d0fa 	srli	r2,r8,3
   1065c:	8822d0fa 	srli	r17,r17,3
   10660:	4010977a 	slli	r8,r8,29
   10664:	10c0022c 	andhi	r3,r2,8
   10668:	4462b03a 	or	r17,r8,r17
   1066c:	183feb26 	beq	r3,zero,1061c <__adddf3+0x760>
   10670:	4808d0fa 	srli	r4,r9,3
   10674:	20c0022c 	andhi	r3,r4,8
   10678:	183fe81e 	bne	r3,zero,1061c <__adddf3+0x760>
   1067c:	300cd0fa 	srli	r6,r6,3
   10680:	4806977a 	slli	r3,r9,29
   10684:	2005883a 	mov	r2,r4
   10688:	19a2b03a 	or	r17,r3,r6
   1068c:	003fe306 	br	1061c <__adddf3+0x760>
   10690:	0011883a 	mov	r8,zero
   10694:	0005883a 	mov	r2,zero
   10698:	003e3f06 	br	ff98 <__adddf3+0xdc>
   1069c:	0401ffc4 	movi	r16,2047
   106a0:	003e2506 	br	ff38 <__adddf3+0x7c>
   106a4:	0013883a 	mov	r9,zero
   106a8:	003f8406 	br	104bc <__adddf3+0x600>
   106ac:	0005883a 	mov	r2,zero
   106b0:	0007883a 	mov	r3,zero
   106b4:	003e8906 	br	100dc <__adddf3+0x220>
   106b8:	197ff804 	addi	r5,r3,-32
   106bc:	01000804 	movi	r4,32
   106c0:	414ad83a 	srl	r5,r8,r5
   106c4:	19002426 	beq	r3,r4,10758 <__adddf3+0x89c>
   106c8:	01001004 	movi	r4,64
   106cc:	20c7c83a 	sub	r3,r4,r3
   106d0:	40c6983a 	sll	r3,r8,r3
   106d4:	1c46b03a 	or	r3,r3,r17
   106d8:	1806c03a 	cmpne	r3,r3,zero
   106dc:	28e2b03a 	or	r17,r5,r3
   106e0:	0007883a 	mov	r3,zero
   106e4:	003f2306 	br	10374 <__adddf3+0x4b8>
   106e8:	0007883a 	mov	r3,zero
   106ec:	5811883a 	mov	r8,r11
   106f0:	00bfffc4 	movi	r2,-1
   106f4:	0401ffc4 	movi	r16,2047
   106f8:	003e7806 	br	100dc <__adddf3+0x220>
   106fc:	4462b03a 	or	r17,r8,r17
   10700:	8822c03a 	cmpne	r17,r17,zero
   10704:	0009883a 	mov	r4,zero
   10708:	003fa006 	br	1058c <__adddf3+0x6d0>
   1070c:	4811883a 	mov	r8,r9
   10710:	3023883a 	mov	r17,r6
   10714:	0401ffc4 	movi	r16,2047
   10718:	003e0706 	br	ff38 <__adddf3+0x7c>
   1071c:	4811883a 	mov	r8,r9
   10720:	3023883a 	mov	r17,r6
   10724:	003e0406 	br	ff38 <__adddf3+0x7c>
   10728:	21fff804 	addi	r7,r4,-32
   1072c:	01400804 	movi	r5,32
   10730:	41ced83a 	srl	r7,r8,r7
   10734:	21400a26 	beq	r4,r5,10760 <__adddf3+0x8a4>
   10738:	01401004 	movi	r5,64
   1073c:	2909c83a 	sub	r4,r5,r4
   10740:	4108983a 	sll	r4,r8,r4
   10744:	2448b03a 	or	r4,r4,r17
   10748:	2008c03a 	cmpne	r4,r4,zero
   1074c:	3922b03a 	or	r17,r7,r4
   10750:	0009883a 	mov	r4,zero
   10754:	003f8d06 	br	1058c <__adddf3+0x6d0>
   10758:	0007883a 	mov	r3,zero
   1075c:	003fdd06 	br	106d4 <__adddf3+0x818>
   10760:	0009883a 	mov	r4,zero
   10764:	003ff706 	br	10744 <__adddf3+0x888>

00010768 <__divdf3>:
   10768:	defff204 	addi	sp,sp,-56
   1076c:	dd400915 	stw	r21,36(sp)
   10770:	282ad53a 	srli	r21,r5,20
   10774:	dd000815 	stw	r20,32(sp)
   10778:	2828d7fa 	srli	r20,r5,31
   1077c:	dc000415 	stw	r16,16(sp)
   10780:	04000434 	movhi	r16,16
   10784:	df000c15 	stw	fp,48(sp)
   10788:	843fffc4 	addi	r16,r16,-1
   1078c:	dfc00d15 	stw	ra,52(sp)
   10790:	ddc00b15 	stw	r23,44(sp)
   10794:	dd800a15 	stw	r22,40(sp)
   10798:	dcc00715 	stw	r19,28(sp)
   1079c:	dc800615 	stw	r18,24(sp)
   107a0:	dc400515 	stw	r17,20(sp)
   107a4:	ad41ffcc 	andi	r21,r21,2047
   107a8:	2c20703a 	and	r16,r5,r16
   107ac:	a7003fcc 	andi	fp,r20,255
   107b0:	a8006126 	beq	r21,zero,10938 <__divdf3+0x1d0>
   107b4:	0081ffc4 	movi	r2,2047
   107b8:	2025883a 	mov	r18,r4
   107bc:	a8803726 	beq	r21,r2,1089c <__divdf3+0x134>
   107c0:	80800434 	orhi	r2,r16,16
   107c4:	100490fa 	slli	r2,r2,3
   107c8:	2020d77a 	srli	r16,r4,29
   107cc:	202490fa 	slli	r18,r4,3
   107d0:	ad7f0044 	addi	r21,r21,-1023
   107d4:	80a0b03a 	or	r16,r16,r2
   107d8:	0027883a 	mov	r19,zero
   107dc:	0013883a 	mov	r9,zero
   107e0:	3804d53a 	srli	r2,r7,20
   107e4:	382cd7fa 	srli	r22,r7,31
   107e8:	04400434 	movhi	r17,16
   107ec:	8c7fffc4 	addi	r17,r17,-1
   107f0:	1081ffcc 	andi	r2,r2,2047
   107f4:	3011883a 	mov	r8,r6
   107f8:	3c62703a 	and	r17,r7,r17
   107fc:	b5c03fcc 	andi	r23,r22,255
   10800:	10006c26 	beq	r2,zero,109b4 <__divdf3+0x24c>
   10804:	00c1ffc4 	movi	r3,2047
   10808:	10c06426 	beq	r2,r3,1099c <__divdf3+0x234>
   1080c:	88c00434 	orhi	r3,r17,16
   10810:	180690fa 	slli	r3,r3,3
   10814:	3022d77a 	srli	r17,r6,29
   10818:	301090fa 	slli	r8,r6,3
   1081c:	10bf0044 	addi	r2,r2,-1023
   10820:	88e2b03a 	or	r17,r17,r3
   10824:	000f883a 	mov	r7,zero
   10828:	a58cf03a 	xor	r6,r20,r22
   1082c:	3cc8b03a 	or	r4,r7,r19
   10830:	a8abc83a 	sub	r21,r21,r2
   10834:	008003c4 	movi	r2,15
   10838:	3007883a 	mov	r3,r6
   1083c:	34c03fcc 	andi	r19,r6,255
   10840:	11009036 	bltu	r2,r4,10a84 <__divdf3+0x31c>
   10844:	200890ba 	slli	r4,r4,2
   10848:	00800074 	movhi	r2,1
   1084c:	10821704 	addi	r2,r2,2140
   10850:	2089883a 	add	r4,r4,r2
   10854:	20800017 	ldw	r2,0(r4)
   10858:	1000683a 	jmp	r2
   1085c:	00010a84 	movi	zero,1066
   10860:	000108d4 	movui	zero,1059
   10864:	00010a74 	movhi	zero,1065
   10868:	000108c8 	cmpgei	zero,zero,1059
   1086c:	00010a74 	movhi	zero,1065
   10870:	00010a48 	cmpgei	zero,zero,1065
   10874:	00010a74 	movhi	zero,1065
   10878:	000108c8 	cmpgei	zero,zero,1059
   1087c:	000108d4 	movui	zero,1059
   10880:	000108d4 	movui	zero,1059
   10884:	00010a48 	cmpgei	zero,zero,1065
   10888:	000108c8 	cmpgei	zero,zero,1059
   1088c:	000108b8 	rdprs	zero,zero,1058
   10890:	000108b8 	rdprs	zero,zero,1058
   10894:	000108b8 	rdprs	zero,zero,1058
   10898:	00010d68 	cmpgeui	zero,zero,1077
   1089c:	2404b03a 	or	r2,r4,r16
   108a0:	1000661e 	bne	r2,zero,10a3c <__divdf3+0x2d4>
   108a4:	04c00204 	movi	r19,8
   108a8:	0021883a 	mov	r16,zero
   108ac:	0025883a 	mov	r18,zero
   108b0:	02400084 	movi	r9,2
   108b4:	003fca06 	br	107e0 <__divdf3+0x78>
   108b8:	8023883a 	mov	r17,r16
   108bc:	9011883a 	mov	r8,r18
   108c0:	e02f883a 	mov	r23,fp
   108c4:	480f883a 	mov	r7,r9
   108c8:	00800084 	movi	r2,2
   108cc:	3881311e 	bne	r7,r2,10d94 <__divdf3+0x62c>
   108d0:	b827883a 	mov	r19,r23
   108d4:	98c0004c 	andi	r3,r19,1
   108d8:	0081ffc4 	movi	r2,2047
   108dc:	000b883a 	mov	r5,zero
   108e0:	0025883a 	mov	r18,zero
   108e4:	1004953a 	slli	r2,r2,20
   108e8:	18c03fcc 	andi	r3,r3,255
   108ec:	04400434 	movhi	r17,16
   108f0:	8c7fffc4 	addi	r17,r17,-1
   108f4:	180697fa 	slli	r3,r3,31
   108f8:	2c4a703a 	and	r5,r5,r17
   108fc:	288ab03a 	or	r5,r5,r2
   10900:	28c6b03a 	or	r3,r5,r3
   10904:	9005883a 	mov	r2,r18
   10908:	dfc00d17 	ldw	ra,52(sp)
   1090c:	df000c17 	ldw	fp,48(sp)
   10910:	ddc00b17 	ldw	r23,44(sp)
   10914:	dd800a17 	ldw	r22,40(sp)
   10918:	dd400917 	ldw	r21,36(sp)
   1091c:	dd000817 	ldw	r20,32(sp)
   10920:	dcc00717 	ldw	r19,28(sp)
   10924:	dc800617 	ldw	r18,24(sp)
   10928:	dc400517 	ldw	r17,20(sp)
   1092c:	dc000417 	ldw	r16,16(sp)
   10930:	dec00e04 	addi	sp,sp,56
   10934:	f800283a 	ret
   10938:	2404b03a 	or	r2,r4,r16
   1093c:	2027883a 	mov	r19,r4
   10940:	10003926 	beq	r2,zero,10a28 <__divdf3+0x2c0>
   10944:	80012e26 	beq	r16,zero,10e00 <__divdf3+0x698>
   10948:	8009883a 	mov	r4,r16
   1094c:	d9800315 	stw	r6,12(sp)
   10950:	d9c00215 	stw	r7,8(sp)
   10954:	00124c00 	call	124c0 <__clzsi2>
   10958:	d9800317 	ldw	r6,12(sp)
   1095c:	d9c00217 	ldw	r7,8(sp)
   10960:	113ffd44 	addi	r4,r2,-11
   10964:	00c00704 	movi	r3,28
   10968:	19012116 	blt	r3,r4,10df0 <__divdf3+0x688>
   1096c:	00c00744 	movi	r3,29
   10970:	147ffe04 	addi	r17,r2,-8
   10974:	1907c83a 	sub	r3,r3,r4
   10978:	8460983a 	sll	r16,r16,r17
   1097c:	98c6d83a 	srl	r3,r19,r3
   10980:	9c64983a 	sll	r18,r19,r17
   10984:	1c20b03a 	or	r16,r3,r16
   10988:	1080fcc4 	addi	r2,r2,1011
   1098c:	00abc83a 	sub	r21,zero,r2
   10990:	0027883a 	mov	r19,zero
   10994:	0013883a 	mov	r9,zero
   10998:	003f9106 	br	107e0 <__divdf3+0x78>
   1099c:	3446b03a 	or	r3,r6,r17
   109a0:	18001f1e 	bne	r3,zero,10a20 <__divdf3+0x2b8>
   109a4:	0023883a 	mov	r17,zero
   109a8:	0011883a 	mov	r8,zero
   109ac:	01c00084 	movi	r7,2
   109b0:	003f9d06 	br	10828 <__divdf3+0xc0>
   109b4:	3446b03a 	or	r3,r6,r17
   109b8:	18001526 	beq	r3,zero,10a10 <__divdf3+0x2a8>
   109bc:	88011b26 	beq	r17,zero,10e2c <__divdf3+0x6c4>
   109c0:	8809883a 	mov	r4,r17
   109c4:	d9800315 	stw	r6,12(sp)
   109c8:	da400115 	stw	r9,4(sp)
   109cc:	00124c00 	call	124c0 <__clzsi2>
   109d0:	d9800317 	ldw	r6,12(sp)
   109d4:	da400117 	ldw	r9,4(sp)
   109d8:	113ffd44 	addi	r4,r2,-11
   109dc:	00c00704 	movi	r3,28
   109e0:	19010e16 	blt	r3,r4,10e1c <__divdf3+0x6b4>
   109e4:	00c00744 	movi	r3,29
   109e8:	123ffe04 	addi	r8,r2,-8
   109ec:	1907c83a 	sub	r3,r3,r4
   109f0:	8a22983a 	sll	r17,r17,r8
   109f4:	30c6d83a 	srl	r3,r6,r3
   109f8:	3210983a 	sll	r8,r6,r8
   109fc:	1c62b03a 	or	r17,r3,r17
   10a00:	1080fcc4 	addi	r2,r2,1011
   10a04:	0085c83a 	sub	r2,zero,r2
   10a08:	000f883a 	mov	r7,zero
   10a0c:	003f8606 	br	10828 <__divdf3+0xc0>
   10a10:	0023883a 	mov	r17,zero
   10a14:	0011883a 	mov	r8,zero
   10a18:	01c00044 	movi	r7,1
   10a1c:	003f8206 	br	10828 <__divdf3+0xc0>
   10a20:	01c000c4 	movi	r7,3
   10a24:	003f8006 	br	10828 <__divdf3+0xc0>
   10a28:	04c00104 	movi	r19,4
   10a2c:	0021883a 	mov	r16,zero
   10a30:	0025883a 	mov	r18,zero
   10a34:	02400044 	movi	r9,1
   10a38:	003f6906 	br	107e0 <__divdf3+0x78>
   10a3c:	04c00304 	movi	r19,12
   10a40:	024000c4 	movi	r9,3
   10a44:	003f6606 	br	107e0 <__divdf3+0x78>
   10a48:	01400434 	movhi	r5,16
   10a4c:	0007883a 	mov	r3,zero
   10a50:	297fffc4 	addi	r5,r5,-1
   10a54:	04bfffc4 	movi	r18,-1
   10a58:	0081ffc4 	movi	r2,2047
   10a5c:	003fa106 	br	108e4 <__divdf3+0x17c>
   10a60:	00c00044 	movi	r3,1
   10a64:	1887c83a 	sub	r3,r3,r2
   10a68:	01000e04 	movi	r4,56
   10a6c:	20c1210e 	bge	r4,r3,10ef4 <__divdf3+0x78c>
   10a70:	98c0004c 	andi	r3,r19,1
   10a74:	0005883a 	mov	r2,zero
   10a78:	000b883a 	mov	r5,zero
   10a7c:	0025883a 	mov	r18,zero
   10a80:	003f9806 	br	108e4 <__divdf3+0x17c>
   10a84:	8c00fd36 	bltu	r17,r16,10e7c <__divdf3+0x714>
   10a88:	8440fb26 	beq	r16,r17,10e78 <__divdf3+0x710>
   10a8c:	8007883a 	mov	r3,r16
   10a90:	ad7fffc4 	addi	r21,r21,-1
   10a94:	0021883a 	mov	r16,zero
   10a98:	4004d63a 	srli	r2,r8,24
   10a9c:	8822923a 	slli	r17,r17,8
   10aa0:	1809883a 	mov	r4,r3
   10aa4:	402c923a 	slli	r22,r8,8
   10aa8:	88b8b03a 	or	fp,r17,r2
   10aac:	e028d43a 	srli	r20,fp,16
   10ab0:	d8c00015 	stw	r3,0(sp)
   10ab4:	e5ffffcc 	andi	r23,fp,65535
   10ab8:	a00b883a 	mov	r5,r20
   10abc:	000fe000 	call	fe00 <__udivsi3>
   10ac0:	d8c00017 	ldw	r3,0(sp)
   10ac4:	a00b883a 	mov	r5,r20
   10ac8:	d8800315 	stw	r2,12(sp)
   10acc:	1809883a 	mov	r4,r3
   10ad0:	000fe640 	call	fe64 <__umodsi3>
   10ad4:	d9800317 	ldw	r6,12(sp)
   10ad8:	1006943a 	slli	r3,r2,16
   10adc:	9004d43a 	srli	r2,r18,16
   10ae0:	b9a3383a 	mul	r17,r23,r6
   10ae4:	10c4b03a 	or	r2,r2,r3
   10ae8:	1440062e 	bgeu	r2,r17,10b04 <__divdf3+0x39c>
   10aec:	1705883a 	add	r2,r2,fp
   10af0:	30ffffc4 	addi	r3,r6,-1
   10af4:	1700ee36 	bltu	r2,fp,10eb0 <__divdf3+0x748>
   10af8:	1440ed2e 	bgeu	r2,r17,10eb0 <__divdf3+0x748>
   10afc:	31bfff84 	addi	r6,r6,-2
   10b00:	1705883a 	add	r2,r2,fp
   10b04:	1463c83a 	sub	r17,r2,r17
   10b08:	a00b883a 	mov	r5,r20
   10b0c:	8809883a 	mov	r4,r17
   10b10:	d9800315 	stw	r6,12(sp)
   10b14:	000fe000 	call	fe00 <__udivsi3>
   10b18:	a00b883a 	mov	r5,r20
   10b1c:	8809883a 	mov	r4,r17
   10b20:	d8800215 	stw	r2,8(sp)
   10b24:	000fe640 	call	fe64 <__umodsi3>
   10b28:	d9c00217 	ldw	r7,8(sp)
   10b2c:	1004943a 	slli	r2,r2,16
   10b30:	94bfffcc 	andi	r18,r18,65535
   10b34:	b9d1383a 	mul	r8,r23,r7
   10b38:	90a4b03a 	or	r18,r18,r2
   10b3c:	d9800317 	ldw	r6,12(sp)
   10b40:	9200062e 	bgeu	r18,r8,10b5c <__divdf3+0x3f4>
   10b44:	9725883a 	add	r18,r18,fp
   10b48:	38bfffc4 	addi	r2,r7,-1
   10b4c:	9700d636 	bltu	r18,fp,10ea8 <__divdf3+0x740>
   10b50:	9200d52e 	bgeu	r18,r8,10ea8 <__divdf3+0x740>
   10b54:	39ffff84 	addi	r7,r7,-2
   10b58:	9725883a 	add	r18,r18,fp
   10b5c:	3004943a 	slli	r2,r6,16
   10b60:	b012d43a 	srli	r9,r22,16
   10b64:	b1bfffcc 	andi	r6,r22,65535
   10b68:	11e2b03a 	or	r17,r2,r7
   10b6c:	8806d43a 	srli	r3,r17,16
   10b70:	893fffcc 	andi	r4,r17,65535
   10b74:	218b383a 	mul	r5,r4,r6
   10b78:	30c5383a 	mul	r2,r6,r3
   10b7c:	2249383a 	mul	r4,r4,r9
   10b80:	280ed43a 	srli	r7,r5,16
   10b84:	9225c83a 	sub	r18,r18,r8
   10b88:	2089883a 	add	r4,r4,r2
   10b8c:	3909883a 	add	r4,r7,r4
   10b90:	1a47383a 	mul	r3,r3,r9
   10b94:	2080022e 	bgeu	r4,r2,10ba0 <__divdf3+0x438>
   10b98:	00800074 	movhi	r2,1
   10b9c:	1887883a 	add	r3,r3,r2
   10ba0:	2004d43a 	srli	r2,r4,16
   10ba4:	2008943a 	slli	r4,r4,16
   10ba8:	297fffcc 	andi	r5,r5,65535
   10bac:	10c7883a 	add	r3,r2,r3
   10bb0:	2149883a 	add	r4,r4,r5
   10bb4:	90c0a536 	bltu	r18,r3,10e4c <__divdf3+0x6e4>
   10bb8:	90c0bf26 	beq	r18,r3,10eb8 <__divdf3+0x750>
   10bbc:	90c7c83a 	sub	r3,r18,r3
   10bc0:	810fc83a 	sub	r7,r16,r4
   10bc4:	81e5803a 	cmpltu	r18,r16,r7
   10bc8:	1ca5c83a 	sub	r18,r3,r18
   10bcc:	e480c126 	beq	fp,r18,10ed4 <__divdf3+0x76c>
   10bd0:	a00b883a 	mov	r5,r20
   10bd4:	9009883a 	mov	r4,r18
   10bd8:	d9800315 	stw	r6,12(sp)
   10bdc:	d9c00215 	stw	r7,8(sp)
   10be0:	da400115 	stw	r9,4(sp)
   10be4:	000fe000 	call	fe00 <__udivsi3>
   10be8:	a00b883a 	mov	r5,r20
   10bec:	9009883a 	mov	r4,r18
   10bf0:	d8800015 	stw	r2,0(sp)
   10bf4:	000fe640 	call	fe64 <__umodsi3>
   10bf8:	d9c00217 	ldw	r7,8(sp)
   10bfc:	da000017 	ldw	r8,0(sp)
   10c00:	1006943a 	slli	r3,r2,16
   10c04:	3804d43a 	srli	r2,r7,16
   10c08:	ba21383a 	mul	r16,r23,r8
   10c0c:	d9800317 	ldw	r6,12(sp)
   10c10:	10c4b03a 	or	r2,r2,r3
   10c14:	da400117 	ldw	r9,4(sp)
   10c18:	1400062e 	bgeu	r2,r16,10c34 <__divdf3+0x4cc>
   10c1c:	1705883a 	add	r2,r2,fp
   10c20:	40ffffc4 	addi	r3,r8,-1
   10c24:	1700ad36 	bltu	r2,fp,10edc <__divdf3+0x774>
   10c28:	1400ac2e 	bgeu	r2,r16,10edc <__divdf3+0x774>
   10c2c:	423fff84 	addi	r8,r8,-2
   10c30:	1705883a 	add	r2,r2,fp
   10c34:	1421c83a 	sub	r16,r2,r16
   10c38:	a00b883a 	mov	r5,r20
   10c3c:	8009883a 	mov	r4,r16
   10c40:	d9800315 	stw	r6,12(sp)
   10c44:	d9c00215 	stw	r7,8(sp)
   10c48:	da000015 	stw	r8,0(sp)
   10c4c:	da400115 	stw	r9,4(sp)
   10c50:	000fe000 	call	fe00 <__udivsi3>
   10c54:	8009883a 	mov	r4,r16
   10c58:	a00b883a 	mov	r5,r20
   10c5c:	1025883a 	mov	r18,r2
   10c60:	000fe640 	call	fe64 <__umodsi3>
   10c64:	d9c00217 	ldw	r7,8(sp)
   10c68:	1004943a 	slli	r2,r2,16
   10c6c:	bcaf383a 	mul	r23,r23,r18
   10c70:	393fffcc 	andi	r4,r7,65535
   10c74:	2088b03a 	or	r4,r4,r2
   10c78:	d9800317 	ldw	r6,12(sp)
   10c7c:	da000017 	ldw	r8,0(sp)
   10c80:	da400117 	ldw	r9,4(sp)
   10c84:	25c0062e 	bgeu	r4,r23,10ca0 <__divdf3+0x538>
   10c88:	2709883a 	add	r4,r4,fp
   10c8c:	90bfffc4 	addi	r2,r18,-1
   10c90:	27009436 	bltu	r4,fp,10ee4 <__divdf3+0x77c>
   10c94:	25c0932e 	bgeu	r4,r23,10ee4 <__divdf3+0x77c>
   10c98:	94bfff84 	addi	r18,r18,-2
   10c9c:	2709883a 	add	r4,r4,fp
   10ca0:	4004943a 	slli	r2,r8,16
   10ca4:	25efc83a 	sub	r23,r4,r23
   10ca8:	1490b03a 	or	r8,r2,r18
   10cac:	4008d43a 	srli	r4,r8,16
   10cb0:	40ffffcc 	andi	r3,r8,65535
   10cb4:	30c5383a 	mul	r2,r6,r3
   10cb8:	1a47383a 	mul	r3,r3,r9
   10cbc:	310d383a 	mul	r6,r6,r4
   10cc0:	100ad43a 	srli	r5,r2,16
   10cc4:	4913383a 	mul	r9,r9,r4
   10cc8:	1987883a 	add	r3,r3,r6
   10ccc:	28c7883a 	add	r3,r5,r3
   10cd0:	1980022e 	bgeu	r3,r6,10cdc <__divdf3+0x574>
   10cd4:	01000074 	movhi	r4,1
   10cd8:	4913883a 	add	r9,r9,r4
   10cdc:	1808d43a 	srli	r4,r3,16
   10ce0:	1806943a 	slli	r3,r3,16
   10ce4:	10bfffcc 	andi	r2,r2,65535
   10ce8:	2253883a 	add	r9,r4,r9
   10cec:	1887883a 	add	r3,r3,r2
   10cf0:	ba403836 	bltu	r23,r9,10dd4 <__divdf3+0x66c>
   10cf4:	ba403626 	beq	r23,r9,10dd0 <__divdf3+0x668>
   10cf8:	42000054 	ori	r8,r8,1
   10cfc:	a880ffc4 	addi	r2,r21,1023
   10d00:	00bf570e 	bge	zero,r2,10a60 <__divdf3+0x2f8>
   10d04:	40c001cc 	andi	r3,r8,7
   10d08:	18000726 	beq	r3,zero,10d28 <__divdf3+0x5c0>
   10d0c:	40c003cc 	andi	r3,r8,15
   10d10:	01000104 	movi	r4,4
   10d14:	19000426 	beq	r3,r4,10d28 <__divdf3+0x5c0>
   10d18:	4107883a 	add	r3,r8,r4
   10d1c:	1a11803a 	cmpltu	r8,r3,r8
   10d20:	8a23883a 	add	r17,r17,r8
   10d24:	1811883a 	mov	r8,r3
   10d28:	88c0402c 	andhi	r3,r17,256
   10d2c:	18000426 	beq	r3,zero,10d40 <__divdf3+0x5d8>
   10d30:	00ffc034 	movhi	r3,65280
   10d34:	18ffffc4 	addi	r3,r3,-1
   10d38:	a8810004 	addi	r2,r21,1024
   10d3c:	88e2703a 	and	r17,r17,r3
   10d40:	00c1ff84 	movi	r3,2046
   10d44:	18bee316 	blt	r3,r2,108d4 <__divdf3+0x16c>
   10d48:	8824977a 	slli	r18,r17,29
   10d4c:	4010d0fa 	srli	r8,r8,3
   10d50:	8822927a 	slli	r17,r17,9
   10d54:	1081ffcc 	andi	r2,r2,2047
   10d58:	9224b03a 	or	r18,r18,r8
   10d5c:	880ad33a 	srli	r5,r17,12
   10d60:	98c0004c 	andi	r3,r19,1
   10d64:	003edf06 	br	108e4 <__divdf3+0x17c>
   10d68:	8080022c 	andhi	r2,r16,8
   10d6c:	10001226 	beq	r2,zero,10db8 <__divdf3+0x650>
   10d70:	8880022c 	andhi	r2,r17,8
   10d74:	1000101e 	bne	r2,zero,10db8 <__divdf3+0x650>
   10d78:	00800434 	movhi	r2,16
   10d7c:	89400234 	orhi	r5,r17,8
   10d80:	10bfffc4 	addi	r2,r2,-1
   10d84:	b007883a 	mov	r3,r22
   10d88:	288a703a 	and	r5,r5,r2
   10d8c:	4025883a 	mov	r18,r8
   10d90:	003f3106 	br	10a58 <__divdf3+0x2f0>
   10d94:	008000c4 	movi	r2,3
   10d98:	3880a626 	beq	r7,r2,11034 <__divdf3+0x8cc>
   10d9c:	00800044 	movi	r2,1
   10da0:	3880521e 	bne	r7,r2,10eec <__divdf3+0x784>
   10da4:	b807883a 	mov	r3,r23
   10da8:	0005883a 	mov	r2,zero
   10dac:	000b883a 	mov	r5,zero
   10db0:	0025883a 	mov	r18,zero
   10db4:	003ecb06 	br	108e4 <__divdf3+0x17c>
   10db8:	00800434 	movhi	r2,16
   10dbc:	81400234 	orhi	r5,r16,8
   10dc0:	10bfffc4 	addi	r2,r2,-1
   10dc4:	a007883a 	mov	r3,r20
   10dc8:	288a703a 	and	r5,r5,r2
   10dcc:	003f2206 	br	10a58 <__divdf3+0x2f0>
   10dd0:	183fca26 	beq	r3,zero,10cfc <__divdf3+0x594>
   10dd4:	e5ef883a 	add	r23,fp,r23
   10dd8:	40bfffc4 	addi	r2,r8,-1
   10ddc:	bf00392e 	bgeu	r23,fp,10ec4 <__divdf3+0x75c>
   10de0:	1011883a 	mov	r8,r2
   10de4:	ba7fc41e 	bne	r23,r9,10cf8 <__divdf3+0x590>
   10de8:	b0ffc31e 	bne	r22,r3,10cf8 <__divdf3+0x590>
   10dec:	003fc306 	br	10cfc <__divdf3+0x594>
   10df0:	143ff604 	addi	r16,r2,-40
   10df4:	9c20983a 	sll	r16,r19,r16
   10df8:	0025883a 	mov	r18,zero
   10dfc:	003ee206 	br	10988 <__divdf3+0x220>
   10e00:	d9800315 	stw	r6,12(sp)
   10e04:	d9c00215 	stw	r7,8(sp)
   10e08:	00124c00 	call	124c0 <__clzsi2>
   10e0c:	10800804 	addi	r2,r2,32
   10e10:	d9c00217 	ldw	r7,8(sp)
   10e14:	d9800317 	ldw	r6,12(sp)
   10e18:	003ed106 	br	10960 <__divdf3+0x1f8>
   10e1c:	147ff604 	addi	r17,r2,-40
   10e20:	3462983a 	sll	r17,r6,r17
   10e24:	0011883a 	mov	r8,zero
   10e28:	003ef506 	br	10a00 <__divdf3+0x298>
   10e2c:	3009883a 	mov	r4,r6
   10e30:	d9800315 	stw	r6,12(sp)
   10e34:	da400115 	stw	r9,4(sp)
   10e38:	00124c00 	call	124c0 <__clzsi2>
   10e3c:	10800804 	addi	r2,r2,32
   10e40:	da400117 	ldw	r9,4(sp)
   10e44:	d9800317 	ldw	r6,12(sp)
   10e48:	003ee306 	br	109d8 <__divdf3+0x270>
   10e4c:	85a1883a 	add	r16,r16,r22
   10e50:	8585803a 	cmpltu	r2,r16,r22
   10e54:	1705883a 	add	r2,r2,fp
   10e58:	14a5883a 	add	r18,r2,r18
   10e5c:	88bfffc4 	addi	r2,r17,-1
   10e60:	e4800c2e 	bgeu	fp,r18,10e94 <__divdf3+0x72c>
   10e64:	90c03e36 	bltu	r18,r3,10f60 <__divdf3+0x7f8>
   10e68:	1c806926 	beq	r3,r18,11010 <__divdf3+0x8a8>
   10e6c:	90c7c83a 	sub	r3,r18,r3
   10e70:	1023883a 	mov	r17,r2
   10e74:	003f5206 	br	10bc0 <__divdf3+0x458>
   10e78:	923f0436 	bltu	r18,r8,10a8c <__divdf3+0x324>
   10e7c:	800897fa 	slli	r4,r16,31
   10e80:	9004d07a 	srli	r2,r18,1
   10e84:	8006d07a 	srli	r3,r16,1
   10e88:	902097fa 	slli	r16,r18,31
   10e8c:	20a4b03a 	or	r18,r4,r2
   10e90:	003f0106 	br	10a98 <__divdf3+0x330>
   10e94:	e4bff51e 	bne	fp,r18,10e6c <__divdf3+0x704>
   10e98:	85bff22e 	bgeu	r16,r22,10e64 <__divdf3+0x6fc>
   10e9c:	e0c7c83a 	sub	r3,fp,r3
   10ea0:	1023883a 	mov	r17,r2
   10ea4:	003f4606 	br	10bc0 <__divdf3+0x458>
   10ea8:	100f883a 	mov	r7,r2
   10eac:	003f2b06 	br	10b5c <__divdf3+0x3f4>
   10eb0:	180d883a 	mov	r6,r3
   10eb4:	003f1306 	br	10b04 <__divdf3+0x39c>
   10eb8:	813fe436 	bltu	r16,r4,10e4c <__divdf3+0x6e4>
   10ebc:	0007883a 	mov	r3,zero
   10ec0:	003f3f06 	br	10bc0 <__divdf3+0x458>
   10ec4:	ba402c36 	bltu	r23,r9,10f78 <__divdf3+0x810>
   10ec8:	4dc05426 	beq	r9,r23,1101c <__divdf3+0x8b4>
   10ecc:	1011883a 	mov	r8,r2
   10ed0:	003f8906 	br	10cf8 <__divdf3+0x590>
   10ed4:	023fffc4 	movi	r8,-1
   10ed8:	003f8806 	br	10cfc <__divdf3+0x594>
   10edc:	1811883a 	mov	r8,r3
   10ee0:	003f5406 	br	10c34 <__divdf3+0x4cc>
   10ee4:	1025883a 	mov	r18,r2
   10ee8:	003f6d06 	br	10ca0 <__divdf3+0x538>
   10eec:	b827883a 	mov	r19,r23
   10ef0:	003f8206 	br	10cfc <__divdf3+0x594>
   10ef4:	010007c4 	movi	r4,31
   10ef8:	20c02616 	blt	r4,r3,10f94 <__divdf3+0x82c>
   10efc:	00800804 	movi	r2,32
   10f00:	10c5c83a 	sub	r2,r2,r3
   10f04:	888a983a 	sll	r5,r17,r2
   10f08:	40c8d83a 	srl	r4,r8,r3
   10f0c:	4084983a 	sll	r2,r8,r2
   10f10:	88e2d83a 	srl	r17,r17,r3
   10f14:	2906b03a 	or	r3,r5,r4
   10f18:	1004c03a 	cmpne	r2,r2,zero
   10f1c:	1886b03a 	or	r3,r3,r2
   10f20:	188001cc 	andi	r2,r3,7
   10f24:	10000726 	beq	r2,zero,10f44 <__divdf3+0x7dc>
   10f28:	188003cc 	andi	r2,r3,15
   10f2c:	01000104 	movi	r4,4
   10f30:	11000426 	beq	r2,r4,10f44 <__divdf3+0x7dc>
   10f34:	1805883a 	mov	r2,r3
   10f38:	10c00104 	addi	r3,r2,4
   10f3c:	1885803a 	cmpltu	r2,r3,r2
   10f40:	88a3883a 	add	r17,r17,r2
   10f44:	8880202c 	andhi	r2,r17,128
   10f48:	10002726 	beq	r2,zero,10fe8 <__divdf3+0x880>
   10f4c:	98c0004c 	andi	r3,r19,1
   10f50:	00800044 	movi	r2,1
   10f54:	000b883a 	mov	r5,zero
   10f58:	0025883a 	mov	r18,zero
   10f5c:	003e6106 	br	108e4 <__divdf3+0x17c>
   10f60:	85a1883a 	add	r16,r16,r22
   10f64:	8585803a 	cmpltu	r2,r16,r22
   10f68:	1705883a 	add	r2,r2,fp
   10f6c:	14a5883a 	add	r18,r2,r18
   10f70:	8c7fff84 	addi	r17,r17,-2
   10f74:	003f1106 	br	10bbc <__divdf3+0x454>
   10f78:	b589883a 	add	r4,r22,r22
   10f7c:	25ad803a 	cmpltu	r22,r4,r22
   10f80:	b739883a 	add	fp,r22,fp
   10f84:	40bfff84 	addi	r2,r8,-2
   10f88:	bf2f883a 	add	r23,r23,fp
   10f8c:	202d883a 	mov	r22,r4
   10f90:	003f9306 	br	10de0 <__divdf3+0x678>
   10f94:	013ff844 	movi	r4,-31
   10f98:	2085c83a 	sub	r2,r4,r2
   10f9c:	8888d83a 	srl	r4,r17,r2
   10fa0:	00800804 	movi	r2,32
   10fa4:	18802126 	beq	r3,r2,1102c <__divdf3+0x8c4>
   10fa8:	00801004 	movi	r2,64
   10fac:	10c5c83a 	sub	r2,r2,r3
   10fb0:	8884983a 	sll	r2,r17,r2
   10fb4:	1204b03a 	or	r2,r2,r8
   10fb8:	1004c03a 	cmpne	r2,r2,zero
   10fbc:	2084b03a 	or	r2,r4,r2
   10fc0:	144001cc 	andi	r17,r2,7
   10fc4:	88000d1e 	bne	r17,zero,10ffc <__divdf3+0x894>
   10fc8:	000b883a 	mov	r5,zero
   10fcc:	1024d0fa 	srli	r18,r2,3
   10fd0:	98c0004c 	andi	r3,r19,1
   10fd4:	0005883a 	mov	r2,zero
   10fd8:	9464b03a 	or	r18,r18,r17
   10fdc:	003e4106 	br	108e4 <__divdf3+0x17c>
   10fe0:	1007883a 	mov	r3,r2
   10fe4:	0023883a 	mov	r17,zero
   10fe8:	880a927a 	slli	r5,r17,9
   10fec:	1805883a 	mov	r2,r3
   10ff0:	8822977a 	slli	r17,r17,29
   10ff4:	280ad33a 	srli	r5,r5,12
   10ff8:	003ff406 	br	10fcc <__divdf3+0x864>
   10ffc:	10c003cc 	andi	r3,r2,15
   11000:	01000104 	movi	r4,4
   11004:	193ff626 	beq	r3,r4,10fe0 <__divdf3+0x878>
   11008:	0023883a 	mov	r17,zero
   1100c:	003fca06 	br	10f38 <__divdf3+0x7d0>
   11010:	813fd336 	bltu	r16,r4,10f60 <__divdf3+0x7f8>
   11014:	1023883a 	mov	r17,r2
   11018:	003fa806 	br	10ebc <__divdf3+0x754>
   1101c:	b0ffd636 	bltu	r22,r3,10f78 <__divdf3+0x810>
   11020:	1011883a 	mov	r8,r2
   11024:	b0ff341e 	bne	r22,r3,10cf8 <__divdf3+0x590>
   11028:	003f3406 	br	10cfc <__divdf3+0x594>
   1102c:	0005883a 	mov	r2,zero
   11030:	003fe006 	br	10fb4 <__divdf3+0x84c>
   11034:	00800434 	movhi	r2,16
   11038:	89400234 	orhi	r5,r17,8
   1103c:	10bfffc4 	addi	r2,r2,-1
   11040:	b807883a 	mov	r3,r23
   11044:	288a703a 	and	r5,r5,r2
   11048:	4025883a 	mov	r18,r8
   1104c:	003e8206 	br	10a58 <__divdf3+0x2f0>

00011050 <__eqdf2>:
   11050:	2804d53a 	srli	r2,r5,20
   11054:	3806d53a 	srli	r3,r7,20
   11058:	02000434 	movhi	r8,16
   1105c:	423fffc4 	addi	r8,r8,-1
   11060:	1081ffcc 	andi	r2,r2,2047
   11064:	0281ffc4 	movi	r10,2047
   11068:	2a12703a 	and	r9,r5,r8
   1106c:	18c1ffcc 	andi	r3,r3,2047
   11070:	3a10703a 	and	r8,r7,r8
   11074:	280ad7fa 	srli	r5,r5,31
   11078:	380ed7fa 	srli	r7,r7,31
   1107c:	12801026 	beq	r2,r10,110c0 <__eqdf2+0x70>
   11080:	0281ffc4 	movi	r10,2047
   11084:	1a800a26 	beq	r3,r10,110b0 <__eqdf2+0x60>
   11088:	10c00226 	beq	r2,r3,11094 <__eqdf2+0x44>
   1108c:	00800044 	movi	r2,1
   11090:	f800283a 	ret
   11094:	4a3ffd1e 	bne	r9,r8,1108c <__eqdf2+0x3c>
   11098:	21bffc1e 	bne	r4,r6,1108c <__eqdf2+0x3c>
   1109c:	29c00c26 	beq	r5,r7,110d0 <__eqdf2+0x80>
   110a0:	103ffa1e 	bne	r2,zero,1108c <__eqdf2+0x3c>
   110a4:	2244b03a 	or	r2,r4,r9
   110a8:	1004c03a 	cmpne	r2,r2,zero
   110ac:	f800283a 	ret
   110b0:	3214b03a 	or	r10,r6,r8
   110b4:	503ff426 	beq	r10,zero,11088 <__eqdf2+0x38>
   110b8:	00800044 	movi	r2,1
   110bc:	f800283a 	ret
   110c0:	2254b03a 	or	r10,r4,r9
   110c4:	503fee26 	beq	r10,zero,11080 <__eqdf2+0x30>
   110c8:	00800044 	movi	r2,1
   110cc:	f800283a 	ret
   110d0:	0005883a 	mov	r2,zero
   110d4:	f800283a 	ret

000110d8 <__gedf2>:
   110d8:	2804d53a 	srli	r2,r5,20
   110dc:	3806d53a 	srli	r3,r7,20
   110e0:	02000434 	movhi	r8,16
   110e4:	423fffc4 	addi	r8,r8,-1
   110e8:	1081ffcc 	andi	r2,r2,2047
   110ec:	0241ffc4 	movi	r9,2047
   110f0:	2a14703a 	and	r10,r5,r8
   110f4:	18c1ffcc 	andi	r3,r3,2047
   110f8:	3a10703a 	and	r8,r7,r8
   110fc:	280ad7fa 	srli	r5,r5,31
   11100:	380ed7fa 	srli	r7,r7,31
   11104:	12401d26 	beq	r2,r9,1117c <__gedf2+0xa4>
   11108:	0241ffc4 	movi	r9,2047
   1110c:	1a401226 	beq	r3,r9,11158 <__gedf2+0x80>
   11110:	1000081e 	bne	r2,zero,11134 <__gedf2+0x5c>
   11114:	2296b03a 	or	r11,r4,r10
   11118:	5813003a 	cmpeq	r9,r11,zero
   1111c:	1800091e 	bne	r3,zero,11144 <__gedf2+0x6c>
   11120:	3218b03a 	or	r12,r6,r8
   11124:	6000071e 	bne	r12,zero,11144 <__gedf2+0x6c>
   11128:	0005883a 	mov	r2,zero
   1112c:	5800101e 	bne	r11,zero,11170 <__gedf2+0x98>
   11130:	f800283a 	ret
   11134:	18000c1e 	bne	r3,zero,11168 <__gedf2+0x90>
   11138:	3212b03a 	or	r9,r6,r8
   1113c:	48000c26 	beq	r9,zero,11170 <__gedf2+0x98>
   11140:	0013883a 	mov	r9,zero
   11144:	39c03fcc 	andi	r7,r7,255
   11148:	48000826 	beq	r9,zero,1116c <__gedf2+0x94>
   1114c:	38000926 	beq	r7,zero,11174 <__gedf2+0x9c>
   11150:	00800044 	movi	r2,1
   11154:	f800283a 	ret
   11158:	3212b03a 	or	r9,r6,r8
   1115c:	483fec26 	beq	r9,zero,11110 <__gedf2+0x38>
   11160:	00bfff84 	movi	r2,-2
   11164:	f800283a 	ret
   11168:	39c03fcc 	andi	r7,r7,255
   1116c:	29c00626 	beq	r5,r7,11188 <__gedf2+0xb0>
   11170:	283ff726 	beq	r5,zero,11150 <__gedf2+0x78>
   11174:	00bfffc4 	movi	r2,-1
   11178:	f800283a 	ret
   1117c:	2292b03a 	or	r9,r4,r10
   11180:	483fe126 	beq	r9,zero,11108 <__gedf2+0x30>
   11184:	003ff606 	br	11160 <__gedf2+0x88>
   11188:	18bff916 	blt	r3,r2,11170 <__gedf2+0x98>
   1118c:	10c00316 	blt	r2,r3,1119c <__gedf2+0xc4>
   11190:	42bff736 	bltu	r8,r10,11170 <__gedf2+0x98>
   11194:	52000326 	beq	r10,r8,111a4 <__gedf2+0xcc>
   11198:	5200042e 	bgeu	r10,r8,111ac <__gedf2+0xd4>
   1119c:	283fec1e 	bne	r5,zero,11150 <__gedf2+0x78>
   111a0:	003ff406 	br	11174 <__gedf2+0x9c>
   111a4:	313ff236 	bltu	r6,r4,11170 <__gedf2+0x98>
   111a8:	21bffc36 	bltu	r4,r6,1119c <__gedf2+0xc4>
   111ac:	0005883a 	mov	r2,zero
   111b0:	f800283a 	ret

000111b4 <__ledf2>:
   111b4:	2804d53a 	srli	r2,r5,20
   111b8:	3810d53a 	srli	r8,r7,20
   111bc:	00c00434 	movhi	r3,16
   111c0:	18ffffc4 	addi	r3,r3,-1
   111c4:	1081ffcc 	andi	r2,r2,2047
   111c8:	0241ffc4 	movi	r9,2047
   111cc:	28d4703a 	and	r10,r5,r3
   111d0:	4201ffcc 	andi	r8,r8,2047
   111d4:	38c6703a 	and	r3,r7,r3
   111d8:	280ad7fa 	srli	r5,r5,31
   111dc:	380ed7fa 	srli	r7,r7,31
   111e0:	12401f26 	beq	r2,r9,11260 <__ledf2+0xac>
   111e4:	0241ffc4 	movi	r9,2047
   111e8:	42401426 	beq	r8,r9,1123c <__ledf2+0x88>
   111ec:	1000091e 	bne	r2,zero,11214 <__ledf2+0x60>
   111f0:	2296b03a 	or	r11,r4,r10
   111f4:	5813003a 	cmpeq	r9,r11,zero
   111f8:	29403fcc 	andi	r5,r5,255
   111fc:	40000a1e 	bne	r8,zero,11228 <__ledf2+0x74>
   11200:	30d8b03a 	or	r12,r6,r3
   11204:	6000081e 	bne	r12,zero,11228 <__ledf2+0x74>
   11208:	0005883a 	mov	r2,zero
   1120c:	5800111e 	bne	r11,zero,11254 <__ledf2+0xa0>
   11210:	f800283a 	ret
   11214:	29403fcc 	andi	r5,r5,255
   11218:	40000c1e 	bne	r8,zero,1124c <__ledf2+0x98>
   1121c:	30d2b03a 	or	r9,r6,r3
   11220:	48000c26 	beq	r9,zero,11254 <__ledf2+0xa0>
   11224:	0013883a 	mov	r9,zero
   11228:	39c03fcc 	andi	r7,r7,255
   1122c:	48000826 	beq	r9,zero,11250 <__ledf2+0x9c>
   11230:	38001126 	beq	r7,zero,11278 <__ledf2+0xc4>
   11234:	00800044 	movi	r2,1
   11238:	f800283a 	ret
   1123c:	30d2b03a 	or	r9,r6,r3
   11240:	483fea26 	beq	r9,zero,111ec <__ledf2+0x38>
   11244:	00800084 	movi	r2,2
   11248:	f800283a 	ret
   1124c:	39c03fcc 	andi	r7,r7,255
   11250:	39400726 	beq	r7,r5,11270 <__ledf2+0xbc>
   11254:	2800081e 	bne	r5,zero,11278 <__ledf2+0xc4>
   11258:	00800044 	movi	r2,1
   1125c:	f800283a 	ret
   11260:	2292b03a 	or	r9,r4,r10
   11264:	483fdf26 	beq	r9,zero,111e4 <__ledf2+0x30>
   11268:	00800084 	movi	r2,2
   1126c:	f800283a 	ret
   11270:	4080030e 	bge	r8,r2,11280 <__ledf2+0xcc>
   11274:	383fef26 	beq	r7,zero,11234 <__ledf2+0x80>
   11278:	00bfffc4 	movi	r2,-1
   1127c:	f800283a 	ret
   11280:	123feb16 	blt	r2,r8,11230 <__ledf2+0x7c>
   11284:	1abff336 	bltu	r3,r10,11254 <__ledf2+0xa0>
   11288:	50c00326 	beq	r10,r3,11298 <__ledf2+0xe4>
   1128c:	50c0042e 	bgeu	r10,r3,112a0 <__ledf2+0xec>
   11290:	283fe81e 	bne	r5,zero,11234 <__ledf2+0x80>
   11294:	003ff806 	br	11278 <__ledf2+0xc4>
   11298:	313fee36 	bltu	r6,r4,11254 <__ledf2+0xa0>
   1129c:	21bffc36 	bltu	r4,r6,11290 <__ledf2+0xdc>
   112a0:	0005883a 	mov	r2,zero
   112a4:	f800283a 	ret

000112a8 <__muldf3>:
   112a8:	defff304 	addi	sp,sp,-52
   112ac:	2804d53a 	srli	r2,r5,20
   112b0:	dd800915 	stw	r22,36(sp)
   112b4:	282cd7fa 	srli	r22,r5,31
   112b8:	dc000315 	stw	r16,12(sp)
   112bc:	04000434 	movhi	r16,16
   112c0:	dd400815 	stw	r21,32(sp)
   112c4:	dc800515 	stw	r18,20(sp)
   112c8:	843fffc4 	addi	r16,r16,-1
   112cc:	dfc00c15 	stw	ra,48(sp)
   112d0:	df000b15 	stw	fp,44(sp)
   112d4:	ddc00a15 	stw	r23,40(sp)
   112d8:	dd000715 	stw	r20,28(sp)
   112dc:	dcc00615 	stw	r19,24(sp)
   112e0:	dc400415 	stw	r17,16(sp)
   112e4:	1481ffcc 	andi	r18,r2,2047
   112e8:	2c20703a 	and	r16,r5,r16
   112ec:	b02b883a 	mov	r21,r22
   112f0:	b2403fcc 	andi	r9,r22,255
   112f4:	90006026 	beq	r18,zero,11478 <__muldf3+0x1d0>
   112f8:	0081ffc4 	movi	r2,2047
   112fc:	2029883a 	mov	r20,r4
   11300:	90803626 	beq	r18,r2,113dc <__muldf3+0x134>
   11304:	80800434 	orhi	r2,r16,16
   11308:	100490fa 	slli	r2,r2,3
   1130c:	2020d77a 	srli	r16,r4,29
   11310:	202890fa 	slli	r20,r4,3
   11314:	94bf0044 	addi	r18,r18,-1023
   11318:	80a0b03a 	or	r16,r16,r2
   1131c:	0027883a 	mov	r19,zero
   11320:	0039883a 	mov	fp,zero
   11324:	3804d53a 	srli	r2,r7,20
   11328:	382ed7fa 	srli	r23,r7,31
   1132c:	04400434 	movhi	r17,16
   11330:	8c7fffc4 	addi	r17,r17,-1
   11334:	1081ffcc 	andi	r2,r2,2047
   11338:	3011883a 	mov	r8,r6
   1133c:	3c62703a 	and	r17,r7,r17
   11340:	ba803fcc 	andi	r10,r23,255
   11344:	10006d26 	beq	r2,zero,114fc <__muldf3+0x254>
   11348:	00c1ffc4 	movi	r3,2047
   1134c:	10c06526 	beq	r2,r3,114e4 <__muldf3+0x23c>
   11350:	88c00434 	orhi	r3,r17,16
   11354:	180690fa 	slli	r3,r3,3
   11358:	3022d77a 	srli	r17,r6,29
   1135c:	301090fa 	slli	r8,r6,3
   11360:	10bf0044 	addi	r2,r2,-1023
   11364:	88e2b03a 	or	r17,r17,r3
   11368:	000b883a 	mov	r5,zero
   1136c:	9085883a 	add	r2,r18,r2
   11370:	2cc8b03a 	or	r4,r5,r19
   11374:	00c003c4 	movi	r3,15
   11378:	bdacf03a 	xor	r22,r23,r22
   1137c:	12c00044 	addi	r11,r2,1
   11380:	19009936 	bltu	r3,r4,115e8 <__muldf3+0x340>
   11384:	200890ba 	slli	r4,r4,2
   11388:	00c00074 	movhi	r3,1
   1138c:	18c4e704 	addi	r3,r3,5020
   11390:	20c9883a 	add	r4,r4,r3
   11394:	20c00017 	ldw	r3,0(r4)
   11398:	1800683a 	jmp	r3
   1139c:	000115e8 	cmpgeui	zero,zero,1111
   113a0:	000113fc 	xorhi	zero,zero,1103
   113a4:	000113fc 	xorhi	zero,zero,1103
   113a8:	000113f8 	rdprs	zero,zero,1103
   113ac:	000115c4 	movi	zero,1111
   113b0:	000115c4 	movi	zero,1111
   113b4:	000115ac 	andhi	zero,zero,1110
   113b8:	000113f8 	rdprs	zero,zero,1103
   113bc:	000115c4 	movi	zero,1111
   113c0:	000115ac 	andhi	zero,zero,1110
   113c4:	000115c4 	movi	zero,1111
   113c8:	000113f8 	rdprs	zero,zero,1103
   113cc:	000115d4 	movui	zero,1111
   113d0:	000115d4 	movui	zero,1111
   113d4:	000115d4 	movui	zero,1111
   113d8:	000117f0 	cmpltui	zero,zero,1119
   113dc:	2404b03a 	or	r2,r4,r16
   113e0:	10006f1e 	bne	r2,zero,115a0 <__muldf3+0x2f8>
   113e4:	04c00204 	movi	r19,8
   113e8:	0021883a 	mov	r16,zero
   113ec:	0029883a 	mov	r20,zero
   113f0:	07000084 	movi	fp,2
   113f4:	003fcb06 	br	11324 <__muldf3+0x7c>
   113f8:	502d883a 	mov	r22,r10
   113fc:	00800084 	movi	r2,2
   11400:	28805726 	beq	r5,r2,11560 <__muldf3+0x2b8>
   11404:	008000c4 	movi	r2,3
   11408:	28816626 	beq	r5,r2,119a4 <__muldf3+0x6fc>
   1140c:	00800044 	movi	r2,1
   11410:	2881411e 	bne	r5,r2,11918 <__muldf3+0x670>
   11414:	b02b883a 	mov	r21,r22
   11418:	0005883a 	mov	r2,zero
   1141c:	000b883a 	mov	r5,zero
   11420:	0029883a 	mov	r20,zero
   11424:	1004953a 	slli	r2,r2,20
   11428:	a8c03fcc 	andi	r3,r21,255
   1142c:	04400434 	movhi	r17,16
   11430:	8c7fffc4 	addi	r17,r17,-1
   11434:	180697fa 	slli	r3,r3,31
   11438:	2c4a703a 	and	r5,r5,r17
   1143c:	288ab03a 	or	r5,r5,r2
   11440:	28c6b03a 	or	r3,r5,r3
   11444:	a005883a 	mov	r2,r20
   11448:	dfc00c17 	ldw	ra,48(sp)
   1144c:	df000b17 	ldw	fp,44(sp)
   11450:	ddc00a17 	ldw	r23,40(sp)
   11454:	dd800917 	ldw	r22,36(sp)
   11458:	dd400817 	ldw	r21,32(sp)
   1145c:	dd000717 	ldw	r20,28(sp)
   11460:	dcc00617 	ldw	r19,24(sp)
   11464:	dc800517 	ldw	r18,20(sp)
   11468:	dc400417 	ldw	r17,16(sp)
   1146c:	dc000317 	ldw	r16,12(sp)
   11470:	dec00d04 	addi	sp,sp,52
   11474:	f800283a 	ret
   11478:	2404b03a 	or	r2,r4,r16
   1147c:	2027883a 	mov	r19,r4
   11480:	10004226 	beq	r2,zero,1158c <__muldf3+0x2e4>
   11484:	8000fc26 	beq	r16,zero,11878 <__muldf3+0x5d0>
   11488:	8009883a 	mov	r4,r16
   1148c:	d9800215 	stw	r6,8(sp)
   11490:	d9c00015 	stw	r7,0(sp)
   11494:	da400115 	stw	r9,4(sp)
   11498:	00124c00 	call	124c0 <__clzsi2>
   1149c:	d9800217 	ldw	r6,8(sp)
   114a0:	d9c00017 	ldw	r7,0(sp)
   114a4:	da400117 	ldw	r9,4(sp)
   114a8:	113ffd44 	addi	r4,r2,-11
   114ac:	00c00704 	movi	r3,28
   114b0:	1900ed16 	blt	r3,r4,11868 <__muldf3+0x5c0>
   114b4:	00c00744 	movi	r3,29
   114b8:	147ffe04 	addi	r17,r2,-8
   114bc:	1907c83a 	sub	r3,r3,r4
   114c0:	8460983a 	sll	r16,r16,r17
   114c4:	98c6d83a 	srl	r3,r19,r3
   114c8:	9c68983a 	sll	r20,r19,r17
   114cc:	1c20b03a 	or	r16,r3,r16
   114d0:	1080fcc4 	addi	r2,r2,1011
   114d4:	00a5c83a 	sub	r18,zero,r2
   114d8:	0027883a 	mov	r19,zero
   114dc:	0039883a 	mov	fp,zero
   114e0:	003f9006 	br	11324 <__muldf3+0x7c>
   114e4:	3446b03a 	or	r3,r6,r17
   114e8:	1800261e 	bne	r3,zero,11584 <__muldf3+0x2dc>
   114ec:	0023883a 	mov	r17,zero
   114f0:	0011883a 	mov	r8,zero
   114f4:	01400084 	movi	r5,2
   114f8:	003f9c06 	br	1136c <__muldf3+0xc4>
   114fc:	3446b03a 	or	r3,r6,r17
   11500:	18001c26 	beq	r3,zero,11574 <__muldf3+0x2cc>
   11504:	8800ce26 	beq	r17,zero,11840 <__muldf3+0x598>
   11508:	8809883a 	mov	r4,r17
   1150c:	d9800215 	stw	r6,8(sp)
   11510:	da400115 	stw	r9,4(sp)
   11514:	da800015 	stw	r10,0(sp)
   11518:	00124c00 	call	124c0 <__clzsi2>
   1151c:	d9800217 	ldw	r6,8(sp)
   11520:	da400117 	ldw	r9,4(sp)
   11524:	da800017 	ldw	r10,0(sp)
   11528:	113ffd44 	addi	r4,r2,-11
   1152c:	00c00704 	movi	r3,28
   11530:	1900bf16 	blt	r3,r4,11830 <__muldf3+0x588>
   11534:	00c00744 	movi	r3,29
   11538:	123ffe04 	addi	r8,r2,-8
   1153c:	1907c83a 	sub	r3,r3,r4
   11540:	8a22983a 	sll	r17,r17,r8
   11544:	30c6d83a 	srl	r3,r6,r3
   11548:	3210983a 	sll	r8,r6,r8
   1154c:	1c62b03a 	or	r17,r3,r17
   11550:	1080fcc4 	addi	r2,r2,1011
   11554:	0085c83a 	sub	r2,zero,r2
   11558:	000b883a 	mov	r5,zero
   1155c:	003f8306 	br	1136c <__muldf3+0xc4>
   11560:	b02b883a 	mov	r21,r22
   11564:	0081ffc4 	movi	r2,2047
   11568:	000b883a 	mov	r5,zero
   1156c:	0029883a 	mov	r20,zero
   11570:	003fac06 	br	11424 <__muldf3+0x17c>
   11574:	0023883a 	mov	r17,zero
   11578:	0011883a 	mov	r8,zero
   1157c:	01400044 	movi	r5,1
   11580:	003f7a06 	br	1136c <__muldf3+0xc4>
   11584:	014000c4 	movi	r5,3
   11588:	003f7806 	br	1136c <__muldf3+0xc4>
   1158c:	04c00104 	movi	r19,4
   11590:	0021883a 	mov	r16,zero
   11594:	0029883a 	mov	r20,zero
   11598:	07000044 	movi	fp,1
   1159c:	003f6106 	br	11324 <__muldf3+0x7c>
   115a0:	04c00304 	movi	r19,12
   115a4:	070000c4 	movi	fp,3
   115a8:	003f5e06 	br	11324 <__muldf3+0x7c>
   115ac:	01400434 	movhi	r5,16
   115b0:	002b883a 	mov	r21,zero
   115b4:	297fffc4 	addi	r5,r5,-1
   115b8:	053fffc4 	movi	r20,-1
   115bc:	0081ffc4 	movi	r2,2047
   115c0:	003f9806 	br	11424 <__muldf3+0x17c>
   115c4:	8023883a 	mov	r17,r16
   115c8:	a011883a 	mov	r8,r20
   115cc:	e00b883a 	mov	r5,fp
   115d0:	003f8a06 	br	113fc <__muldf3+0x154>
   115d4:	8023883a 	mov	r17,r16
   115d8:	a011883a 	mov	r8,r20
   115dc:	482d883a 	mov	r22,r9
   115e0:	e00b883a 	mov	r5,fp
   115e4:	003f8506 	br	113fc <__muldf3+0x154>
   115e8:	a00ad43a 	srli	r5,r20,16
   115ec:	401ad43a 	srli	r13,r8,16
   115f0:	a53fffcc 	andi	r20,r20,65535
   115f4:	423fffcc 	andi	r8,r8,65535
   115f8:	4519383a 	mul	r12,r8,r20
   115fc:	4147383a 	mul	r3,r8,r5
   11600:	6d09383a 	mul	r4,r13,r20
   11604:	600cd43a 	srli	r6,r12,16
   11608:	2b5d383a 	mul	r14,r5,r13
   1160c:	20c9883a 	add	r4,r4,r3
   11610:	310d883a 	add	r6,r6,r4
   11614:	30c0022e 	bgeu	r6,r3,11620 <__muldf3+0x378>
   11618:	00c00074 	movhi	r3,1
   1161c:	70dd883a 	add	r14,r14,r3
   11620:	8826d43a 	srli	r19,r17,16
   11624:	8bffffcc 	andi	r15,r17,65535
   11628:	7d23383a 	mul	r17,r15,r20
   1162c:	7949383a 	mul	r4,r15,r5
   11630:	9d29383a 	mul	r20,r19,r20
   11634:	8814d43a 	srli	r10,r17,16
   11638:	3012943a 	slli	r9,r6,16
   1163c:	a129883a 	add	r20,r20,r4
   11640:	633fffcc 	andi	r12,r12,65535
   11644:	5515883a 	add	r10,r10,r20
   11648:	3006d43a 	srli	r3,r6,16
   1164c:	4b13883a 	add	r9,r9,r12
   11650:	2ccb383a 	mul	r5,r5,r19
   11654:	5100022e 	bgeu	r10,r4,11660 <__muldf3+0x3b8>
   11658:	01000074 	movhi	r4,1
   1165c:	290b883a 	add	r5,r5,r4
   11660:	802ad43a 	srli	r21,r16,16
   11664:	843fffcc 	andi	r16,r16,65535
   11668:	440d383a 	mul	r6,r8,r16
   1166c:	4565383a 	mul	r18,r8,r21
   11670:	8349383a 	mul	r4,r16,r13
   11674:	500e943a 	slli	r7,r10,16
   11678:	3010d43a 	srli	r8,r6,16
   1167c:	5028d43a 	srli	r20,r10,16
   11680:	2489883a 	add	r4,r4,r18
   11684:	8abfffcc 	andi	r10,r17,65535
   11688:	3a95883a 	add	r10,r7,r10
   1168c:	4119883a 	add	r12,r8,r4
   11690:	a169883a 	add	r20,r20,r5
   11694:	1a87883a 	add	r3,r3,r10
   11698:	6d5b383a 	mul	r13,r13,r21
   1169c:	6480022e 	bgeu	r12,r18,116a8 <__muldf3+0x400>
   116a0:	01000074 	movhi	r4,1
   116a4:	691b883a 	add	r13,r13,r4
   116a8:	7c25383a 	mul	r18,r15,r16
   116ac:	7d4b383a 	mul	r5,r15,r21
   116b0:	84cf383a 	mul	r7,r16,r19
   116b4:	901ed43a 	srli	r15,r18,16
   116b8:	6008d43a 	srli	r4,r12,16
   116bc:	6010943a 	slli	r8,r12,16
   116c0:	394f883a 	add	r7,r7,r5
   116c4:	333fffcc 	andi	r12,r6,65535
   116c8:	79df883a 	add	r15,r15,r7
   116cc:	235b883a 	add	r13,r4,r13
   116d0:	9d63383a 	mul	r17,r19,r21
   116d4:	4309883a 	add	r4,r8,r12
   116d8:	7940022e 	bgeu	r15,r5,116e4 <__muldf3+0x43c>
   116dc:	01400074 	movhi	r5,1
   116e0:	8963883a 	add	r17,r17,r5
   116e4:	780a943a 	slli	r5,r15,16
   116e8:	91bfffcc 	andi	r6,r18,65535
   116ec:	70c7883a 	add	r3,r14,r3
   116f0:	298d883a 	add	r6,r5,r6
   116f4:	1a8f803a 	cmpltu	r7,r3,r10
   116f8:	350b883a 	add	r5,r6,r20
   116fc:	20c7883a 	add	r3,r4,r3
   11700:	3955883a 	add	r10,r7,r5
   11704:	1909803a 	cmpltu	r4,r3,r4
   11708:	6a91883a 	add	r8,r13,r10
   1170c:	780cd43a 	srli	r6,r15,16
   11710:	2219883a 	add	r12,r4,r8
   11714:	2d0b803a 	cmpltu	r5,r5,r20
   11718:	51cf803a 	cmpltu	r7,r10,r7
   1171c:	29ceb03a 	or	r7,r5,r7
   11720:	4351803a 	cmpltu	r8,r8,r13
   11724:	610b803a 	cmpltu	r5,r12,r4
   11728:	4148b03a 	or	r4,r8,r5
   1172c:	398f883a 	add	r7,r7,r6
   11730:	3909883a 	add	r4,r7,r4
   11734:	1810927a 	slli	r8,r3,9
   11738:	2449883a 	add	r4,r4,r17
   1173c:	2008927a 	slli	r4,r4,9
   11740:	6022d5fa 	srli	r17,r12,23
   11744:	1806d5fa 	srli	r3,r3,23
   11748:	4252b03a 	or	r9,r8,r9
   1174c:	600a927a 	slli	r5,r12,9
   11750:	4810c03a 	cmpne	r8,r9,zero
   11754:	2462b03a 	or	r17,r4,r17
   11758:	40c6b03a 	or	r3,r8,r3
   1175c:	8900402c 	andhi	r4,r17,256
   11760:	1950b03a 	or	r8,r3,r5
   11764:	20000726 	beq	r4,zero,11784 <__muldf3+0x4dc>
   11768:	4006d07a 	srli	r3,r8,1
   1176c:	880497fa 	slli	r2,r17,31
   11770:	4200004c 	andi	r8,r8,1
   11774:	8822d07a 	srli	r17,r17,1
   11778:	1a10b03a 	or	r8,r3,r8
   1177c:	1210b03a 	or	r8,r2,r8
   11780:	5805883a 	mov	r2,r11
   11784:	1140ffc4 	addi	r5,r2,1023
   11788:	0140440e 	bge	zero,r5,1189c <__muldf3+0x5f4>
   1178c:	40c001cc 	andi	r3,r8,7
   11790:	18000726 	beq	r3,zero,117b0 <__muldf3+0x508>
   11794:	40c003cc 	andi	r3,r8,15
   11798:	01000104 	movi	r4,4
   1179c:	19000426 	beq	r3,r4,117b0 <__muldf3+0x508>
   117a0:	4107883a 	add	r3,r8,r4
   117a4:	1a11803a 	cmpltu	r8,r3,r8
   117a8:	8a23883a 	add	r17,r17,r8
   117ac:	1811883a 	mov	r8,r3
   117b0:	88c0402c 	andhi	r3,r17,256
   117b4:	18000426 	beq	r3,zero,117c8 <__muldf3+0x520>
   117b8:	11410004 	addi	r5,r2,1024
   117bc:	00bfc034 	movhi	r2,65280
   117c0:	10bfffc4 	addi	r2,r2,-1
   117c4:	88a2703a 	and	r17,r17,r2
   117c8:	0081ff84 	movi	r2,2046
   117cc:	117f6416 	blt	r2,r5,11560 <__muldf3+0x2b8>
   117d0:	8828977a 	slli	r20,r17,29
   117d4:	4010d0fa 	srli	r8,r8,3
   117d8:	8822927a 	slli	r17,r17,9
   117dc:	2881ffcc 	andi	r2,r5,2047
   117e0:	a228b03a 	or	r20,r20,r8
   117e4:	880ad33a 	srli	r5,r17,12
   117e8:	b02b883a 	mov	r21,r22
   117ec:	003f0d06 	br	11424 <__muldf3+0x17c>
   117f0:	8080022c 	andhi	r2,r16,8
   117f4:	10000926 	beq	r2,zero,1181c <__muldf3+0x574>
   117f8:	8880022c 	andhi	r2,r17,8
   117fc:	1000071e 	bne	r2,zero,1181c <__muldf3+0x574>
   11800:	00800434 	movhi	r2,16
   11804:	89400234 	orhi	r5,r17,8
   11808:	10bfffc4 	addi	r2,r2,-1
   1180c:	b82b883a 	mov	r21,r23
   11810:	288a703a 	and	r5,r5,r2
   11814:	4029883a 	mov	r20,r8
   11818:	003f6806 	br	115bc <__muldf3+0x314>
   1181c:	00800434 	movhi	r2,16
   11820:	81400234 	orhi	r5,r16,8
   11824:	10bfffc4 	addi	r2,r2,-1
   11828:	288a703a 	and	r5,r5,r2
   1182c:	003f6306 	br	115bc <__muldf3+0x314>
   11830:	147ff604 	addi	r17,r2,-40
   11834:	3462983a 	sll	r17,r6,r17
   11838:	0011883a 	mov	r8,zero
   1183c:	003f4406 	br	11550 <__muldf3+0x2a8>
   11840:	3009883a 	mov	r4,r6
   11844:	d9800215 	stw	r6,8(sp)
   11848:	da400115 	stw	r9,4(sp)
   1184c:	da800015 	stw	r10,0(sp)
   11850:	00124c00 	call	124c0 <__clzsi2>
   11854:	10800804 	addi	r2,r2,32
   11858:	da800017 	ldw	r10,0(sp)
   1185c:	da400117 	ldw	r9,4(sp)
   11860:	d9800217 	ldw	r6,8(sp)
   11864:	003f3006 	br	11528 <__muldf3+0x280>
   11868:	143ff604 	addi	r16,r2,-40
   1186c:	9c20983a 	sll	r16,r19,r16
   11870:	0029883a 	mov	r20,zero
   11874:	003f1606 	br	114d0 <__muldf3+0x228>
   11878:	d9800215 	stw	r6,8(sp)
   1187c:	d9c00015 	stw	r7,0(sp)
   11880:	da400115 	stw	r9,4(sp)
   11884:	00124c00 	call	124c0 <__clzsi2>
   11888:	10800804 	addi	r2,r2,32
   1188c:	da400117 	ldw	r9,4(sp)
   11890:	d9c00017 	ldw	r7,0(sp)
   11894:	d9800217 	ldw	r6,8(sp)
   11898:	003f0306 	br	114a8 <__muldf3+0x200>
   1189c:	00c00044 	movi	r3,1
   118a0:	1947c83a 	sub	r3,r3,r5
   118a4:	00800e04 	movi	r2,56
   118a8:	10feda16 	blt	r2,r3,11414 <__muldf3+0x16c>
   118ac:	008007c4 	movi	r2,31
   118b0:	10c01b16 	blt	r2,r3,11920 <__muldf3+0x678>
   118b4:	00800804 	movi	r2,32
   118b8:	10c5c83a 	sub	r2,r2,r3
   118bc:	888a983a 	sll	r5,r17,r2
   118c0:	40c8d83a 	srl	r4,r8,r3
   118c4:	4084983a 	sll	r2,r8,r2
   118c8:	88e2d83a 	srl	r17,r17,r3
   118cc:	2906b03a 	or	r3,r5,r4
   118d0:	1004c03a 	cmpne	r2,r2,zero
   118d4:	1886b03a 	or	r3,r3,r2
   118d8:	188001cc 	andi	r2,r3,7
   118dc:	10000726 	beq	r2,zero,118fc <__muldf3+0x654>
   118e0:	188003cc 	andi	r2,r3,15
   118e4:	01000104 	movi	r4,4
   118e8:	11000426 	beq	r2,r4,118fc <__muldf3+0x654>
   118ec:	1805883a 	mov	r2,r3
   118f0:	10c00104 	addi	r3,r2,4
   118f4:	1885803a 	cmpltu	r2,r3,r2
   118f8:	88a3883a 	add	r17,r17,r2
   118fc:	8880202c 	andhi	r2,r17,128
   11900:	10001c26 	beq	r2,zero,11974 <__muldf3+0x6cc>
   11904:	b02b883a 	mov	r21,r22
   11908:	00800044 	movi	r2,1
   1190c:	000b883a 	mov	r5,zero
   11910:	0029883a 	mov	r20,zero
   11914:	003ec306 	br	11424 <__muldf3+0x17c>
   11918:	5805883a 	mov	r2,r11
   1191c:	003f9906 	br	11784 <__muldf3+0x4dc>
   11920:	00bff844 	movi	r2,-31
   11924:	1145c83a 	sub	r2,r2,r5
   11928:	8888d83a 	srl	r4,r17,r2
   1192c:	00800804 	movi	r2,32
   11930:	18801a26 	beq	r3,r2,1199c <__muldf3+0x6f4>
   11934:	00801004 	movi	r2,64
   11938:	10c5c83a 	sub	r2,r2,r3
   1193c:	8884983a 	sll	r2,r17,r2
   11940:	1204b03a 	or	r2,r2,r8
   11944:	1004c03a 	cmpne	r2,r2,zero
   11948:	2084b03a 	or	r2,r4,r2
   1194c:	144001cc 	andi	r17,r2,7
   11950:	88000d1e 	bne	r17,zero,11988 <__muldf3+0x6e0>
   11954:	000b883a 	mov	r5,zero
   11958:	1028d0fa 	srli	r20,r2,3
   1195c:	b02b883a 	mov	r21,r22
   11960:	0005883a 	mov	r2,zero
   11964:	a468b03a 	or	r20,r20,r17
   11968:	003eae06 	br	11424 <__muldf3+0x17c>
   1196c:	1007883a 	mov	r3,r2
   11970:	0023883a 	mov	r17,zero
   11974:	880a927a 	slli	r5,r17,9
   11978:	1805883a 	mov	r2,r3
   1197c:	8822977a 	slli	r17,r17,29
   11980:	280ad33a 	srli	r5,r5,12
   11984:	003ff406 	br	11958 <__muldf3+0x6b0>
   11988:	10c003cc 	andi	r3,r2,15
   1198c:	01000104 	movi	r4,4
   11990:	193ff626 	beq	r3,r4,1196c <__muldf3+0x6c4>
   11994:	0023883a 	mov	r17,zero
   11998:	003fd506 	br	118f0 <__muldf3+0x648>
   1199c:	0005883a 	mov	r2,zero
   119a0:	003fe706 	br	11940 <__muldf3+0x698>
   119a4:	00800434 	movhi	r2,16
   119a8:	89400234 	orhi	r5,r17,8
   119ac:	10bfffc4 	addi	r2,r2,-1
   119b0:	b02b883a 	mov	r21,r22
   119b4:	288a703a 	and	r5,r5,r2
   119b8:	4029883a 	mov	r20,r8
   119bc:	003eff06 	br	115bc <__muldf3+0x314>

000119c0 <__subdf3>:
   119c0:	02000434 	movhi	r8,16
   119c4:	423fffc4 	addi	r8,r8,-1
   119c8:	defffb04 	addi	sp,sp,-20
   119cc:	2a14703a 	and	r10,r5,r8
   119d0:	3812d53a 	srli	r9,r7,20
   119d4:	3a10703a 	and	r8,r7,r8
   119d8:	2006d77a 	srli	r3,r4,29
   119dc:	3004d77a 	srli	r2,r6,29
   119e0:	dc000015 	stw	r16,0(sp)
   119e4:	501490fa 	slli	r10,r10,3
   119e8:	2820d53a 	srli	r16,r5,20
   119ec:	401090fa 	slli	r8,r8,3
   119f0:	dc800215 	stw	r18,8(sp)
   119f4:	dc400115 	stw	r17,4(sp)
   119f8:	dfc00415 	stw	ra,16(sp)
   119fc:	202290fa 	slli	r17,r4,3
   11a00:	dcc00315 	stw	r19,12(sp)
   11a04:	4a41ffcc 	andi	r9,r9,2047
   11a08:	0101ffc4 	movi	r4,2047
   11a0c:	2824d7fa 	srli	r18,r5,31
   11a10:	8401ffcc 	andi	r16,r16,2047
   11a14:	50c6b03a 	or	r3,r10,r3
   11a18:	380ed7fa 	srli	r7,r7,31
   11a1c:	408ab03a 	or	r5,r8,r2
   11a20:	300c90fa 	slli	r6,r6,3
   11a24:	49009626 	beq	r9,r4,11c80 <__subdf3+0x2c0>
   11a28:	39c0005c 	xori	r7,r7,1
   11a2c:	8245c83a 	sub	r2,r16,r9
   11a30:	3c807426 	beq	r7,r18,11c04 <__subdf3+0x244>
   11a34:	0080af0e 	bge	zero,r2,11cf4 <__subdf3+0x334>
   11a38:	48002a1e 	bne	r9,zero,11ae4 <__subdf3+0x124>
   11a3c:	2988b03a 	or	r4,r5,r6
   11a40:	20009a1e 	bne	r4,zero,11cac <__subdf3+0x2ec>
   11a44:	888001cc 	andi	r2,r17,7
   11a48:	10000726 	beq	r2,zero,11a68 <__subdf3+0xa8>
   11a4c:	888003cc 	andi	r2,r17,15
   11a50:	01000104 	movi	r4,4
   11a54:	11000426 	beq	r2,r4,11a68 <__subdf3+0xa8>
   11a58:	890b883a 	add	r5,r17,r4
   11a5c:	2c63803a 	cmpltu	r17,r5,r17
   11a60:	1c47883a 	add	r3,r3,r17
   11a64:	2823883a 	mov	r17,r5
   11a68:	1880202c 	andhi	r2,r3,128
   11a6c:	10005926 	beq	r2,zero,11bd4 <__subdf3+0x214>
   11a70:	84000044 	addi	r16,r16,1
   11a74:	0081ffc4 	movi	r2,2047
   11a78:	8080be26 	beq	r16,r2,11d74 <__subdf3+0x3b4>
   11a7c:	017fe034 	movhi	r5,65408
   11a80:	297fffc4 	addi	r5,r5,-1
   11a84:	1946703a 	and	r3,r3,r5
   11a88:	1804977a 	slli	r2,r3,29
   11a8c:	1806927a 	slli	r3,r3,9
   11a90:	8822d0fa 	srli	r17,r17,3
   11a94:	8401ffcc 	andi	r16,r16,2047
   11a98:	180ad33a 	srli	r5,r3,12
   11a9c:	9100004c 	andi	r4,r18,1
   11aa0:	1444b03a 	or	r2,r2,r17
   11aa4:	80c1ffcc 	andi	r3,r16,2047
   11aa8:	1820953a 	slli	r16,r3,20
   11aac:	20c03fcc 	andi	r3,r4,255
   11ab0:	180897fa 	slli	r4,r3,31
   11ab4:	00c00434 	movhi	r3,16
   11ab8:	18ffffc4 	addi	r3,r3,-1
   11abc:	28c6703a 	and	r3,r5,r3
   11ac0:	1c06b03a 	or	r3,r3,r16
   11ac4:	1906b03a 	or	r3,r3,r4
   11ac8:	dfc00417 	ldw	ra,16(sp)
   11acc:	dcc00317 	ldw	r19,12(sp)
   11ad0:	dc800217 	ldw	r18,8(sp)
   11ad4:	dc400117 	ldw	r17,4(sp)
   11ad8:	dc000017 	ldw	r16,0(sp)
   11adc:	dec00504 	addi	sp,sp,20
   11ae0:	f800283a 	ret
   11ae4:	0101ffc4 	movi	r4,2047
   11ae8:	813fd626 	beq	r16,r4,11a44 <__subdf3+0x84>
   11aec:	29402034 	orhi	r5,r5,128
   11af0:	01000e04 	movi	r4,56
   11af4:	2080a316 	blt	r4,r2,11d84 <__subdf3+0x3c4>
   11af8:	010007c4 	movi	r4,31
   11afc:	2080c616 	blt	r4,r2,11e18 <__subdf3+0x458>
   11b00:	01000804 	movi	r4,32
   11b04:	2089c83a 	sub	r4,r4,r2
   11b08:	2910983a 	sll	r8,r5,r4
   11b0c:	308ed83a 	srl	r7,r6,r2
   11b10:	3108983a 	sll	r4,r6,r4
   11b14:	2884d83a 	srl	r2,r5,r2
   11b18:	41ccb03a 	or	r6,r8,r7
   11b1c:	2008c03a 	cmpne	r4,r4,zero
   11b20:	310cb03a 	or	r6,r6,r4
   11b24:	898dc83a 	sub	r6,r17,r6
   11b28:	89a3803a 	cmpltu	r17,r17,r6
   11b2c:	1887c83a 	sub	r3,r3,r2
   11b30:	1c47c83a 	sub	r3,r3,r17
   11b34:	3023883a 	mov	r17,r6
   11b38:	1880202c 	andhi	r2,r3,128
   11b3c:	10002326 	beq	r2,zero,11bcc <__subdf3+0x20c>
   11b40:	04c02034 	movhi	r19,128
   11b44:	9cffffc4 	addi	r19,r19,-1
   11b48:	1ce6703a 	and	r19,r3,r19
   11b4c:	98007a26 	beq	r19,zero,11d38 <__subdf3+0x378>
   11b50:	9809883a 	mov	r4,r19
   11b54:	00124c00 	call	124c0 <__clzsi2>
   11b58:	113ffe04 	addi	r4,r2,-8
   11b5c:	00c007c4 	movi	r3,31
   11b60:	19007b16 	blt	r3,r4,11d50 <__subdf3+0x390>
   11b64:	00800804 	movi	r2,32
   11b68:	1105c83a 	sub	r2,r2,r4
   11b6c:	8884d83a 	srl	r2,r17,r2
   11b70:	9906983a 	sll	r3,r19,r4
   11b74:	8922983a 	sll	r17,r17,r4
   11b78:	10c4b03a 	or	r2,r2,r3
   11b7c:	24007816 	blt	r4,r16,11d60 <__subdf3+0x3a0>
   11b80:	2421c83a 	sub	r16,r4,r16
   11b84:	80c00044 	addi	r3,r16,1
   11b88:	010007c4 	movi	r4,31
   11b8c:	20c09516 	blt	r4,r3,11de4 <__subdf3+0x424>
   11b90:	01400804 	movi	r5,32
   11b94:	28cbc83a 	sub	r5,r5,r3
   11b98:	88c8d83a 	srl	r4,r17,r3
   11b9c:	8962983a 	sll	r17,r17,r5
   11ba0:	114a983a 	sll	r5,r2,r5
   11ba4:	10c6d83a 	srl	r3,r2,r3
   11ba8:	8804c03a 	cmpne	r2,r17,zero
   11bac:	290ab03a 	or	r5,r5,r4
   11bb0:	28a2b03a 	or	r17,r5,r2
   11bb4:	0021883a 	mov	r16,zero
   11bb8:	003fa206 	br	11a44 <__subdf3+0x84>
   11bbc:	2090b03a 	or	r8,r4,r2
   11bc0:	40018e26 	beq	r8,zero,121fc <__subdf3+0x83c>
   11bc4:	1007883a 	mov	r3,r2
   11bc8:	2023883a 	mov	r17,r4
   11bcc:	888001cc 	andi	r2,r17,7
   11bd0:	103f9e1e 	bne	r2,zero,11a4c <__subdf3+0x8c>
   11bd4:	1804977a 	slli	r2,r3,29
   11bd8:	8822d0fa 	srli	r17,r17,3
   11bdc:	1810d0fa 	srli	r8,r3,3
   11be0:	9100004c 	andi	r4,r18,1
   11be4:	1444b03a 	or	r2,r2,r17
   11be8:	00c1ffc4 	movi	r3,2047
   11bec:	80c02826 	beq	r16,r3,11c90 <__subdf3+0x2d0>
   11bf0:	01400434 	movhi	r5,16
   11bf4:	297fffc4 	addi	r5,r5,-1
   11bf8:	80e0703a 	and	r16,r16,r3
   11bfc:	414a703a 	and	r5,r8,r5
   11c00:	003fa806 	br	11aa4 <__subdf3+0xe4>
   11c04:	0080630e 	bge	zero,r2,11d94 <__subdf3+0x3d4>
   11c08:	48003026 	beq	r9,zero,11ccc <__subdf3+0x30c>
   11c0c:	0101ffc4 	movi	r4,2047
   11c10:	813f8c26 	beq	r16,r4,11a44 <__subdf3+0x84>
   11c14:	29402034 	orhi	r5,r5,128
   11c18:	01000e04 	movi	r4,56
   11c1c:	2080a90e 	bge	r4,r2,11ec4 <__subdf3+0x504>
   11c20:	298cb03a 	or	r6,r5,r6
   11c24:	3012c03a 	cmpne	r9,r6,zero
   11c28:	0005883a 	mov	r2,zero
   11c2c:	4c53883a 	add	r9,r9,r17
   11c30:	4c63803a 	cmpltu	r17,r9,r17
   11c34:	10c7883a 	add	r3,r2,r3
   11c38:	88c7883a 	add	r3,r17,r3
   11c3c:	4823883a 	mov	r17,r9
   11c40:	1880202c 	andhi	r2,r3,128
   11c44:	1000d026 	beq	r2,zero,11f88 <__subdf3+0x5c8>
   11c48:	84000044 	addi	r16,r16,1
   11c4c:	0081ffc4 	movi	r2,2047
   11c50:	8080fe26 	beq	r16,r2,1204c <__subdf3+0x68c>
   11c54:	00bfe034 	movhi	r2,65408
   11c58:	10bfffc4 	addi	r2,r2,-1
   11c5c:	1886703a 	and	r3,r3,r2
   11c60:	880ad07a 	srli	r5,r17,1
   11c64:	180497fa 	slli	r2,r3,31
   11c68:	8900004c 	andi	r4,r17,1
   11c6c:	2922b03a 	or	r17,r5,r4
   11c70:	1806d07a 	srli	r3,r3,1
   11c74:	1462b03a 	or	r17,r2,r17
   11c78:	3825883a 	mov	r18,r7
   11c7c:	003f7106 	br	11a44 <__subdf3+0x84>
   11c80:	2984b03a 	or	r2,r5,r6
   11c84:	103f6826 	beq	r2,zero,11a28 <__subdf3+0x68>
   11c88:	39c03fcc 	andi	r7,r7,255
   11c8c:	003f6706 	br	11a2c <__subdf3+0x6c>
   11c90:	4086b03a 	or	r3,r8,r2
   11c94:	18015226 	beq	r3,zero,121e0 <__subdf3+0x820>
   11c98:	00c00434 	movhi	r3,16
   11c9c:	41400234 	orhi	r5,r8,8
   11ca0:	18ffffc4 	addi	r3,r3,-1
   11ca4:	28ca703a 	and	r5,r5,r3
   11ca8:	003f7e06 	br	11aa4 <__subdf3+0xe4>
   11cac:	10bfffc4 	addi	r2,r2,-1
   11cb0:	1000491e 	bne	r2,zero,11dd8 <__subdf3+0x418>
   11cb4:	898fc83a 	sub	r7,r17,r6
   11cb8:	89e3803a 	cmpltu	r17,r17,r7
   11cbc:	1947c83a 	sub	r3,r3,r5
   11cc0:	1c47c83a 	sub	r3,r3,r17
   11cc4:	3823883a 	mov	r17,r7
   11cc8:	003f9b06 	br	11b38 <__subdf3+0x178>
   11ccc:	2988b03a 	or	r4,r5,r6
   11cd0:	203f5c26 	beq	r4,zero,11a44 <__subdf3+0x84>
   11cd4:	10bfffc4 	addi	r2,r2,-1
   11cd8:	1000931e 	bne	r2,zero,11f28 <__subdf3+0x568>
   11cdc:	898d883a 	add	r6,r17,r6
   11ce0:	3463803a 	cmpltu	r17,r6,r17
   11ce4:	1947883a 	add	r3,r3,r5
   11ce8:	88c7883a 	add	r3,r17,r3
   11cec:	3023883a 	mov	r17,r6
   11cf0:	003fd306 	br	11c40 <__subdf3+0x280>
   11cf4:	1000541e 	bne	r2,zero,11e48 <__subdf3+0x488>
   11cf8:	80800044 	addi	r2,r16,1
   11cfc:	1081ffcc 	andi	r2,r2,2047
   11d00:	01000044 	movi	r4,1
   11d04:	2080a20e 	bge	r4,r2,11f90 <__subdf3+0x5d0>
   11d08:	8989c83a 	sub	r4,r17,r6
   11d0c:	8905803a 	cmpltu	r2,r17,r4
   11d10:	1967c83a 	sub	r19,r3,r5
   11d14:	98a7c83a 	sub	r19,r19,r2
   11d18:	9880202c 	andhi	r2,r19,128
   11d1c:	10006326 	beq	r2,zero,11eac <__subdf3+0x4ec>
   11d20:	3463c83a 	sub	r17,r6,r17
   11d24:	28c7c83a 	sub	r3,r5,r3
   11d28:	344d803a 	cmpltu	r6,r6,r17
   11d2c:	19a7c83a 	sub	r19,r3,r6
   11d30:	3825883a 	mov	r18,r7
   11d34:	983f861e 	bne	r19,zero,11b50 <__subdf3+0x190>
   11d38:	8809883a 	mov	r4,r17
   11d3c:	00124c00 	call	124c0 <__clzsi2>
   11d40:	10800804 	addi	r2,r2,32
   11d44:	113ffe04 	addi	r4,r2,-8
   11d48:	00c007c4 	movi	r3,31
   11d4c:	193f850e 	bge	r3,r4,11b64 <__subdf3+0x1a4>
   11d50:	10bff604 	addi	r2,r2,-40
   11d54:	8884983a 	sll	r2,r17,r2
   11d58:	0023883a 	mov	r17,zero
   11d5c:	243f880e 	bge	r4,r16,11b80 <__subdf3+0x1c0>
   11d60:	00ffe034 	movhi	r3,65408
   11d64:	18ffffc4 	addi	r3,r3,-1
   11d68:	8121c83a 	sub	r16,r16,r4
   11d6c:	10c6703a 	and	r3,r2,r3
   11d70:	003f3406 	br	11a44 <__subdf3+0x84>
   11d74:	9100004c 	andi	r4,r18,1
   11d78:	000b883a 	mov	r5,zero
   11d7c:	0005883a 	mov	r2,zero
   11d80:	003f4806 	br	11aa4 <__subdf3+0xe4>
   11d84:	298cb03a 	or	r6,r5,r6
   11d88:	300cc03a 	cmpne	r6,r6,zero
   11d8c:	0005883a 	mov	r2,zero
   11d90:	003f6406 	br	11b24 <__subdf3+0x164>
   11d94:	10009a1e 	bne	r2,zero,12000 <__subdf3+0x640>
   11d98:	82400044 	addi	r9,r16,1
   11d9c:	4881ffcc 	andi	r2,r9,2047
   11da0:	02800044 	movi	r10,1
   11da4:	5080670e 	bge	r10,r2,11f44 <__subdf3+0x584>
   11da8:	0081ffc4 	movi	r2,2047
   11dac:	4880af26 	beq	r9,r2,1206c <__subdf3+0x6ac>
   11db0:	898d883a 	add	r6,r17,r6
   11db4:	1945883a 	add	r2,r3,r5
   11db8:	3447803a 	cmpltu	r3,r6,r17
   11dbc:	1887883a 	add	r3,r3,r2
   11dc0:	182297fa 	slli	r17,r3,31
   11dc4:	300cd07a 	srli	r6,r6,1
   11dc8:	1806d07a 	srli	r3,r3,1
   11dcc:	4821883a 	mov	r16,r9
   11dd0:	89a2b03a 	or	r17,r17,r6
   11dd4:	003f1b06 	br	11a44 <__subdf3+0x84>
   11dd8:	0101ffc4 	movi	r4,2047
   11ddc:	813f441e 	bne	r16,r4,11af0 <__subdf3+0x130>
   11de0:	003f1806 	br	11a44 <__subdf3+0x84>
   11de4:	843ff844 	addi	r16,r16,-31
   11de8:	01400804 	movi	r5,32
   11dec:	1408d83a 	srl	r4,r2,r16
   11df0:	19405026 	beq	r3,r5,11f34 <__subdf3+0x574>
   11df4:	01401004 	movi	r5,64
   11df8:	28c7c83a 	sub	r3,r5,r3
   11dfc:	10c4983a 	sll	r2,r2,r3
   11e00:	88a2b03a 	or	r17,r17,r2
   11e04:	8822c03a 	cmpne	r17,r17,zero
   11e08:	2462b03a 	or	r17,r4,r17
   11e0c:	0007883a 	mov	r3,zero
   11e10:	0021883a 	mov	r16,zero
   11e14:	003f6d06 	br	11bcc <__subdf3+0x20c>
   11e18:	11fff804 	addi	r7,r2,-32
   11e1c:	01000804 	movi	r4,32
   11e20:	29ced83a 	srl	r7,r5,r7
   11e24:	11004526 	beq	r2,r4,11f3c <__subdf3+0x57c>
   11e28:	01001004 	movi	r4,64
   11e2c:	2089c83a 	sub	r4,r4,r2
   11e30:	2904983a 	sll	r2,r5,r4
   11e34:	118cb03a 	or	r6,r2,r6
   11e38:	300cc03a 	cmpne	r6,r6,zero
   11e3c:	398cb03a 	or	r6,r7,r6
   11e40:	0005883a 	mov	r2,zero
   11e44:	003f3706 	br	11b24 <__subdf3+0x164>
   11e48:	80002a26 	beq	r16,zero,11ef4 <__subdf3+0x534>
   11e4c:	0101ffc4 	movi	r4,2047
   11e50:	49006626 	beq	r9,r4,11fec <__subdf3+0x62c>
   11e54:	0085c83a 	sub	r2,zero,r2
   11e58:	18c02034 	orhi	r3,r3,128
   11e5c:	01000e04 	movi	r4,56
   11e60:	20807e16 	blt	r4,r2,1205c <__subdf3+0x69c>
   11e64:	010007c4 	movi	r4,31
   11e68:	2080e716 	blt	r4,r2,12208 <__subdf3+0x848>
   11e6c:	01000804 	movi	r4,32
   11e70:	2089c83a 	sub	r4,r4,r2
   11e74:	1914983a 	sll	r10,r3,r4
   11e78:	8890d83a 	srl	r8,r17,r2
   11e7c:	8908983a 	sll	r4,r17,r4
   11e80:	1884d83a 	srl	r2,r3,r2
   11e84:	5222b03a 	or	r17,r10,r8
   11e88:	2006c03a 	cmpne	r3,r4,zero
   11e8c:	88e2b03a 	or	r17,r17,r3
   11e90:	3463c83a 	sub	r17,r6,r17
   11e94:	2885c83a 	sub	r2,r5,r2
   11e98:	344d803a 	cmpltu	r6,r6,r17
   11e9c:	1187c83a 	sub	r3,r2,r6
   11ea0:	4821883a 	mov	r16,r9
   11ea4:	3825883a 	mov	r18,r7
   11ea8:	003f2306 	br	11b38 <__subdf3+0x178>
   11eac:	24d0b03a 	or	r8,r4,r19
   11eb0:	40001b1e 	bne	r8,zero,11f20 <__subdf3+0x560>
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	0009883a 	mov	r4,zero
   11ebc:	0021883a 	mov	r16,zero
   11ec0:	003f4906 	br	11be8 <__subdf3+0x228>
   11ec4:	010007c4 	movi	r4,31
   11ec8:	20803a16 	blt	r4,r2,11fb4 <__subdf3+0x5f4>
   11ecc:	01000804 	movi	r4,32
   11ed0:	2089c83a 	sub	r4,r4,r2
   11ed4:	2912983a 	sll	r9,r5,r4
   11ed8:	3090d83a 	srl	r8,r6,r2
   11edc:	3108983a 	sll	r4,r6,r4
   11ee0:	2884d83a 	srl	r2,r5,r2
   11ee4:	4a12b03a 	or	r9,r9,r8
   11ee8:	2008c03a 	cmpne	r4,r4,zero
   11eec:	4912b03a 	or	r9,r9,r4
   11ef0:	003f4e06 	br	11c2c <__subdf3+0x26c>
   11ef4:	1c48b03a 	or	r4,r3,r17
   11ef8:	20003c26 	beq	r4,zero,11fec <__subdf3+0x62c>
   11efc:	0084303a 	nor	r2,zero,r2
   11f00:	1000381e 	bne	r2,zero,11fe4 <__subdf3+0x624>
   11f04:	3463c83a 	sub	r17,r6,r17
   11f08:	28c5c83a 	sub	r2,r5,r3
   11f0c:	344d803a 	cmpltu	r6,r6,r17
   11f10:	1187c83a 	sub	r3,r2,r6
   11f14:	4821883a 	mov	r16,r9
   11f18:	3825883a 	mov	r18,r7
   11f1c:	003f0606 	br	11b38 <__subdf3+0x178>
   11f20:	2023883a 	mov	r17,r4
   11f24:	003f0906 	br	11b4c <__subdf3+0x18c>
   11f28:	0101ffc4 	movi	r4,2047
   11f2c:	813f3a1e 	bne	r16,r4,11c18 <__subdf3+0x258>
   11f30:	003ec406 	br	11a44 <__subdf3+0x84>
   11f34:	0005883a 	mov	r2,zero
   11f38:	003fb106 	br	11e00 <__subdf3+0x440>
   11f3c:	0005883a 	mov	r2,zero
   11f40:	003fbc06 	br	11e34 <__subdf3+0x474>
   11f44:	1c44b03a 	or	r2,r3,r17
   11f48:	80008e1e 	bne	r16,zero,12184 <__subdf3+0x7c4>
   11f4c:	1000c826 	beq	r2,zero,12270 <__subdf3+0x8b0>
   11f50:	2984b03a 	or	r2,r5,r6
   11f54:	103ebb26 	beq	r2,zero,11a44 <__subdf3+0x84>
   11f58:	8989883a 	add	r4,r17,r6
   11f5c:	1945883a 	add	r2,r3,r5
   11f60:	2447803a 	cmpltu	r3,r4,r17
   11f64:	1887883a 	add	r3,r3,r2
   11f68:	1880202c 	andhi	r2,r3,128
   11f6c:	2023883a 	mov	r17,r4
   11f70:	103f1626 	beq	r2,zero,11bcc <__subdf3+0x20c>
   11f74:	00bfe034 	movhi	r2,65408
   11f78:	10bfffc4 	addi	r2,r2,-1
   11f7c:	5021883a 	mov	r16,r10
   11f80:	1886703a 	and	r3,r3,r2
   11f84:	003eaf06 	br	11a44 <__subdf3+0x84>
   11f88:	3825883a 	mov	r18,r7
   11f8c:	003f0f06 	br	11bcc <__subdf3+0x20c>
   11f90:	1c44b03a 	or	r2,r3,r17
   11f94:	8000251e 	bne	r16,zero,1202c <__subdf3+0x66c>
   11f98:	1000661e 	bne	r2,zero,12134 <__subdf3+0x774>
   11f9c:	2990b03a 	or	r8,r5,r6
   11fa0:	40009626 	beq	r8,zero,121fc <__subdf3+0x83c>
   11fa4:	2807883a 	mov	r3,r5
   11fa8:	3023883a 	mov	r17,r6
   11fac:	3825883a 	mov	r18,r7
   11fb0:	003ea406 	br	11a44 <__subdf3+0x84>
   11fb4:	127ff804 	addi	r9,r2,-32
   11fb8:	01000804 	movi	r4,32
   11fbc:	2a52d83a 	srl	r9,r5,r9
   11fc0:	11008c26 	beq	r2,r4,121f4 <__subdf3+0x834>
   11fc4:	01001004 	movi	r4,64
   11fc8:	2085c83a 	sub	r2,r4,r2
   11fcc:	2884983a 	sll	r2,r5,r2
   11fd0:	118cb03a 	or	r6,r2,r6
   11fd4:	300cc03a 	cmpne	r6,r6,zero
   11fd8:	4992b03a 	or	r9,r9,r6
   11fdc:	0005883a 	mov	r2,zero
   11fe0:	003f1206 	br	11c2c <__subdf3+0x26c>
   11fe4:	0101ffc4 	movi	r4,2047
   11fe8:	493f9c1e 	bne	r9,r4,11e5c <__subdf3+0x49c>
   11fec:	2807883a 	mov	r3,r5
   11ff0:	3023883a 	mov	r17,r6
   11ff4:	4821883a 	mov	r16,r9
   11ff8:	3825883a 	mov	r18,r7
   11ffc:	003e9106 	br	11a44 <__subdf3+0x84>
   12000:	80001f1e 	bne	r16,zero,12080 <__subdf3+0x6c0>
   12004:	1c48b03a 	or	r4,r3,r17
   12008:	20005a26 	beq	r4,zero,12174 <__subdf3+0x7b4>
   1200c:	0084303a 	nor	r2,zero,r2
   12010:	1000561e 	bne	r2,zero,1216c <__subdf3+0x7ac>
   12014:	89a3883a 	add	r17,r17,r6
   12018:	1945883a 	add	r2,r3,r5
   1201c:	898d803a 	cmpltu	r6,r17,r6
   12020:	3087883a 	add	r3,r6,r2
   12024:	4821883a 	mov	r16,r9
   12028:	003f0506 	br	11c40 <__subdf3+0x280>
   1202c:	10002b1e 	bne	r2,zero,120dc <__subdf3+0x71c>
   12030:	2984b03a 	or	r2,r5,r6
   12034:	10008026 	beq	r2,zero,12238 <__subdf3+0x878>
   12038:	2807883a 	mov	r3,r5
   1203c:	3023883a 	mov	r17,r6
   12040:	3825883a 	mov	r18,r7
   12044:	0401ffc4 	movi	r16,2047
   12048:	003e7e06 	br	11a44 <__subdf3+0x84>
   1204c:	3809883a 	mov	r4,r7
   12050:	0011883a 	mov	r8,zero
   12054:	0005883a 	mov	r2,zero
   12058:	003ee306 	br	11be8 <__subdf3+0x228>
   1205c:	1c62b03a 	or	r17,r3,r17
   12060:	8822c03a 	cmpne	r17,r17,zero
   12064:	0005883a 	mov	r2,zero
   12068:	003f8906 	br	11e90 <__subdf3+0x4d0>
   1206c:	3809883a 	mov	r4,r7
   12070:	4821883a 	mov	r16,r9
   12074:	0011883a 	mov	r8,zero
   12078:	0005883a 	mov	r2,zero
   1207c:	003eda06 	br	11be8 <__subdf3+0x228>
   12080:	0101ffc4 	movi	r4,2047
   12084:	49003b26 	beq	r9,r4,12174 <__subdf3+0x7b4>
   12088:	0085c83a 	sub	r2,zero,r2
   1208c:	18c02034 	orhi	r3,r3,128
   12090:	01000e04 	movi	r4,56
   12094:	20806e16 	blt	r4,r2,12250 <__subdf3+0x890>
   12098:	010007c4 	movi	r4,31
   1209c:	20807716 	blt	r4,r2,1227c <__subdf3+0x8bc>
   120a0:	01000804 	movi	r4,32
   120a4:	2089c83a 	sub	r4,r4,r2
   120a8:	1914983a 	sll	r10,r3,r4
   120ac:	8890d83a 	srl	r8,r17,r2
   120b0:	8908983a 	sll	r4,r17,r4
   120b4:	1884d83a 	srl	r2,r3,r2
   120b8:	5222b03a 	or	r17,r10,r8
   120bc:	2006c03a 	cmpne	r3,r4,zero
   120c0:	88e2b03a 	or	r17,r17,r3
   120c4:	89a3883a 	add	r17,r17,r6
   120c8:	1145883a 	add	r2,r2,r5
   120cc:	898d803a 	cmpltu	r6,r17,r6
   120d0:	3087883a 	add	r3,r6,r2
   120d4:	4821883a 	mov	r16,r9
   120d8:	003ed906 	br	11c40 <__subdf3+0x280>
   120dc:	2984b03a 	or	r2,r5,r6
   120e0:	10004226 	beq	r2,zero,121ec <__subdf3+0x82c>
   120e4:	1808d0fa 	srli	r4,r3,3
   120e8:	8822d0fa 	srli	r17,r17,3
   120ec:	1806977a 	slli	r3,r3,29
   120f0:	2080022c 	andhi	r2,r4,8
   120f4:	1c62b03a 	or	r17,r3,r17
   120f8:	10000826 	beq	r2,zero,1211c <__subdf3+0x75c>
   120fc:	2812d0fa 	srli	r9,r5,3
   12100:	4880022c 	andhi	r2,r9,8
   12104:	1000051e 	bne	r2,zero,1211c <__subdf3+0x75c>
   12108:	300cd0fa 	srli	r6,r6,3
   1210c:	2804977a 	slli	r2,r5,29
   12110:	4809883a 	mov	r4,r9
   12114:	3825883a 	mov	r18,r7
   12118:	11a2b03a 	or	r17,r2,r6
   1211c:	8806d77a 	srli	r3,r17,29
   12120:	200890fa 	slli	r4,r4,3
   12124:	882290fa 	slli	r17,r17,3
   12128:	0401ffc4 	movi	r16,2047
   1212c:	1906b03a 	or	r3,r3,r4
   12130:	003e4406 	br	11a44 <__subdf3+0x84>
   12134:	2984b03a 	or	r2,r5,r6
   12138:	103e4226 	beq	r2,zero,11a44 <__subdf3+0x84>
   1213c:	8989c83a 	sub	r4,r17,r6
   12140:	8911803a 	cmpltu	r8,r17,r4
   12144:	1945c83a 	sub	r2,r3,r5
   12148:	1205c83a 	sub	r2,r2,r8
   1214c:	1200202c 	andhi	r8,r2,128
   12150:	403e9a26 	beq	r8,zero,11bbc <__subdf3+0x1fc>
   12154:	3463c83a 	sub	r17,r6,r17
   12158:	28c5c83a 	sub	r2,r5,r3
   1215c:	344d803a 	cmpltu	r6,r6,r17
   12160:	1187c83a 	sub	r3,r2,r6
   12164:	3825883a 	mov	r18,r7
   12168:	003e3606 	br	11a44 <__subdf3+0x84>
   1216c:	0101ffc4 	movi	r4,2047
   12170:	493fc71e 	bne	r9,r4,12090 <__subdf3+0x6d0>
   12174:	2807883a 	mov	r3,r5
   12178:	3023883a 	mov	r17,r6
   1217c:	4821883a 	mov	r16,r9
   12180:	003e3006 	br	11a44 <__subdf3+0x84>
   12184:	10003626 	beq	r2,zero,12260 <__subdf3+0x8a0>
   12188:	2984b03a 	or	r2,r5,r6
   1218c:	10001726 	beq	r2,zero,121ec <__subdf3+0x82c>
   12190:	1808d0fa 	srli	r4,r3,3
   12194:	8822d0fa 	srli	r17,r17,3
   12198:	1806977a 	slli	r3,r3,29
   1219c:	2080022c 	andhi	r2,r4,8
   121a0:	1c62b03a 	or	r17,r3,r17
   121a4:	10000726 	beq	r2,zero,121c4 <__subdf3+0x804>
   121a8:	2812d0fa 	srli	r9,r5,3
   121ac:	4880022c 	andhi	r2,r9,8
   121b0:	1000041e 	bne	r2,zero,121c4 <__subdf3+0x804>
   121b4:	300cd0fa 	srli	r6,r6,3
   121b8:	2804977a 	slli	r2,r5,29
   121bc:	4809883a 	mov	r4,r9
   121c0:	11a2b03a 	or	r17,r2,r6
   121c4:	8806d77a 	srli	r3,r17,29
   121c8:	200890fa 	slli	r4,r4,3
   121cc:	882290fa 	slli	r17,r17,3
   121d0:	3825883a 	mov	r18,r7
   121d4:	1906b03a 	or	r3,r3,r4
   121d8:	0401ffc4 	movi	r16,2047
   121dc:	003e1906 	br	11a44 <__subdf3+0x84>
   121e0:	000b883a 	mov	r5,zero
   121e4:	0005883a 	mov	r2,zero
   121e8:	003e2e06 	br	11aa4 <__subdf3+0xe4>
   121ec:	0401ffc4 	movi	r16,2047
   121f0:	003e1406 	br	11a44 <__subdf3+0x84>
   121f4:	0005883a 	mov	r2,zero
   121f8:	003f7506 	br	11fd0 <__subdf3+0x610>
   121fc:	0005883a 	mov	r2,zero
   12200:	0009883a 	mov	r4,zero
   12204:	003e7806 	br	11be8 <__subdf3+0x228>
   12208:	123ff804 	addi	r8,r2,-32
   1220c:	01000804 	movi	r4,32
   12210:	1a10d83a 	srl	r8,r3,r8
   12214:	11002526 	beq	r2,r4,122ac <__subdf3+0x8ec>
   12218:	01001004 	movi	r4,64
   1221c:	2085c83a 	sub	r2,r4,r2
   12220:	1884983a 	sll	r2,r3,r2
   12224:	1444b03a 	or	r2,r2,r17
   12228:	1004c03a 	cmpne	r2,r2,zero
   1222c:	40a2b03a 	or	r17,r8,r2
   12230:	0005883a 	mov	r2,zero
   12234:	003f1606 	br	11e90 <__subdf3+0x4d0>
   12238:	02000434 	movhi	r8,16
   1223c:	0009883a 	mov	r4,zero
   12240:	423fffc4 	addi	r8,r8,-1
   12244:	00bfffc4 	movi	r2,-1
   12248:	0401ffc4 	movi	r16,2047
   1224c:	003e6606 	br	11be8 <__subdf3+0x228>
   12250:	1c62b03a 	or	r17,r3,r17
   12254:	8822c03a 	cmpne	r17,r17,zero
   12258:	0005883a 	mov	r2,zero
   1225c:	003f9906 	br	120c4 <__subdf3+0x704>
   12260:	2807883a 	mov	r3,r5
   12264:	3023883a 	mov	r17,r6
   12268:	0401ffc4 	movi	r16,2047
   1226c:	003df506 	br	11a44 <__subdf3+0x84>
   12270:	2807883a 	mov	r3,r5
   12274:	3023883a 	mov	r17,r6
   12278:	003df206 	br	11a44 <__subdf3+0x84>
   1227c:	123ff804 	addi	r8,r2,-32
   12280:	01000804 	movi	r4,32
   12284:	1a10d83a 	srl	r8,r3,r8
   12288:	11000a26 	beq	r2,r4,122b4 <__subdf3+0x8f4>
   1228c:	01001004 	movi	r4,64
   12290:	2085c83a 	sub	r2,r4,r2
   12294:	1884983a 	sll	r2,r3,r2
   12298:	1444b03a 	or	r2,r2,r17
   1229c:	1004c03a 	cmpne	r2,r2,zero
   122a0:	40a2b03a 	or	r17,r8,r2
   122a4:	0005883a 	mov	r2,zero
   122a8:	003f8606 	br	120c4 <__subdf3+0x704>
   122ac:	0005883a 	mov	r2,zero
   122b0:	003fdc06 	br	12224 <__subdf3+0x864>
   122b4:	0005883a 	mov	r2,zero
   122b8:	003ff706 	br	12298 <__subdf3+0x8d8>

000122bc <__fixdfsi>:
   122bc:	280cd53a 	srli	r6,r5,20
   122c0:	00c00434 	movhi	r3,16
   122c4:	18ffffc4 	addi	r3,r3,-1
   122c8:	3181ffcc 	andi	r6,r6,2047
   122cc:	01c0ff84 	movi	r7,1022
   122d0:	28c6703a 	and	r3,r5,r3
   122d4:	280ad7fa 	srli	r5,r5,31
   122d8:	3980120e 	bge	r7,r6,12324 <__fixdfsi+0x68>
   122dc:	00810744 	movi	r2,1053
   122e0:	11800c16 	blt	r2,r6,12314 <__fixdfsi+0x58>
   122e4:	00810cc4 	movi	r2,1075
   122e8:	1185c83a 	sub	r2,r2,r6
   122ec:	01c007c4 	movi	r7,31
   122f0:	18c00434 	orhi	r3,r3,16
   122f4:	38800d16 	blt	r7,r2,1232c <__fixdfsi+0x70>
   122f8:	31befb44 	addi	r6,r6,-1043
   122fc:	2084d83a 	srl	r2,r4,r2
   12300:	1986983a 	sll	r3,r3,r6
   12304:	1884b03a 	or	r2,r3,r2
   12308:	28000726 	beq	r5,zero,12328 <__fixdfsi+0x6c>
   1230c:	0085c83a 	sub	r2,zero,r2
   12310:	f800283a 	ret
   12314:	00a00034 	movhi	r2,32768
   12318:	10bfffc4 	addi	r2,r2,-1
   1231c:	2885883a 	add	r2,r5,r2
   12320:	f800283a 	ret
   12324:	0005883a 	mov	r2,zero
   12328:	f800283a 	ret
   1232c:	008104c4 	movi	r2,1043
   12330:	1185c83a 	sub	r2,r2,r6
   12334:	1884d83a 	srl	r2,r3,r2
   12338:	003ff306 	br	12308 <__fixdfsi+0x4c>

0001233c <__floatsidf>:
   1233c:	defffd04 	addi	sp,sp,-12
   12340:	dfc00215 	stw	ra,8(sp)
   12344:	dc400115 	stw	r17,4(sp)
   12348:	dc000015 	stw	r16,0(sp)
   1234c:	20002b26 	beq	r4,zero,123fc <__floatsidf+0xc0>
   12350:	2023883a 	mov	r17,r4
   12354:	2020d7fa 	srli	r16,r4,31
   12358:	20002d16 	blt	r4,zero,12410 <__floatsidf+0xd4>
   1235c:	8809883a 	mov	r4,r17
   12360:	00124c00 	call	124c0 <__clzsi2>
   12364:	01410784 	movi	r5,1054
   12368:	288bc83a 	sub	r5,r5,r2
   1236c:	01010cc4 	movi	r4,1075
   12370:	2149c83a 	sub	r4,r4,r5
   12374:	00c007c4 	movi	r3,31
   12378:	1900160e 	bge	r3,r4,123d4 <__floatsidf+0x98>
   1237c:	00c104c4 	movi	r3,1043
   12380:	1947c83a 	sub	r3,r3,r5
   12384:	88c6983a 	sll	r3,r17,r3
   12388:	00800434 	movhi	r2,16
   1238c:	10bfffc4 	addi	r2,r2,-1
   12390:	1886703a 	and	r3,r3,r2
   12394:	2941ffcc 	andi	r5,r5,2047
   12398:	800d883a 	mov	r6,r16
   1239c:	0005883a 	mov	r2,zero
   123a0:	280a953a 	slli	r5,r5,20
   123a4:	31803fcc 	andi	r6,r6,255
   123a8:	01000434 	movhi	r4,16
   123ac:	300c97fa 	slli	r6,r6,31
   123b0:	213fffc4 	addi	r4,r4,-1
   123b4:	1906703a 	and	r3,r3,r4
   123b8:	1946b03a 	or	r3,r3,r5
   123bc:	1986b03a 	or	r3,r3,r6
   123c0:	dfc00217 	ldw	ra,8(sp)
   123c4:	dc400117 	ldw	r17,4(sp)
   123c8:	dc000017 	ldw	r16,0(sp)
   123cc:	dec00304 	addi	sp,sp,12
   123d0:	f800283a 	ret
   123d4:	00c002c4 	movi	r3,11
   123d8:	1887c83a 	sub	r3,r3,r2
   123dc:	88c6d83a 	srl	r3,r17,r3
   123e0:	8904983a 	sll	r2,r17,r4
   123e4:	01000434 	movhi	r4,16
   123e8:	213fffc4 	addi	r4,r4,-1
   123ec:	2941ffcc 	andi	r5,r5,2047
   123f0:	1906703a 	and	r3,r3,r4
   123f4:	800d883a 	mov	r6,r16
   123f8:	003fe906 	br	123a0 <__floatsidf+0x64>
   123fc:	000d883a 	mov	r6,zero
   12400:	000b883a 	mov	r5,zero
   12404:	0007883a 	mov	r3,zero
   12408:	0005883a 	mov	r2,zero
   1240c:	003fe406 	br	123a0 <__floatsidf+0x64>
   12410:	0123c83a 	sub	r17,zero,r4
   12414:	003fd106 	br	1235c <__floatsidf+0x20>

00012418 <__floatunsidf>:
   12418:	defffe04 	addi	sp,sp,-8
   1241c:	dc000015 	stw	r16,0(sp)
   12420:	dfc00115 	stw	ra,4(sp)
   12424:	2021883a 	mov	r16,r4
   12428:	20002226 	beq	r4,zero,124b4 <__floatunsidf+0x9c>
   1242c:	00124c00 	call	124c0 <__clzsi2>
   12430:	01010784 	movi	r4,1054
   12434:	2089c83a 	sub	r4,r4,r2
   12438:	01810cc4 	movi	r6,1075
   1243c:	310dc83a 	sub	r6,r6,r4
   12440:	00c007c4 	movi	r3,31
   12444:	1980120e 	bge	r3,r6,12490 <__floatunsidf+0x78>
   12448:	00c104c4 	movi	r3,1043
   1244c:	1907c83a 	sub	r3,r3,r4
   12450:	80ca983a 	sll	r5,r16,r3
   12454:	00800434 	movhi	r2,16
   12458:	10bfffc4 	addi	r2,r2,-1
   1245c:	2101ffcc 	andi	r4,r4,2047
   12460:	0021883a 	mov	r16,zero
   12464:	288a703a 	and	r5,r5,r2
   12468:	2008953a 	slli	r4,r4,20
   1246c:	00c00434 	movhi	r3,16
   12470:	18ffffc4 	addi	r3,r3,-1
   12474:	28c6703a 	and	r3,r5,r3
   12478:	8005883a 	mov	r2,r16
   1247c:	1906b03a 	or	r3,r3,r4
   12480:	dfc00117 	ldw	ra,4(sp)
   12484:	dc000017 	ldw	r16,0(sp)
   12488:	dec00204 	addi	sp,sp,8
   1248c:	f800283a 	ret
   12490:	00c002c4 	movi	r3,11
   12494:	188bc83a 	sub	r5,r3,r2
   12498:	814ad83a 	srl	r5,r16,r5
   1249c:	00c00434 	movhi	r3,16
   124a0:	18ffffc4 	addi	r3,r3,-1
   124a4:	81a0983a 	sll	r16,r16,r6
   124a8:	2101ffcc 	andi	r4,r4,2047
   124ac:	28ca703a 	and	r5,r5,r3
   124b0:	003fed06 	br	12468 <__floatunsidf+0x50>
   124b4:	0009883a 	mov	r4,zero
   124b8:	000b883a 	mov	r5,zero
   124bc:	003fea06 	br	12468 <__floatunsidf+0x50>

000124c0 <__clzsi2>:
   124c0:	00bfffd4 	movui	r2,65535
   124c4:	11000536 	bltu	r2,r4,124dc <__clzsi2+0x1c>
   124c8:	00803fc4 	movi	r2,255
   124cc:	11000f36 	bltu	r2,r4,1250c <__clzsi2+0x4c>
   124d0:	00800804 	movi	r2,32
   124d4:	0007883a 	mov	r3,zero
   124d8:	00000506 	br	124f0 <__clzsi2+0x30>
   124dc:	00804034 	movhi	r2,256
   124e0:	10bfffc4 	addi	r2,r2,-1
   124e4:	11000c2e 	bgeu	r2,r4,12518 <__clzsi2+0x58>
   124e8:	00800204 	movi	r2,8
   124ec:	00c00604 	movi	r3,24
   124f0:	20c8d83a 	srl	r4,r4,r3
   124f4:	00c000b4 	movhi	r3,2
   124f8:	18d20004 	addi	r3,r3,18432
   124fc:	1909883a 	add	r4,r3,r4
   12500:	20c00003 	ldbu	r3,0(r4)
   12504:	10c5c83a 	sub	r2,r2,r3
   12508:	f800283a 	ret
   1250c:	00800604 	movi	r2,24
   12510:	00c00204 	movi	r3,8
   12514:	003ff606 	br	124f0 <__clzsi2+0x30>
   12518:	00800404 	movi	r2,16
   1251c:	1007883a 	mov	r3,r2
   12520:	003ff306 	br	124f0 <__clzsi2+0x30>

00012524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12524:	defffe04 	addi	sp,sp,-8
   12528:	dfc00115 	stw	ra,4(sp)
   1252c:	df000015 	stw	fp,0(sp)
   12530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12534:	d0a01e97 	ldw	r2,-32646(gp)
   12538:	10000326 	beq	r2,zero,12548 <alt_get_errno+0x24>
   1253c:	d0a01e97 	ldw	r2,-32646(gp)
   12540:	103ee83a 	callr	r2
   12544:	00000106 	br	1254c <alt_get_errno+0x28>
   12548:	d0a8c084 	addi	r2,gp,-23806
}
   1254c:	e037883a 	mov	sp,fp
   12550:	dfc00117 	ldw	ra,4(sp)
   12554:	df000017 	ldw	fp,0(sp)
   12558:	dec00204 	addi	sp,sp,8
   1255c:	f800283a 	ret

00012560 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12560:	defffb04 	addi	sp,sp,-20
   12564:	dfc00415 	stw	ra,16(sp)
   12568:	df000315 	stw	fp,12(sp)
   1256c:	df000304 	addi	fp,sp,12
   12570:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12574:	e0bfff17 	ldw	r2,-4(fp)
   12578:	10000616 	blt	r2,zero,12594 <close+0x34>
   1257c:	e0bfff17 	ldw	r2,-4(fp)
   12580:	10c00324 	muli	r3,r2,12
   12584:	008000b4 	movhi	r2,2
   12588:	1095b104 	addi	r2,r2,22212
   1258c:	1885883a 	add	r2,r3,r2
   12590:	00000106 	br	12598 <close+0x38>
   12594:	0005883a 	mov	r2,zero
   12598:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1259c:	e0bffd17 	ldw	r2,-12(fp)
   125a0:	10001926 	beq	r2,zero,12608 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   125a4:	e0bffd17 	ldw	r2,-12(fp)
   125a8:	10800017 	ldw	r2,0(r2)
   125ac:	10800417 	ldw	r2,16(r2)
   125b0:	10000626 	beq	r2,zero,125cc <close+0x6c>
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	10800017 	ldw	r2,0(r2)
   125bc:	10800417 	ldw	r2,16(r2)
   125c0:	e13ffd17 	ldw	r4,-12(fp)
   125c4:	103ee83a 	callr	r2
   125c8:	00000106 	br	125d0 <close+0x70>
   125cc:	0005883a 	mov	r2,zero
   125d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   125d4:	e13fff17 	ldw	r4,-4(fp)
   125d8:	0012c180 	call	12c18 <alt_release_fd>
    if (rval < 0)
   125dc:	e0bffe17 	ldw	r2,-8(fp)
   125e0:	1000070e 	bge	r2,zero,12600 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   125e4:	00125240 	call	12524 <alt_get_errno>
   125e8:	1007883a 	mov	r3,r2
   125ec:	e0bffe17 	ldw	r2,-8(fp)
   125f0:	0085c83a 	sub	r2,zero,r2
   125f4:	18800015 	stw	r2,0(r3)
      return -1;
   125f8:	00bfffc4 	movi	r2,-1
   125fc:	00000706 	br	1261c <close+0xbc>
    }
    return 0;
   12600:	0005883a 	mov	r2,zero
   12604:	00000506 	br	1261c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12608:	00125240 	call	12524 <alt_get_errno>
   1260c:	1007883a 	mov	r3,r2
   12610:	00801444 	movi	r2,81
   12614:	18800015 	stw	r2,0(r3)
    return -1;
   12618:	00bfffc4 	movi	r2,-1
  }
}
   1261c:	e037883a 	mov	sp,fp
   12620:	dfc00117 	ldw	ra,4(sp)
   12624:	df000017 	ldw	fp,0(sp)
   12628:	dec00204 	addi	sp,sp,8
   1262c:	f800283a 	ret

00012630 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12630:	defffc04 	addi	sp,sp,-16
   12634:	df000315 	stw	fp,12(sp)
   12638:	df000304 	addi	fp,sp,12
   1263c:	e13ffd15 	stw	r4,-12(fp)
   12640:	e17ffe15 	stw	r5,-8(fp)
   12644:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12648:	e0bfff17 	ldw	r2,-4(fp)
}
   1264c:	e037883a 	mov	sp,fp
   12650:	df000017 	ldw	fp,0(sp)
   12654:	dec00104 	addi	sp,sp,4
   12658:	f800283a 	ret

0001265c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1265c:	defffe04 	addi	sp,sp,-8
   12660:	dfc00115 	stw	ra,4(sp)
   12664:	df000015 	stw	fp,0(sp)
   12668:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1266c:	d0a01e97 	ldw	r2,-32646(gp)
   12670:	10000326 	beq	r2,zero,12680 <alt_get_errno+0x24>
   12674:	d0a01e97 	ldw	r2,-32646(gp)
   12678:	103ee83a 	callr	r2
   1267c:	00000106 	br	12684 <alt_get_errno+0x28>
   12680:	d0a8c084 	addi	r2,gp,-23806
}
   12684:	e037883a 	mov	sp,fp
   12688:	dfc00117 	ldw	ra,4(sp)
   1268c:	df000017 	ldw	fp,0(sp)
   12690:	dec00204 	addi	sp,sp,8
   12694:	f800283a 	ret

00012698 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12698:	defffb04 	addi	sp,sp,-20
   1269c:	dfc00415 	stw	ra,16(sp)
   126a0:	df000315 	stw	fp,12(sp)
   126a4:	df000304 	addi	fp,sp,12
   126a8:	e13ffe15 	stw	r4,-8(fp)
   126ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   126b0:	e0bffe17 	ldw	r2,-8(fp)
   126b4:	10000616 	blt	r2,zero,126d0 <fstat+0x38>
   126b8:	e0bffe17 	ldw	r2,-8(fp)
   126bc:	10c00324 	muli	r3,r2,12
   126c0:	008000b4 	movhi	r2,2
   126c4:	1095b104 	addi	r2,r2,22212
   126c8:	1885883a 	add	r2,r3,r2
   126cc:	00000106 	br	126d4 <fstat+0x3c>
   126d0:	0005883a 	mov	r2,zero
   126d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   126d8:	e0bffd17 	ldw	r2,-12(fp)
   126dc:	10001026 	beq	r2,zero,12720 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   126e0:	e0bffd17 	ldw	r2,-12(fp)
   126e4:	10800017 	ldw	r2,0(r2)
   126e8:	10800817 	ldw	r2,32(r2)
   126ec:	10000726 	beq	r2,zero,1270c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   126f0:	e0bffd17 	ldw	r2,-12(fp)
   126f4:	10800017 	ldw	r2,0(r2)
   126f8:	10800817 	ldw	r2,32(r2)
   126fc:	e17fff17 	ldw	r5,-4(fp)
   12700:	e13ffd17 	ldw	r4,-12(fp)
   12704:	103ee83a 	callr	r2
   12708:	00000a06 	br	12734 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1270c:	e0bfff17 	ldw	r2,-4(fp)
   12710:	00c80004 	movi	r3,8192
   12714:	10c00115 	stw	r3,4(r2)
      return 0;
   12718:	0005883a 	mov	r2,zero
   1271c:	00000506 	br	12734 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12720:	001265c0 	call	1265c <alt_get_errno>
   12724:	1007883a 	mov	r3,r2
   12728:	00801444 	movi	r2,81
   1272c:	18800015 	stw	r2,0(r3)
    return -1;
   12730:	00bfffc4 	movi	r2,-1
  }
}
   12734:	e037883a 	mov	sp,fp
   12738:	dfc00117 	ldw	ra,4(sp)
   1273c:	df000017 	ldw	fp,0(sp)
   12740:	dec00204 	addi	sp,sp,8
   12744:	f800283a 	ret

00012748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12748:	defffe04 	addi	sp,sp,-8
   1274c:	dfc00115 	stw	ra,4(sp)
   12750:	df000015 	stw	fp,0(sp)
   12754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12758:	d0a01e97 	ldw	r2,-32646(gp)
   1275c:	10000326 	beq	r2,zero,1276c <alt_get_errno+0x24>
   12760:	d0a01e97 	ldw	r2,-32646(gp)
   12764:	103ee83a 	callr	r2
   12768:	00000106 	br	12770 <alt_get_errno+0x28>
   1276c:	d0a8c084 	addi	r2,gp,-23806
}
   12770:	e037883a 	mov	sp,fp
   12774:	dfc00117 	ldw	ra,4(sp)
   12778:	df000017 	ldw	fp,0(sp)
   1277c:	dec00204 	addi	sp,sp,8
   12780:	f800283a 	ret

00012784 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12784:	deffed04 	addi	sp,sp,-76
   12788:	dfc01215 	stw	ra,72(sp)
   1278c:	df001115 	stw	fp,68(sp)
   12790:	df001104 	addi	fp,sp,68
   12794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12798:	e0bfff17 	ldw	r2,-4(fp)
   1279c:	10000616 	blt	r2,zero,127b8 <isatty+0x34>
   127a0:	e0bfff17 	ldw	r2,-4(fp)
   127a4:	10c00324 	muli	r3,r2,12
   127a8:	008000b4 	movhi	r2,2
   127ac:	1095b104 	addi	r2,r2,22212
   127b0:	1885883a 	add	r2,r3,r2
   127b4:	00000106 	br	127bc <isatty+0x38>
   127b8:	0005883a 	mov	r2,zero
   127bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   127c0:	e0bfef17 	ldw	r2,-68(fp)
   127c4:	10000e26 	beq	r2,zero,12800 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   127c8:	e0bfef17 	ldw	r2,-68(fp)
   127cc:	10800017 	ldw	r2,0(r2)
   127d0:	10800817 	ldw	r2,32(r2)
   127d4:	1000021e 	bne	r2,zero,127e0 <isatty+0x5c>
    {
      return 1;
   127d8:	00800044 	movi	r2,1
   127dc:	00000d06 	br	12814 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   127e0:	e0bff004 	addi	r2,fp,-64
   127e4:	100b883a 	mov	r5,r2
   127e8:	e13fff17 	ldw	r4,-4(fp)
   127ec:	00126980 	call	12698 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   127f0:	e0bff117 	ldw	r2,-60(fp)
   127f4:	10880020 	cmpeqi	r2,r2,8192
   127f8:	10803fcc 	andi	r2,r2,255
   127fc:	00000506 	br	12814 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12800:	00127480 	call	12748 <alt_get_errno>
   12804:	1007883a 	mov	r3,r2
   12808:	00801444 	movi	r2,81
   1280c:	18800015 	stw	r2,0(r3)
    return 0;
   12810:	0005883a 	mov	r2,zero
  }
}
   12814:	e037883a 	mov	sp,fp
   12818:	dfc00117 	ldw	ra,4(sp)
   1281c:	df000017 	ldw	fp,0(sp)
   12820:	dec00204 	addi	sp,sp,8
   12824:	f800283a 	ret

00012828 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12828:	defffc04 	addi	sp,sp,-16
   1282c:	df000315 	stw	fp,12(sp)
   12830:	df000304 	addi	fp,sp,12
   12834:	e13ffd15 	stw	r4,-12(fp)
   12838:	e17ffe15 	stw	r5,-8(fp)
   1283c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12840:	e0fffe17 	ldw	r3,-8(fp)
   12844:	e0bffd17 	ldw	r2,-12(fp)
   12848:	18800c26 	beq	r3,r2,1287c <alt_load_section+0x54>
  {
    while( to != end )
   1284c:	00000806 	br	12870 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12850:	e0bffe17 	ldw	r2,-8(fp)
   12854:	10c00104 	addi	r3,r2,4
   12858:	e0fffe15 	stw	r3,-8(fp)
   1285c:	e0fffd17 	ldw	r3,-12(fp)
   12860:	19000104 	addi	r4,r3,4
   12864:	e13ffd15 	stw	r4,-12(fp)
   12868:	18c00017 	ldw	r3,0(r3)
   1286c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12870:	e0fffe17 	ldw	r3,-8(fp)
   12874:	e0bfff17 	ldw	r2,-4(fp)
   12878:	18bff51e 	bne	r3,r2,12850 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1287c:	0001883a 	nop
   12880:	e037883a 	mov	sp,fp
   12884:	df000017 	ldw	fp,0(sp)
   12888:	dec00104 	addi	sp,sp,4
   1288c:	f800283a 	ret

00012890 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12890:	defffe04 	addi	sp,sp,-8
   12894:	dfc00115 	stw	ra,4(sp)
   12898:	df000015 	stw	fp,0(sp)
   1289c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   128a0:	018000b4 	movhi	r6,2
   128a4:	319be404 	addi	r6,r6,28560
   128a8:	014000b4 	movhi	r5,2
   128ac:	29537604 	addi	r5,r5,19928
   128b0:	010000b4 	movhi	r4,2
   128b4:	211be404 	addi	r4,r4,28560
   128b8:	00128280 	call	12828 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   128bc:	01800034 	movhi	r6,0
   128c0:	31809204 	addi	r6,r6,584
   128c4:	01400034 	movhi	r5,0
   128c8:	29400804 	addi	r5,r5,32
   128cc:	01000034 	movhi	r4,0
   128d0:	21000804 	addi	r4,r4,32
   128d4:	00128280 	call	12828 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   128d8:	018000b4 	movhi	r6,2
   128dc:	31937604 	addi	r6,r6,19928
   128e0:	014000b4 	movhi	r5,2
   128e4:	2950e604 	addi	r5,r5,17304
   128e8:	010000b4 	movhi	r4,2
   128ec:	2110e604 	addi	r4,r4,17304
   128f0:	00128280 	call	12828 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   128f4:	002303c0 	call	2303c <alt_dcache_flush_all>
  alt_icache_flush_all();
   128f8:	002328c0 	call	2328c <alt_icache_flush_all>
}
   128fc:	0001883a 	nop
   12900:	e037883a 	mov	sp,fp
   12904:	dfc00117 	ldw	ra,4(sp)
   12908:	df000017 	ldw	fp,0(sp)
   1290c:	dec00204 	addi	sp,sp,8
   12910:	f800283a 	ret

00012914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12914:	defffe04 	addi	sp,sp,-8
   12918:	dfc00115 	stw	ra,4(sp)
   1291c:	df000015 	stw	fp,0(sp)
   12920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12924:	d0a01e97 	ldw	r2,-32646(gp)
   12928:	10000326 	beq	r2,zero,12938 <alt_get_errno+0x24>
   1292c:	d0a01e97 	ldw	r2,-32646(gp)
   12930:	103ee83a 	callr	r2
   12934:	00000106 	br	1293c <alt_get_errno+0x28>
   12938:	d0a8c084 	addi	r2,gp,-23806
}
   1293c:	e037883a 	mov	sp,fp
   12940:	dfc00117 	ldw	ra,4(sp)
   12944:	df000017 	ldw	fp,0(sp)
   12948:	dec00204 	addi	sp,sp,8
   1294c:	f800283a 	ret

00012950 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12950:	defff904 	addi	sp,sp,-28
   12954:	dfc00615 	stw	ra,24(sp)
   12958:	df000515 	stw	fp,20(sp)
   1295c:	df000504 	addi	fp,sp,20
   12960:	e13ffd15 	stw	r4,-12(fp)
   12964:	e17ffe15 	stw	r5,-8(fp)
   12968:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1296c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12970:	e0bffd17 	ldw	r2,-12(fp)
   12974:	10000616 	blt	r2,zero,12990 <lseek+0x40>
   12978:	e0bffd17 	ldw	r2,-12(fp)
   1297c:	10c00324 	muli	r3,r2,12
   12980:	008000b4 	movhi	r2,2
   12984:	1095b104 	addi	r2,r2,22212
   12988:	1885883a 	add	r2,r3,r2
   1298c:	00000106 	br	12994 <lseek+0x44>
   12990:	0005883a 	mov	r2,zero
   12994:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12998:	e0bffc17 	ldw	r2,-16(fp)
   1299c:	10001026 	beq	r2,zero,129e0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   129a0:	e0bffc17 	ldw	r2,-16(fp)
   129a4:	10800017 	ldw	r2,0(r2)
   129a8:	10800717 	ldw	r2,28(r2)
   129ac:	10000926 	beq	r2,zero,129d4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   129b0:	e0bffc17 	ldw	r2,-16(fp)
   129b4:	10800017 	ldw	r2,0(r2)
   129b8:	10800717 	ldw	r2,28(r2)
   129bc:	e1bfff17 	ldw	r6,-4(fp)
   129c0:	e17ffe17 	ldw	r5,-8(fp)
   129c4:	e13ffc17 	ldw	r4,-16(fp)
   129c8:	103ee83a 	callr	r2
   129cc:	e0bffb15 	stw	r2,-20(fp)
   129d0:	00000506 	br	129e8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   129d4:	00bfde84 	movi	r2,-134
   129d8:	e0bffb15 	stw	r2,-20(fp)
   129dc:	00000206 	br	129e8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   129e0:	00bfebc4 	movi	r2,-81
   129e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   129e8:	e0bffb17 	ldw	r2,-20(fp)
   129ec:	1000070e 	bge	r2,zero,12a0c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   129f0:	00129140 	call	12914 <alt_get_errno>
   129f4:	1007883a 	mov	r3,r2
   129f8:	e0bffb17 	ldw	r2,-20(fp)
   129fc:	0085c83a 	sub	r2,zero,r2
   12a00:	18800015 	stw	r2,0(r3)
    rc = -1;
   12a04:	00bfffc4 	movi	r2,-1
   12a08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12a0c:	e0bffb17 	ldw	r2,-20(fp)
}
   12a10:	e037883a 	mov	sp,fp
   12a14:	dfc00117 	ldw	ra,4(sp)
   12a18:	df000017 	ldw	fp,0(sp)
   12a1c:	dec00204 	addi	sp,sp,8
   12a20:	f800283a 	ret

00012a24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12a24:	defff904 	addi	sp,sp,-28
   12a28:	dfc00615 	stw	ra,24(sp)
   12a2c:	df000515 	stw	fp,20(sp)
   12a30:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12a34:	0009883a 	mov	r4,zero
   12a38:	001b44c0 	call	1b44c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12a3c:	00139e00 	call	139e0 <OSInit>
   12a40:	01000044 	movi	r4,1
   12a44:	0018e080 	call	18e08 <OSSemCreate>
   12a48:	d0a8c995 	stw	r2,-23770(gp)
   12a4c:	01000044 	movi	r4,1
   12a50:	0018e080 	call	18e08 <OSSemCreate>
   12a54:	d0a8cb95 	stw	r2,-23762(gp)
   12a58:	d0a8c484 	addi	r2,gp,-23790
   12a5c:	e0bffc15 	stw	r2,-16(fp)
   12a60:	00800044 	movi	r2,1
   12a64:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12a68:	e0bffd0b 	ldhu	r2,-12(fp)
   12a6c:	1009883a 	mov	r4,r2
   12a70:	0018e080 	call	18e08 <OSSemCreate>
   12a74:	1007883a 	mov	r3,r2
   12a78:	e0bffc17 	ldw	r2,-16(fp)
   12a7c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12a80:	001b4840 	call	1b484 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12a84:	018000b4 	movhi	r6,2
   12a88:	31924304 	addi	r6,r6,18700
   12a8c:	014000b4 	movhi	r5,2
   12a90:	29524304 	addi	r5,r5,18700
   12a94:	010000b4 	movhi	r4,2
   12a98:	21124304 	addi	r4,r4,18700
   12a9c:	00233840 	call	23384 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12aa0:	002313c0 	call	2313c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12aa4:	010000b4 	movhi	r4,2
   12aa8:	210c6704 	addi	r4,r4,12700
   12aac:	00240040 	call	24004 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12ab0:	d0a8c597 	ldw	r2,-23786(gp)
   12ab4:	d0e8c697 	ldw	r3,-23782(gp)
   12ab8:	d128c797 	ldw	r4,-23778(gp)
   12abc:	200d883a 	mov	r6,r4
   12ac0:	180b883a 	mov	r5,r3
   12ac4:	1009883a 	mov	r4,r2
   12ac8:	00018600 	call	1860 <main>
   12acc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12ad0:	01000044 	movi	r4,1
   12ad4:	00125600 	call	12560 <close>
  exit (result);
   12ad8:	e13ffb17 	ldw	r4,-20(fp)
   12adc:	00240180 	call	24018 <exit>

00012ae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ae0:	defffe04 	addi	sp,sp,-8
   12ae4:	dfc00115 	stw	ra,4(sp)
   12ae8:	df000015 	stw	fp,0(sp)
   12aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12af0:	d0a01e97 	ldw	r2,-32646(gp)
   12af4:	10000326 	beq	r2,zero,12b04 <alt_get_errno+0x24>
   12af8:	d0a01e97 	ldw	r2,-32646(gp)
   12afc:	103ee83a 	callr	r2
   12b00:	00000106 	br	12b08 <alt_get_errno+0x28>
   12b04:	d0a8c084 	addi	r2,gp,-23806
}
   12b08:	e037883a 	mov	sp,fp
   12b0c:	dfc00117 	ldw	ra,4(sp)
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00204 	addi	sp,sp,8
   12b18:	f800283a 	ret

00012b1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12b1c:	defff904 	addi	sp,sp,-28
   12b20:	dfc00615 	stw	ra,24(sp)
   12b24:	df000515 	stw	fp,20(sp)
   12b28:	df000504 	addi	fp,sp,20
   12b2c:	e13ffd15 	stw	r4,-12(fp)
   12b30:	e17ffe15 	stw	r5,-8(fp)
   12b34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12b38:	e0bffd17 	ldw	r2,-12(fp)
   12b3c:	10000616 	blt	r2,zero,12b58 <read+0x3c>
   12b40:	e0bffd17 	ldw	r2,-12(fp)
   12b44:	10c00324 	muli	r3,r2,12
   12b48:	008000b4 	movhi	r2,2
   12b4c:	1095b104 	addi	r2,r2,22212
   12b50:	1885883a 	add	r2,r3,r2
   12b54:	00000106 	br	12b5c <read+0x40>
   12b58:	0005883a 	mov	r2,zero
   12b5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12b60:	e0bffb17 	ldw	r2,-20(fp)
   12b64:	10002226 	beq	r2,zero,12bf0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12b68:	e0bffb17 	ldw	r2,-20(fp)
   12b6c:	10800217 	ldw	r2,8(r2)
   12b70:	108000cc 	andi	r2,r2,3
   12b74:	10800060 	cmpeqi	r2,r2,1
   12b78:	1000181e 	bne	r2,zero,12bdc <read+0xc0>
        (fd->dev->read))
   12b7c:	e0bffb17 	ldw	r2,-20(fp)
   12b80:	10800017 	ldw	r2,0(r2)
   12b84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12b88:	10001426 	beq	r2,zero,12bdc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12b8c:	e0bffb17 	ldw	r2,-20(fp)
   12b90:	10800017 	ldw	r2,0(r2)
   12b94:	10800517 	ldw	r2,20(r2)
   12b98:	e0ffff17 	ldw	r3,-4(fp)
   12b9c:	180d883a 	mov	r6,r3
   12ba0:	e17ffe17 	ldw	r5,-8(fp)
   12ba4:	e13ffb17 	ldw	r4,-20(fp)
   12ba8:	103ee83a 	callr	r2
   12bac:	e0bffc15 	stw	r2,-16(fp)
   12bb0:	e0bffc17 	ldw	r2,-16(fp)
   12bb4:	1000070e 	bge	r2,zero,12bd4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12bb8:	0012ae00 	call	12ae0 <alt_get_errno>
   12bbc:	1007883a 	mov	r3,r2
   12bc0:	e0bffc17 	ldw	r2,-16(fp)
   12bc4:	0085c83a 	sub	r2,zero,r2
   12bc8:	18800015 	stw	r2,0(r3)
          return -1;
   12bcc:	00bfffc4 	movi	r2,-1
   12bd0:	00000c06 	br	12c04 <read+0xe8>
        }
        return rval;
   12bd4:	e0bffc17 	ldw	r2,-16(fp)
   12bd8:	00000a06 	br	12c04 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12bdc:	0012ae00 	call	12ae0 <alt_get_errno>
   12be0:	1007883a 	mov	r3,r2
   12be4:	00800344 	movi	r2,13
   12be8:	18800015 	stw	r2,0(r3)
   12bec:	00000406 	br	12c00 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12bf0:	0012ae00 	call	12ae0 <alt_get_errno>
   12bf4:	1007883a 	mov	r3,r2
   12bf8:	00801444 	movi	r2,81
   12bfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12c00:	00bfffc4 	movi	r2,-1
}
   12c04:	e037883a 	mov	sp,fp
   12c08:	dfc00117 	ldw	ra,4(sp)
   12c0c:	df000017 	ldw	fp,0(sp)
   12c10:	dec00204 	addi	sp,sp,8
   12c14:	f800283a 	ret

00012c18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12c18:	defffe04 	addi	sp,sp,-8
   12c1c:	df000115 	stw	fp,4(sp)
   12c20:	df000104 	addi	fp,sp,4
   12c24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12c28:	e0bfff17 	ldw	r2,-4(fp)
   12c2c:	108000d0 	cmplti	r2,r2,3
   12c30:	10000d1e 	bne	r2,zero,12c68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12c34:	008000b4 	movhi	r2,2
   12c38:	1095b104 	addi	r2,r2,22212
   12c3c:	e0ffff17 	ldw	r3,-4(fp)
   12c40:	18c00324 	muli	r3,r3,12
   12c44:	10c5883a 	add	r2,r2,r3
   12c48:	10800204 	addi	r2,r2,8
   12c4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12c50:	008000b4 	movhi	r2,2
   12c54:	1095b104 	addi	r2,r2,22212
   12c58:	e0ffff17 	ldw	r3,-4(fp)
   12c5c:	18c00324 	muli	r3,r3,12
   12c60:	10c5883a 	add	r2,r2,r3
   12c64:	10000015 	stw	zero,0(r2)
  }
}
   12c68:	0001883a 	nop
   12c6c:	e037883a 	mov	sp,fp
   12c70:	df000017 	ldw	fp,0(sp)
   12c74:	dec00104 	addi	sp,sp,4
   12c78:	f800283a 	ret

00012c7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12c7c:	defff904 	addi	sp,sp,-28
   12c80:	df000615 	stw	fp,24(sp)
   12c84:	df000604 	addi	fp,sp,24
   12c88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c8c:	0005303a 	rdctl	r2,status
   12c90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c94:	e0fffe17 	ldw	r3,-8(fp)
   12c98:	00bfff84 	movi	r2,-2
   12c9c:	1884703a 	and	r2,r3,r2
   12ca0:	1001703a 	wrctl	status,r2
  
  return context;
   12ca4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12ca8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12cac:	d0a01f97 	ldw	r2,-32642(gp)
   12cb0:	10c000c4 	addi	r3,r2,3
   12cb4:	00bfff04 	movi	r2,-4
   12cb8:	1884703a 	and	r2,r3,r2
   12cbc:	d0a01f95 	stw	r2,-32642(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12cc0:	d0e01f97 	ldw	r3,-32642(gp)
   12cc4:	e0bfff17 	ldw	r2,-4(fp)
   12cc8:	1887883a 	add	r3,r3,r2
   12ccc:	00810034 	movhi	r2,1024
   12cd0:	10800004 	addi	r2,r2,0
   12cd4:	10c0062e 	bgeu	r2,r3,12cf0 <sbrk+0x74>
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
   12cdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ce0:	e0bffa17 	ldw	r2,-24(fp)
   12ce4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12ce8:	00bfffc4 	movi	r2,-1
   12cec:	00000b06 	br	12d1c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12cf0:	d0a01f97 	ldw	r2,-32642(gp)
   12cf4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   12cf8:	d0e01f97 	ldw	r3,-32642(gp)
   12cfc:	e0bfff17 	ldw	r2,-4(fp)
   12d00:	1885883a 	add	r2,r3,r2
   12d04:	d0a01f95 	stw	r2,-32642(gp)
   12d08:	e0bffb17 	ldw	r2,-20(fp)
   12d0c:	e0bffc15 	stw	r2,-16(fp)
   12d10:	e0bffc17 	ldw	r2,-16(fp)
   12d14:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12d18:	e0bffd17 	ldw	r2,-12(fp)
} 
   12d1c:	e037883a 	mov	sp,fp
   12d20:	df000017 	ldw	fp,0(sp)
   12d24:	dec00104 	addi	sp,sp,4
   12d28:	f800283a 	ret

00012d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d2c:	defffe04 	addi	sp,sp,-8
   12d30:	dfc00115 	stw	ra,4(sp)
   12d34:	df000015 	stw	fp,0(sp)
   12d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d3c:	d0a01e97 	ldw	r2,-32646(gp)
   12d40:	10000326 	beq	r2,zero,12d50 <alt_get_errno+0x24>
   12d44:	d0a01e97 	ldw	r2,-32646(gp)
   12d48:	103ee83a 	callr	r2
   12d4c:	00000106 	br	12d54 <alt_get_errno+0x28>
   12d50:	d0a8c084 	addi	r2,gp,-23806
}
   12d54:	e037883a 	mov	sp,fp
   12d58:	dfc00117 	ldw	ra,4(sp)
   12d5c:	df000017 	ldw	fp,0(sp)
   12d60:	dec00204 	addi	sp,sp,8
   12d64:	f800283a 	ret

00012d68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12d68:	defff904 	addi	sp,sp,-28
   12d6c:	dfc00615 	stw	ra,24(sp)
   12d70:	df000515 	stw	fp,20(sp)
   12d74:	df000504 	addi	fp,sp,20
   12d78:	e13ffd15 	stw	r4,-12(fp)
   12d7c:	e17ffe15 	stw	r5,-8(fp)
   12d80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12d84:	e0bffd17 	ldw	r2,-12(fp)
   12d88:	10000616 	blt	r2,zero,12da4 <write+0x3c>
   12d8c:	e0bffd17 	ldw	r2,-12(fp)
   12d90:	10c00324 	muli	r3,r2,12
   12d94:	008000b4 	movhi	r2,2
   12d98:	1095b104 	addi	r2,r2,22212
   12d9c:	1885883a 	add	r2,r3,r2
   12da0:	00000106 	br	12da8 <write+0x40>
   12da4:	0005883a 	mov	r2,zero
   12da8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12dac:	e0bffb17 	ldw	r2,-20(fp)
   12db0:	10002126 	beq	r2,zero,12e38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	10800217 	ldw	r2,8(r2)
   12dbc:	108000cc 	andi	r2,r2,3
   12dc0:	10001826 	beq	r2,zero,12e24 <write+0xbc>
   12dc4:	e0bffb17 	ldw	r2,-20(fp)
   12dc8:	10800017 	ldw	r2,0(r2)
   12dcc:	10800617 	ldw	r2,24(r2)
   12dd0:	10001426 	beq	r2,zero,12e24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12dd4:	e0bffb17 	ldw	r2,-20(fp)
   12dd8:	10800017 	ldw	r2,0(r2)
   12ddc:	10800617 	ldw	r2,24(r2)
   12de0:	e0ffff17 	ldw	r3,-4(fp)
   12de4:	180d883a 	mov	r6,r3
   12de8:	e17ffe17 	ldw	r5,-8(fp)
   12dec:	e13ffb17 	ldw	r4,-20(fp)
   12df0:	103ee83a 	callr	r2
   12df4:	e0bffc15 	stw	r2,-16(fp)
   12df8:	e0bffc17 	ldw	r2,-16(fp)
   12dfc:	1000070e 	bge	r2,zero,12e1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12e00:	0012d2c0 	call	12d2c <alt_get_errno>
   12e04:	1007883a 	mov	r3,r2
   12e08:	e0bffc17 	ldw	r2,-16(fp)
   12e0c:	0085c83a 	sub	r2,zero,r2
   12e10:	18800015 	stw	r2,0(r3)
        return -1;
   12e14:	00bfffc4 	movi	r2,-1
   12e18:	00000c06 	br	12e4c <write+0xe4>
      }
      return rval;
   12e1c:	e0bffc17 	ldw	r2,-16(fp)
   12e20:	00000a06 	br	12e4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12e24:	0012d2c0 	call	12d2c <alt_get_errno>
   12e28:	1007883a 	mov	r3,r2
   12e2c:	00800344 	movi	r2,13
   12e30:	18800015 	stw	r2,0(r3)
   12e34:	00000406 	br	12e48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12e38:	0012d2c0 	call	12d2c <alt_get_errno>
   12e3c:	1007883a 	mov	r3,r2
   12e40:	00801444 	movi	r2,81
   12e44:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12e48:	00bfffc4 	movi	r2,-1
}
   12e4c:	e037883a 	mov	sp,fp
   12e50:	dfc00117 	ldw	ra,4(sp)
   12e54:	df000017 	ldw	fp,0(sp)
   12e58:	dec00204 	addi	sp,sp,8
   12e5c:	f800283a 	ret

00012e60 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12e60:	deffdf04 	addi	sp,sp,-132
   12e64:	dfc02015 	stw	ra,128(sp)
   12e68:	df001f15 	stw	fp,124(sp)
   12e6c:	df001f04 	addi	fp,sp,124
   12e70:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12e74:	e0bfe204 	addi	r2,fp,-120
   12e78:	100b883a 	mov	r5,r2
   12e7c:	01003fc4 	movi	r4,255
   12e80:	001ad900 	call	1ad90 <OSTaskQuery>
   12e84:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12e88:	e0bffe83 	ldbu	r2,-6(fp)
   12e8c:	10803fcc 	andi	r2,r2,255
   12e90:	10001e1e 	bne	r2,zero,12f0c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   12e94:	e0bfee83 	ldbu	r2,-70(fp)
   12e98:	10803fcc 	andi	r2,r2,255
   12e9c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   12ea0:	d0a8c997 	ldw	r2,-23770(gp)
   12ea4:	e0fffd04 	addi	r3,fp,-12
   12ea8:	180b883a 	mov	r5,r3
   12eac:	1009883a 	mov	r4,r2
   12eb0:	00195a80 	call	195a8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   12eb4:	e0bffe43 	ldbu	r2,-7(fp)
   12eb8:	10803fcc 	andi	r2,r2,255
   12ebc:	10000726 	beq	r2,zero,12edc <__env_lock+0x7c>
   12ec0:	d0a02097 	ldw	r2,-32638(gp)
   12ec4:	e0ffe117 	ldw	r3,-124(fp)
   12ec8:	1880041e 	bne	r3,r2,12edc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   12ecc:	d0a8c897 	ldw	r2,-23774(gp)
   12ed0:	10800044 	addi	r2,r2,1
   12ed4:	d0a8c895 	stw	r2,-23774(gp)
   12ed8:	00000a06 	br	12f04 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   12edc:	d0a8c997 	ldw	r2,-23770(gp)
   12ee0:	e0fffe84 	addi	r3,fp,-6
   12ee4:	180d883a 	mov	r6,r3
   12ee8:	000b883a 	mov	r5,zero
   12eec:	1009883a 	mov	r4,r2
   12ef0:	00191200 	call	19120 <OSSemPend>
    locks  = 1;
   12ef4:	00800044 	movi	r2,1
   12ef8:	d0a8c895 	stw	r2,-23774(gp)
    lockid = id;
   12efc:	e0bfe117 	ldw	r2,-124(fp)
   12f00:	d0a02095 	stw	r2,-32638(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   12f04:	0001883a 	nop
   12f08:	00000106 	br	12f10 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   12f0c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   12f10:	e037883a 	mov	sp,fp
   12f14:	dfc00117 	ldw	ra,4(sp)
   12f18:	df000017 	ldw	fp,0(sp)
   12f1c:	dec00204 	addi	sp,sp,8
   12f20:	f800283a 	ret

00012f24 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   12f24:	defffd04 	addi	sp,sp,-12
   12f28:	dfc00215 	stw	ra,8(sp)
   12f2c:	df000115 	stw	fp,4(sp)
   12f30:	df000104 	addi	fp,sp,4
   12f34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   12f38:	d0a8c897 	ldw	r2,-23774(gp)
   12f3c:	10000b26 	beq	r2,zero,12f6c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   12f40:	d0a8c897 	ldw	r2,-23774(gp)
   12f44:	10bfffc4 	addi	r2,r2,-1
   12f48:	d0a8c895 	stw	r2,-23774(gp)
   12f4c:	d0a8c897 	ldw	r2,-23774(gp)
   12f50:	1000071e 	bne	r2,zero,12f70 <__env_unlock+0x4c>
  {
    lockid = -1;
   12f54:	00bfffc4 	movi	r2,-1
   12f58:	d0a02095 	stw	r2,-32638(gp)
    OSSemPost( alt_envsem );
   12f5c:	d0a8c997 	ldw	r2,-23770(gp)
   12f60:	1009883a 	mov	r4,r2
   12f64:	00194980 	call	19498 <OSSemPost>
   12f68:	00000106 	br	12f70 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   12f6c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   12f70:	e037883a 	mov	sp,fp
   12f74:	dfc00117 	ldw	ra,4(sp)
   12f78:	df000017 	ldw	fp,0(sp)
   12f7c:	dec00204 	addi	sp,sp,8
   12f80:	f800283a 	ret

00012f84 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   12f84:	deffdb04 	addi	sp,sp,-148
   12f88:	dfc02415 	stw	ra,144(sp)
   12f8c:	df002315 	stw	fp,140(sp)
   12f90:	df002304 	addi	fp,sp,140
   12f94:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12f98:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   12f9c:	d0a8ccc3 	ldbu	r2,-23757(gp)
   12fa0:	10803fcc 	andi	r2,r2,255
   12fa4:	10800060 	cmpeqi	r2,r2,1
   12fa8:	10003626 	beq	r2,zero,13084 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12fac:	e0bfe204 	addi	r2,fp,-120
   12fb0:	100b883a 	mov	r5,r2
   12fb4:	01003fc4 	movi	r4,255
   12fb8:	001ad900 	call	1ad90 <OSTaskQuery>
   12fbc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12fc0:	e0bffe83 	ldbu	r2,-6(fp)
   12fc4:	10803fcc 	andi	r2,r2,255
   12fc8:	1000301e 	bne	r2,zero,1308c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   12fcc:	e0bfee83 	ldbu	r2,-70(fp)
   12fd0:	10803fcc 	andi	r2,r2,255
   12fd4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   12fd8:	d0a8cb97 	ldw	r2,-23762(gp)
   12fdc:	e0fffd04 	addi	r3,fp,-12
   12fe0:	180b883a 	mov	r5,r3
   12fe4:	1009883a 	mov	r4,r2
   12fe8:	00195a80 	call	195a8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fec:	0005303a 	rdctl	r2,status
   12ff0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ff4:	e0ffe117 	ldw	r3,-124(fp)
   12ff8:	00bfff84 	movi	r2,-2
   12ffc:	1884703a 	and	r2,r3,r2
   13000:	1001703a 	wrctl	status,r2
  
  return context;
   13004:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   13008:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   1300c:	e0bffd0b 	ldhu	r2,-12(fp)
   13010:	10bfffcc 	andi	r2,r2,65535
   13014:	10000b1e 	bne	r2,zero,13044 <__malloc_lock+0xc0>
   13018:	d0a02197 	ldw	r2,-32634(gp)
   1301c:	e0ffde17 	ldw	r3,-136(fp)
   13020:	1880081e 	bne	r3,r2,13044 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   13024:	d0a8ca97 	ldw	r2,-23766(gp)
   13028:	10800044 	addi	r2,r2,1
   1302c:	d0a8ca95 	stw	r2,-23766(gp)
   13030:	e0bfdd17 	ldw	r2,-140(fp)
   13034:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13038:	e0bfdf17 	ldw	r2,-132(fp)
   1303c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   13040:	00000e06 	br	1307c <__malloc_lock+0xf8>
   13044:	e0bfdd17 	ldw	r2,-140(fp)
   13048:	e0bfe015 	stw	r2,-128(fp)
   1304c:	e0bfe017 	ldw	r2,-128(fp)
   13050:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13054:	d0a8cb97 	ldw	r2,-23762(gp)
   13058:	e0fffe84 	addi	r3,fp,-6
   1305c:	180d883a 	mov	r6,r3
   13060:	000b883a 	mov	r5,zero
   13064:	1009883a 	mov	r4,r2
   13068:	00191200 	call	19120 <OSSemPend>
    locks  = 1;
   1306c:	00800044 	movi	r2,1
   13070:	d0a8ca95 	stw	r2,-23766(gp)
    lockid = id;
   13074:	e0bfde17 	ldw	r2,-136(fp)
   13078:	d0a02195 	stw	r2,-32634(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1307c:	0001883a 	nop
   13080:	00000306 	br	13090 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   13084:	0001883a 	nop
   13088:	00000106 	br	13090 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1308c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   13090:	e037883a 	mov	sp,fp
   13094:	dfc00117 	ldw	ra,4(sp)
   13098:	df000017 	ldw	fp,0(sp)
   1309c:	dec00204 	addi	sp,sp,8
   130a0:	f800283a 	ret

000130a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   130a4:	defff804 	addi	sp,sp,-32
   130a8:	dfc00715 	stw	ra,28(sp)
   130ac:	df000615 	stw	fp,24(sp)
   130b0:	df000604 	addi	fp,sp,24
   130b4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   130b8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   130bc:	d0a8ccc3 	ldbu	r2,-23757(gp)
   130c0:	10803fcc 	andi	r2,r2,255
   130c4:	10800060 	cmpeqi	r2,r2,1
   130c8:	10002326 	beq	r2,zero,13158 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130cc:	0005303a 	rdctl	r2,status
   130d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130d4:	e0fffe17 	ldw	r3,-8(fp)
   130d8:	00bfff84 	movi	r2,-2
   130dc:	1884703a 	and	r2,r3,r2
   130e0:	1001703a 	wrctl	status,r2
  
  return context;
   130e4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   130e8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   130ec:	d0a8ca97 	ldw	r2,-23766(gp)
   130f0:	1000051e 	bne	r2,zero,13108 <__malloc_unlock+0x64>
   130f4:	e0bffa17 	ldw	r2,-24(fp)
   130f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130fc:	e0bffb17 	ldw	r2,-20(fp)
   13100:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13104:	00001506 	br	1315c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13108:	d0a8ca97 	ldw	r2,-23766(gp)
   1310c:	10bfffc4 	addi	r2,r2,-1
   13110:	d0a8ca95 	stw	r2,-23766(gp)
   13114:	d0a8ca97 	ldw	r2,-23766(gp)
   13118:	10000a1e 	bne	r2,zero,13144 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   1311c:	00bfffc4 	movi	r2,-1
   13120:	d0a02195 	stw	r2,-32634(gp)
   13124:	e0bffa17 	ldw	r2,-24(fp)
   13128:	e0bffc15 	stw	r2,-16(fp)
   1312c:	e0bffc17 	ldw	r2,-16(fp)
   13130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   13134:	d0a8cb97 	ldw	r2,-23762(gp)
   13138:	1009883a 	mov	r4,r2
   1313c:	00194980 	call	19498 <OSSemPost>
   13140:	00000606 	br	1315c <__malloc_unlock+0xb8>
   13144:	e0bffa17 	ldw	r2,-24(fp)
   13148:	e0bffd15 	stw	r2,-12(fp)
   1314c:	e0bffd17 	ldw	r2,-12(fp)
   13150:	1001703a 	wrctl	status,r2
   13154:	00000106 	br	1315c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   13158:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1315c:	e037883a 	mov	sp,fp
   13160:	dfc00117 	ldw	ra,4(sp)
   13164:	df000017 	ldw	fp,0(sp)
   13168:	dec00204 	addi	sp,sp,8
   1316c:	f800283a 	ret

00013170 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13170:	defff704 	addi	sp,sp,-36
   13174:	dfc00815 	stw	ra,32(sp)
   13178:	df000715 	stw	fp,28(sp)
   1317c:	df000704 	addi	fp,sp,28
   13180:	e13ffd15 	stw	r4,-12(fp)
   13184:	e17ffe15 	stw	r5,-8(fp)
   13188:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1318c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13190:	e0bfff17 	ldw	r2,-4(fp)
   13194:	1000021e 	bne	r2,zero,131a0 <OSEventNameGet+0x30>
        return (0);
   13198:	0005883a 	mov	r2,zero
   1319c:	00003706 	br	1327c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   131a0:	e0bffd17 	ldw	r2,-12(fp)
   131a4:	1000051e 	bne	r2,zero,131bc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   131a8:	e0bfff17 	ldw	r2,-4(fp)
   131ac:	00c00104 	movi	r3,4
   131b0:	10c00005 	stb	r3,0(r2)
        return (0);
   131b4:	0005883a 	mov	r2,zero
   131b8:	00003006 	br	1327c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   131bc:	e0bffe17 	ldw	r2,-8(fp)
   131c0:	1000051e 	bne	r2,zero,131d8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   131c4:	e0bfff17 	ldw	r2,-4(fp)
   131c8:	00c00304 	movi	r3,12
   131cc:	10c00005 	stb	r3,0(r2)
        return (0);
   131d0:	0005883a 	mov	r2,zero
   131d4:	00002906 	br	1327c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   131d8:	d0a8da83 	ldbu	r2,-23702(gp)
   131dc:	10803fcc 	andi	r2,r2,255
   131e0:	10000526 	beq	r2,zero,131f8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   131e4:	e0bfff17 	ldw	r2,-4(fp)
   131e8:	00c00444 	movi	r3,17
   131ec:	10c00005 	stb	r3,0(r2)
        return (0);
   131f0:	0005883a 	mov	r2,zero
   131f4:	00002106 	br	1327c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   131f8:	e0bffd17 	ldw	r2,-12(fp)
   131fc:	10800003 	ldbu	r2,0(r2)
   13200:	10803fcc 	andi	r2,r2,255
   13204:	10bfffc4 	addi	r2,r2,-1
   13208:	10800128 	cmpgeui	r2,r2,4
   1320c:	10000526 	beq	r2,zero,13224 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13210:	e0bfff17 	ldw	r2,-4(fp)
   13214:	00c00044 	movi	r3,1
   13218:	10c00005 	stb	r3,0(r2)
             return (0);
   1321c:	0005883a 	mov	r2,zero
   13220:	00001606 	br	1327c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13224:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13228:	0005303a 	rdctl	r2,status
   1322c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13230:	e0fffb17 	ldw	r3,-20(fp)
   13234:	00bfff84 	movi	r2,-2
   13238:	1884703a 	and	r2,r3,r2
   1323c:	1001703a 	wrctl	status,r2
  
  return context;
   13240:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13244:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13248:	e0bffd17 	ldw	r2,-12(fp)
   1324c:	10800384 	addi	r2,r2,14
   13250:	100b883a 	mov	r5,r2
   13254:	e13ffe17 	ldw	r4,-8(fp)
   13258:	0014bf40 	call	14bf4 <OS_StrCopy>
   1325c:	e0bffa05 	stb	r2,-24(fp)
   13260:	e0bff917 	ldw	r2,-28(fp)
   13264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13268:	e0bffc17 	ldw	r2,-16(fp)
   1326c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13270:	e0bfff17 	ldw	r2,-4(fp)
   13274:	10000005 	stb	zero,0(r2)
    return (len);
   13278:	e0bffa03 	ldbu	r2,-24(fp)
}
   1327c:	e037883a 	mov	sp,fp
   13280:	dfc00117 	ldw	ra,4(sp)
   13284:	df000017 	ldw	fp,0(sp)
   13288:	dec00204 	addi	sp,sp,8
   1328c:	f800283a 	ret

00013290 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13290:	defff604 	addi	sp,sp,-40
   13294:	dfc00915 	stw	ra,36(sp)
   13298:	df000815 	stw	fp,32(sp)
   1329c:	df000804 	addi	fp,sp,32
   132a0:	e13ffd15 	stw	r4,-12(fp)
   132a4:	e17ffe15 	stw	r5,-8(fp)
   132a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   132ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	10004026 	beq	r2,zero,133b8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	1000041e 	bne	r2,zero,132d0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	00c00104 	movi	r3,4
   132c8:	10c00005 	stb	r3,0(r2)
        return;
   132cc:	00003b06 	br	133bc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   132d0:	e0bffe17 	ldw	r2,-8(fp)
   132d4:	1000041e 	bne	r2,zero,132e8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   132d8:	e0bfff17 	ldw	r2,-4(fp)
   132dc:	00c00304 	movi	r3,12
   132e0:	10c00005 	stb	r3,0(r2)
        return;
   132e4:	00003506 	br	133bc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   132e8:	d0a8da83 	ldbu	r2,-23702(gp)
   132ec:	10803fcc 	andi	r2,r2,255
   132f0:	10000426 	beq	r2,zero,13304 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   132f4:	e0bfff17 	ldw	r2,-4(fp)
   132f8:	00c00484 	movi	r3,18
   132fc:	10c00005 	stb	r3,0(r2)
        return;
   13300:	00002e06 	br	133bc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   13304:	e0bffd17 	ldw	r2,-12(fp)
   13308:	10800003 	ldbu	r2,0(r2)
   1330c:	10803fcc 	andi	r2,r2,255
   13310:	10bfffc4 	addi	r2,r2,-1
   13314:	10800128 	cmpgeui	r2,r2,4
   13318:	10000426 	beq	r2,zero,1332c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1331c:	e0bfff17 	ldw	r2,-4(fp)
   13320:	00c00044 	movi	r3,1
   13324:	10c00005 	stb	r3,0(r2)
             return;
   13328:	00002406 	br	133bc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1332c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13330:	0005303a 	rdctl	r2,status
   13334:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13338:	e0fffc17 	ldw	r3,-16(fp)
   1333c:	00bfff84 	movi	r2,-2
   13340:	1884703a 	and	r2,r3,r2
   13344:	1001703a 	wrctl	status,r2
  
  return context;
   13348:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   1334c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   13350:	e13ffe17 	ldw	r4,-8(fp)
   13354:	0014c680 	call	14c68 <OS_StrLen>
   13358:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1335c:	e0bffa03 	ldbu	r2,-24(fp)
   13360:	10800830 	cmpltui	r2,r2,32
   13364:	1000081e 	bne	r2,zero,13388 <OSEventNameSet+0xf8>
   13368:	e0bff817 	ldw	r2,-32(fp)
   1336c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13370:	e0bff917 	ldw	r2,-28(fp)
   13374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13378:	e0bfff17 	ldw	r2,-4(fp)
   1337c:	00c002c4 	movi	r3,11
   13380:	10c00005 	stb	r3,0(r2)
        return;
   13384:	00000d06 	br	133bc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13388:	e0bffd17 	ldw	r2,-12(fp)
   1338c:	10800384 	addi	r2,r2,14
   13390:	e17ffe17 	ldw	r5,-8(fp)
   13394:	1009883a 	mov	r4,r2
   13398:	0014bf40 	call	14bf4 <OS_StrCopy>
   1339c:	e0bff817 	ldw	r2,-32(fp)
   133a0:	e0bffb15 	stw	r2,-20(fp)
   133a4:	e0bffb17 	ldw	r2,-20(fp)
   133a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	10000005 	stb	zero,0(r2)
   133b4:	00000106 	br	133bc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   133b8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   133bc:	e037883a 	mov	sp,fp
   133c0:	dfc00117 	ldw	ra,4(sp)
   133c4:	df000017 	ldw	fp,0(sp)
   133c8:	dec00204 	addi	sp,sp,8
   133cc:	f800283a 	ret

000133d0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   133d0:	deffed04 	addi	sp,sp,-76
   133d4:	dfc01215 	stw	ra,72(sp)
   133d8:	df001115 	stw	fp,68(sp)
   133dc:	df001104 	addi	fp,sp,68
   133e0:	e13ffc15 	stw	r4,-16(fp)
   133e4:	e17ffd15 	stw	r5,-12(fp)
   133e8:	e1bffe15 	stw	r6,-8(fp)
   133ec:	3805883a 	mov	r2,r7
   133f0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   133f4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   133f8:	e0800217 	ldw	r2,8(fp)
   133fc:	1000021e 	bne	r2,zero,13408 <OSEventPendMulti+0x38>
        return (0);
   13400:	0005883a 	mov	r2,zero
   13404:	00017106 	br	139cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13408:	e0bffc17 	ldw	r2,-16(fp)
   1340c:	1000051e 	bne	r2,zero,13424 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   13410:	e0800217 	ldw	r2,8(fp)
   13414:	00c00104 	movi	r3,4
   13418:	10c00005 	stb	r3,0(r2)
        return (0);
   1341c:	0005883a 	mov	r2,zero
   13420:	00016a06 	br	139cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13424:	e0bffd17 	ldw	r2,-12(fp)
   13428:	1000051e 	bne	r2,zero,13440 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   1342c:	e0800217 	ldw	r2,8(fp)
   13430:	00c00104 	movi	r3,4
   13434:	10c00005 	stb	r3,0(r2)
        return (0);
   13438:	0005883a 	mov	r2,zero
   1343c:	00016306 	br	139cc <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   13440:	e0bffe17 	ldw	r2,-8(fp)
   13444:	1000051e 	bne	r2,zero,1345c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13448:	e0800217 	ldw	r2,8(fp)
   1344c:	00c00104 	movi	r3,4
   13450:	10c00005 	stb	r3,0(r2)
        return (0);
   13454:	0005883a 	mov	r2,zero
   13458:	00015c06 	br	139cc <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13464:	e0bffc17 	ldw	r2,-16(fp)
   13468:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   1346c:	e0bfef17 	ldw	r2,-68(fp)
   13470:	10800017 	ldw	r2,0(r2)
   13474:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13478:	00001906 	br	134e0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   1347c:	e0bff017 	ldw	r2,-64(fp)
   13480:	10800003 	ldbu	r2,0(r2)
   13484:	10803fcc 	andi	r2,r2,255
   13488:	10c000a0 	cmpeqi	r3,r2,2
   1348c:	1800091e 	bne	r3,zero,134b4 <OSEventPendMulti+0xe4>
   13490:	10c000e0 	cmpeqi	r3,r2,3
   13494:	1800091e 	bne	r3,zero,134bc <OSEventPendMulti+0xec>
   13498:	10800060 	cmpeqi	r2,r2,1
   1349c:	1000091e 	bne	r2,zero,134c4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   134a0:	e0800217 	ldw	r2,8(fp)
   134a4:	00c00044 	movi	r3,1
   134a8:	10c00005 	stb	r3,0(r2)
                 return (0);
   134ac:	0005883a 	mov	r2,zero
   134b0:	00014606 	br	139cc <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   134b4:	0001883a 	nop
   134b8:	00000306 	br	134c8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   134bc:	0001883a 	nop
   134c0:	00000106 	br	134c8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   134c4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   134c8:	e0bfef17 	ldw	r2,-68(fp)
   134cc:	10800104 	addi	r2,r2,4
   134d0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   134d4:	e0bfef17 	ldw	r2,-68(fp)
   134d8:	10800017 	ldw	r2,0(r2)
   134dc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   134e0:	e0bff017 	ldw	r2,-64(fp)
   134e4:	103fe51e 	bne	r2,zero,1347c <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   134e8:	d0a8da83 	ldbu	r2,-23702(gp)
   134ec:	10803fcc 	andi	r2,r2,255
   134f0:	10000526 	beq	r2,zero,13508 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   134f4:	e0800217 	ldw	r2,8(fp)
   134f8:	00c00084 	movi	r3,2
   134fc:	10c00005 	stb	r3,0(r2)
        return (0);
   13500:	0005883a 	mov	r2,zero
   13504:	00013106 	br	139cc <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13508:	d0a8cc83 	ldbu	r2,-23758(gp)
   1350c:	10803fcc 	andi	r2,r2,255
   13510:	10000526 	beq	r2,zero,13528 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13514:	e0800217 	ldw	r2,8(fp)
   13518:	00c00344 	movi	r3,13
   1351c:	10c00005 	stb	r3,0(r2)
        return (0);
   13520:	0005883a 	mov	r2,zero
   13524:	00012906 	br	139cc <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13528:	0005303a 	rdctl	r2,status
   1352c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13530:	e0fffb17 	ldw	r3,-20(fp)
   13534:	00bfff84 	movi	r2,-2
   13538:	1884703a 	and	r2,r3,r2
   1353c:	1001703a 	wrctl	status,r2
  
  return context;
   13540:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13544:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   13548:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   1354c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   13550:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   13554:	e0bffc17 	ldw	r2,-16(fp)
   13558:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   1355c:	e0bfef17 	ldw	r2,-68(fp)
   13560:	10800017 	ldw	r2,0(r2)
   13564:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13568:	00008106 	br	13770 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   1356c:	e0bff017 	ldw	r2,-64(fp)
   13570:	10800003 	ldbu	r2,0(r2)
   13574:	10803fcc 	andi	r2,r2,255
   13578:	10c000a0 	cmpeqi	r3,r2,2
   1357c:	18003c1e 	bne	r3,zero,13670 <OSEventPendMulti+0x2a0>
   13580:	10c000e0 	cmpeqi	r3,r2,3
   13584:	1800031e 	bne	r3,zero,13594 <OSEventPendMulti+0x1c4>
   13588:	10800060 	cmpeqi	r2,r2,1
   1358c:	10001e1e 	bne	r2,zero,13608 <OSEventPendMulti+0x238>
   13590:	00006606 	br	1372c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13594:	e0bff017 	ldw	r2,-64(fp)
   13598:	1080020b 	ldhu	r2,8(r2)
   1359c:	10bfffcc 	andi	r2,r2,65535
   135a0:	10001526 	beq	r2,zero,135f8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   135a4:	e0bff017 	ldw	r2,-64(fp)
   135a8:	1080020b 	ldhu	r2,8(r2)
   135ac:	10bfffc4 	addi	r2,r2,-1
   135b0:	1007883a 	mov	r3,r2
   135b4:	e0bff017 	ldw	r2,-64(fp)
   135b8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	10c00104 	addi	r3,r2,4
   135c4:	e0fffd15 	stw	r3,-12(fp)
   135c8:	e0fff017 	ldw	r3,-64(fp)
   135cc:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   135d0:	00800044 	movi	r2,1
   135d4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   135d8:	e0bffe17 	ldw	r2,-8(fp)
   135dc:	10c00104 	addi	r3,r2,4
   135e0:	e0fffe15 	stw	r3,-8(fp)
   135e4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   135e8:	e0bff18b 	ldhu	r2,-58(fp)
   135ec:	10800044 	addi	r2,r2,1
   135f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   135f4:	00005806 	br	13758 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   135f8:	e0bff203 	ldbu	r2,-56(fp)
   135fc:	10800054 	ori	r2,r2,1
   13600:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13604:	00005406 	br	13758 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13608:	e0bff017 	ldw	r2,-64(fp)
   1360c:	10800117 	ldw	r2,4(r2)
   13610:	10001326 	beq	r2,zero,13660 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13614:	e0bffe17 	ldw	r2,-8(fp)
   13618:	10c00104 	addi	r3,r2,4
   1361c:	e0fffe15 	stw	r3,-8(fp)
   13620:	e0fff017 	ldw	r3,-64(fp)
   13624:	18c00117 	ldw	r3,4(r3)
   13628:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1362c:	e0bff017 	ldw	r2,-64(fp)
   13630:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13634:	e0bffd17 	ldw	r2,-12(fp)
   13638:	10c00104 	addi	r3,r2,4
   1363c:	e0fffd15 	stw	r3,-12(fp)
   13640:	e0fff017 	ldw	r3,-64(fp)
   13644:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13648:	00800044 	movi	r2,1
   1364c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13650:	e0bff18b 	ldhu	r2,-58(fp)
   13654:	10800044 	addi	r2,r2,1
   13658:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1365c:	00003e06 	br	13758 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   13660:	e0bff203 	ldbu	r2,-56(fp)
   13664:	10800094 	ori	r2,r2,2
   13668:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1366c:	00003a06 	br	13758 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   13670:	e0bff017 	ldw	r2,-64(fp)
   13674:	10800117 	ldw	r2,4(r2)
   13678:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   1367c:	e0bff517 	ldw	r2,-44(fp)
   13680:	1080058b 	ldhu	r2,22(r2)
   13684:	10bfffcc 	andi	r2,r2,65535
   13688:	10002426 	beq	r2,zero,1371c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   1368c:	e0bffe17 	ldw	r2,-8(fp)
   13690:	10c00104 	addi	r3,r2,4
   13694:	e0fffe15 	stw	r3,-8(fp)
   13698:	e0fff517 	ldw	r3,-44(fp)
   1369c:	18c00417 	ldw	r3,16(r3)
   136a0:	19400104 	addi	r5,r3,4
   136a4:	e13ff517 	ldw	r4,-44(fp)
   136a8:	21400415 	stw	r5,16(r4)
   136ac:	18c00017 	ldw	r3,0(r3)
   136b0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   136b4:	e0bff517 	ldw	r2,-44(fp)
   136b8:	10c00417 	ldw	r3,16(r2)
   136bc:	e0bff517 	ldw	r2,-44(fp)
   136c0:	10800217 	ldw	r2,8(r2)
   136c4:	1880041e 	bne	r3,r2,136d8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   136c8:	e0bff517 	ldw	r2,-44(fp)
   136cc:	10c00117 	ldw	r3,4(r2)
   136d0:	e0bff517 	ldw	r2,-44(fp)
   136d4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   136d8:	e0bff517 	ldw	r2,-44(fp)
   136dc:	1080058b 	ldhu	r2,22(r2)
   136e0:	10bfffc4 	addi	r2,r2,-1
   136e4:	1007883a 	mov	r3,r2
   136e8:	e0bff517 	ldw	r2,-44(fp)
   136ec:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   136f0:	e0bffd17 	ldw	r2,-12(fp)
   136f4:	10c00104 	addi	r3,r2,4
   136f8:	e0fffd15 	stw	r3,-12(fp)
   136fc:	e0fff017 	ldw	r3,-64(fp)
   13700:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13704:	00800044 	movi	r2,1
   13708:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1370c:	e0bff18b 	ldhu	r2,-58(fp)
   13710:	10800044 	addi	r2,r2,1
   13714:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   13718:	00000f06 	br	13758 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1371c:	e0bff203 	ldbu	r2,-56(fp)
   13720:	10800114 	ori	r2,r2,4
   13724:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13728:	00000b06 	br	13758 <OSEventPendMulti+0x388>
   1372c:	e0bff317 	ldw	r2,-52(fp)
   13730:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13734:	e0bff417 	ldw	r2,-48(fp)
   13738:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1373c:	e0bffd17 	ldw	r2,-12(fp)
   13740:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   13744:	e0800217 	ldw	r2,8(fp)
   13748:	00c00044 	movi	r3,1
   1374c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   13750:	e0bff18b 	ldhu	r2,-58(fp)
   13754:	00009d06 	br	139cc <OSEventPendMulti+0x5fc>
        }
        pevents++;
   13758:	e0bfef17 	ldw	r2,-68(fp)
   1375c:	10800104 	addi	r2,r2,4
   13760:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13764:	e0bfef17 	ldw	r2,-68(fp)
   13768:	10800017 	ldw	r2,0(r2)
   1376c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13770:	e0bff017 	ldw	r2,-64(fp)
   13774:	103f7d1e 	bne	r2,zero,1356c <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13778:	e0bff103 	ldbu	r2,-60(fp)
   1377c:	10800058 	cmpnei	r2,r2,1
   13780:	10000a1e 	bne	r2,zero,137ac <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13784:	e0bffd17 	ldw	r2,-12(fp)
   13788:	10000015 	stw	zero,0(r2)
   1378c:	e0bff317 	ldw	r2,-52(fp)
   13790:	e0bff615 	stw	r2,-40(fp)
   13794:	e0bff617 	ldw	r2,-40(fp)
   13798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1379c:	e0800217 	ldw	r2,8(fp)
   137a0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   137a4:	e0bff18b 	ldhu	r2,-58(fp)
   137a8:	00008806 	br	139cc <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   137ac:	d0a8db97 	ldw	r2,-23698(gp)
   137b0:	d0e8db97 	ldw	r3,-23698(gp)
   137b4:	19000c03 	ldbu	r4,48(r3)
   137b8:	e0fff203 	ldbu	r3,-56(fp)
   137bc:	20c6b03a 	or	r3,r4,r3
   137c0:	1809883a 	mov	r4,r3
   137c4:	00ffe004 	movi	r3,-128
   137c8:	20c6b03a 	or	r3,r4,r3
   137cc:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   137d0:	d0a8db97 	ldw	r2,-23698(gp)
   137d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   137d8:	d0a8db97 	ldw	r2,-23698(gp)
   137dc:	e0ffff0b 	ldhu	r3,-4(fp)
   137e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   137e4:	e13ffc17 	ldw	r4,-16(fp)
   137e8:	001430c0 	call	1430c <OS_EventTaskWaitMulti>
   137ec:	e0bff317 	ldw	r2,-52(fp)
   137f0:	e0bff915 	stw	r2,-28(fp)
   137f4:	e0bff917 	ldw	r2,-28(fp)
   137f8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   137fc:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13800:	0005303a 	rdctl	r2,status
   13804:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13808:	e0fff717 	ldw	r3,-36(fp)
   1380c:	00bfff84 	movi	r2,-2
   13810:	1884703a 	and	r2,r3,r2
   13814:	1001703a 	wrctl	status,r2
  
  return context;
   13818:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1381c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   13820:	d0a8db97 	ldw	r2,-23698(gp)
   13824:	10800c43 	ldbu	r2,49(r2)
   13828:	10803fcc 	andi	r2,r2,255
   1382c:	10000226 	beq	r2,zero,13838 <OSEventPendMulti+0x468>
   13830:	108000a0 	cmpeqi	r2,r2,2
   13834:	10001826 	beq	r2,zero,13898 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   13838:	d0a8db97 	ldw	r2,-23698(gp)
   1383c:	10800717 	ldw	r2,28(r2)
   13840:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   13844:	e0bff017 	ldw	r2,-64(fp)
   13848:	10000b26 	beq	r2,zero,13878 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1384c:	e0bffd17 	ldw	r2,-12(fp)
   13850:	10c00104 	addi	r3,r2,4
   13854:	e0fffd15 	stw	r3,-12(fp)
   13858:	e0fff017 	ldw	r3,-64(fp)
   1385c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   13860:	e0bffd17 	ldw	r2,-12(fp)
   13864:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13868:	e0bff18b 	ldhu	r2,-58(fp)
   1386c:	10800044 	addi	r2,r2,1
   13870:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13874:	00000d06 	br	138ac <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13878:	d0a8db97 	ldw	r2,-23698(gp)
   1387c:	00c00044 	movi	r3,1
   13880:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13884:	d0a8db97 	ldw	r2,-23698(gp)
   13888:	e17ffc17 	ldw	r5,-16(fp)
   1388c:	1009883a 	mov	r4,r2
   13890:	00145140 	call	14514 <OS_EventTaskRemoveMulti>
             }
			 break;
   13894:	00000506 	br	138ac <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13898:	d0a8db97 	ldw	r2,-23698(gp)
   1389c:	e17ffc17 	ldw	r5,-16(fp)
   138a0:	1009883a 	mov	r4,r2
   138a4:	00145140 	call	14514 <OS_EventTaskRemoveMulti>
             break;
   138a8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   138ac:	d0a8db97 	ldw	r2,-23698(gp)
   138b0:	10800c43 	ldbu	r2,49(r2)
   138b4:	10803fcc 	andi	r2,r2,255
   138b8:	10000326 	beq	r2,zero,138c8 <OSEventPendMulti+0x4f8>
   138bc:	108000a0 	cmpeqi	r2,r2,2
   138c0:	1000231e 	bne	r2,zero,13950 <OSEventPendMulti+0x580>
   138c4:	00002a06 	br	13970 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   138c8:	e0bff017 	ldw	r2,-64(fp)
   138cc:	10800003 	ldbu	r2,0(r2)
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	0080100e 	bge	zero,r2,13918 <OSEventPendMulti+0x548>
   138d8:	10c000d0 	cmplti	r3,r2,3
   138dc:	1800071e 	bne	r3,zero,138fc <OSEventPendMulti+0x52c>
   138e0:	108000e0 	cmpeqi	r2,r2,3
   138e4:	10000c26 	beq	r2,zero,13918 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   138e8:	e0bffe17 	ldw	r2,-8(fp)
   138ec:	10c00104 	addi	r3,r2,4
   138f0:	e0fffe15 	stw	r3,-8(fp)
   138f4:	10000015 	stw	zero,0(r2)
                      break;
   138f8:	00001206 	br	13944 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   138fc:	e0bffe17 	ldw	r2,-8(fp)
   13900:	10c00104 	addi	r3,r2,4
   13904:	e0fffe15 	stw	r3,-8(fp)
   13908:	d0e8db97 	ldw	r3,-23698(gp)
   1390c:	18c00917 	ldw	r3,36(r3)
   13910:	10c00015 	stw	r3,0(r2)
                      break;
   13914:	00000b06 	br	13944 <OSEventPendMulti+0x574>
   13918:	e0bff317 	ldw	r2,-52(fp)
   1391c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13920:	e0bff817 	ldw	r2,-32(fp)
   13924:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13928:	e0bffd17 	ldw	r2,-12(fp)
   1392c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13930:	e0800217 	ldw	r2,8(fp)
   13934:	00c00044 	movi	r3,1
   13938:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1393c:	e0bff18b 	ldhu	r2,-58(fp)
   13940:	00002206 	br	139cc <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13944:	e0800217 	ldw	r2,8(fp)
   13948:	10000005 	stb	zero,0(r2)
             break;
   1394c:	00001006 	br	13990 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   13950:	e0bffe17 	ldw	r2,-8(fp)
   13954:	10c00104 	addi	r3,r2,4
   13958:	e0fffe15 	stw	r3,-8(fp)
   1395c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   13960:	e0800217 	ldw	r2,8(fp)
   13964:	00c00384 	movi	r3,14
   13968:	10c00005 	stb	r3,0(r2)
             break;
   1396c:	00000806 	br	13990 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   13970:	e0bffe17 	ldw	r2,-8(fp)
   13974:	10c00104 	addi	r3,r2,4
   13978:	e0fffe15 	stw	r3,-8(fp)
   1397c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   13980:	e0800217 	ldw	r2,8(fp)
   13984:	00c00284 	movi	r3,10
   13988:	10c00005 	stb	r3,0(r2)
             break;
   1398c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   13990:	d0a8db97 	ldw	r2,-23698(gp)
   13994:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13998:	d0a8db97 	ldw	r2,-23698(gp)
   1399c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   139a0:	d0a8db97 	ldw	r2,-23698(gp)
   139a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   139a8:	d0a8db97 	ldw	r2,-23698(gp)
   139ac:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   139b0:	d0a8db97 	ldw	r2,-23698(gp)
   139b4:	10000915 	stw	zero,36(r2)
   139b8:	e0bff317 	ldw	r2,-52(fp)
   139bc:	e0bffa15 	stw	r2,-24(fp)
   139c0:	e0bffa17 	ldw	r2,-24(fp)
   139c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   139c8:	e0bff18b 	ldhu	r2,-58(fp)
}
   139cc:	e037883a 	mov	sp,fp
   139d0:	dfc00117 	ldw	ra,4(sp)
   139d4:	df000017 	ldw	fp,0(sp)
   139d8:	dec00204 	addi	sp,sp,8
   139dc:	f800283a 	ret

000139e0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   139e0:	defffe04 	addi	sp,sp,-8
   139e4:	dfc00115 	stw	ra,4(sp)
   139e8:	df000015 	stw	fp,0(sp)
   139ec:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   139f0:	0023c700 	call	23c70 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   139f4:	001475c0 	call	1475c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   139f8:	00147a40 	call	147a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   139fc:	00149100 	call	14910 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13a00:	001467c0 	call	1467c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13a04:	00167c00 	call	167c0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13a08:	0017b880 	call	17b88 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13a0c:	0018cb00 	call	18cb0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13a10:	00148100 	call	14810 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13a14:	00148900 	call	14890 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13a18:	0023c900 	call	23c90 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13a1c:	00151940 	call	15194 <OSDebugInit>
#endif
}
   13a20:	0001883a 	nop
   13a24:	e037883a 	mov	sp,fp
   13a28:	dfc00117 	ldw	ra,4(sp)
   13a2c:	df000017 	ldw	fp,0(sp)
   13a30:	dec00204 	addi	sp,sp,8
   13a34:	f800283a 	ret

00013a38 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13a38:	deffff04 	addi	sp,sp,-4
   13a3c:	df000015 	stw	fp,0(sp)
   13a40:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   13a44:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13a48:	10803fcc 	andi	r2,r2,255
   13a4c:	10800058 	cmpnei	r2,r2,1
   13a50:	1000071e 	bne	r2,zero,13a70 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   13a54:	d0a8da83 	ldbu	r2,-23702(gp)
   13a58:	10803fcc 	andi	r2,r2,255
   13a5c:	10803fe0 	cmpeqi	r2,r2,255
   13a60:	1000031e 	bne	r2,zero,13a70 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13a64:	d0a8da83 	ldbu	r2,-23702(gp)
   13a68:	10800044 	addi	r2,r2,1
   13a6c:	d0a8da85 	stb	r2,-23702(gp)
        }
    }
}
   13a70:	0001883a 	nop
   13a74:	e037883a 	mov	sp,fp
   13a78:	df000017 	ldw	fp,0(sp)
   13a7c:	dec00104 	addi	sp,sp,4
   13a80:	f800283a 	ret

00013a84 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13a84:	defffb04 	addi	sp,sp,-20
   13a88:	dfc00415 	stw	ra,16(sp)
   13a8c:	df000315 	stw	fp,12(sp)
   13a90:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13a94:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13a98:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13a9c:	10803fcc 	andi	r2,r2,255
   13aa0:	10800058 	cmpnei	r2,r2,1
   13aa4:	10002f1e 	bne	r2,zero,13b64 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13aa8:	0005303a 	rdctl	r2,status
   13aac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ab0:	e0ffff17 	ldw	r3,-4(fp)
   13ab4:	00bfff84 	movi	r2,-2
   13ab8:	1884703a 	and	r2,r3,r2
   13abc:	1001703a 	wrctl	status,r2
  
  return context;
   13ac0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13ac4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13ac8:	d0a8da83 	ldbu	r2,-23702(gp)
   13acc:	10803fcc 	andi	r2,r2,255
   13ad0:	10000326 	beq	r2,zero,13ae0 <OSIntExit+0x5c>
            OSIntNesting--;
   13ad4:	d0a8da83 	ldbu	r2,-23702(gp)
   13ad8:	10bfffc4 	addi	r2,r2,-1
   13adc:	d0a8da85 	stb	r2,-23702(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13ae0:	d0a8da83 	ldbu	r2,-23702(gp)
   13ae4:	10803fcc 	andi	r2,r2,255
   13ae8:	10001a1e 	bne	r2,zero,13b54 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13aec:	d0a8cc83 	ldbu	r2,-23758(gp)
   13af0:	10803fcc 	andi	r2,r2,255
   13af4:	1000171e 	bne	r2,zero,13b54 <OSIntExit+0xd0>
                OS_SchedNew();
   13af8:	0014b800 	call	14b80 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13afc:	d0e8ce83 	ldbu	r3,-23750(gp)
   13b00:	d0a8cec3 	ldbu	r2,-23749(gp)
   13b04:	18c03fcc 	andi	r3,r3,255
   13b08:	10803fcc 	andi	r2,r2,255
   13b0c:	18801126 	beq	r3,r2,13b54 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13b10:	d0a8ce83 	ldbu	r2,-23750(gp)
   13b14:	10c03fcc 	andi	r3,r2,255
   13b18:	00800274 	movhi	r2,9
   13b1c:	109fb704 	addi	r2,r2,32476
   13b20:	18c7883a 	add	r3,r3,r3
   13b24:	18c7883a 	add	r3,r3,r3
   13b28:	10c5883a 	add	r2,r2,r3
   13b2c:	10800017 	ldw	r2,0(r2)
   13b30:	d0a8d695 	stw	r2,-23718(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13b34:	d0a8d697 	ldw	r2,-23718(gp)
   13b38:	10c00e17 	ldw	r3,56(r2)
   13b3c:	18c00044 	addi	r3,r3,1
   13b40:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13b44:	d0a8d197 	ldw	r2,-23738(gp)
   13b48:	10800044 	addi	r2,r2,1
   13b4c:	d0a8d195 	stw	r2,-23738(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13b50:	002399c0 	call	2399c <OSCtxSw>
   13b54:	e0bffd17 	ldw	r2,-12(fp)
   13b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b5c:	e0bffe17 	ldw	r2,-8(fp)
   13b60:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13b64:	0001883a 	nop
   13b68:	e037883a 	mov	sp,fp
   13b6c:	dfc00117 	ldw	ra,4(sp)
   13b70:	df000017 	ldw	fp,0(sp)
   13b74:	dec00204 	addi	sp,sp,8
   13b78:	f800283a 	ret

00013b7c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13b7c:	defffc04 	addi	sp,sp,-16
   13b80:	df000315 	stw	fp,12(sp)
   13b84:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b88:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13b8c:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13b90:	10803fcc 	andi	r2,r2,255
   13b94:	10800058 	cmpnei	r2,r2,1
   13b98:	1000161e 	bne	r2,zero,13bf4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b9c:	0005303a 	rdctl	r2,status
   13ba0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ba4:	e0ffff17 	ldw	r3,-4(fp)
   13ba8:	00bfff84 	movi	r2,-2
   13bac:	1884703a 	and	r2,r3,r2
   13bb0:	1001703a 	wrctl	status,r2
  
  return context;
   13bb4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13bb8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13bbc:	d0a8da83 	ldbu	r2,-23702(gp)
   13bc0:	10803fcc 	andi	r2,r2,255
   13bc4:	1000071e 	bne	r2,zero,13be4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13bc8:	d0a8cc83 	ldbu	r2,-23758(gp)
   13bcc:	10803fcc 	andi	r2,r2,255
   13bd0:	10803fe0 	cmpeqi	r2,r2,255
   13bd4:	1000031e 	bne	r2,zero,13be4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13bd8:	d0a8cc83 	ldbu	r2,-23758(gp)
   13bdc:	10800044 	addi	r2,r2,1
   13be0:	d0a8cc85 	stb	r2,-23758(gp)
   13be4:	e0bffd17 	ldw	r2,-12(fp)
   13be8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bec:	e0bffe17 	ldw	r2,-8(fp)
   13bf0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13bf4:	0001883a 	nop
   13bf8:	e037883a 	mov	sp,fp
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00104 	addi	sp,sp,4
   13c04:	f800283a 	ret

00013c08 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13c08:	defff804 	addi	sp,sp,-32
   13c0c:	dfc00715 	stw	ra,28(sp)
   13c10:	df000615 	stw	fp,24(sp)
   13c14:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c18:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13c1c:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13c20:	10803fcc 	andi	r2,r2,255
   13c24:	10800058 	cmpnei	r2,r2,1
   13c28:	1000281e 	bne	r2,zero,13ccc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c2c:	0005303a 	rdctl	r2,status
   13c30:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c34:	e0ffff17 	ldw	r3,-4(fp)
   13c38:	00bfff84 	movi	r2,-2
   13c3c:	1884703a 	and	r2,r3,r2
   13c40:	1001703a 	wrctl	status,r2
  
  return context;
   13c44:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   13c48:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13c4c:	d0a8cc83 	ldbu	r2,-23758(gp)
   13c50:	10803fcc 	andi	r2,r2,255
   13c54:	10001926 	beq	r2,zero,13cbc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13c58:	d0a8cc83 	ldbu	r2,-23758(gp)
   13c5c:	10bfffc4 	addi	r2,r2,-1
   13c60:	d0a8cc85 	stb	r2,-23758(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13c64:	d0a8cc83 	ldbu	r2,-23758(gp)
   13c68:	10803fcc 	andi	r2,r2,255
   13c6c:	10000e1e 	bne	r2,zero,13ca8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13c70:	d0a8da83 	ldbu	r2,-23702(gp)
   13c74:	10803fcc 	andi	r2,r2,255
   13c78:	1000061e 	bne	r2,zero,13c94 <OSSchedUnlock+0x8c>
   13c7c:	e0bffa17 	ldw	r2,-24(fp)
   13c80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c84:	e0bffb17 	ldw	r2,-20(fp)
   13c88:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13c8c:	0014ab00 	call	14ab0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13c90:	00000e06 	br	13ccc <OSSchedUnlock+0xc4>
   13c94:	e0bffa17 	ldw	r2,-24(fp)
   13c98:	e0bffc15 	stw	r2,-16(fp)
   13c9c:	e0bffc17 	ldw	r2,-16(fp)
   13ca0:	1001703a 	wrctl	status,r2
   13ca4:	00000906 	br	13ccc <OSSchedUnlock+0xc4>
   13ca8:	e0bffa17 	ldw	r2,-24(fp)
   13cac:	e0bffd15 	stw	r2,-12(fp)
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	1001703a 	wrctl	status,r2
   13cb8:	00000406 	br	13ccc <OSSchedUnlock+0xc4>
   13cbc:	e0bffa17 	ldw	r2,-24(fp)
   13cc0:	e0bffe15 	stw	r2,-8(fp)
   13cc4:	e0bffe17 	ldw	r2,-8(fp)
   13cc8:	1001703a 	wrctl	status,r2
   13ccc:	0001883a 	nop
   13cd0:	e037883a 	mov	sp,fp
   13cd4:	dfc00117 	ldw	ra,4(sp)
   13cd8:	df000017 	ldw	fp,0(sp)
   13cdc:	dec00204 	addi	sp,sp,8
   13ce0:	f800283a 	ret

00013ce4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13ce4:	defffe04 	addi	sp,sp,-8
   13ce8:	dfc00115 	stw	ra,4(sp)
   13cec:	df000015 	stw	fp,0(sp)
   13cf0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13cf4:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13cf8:	10803fcc 	andi	r2,r2,255
   13cfc:	10000f1e 	bne	r2,zero,13d3c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13d00:	0014b800 	call	14b80 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13d04:	d0a8ce83 	ldbu	r2,-23750(gp)
   13d08:	d0a8cec5 	stb	r2,-23749(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13d0c:	d0a8ce83 	ldbu	r2,-23750(gp)
   13d10:	10c03fcc 	andi	r3,r2,255
   13d14:	00800274 	movhi	r2,9
   13d18:	109fb704 	addi	r2,r2,32476
   13d1c:	18c7883a 	add	r3,r3,r3
   13d20:	18c7883a 	add	r3,r3,r3
   13d24:	10c5883a 	add	r2,r2,r3
   13d28:	10800017 	ldw	r2,0(r2)
   13d2c:	d0a8d695 	stw	r2,-23718(gp)
        OSTCBCur      = OSTCBHighRdy;
   13d30:	d0a8d697 	ldw	r2,-23718(gp)
   13d34:	d0a8db95 	stw	r2,-23698(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13d38:	0023a280 	call	23a28 <OSStartHighRdy>
    }
}
   13d3c:	0001883a 	nop
   13d40:	e037883a 	mov	sp,fp
   13d44:	dfc00117 	ldw	ra,4(sp)
   13d48:	df000017 	ldw	fp,0(sp)
   13d4c:	dec00204 	addi	sp,sp,8
   13d50:	f800283a 	ret

00013d54 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13d54:	defff904 	addi	sp,sp,-28
   13d58:	dfc00615 	stw	ra,24(sp)
   13d5c:	df000515 	stw	fp,20(sp)
   13d60:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d64:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13d68:	01000084 	movi	r4,2
   13d6c:	001af240 	call	1af24 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d70:	0005303a 	rdctl	r2,status
   13d74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d78:	e0fffc17 	ldw	r3,-16(fp)
   13d7c:	00bfff84 	movi	r2,-2
   13d80:	1884703a 	and	r2,r3,r2
   13d84:	1001703a 	wrctl	status,r2
  
  return context;
   13d88:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13d8c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13d90:	d028cd95 	stw	zero,-23754(gp)
   13d94:	e0bffb17 	ldw	r2,-20(fp)
   13d98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13da4:	0009883a 	mov	r4,zero
   13da8:	001af240 	call	1af24 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dac:	0005303a 	rdctl	r2,status
   13db0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13db4:	e0fffe17 	ldw	r3,-8(fp)
   13db8:	00bfff84 	movi	r2,-2
   13dbc:	1884703a 	and	r2,r3,r2
   13dc0:	1001703a 	wrctl	status,r2
  
  return context;
   13dc4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13dc8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13dcc:	d0a8cd97 	ldw	r2,-23754(gp)
   13dd0:	d0a8d295 	stw	r2,-23734(gp)
    OSStatRdy    = OS_TRUE;
   13dd4:	00800044 	movi	r2,1
   13dd8:	d0a8de85 	stb	r2,-23686(gp)
   13ddc:	e0bffb17 	ldw	r2,-20(fp)
   13de0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13de4:	e0bfff17 	ldw	r2,-4(fp)
   13de8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13dec:	0001883a 	nop
   13df0:	e037883a 	mov	sp,fp
   13df4:	dfc00117 	ldw	ra,4(sp)
   13df8:	df000017 	ldw	fp,0(sp)
   13dfc:	dec00204 	addi	sp,sp,8
   13e00:	f800283a 	ret

00013e04 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13e04:	defff704 	addi	sp,sp,-36
   13e08:	dfc00815 	stw	ra,32(sp)
   13e0c:	df000715 	stw	fp,28(sp)
   13e10:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13e14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13e18:	0023c500 	call	23c50 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e1c:	0005303a 	rdctl	r2,status
   13e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e24:	e0fffd17 	ldw	r3,-12(fp)
   13e28:	00bfff84 	movi	r2,-2
   13e2c:	1884703a 	and	r2,r3,r2
   13e30:	1001703a 	wrctl	status,r2
  
  return context;
   13e34:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13e38:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13e3c:	d0a8dc97 	ldw	r2,-23694(gp)
   13e40:	10800044 	addi	r2,r2,1
   13e44:	d0a8dc95 	stw	r2,-23694(gp)
   13e48:	e0bffb17 	ldw	r2,-20(fp)
   13e4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e50:	e0bfff17 	ldw	r2,-4(fp)
   13e54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13e58:	d0a8ccc3 	ldbu	r2,-23757(gp)
   13e5c:	10803fcc 	andi	r2,r2,255
   13e60:	10800058 	cmpnei	r2,r2,1
   13e64:	10006a1e 	bne	r2,zero,14010 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13e68:	d0a8d083 	ldbu	r2,-23742(gp)
   13e6c:	10803fcc 	andi	r2,r2,255
   13e70:	10c00060 	cmpeqi	r3,r2,1
   13e74:	1800061e 	bne	r3,zero,13e90 <OSTimeTick+0x8c>
   13e78:	10c000a0 	cmpeqi	r3,r2,2
   13e7c:	1800061e 	bne	r3,zero,13e98 <OSTimeTick+0x94>
   13e80:	10000a1e 	bne	r2,zero,13eac <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   13e84:	00800044 	movi	r2,1
   13e88:	e0bffa05 	stb	r2,-24(fp)
                 break;
   13e8c:	00000b06 	br	13ebc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   13e90:	e03ffa05 	stb	zero,-24(fp)
                 break;
   13e94:	00000906 	br	13ebc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   13e98:	00800044 	movi	r2,1
   13e9c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   13ea0:	00800044 	movi	r2,1
   13ea4:	d0a8d085 	stb	r2,-23742(gp)
                 break;
   13ea8:	00000406 	br	13ebc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   13eac:	00800044 	movi	r2,1
   13eb0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   13eb4:	d028d085 	stb	zero,-23742(gp)
                 break;
   13eb8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   13ebc:	e0bffa03 	ldbu	r2,-24(fp)
   13ec0:	10005226 	beq	r2,zero,1400c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   13ec4:	d0a8cf97 	ldw	r2,-23746(gp)
   13ec8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13ecc:	00004906 	br	13ff4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ed0:	0005303a 	rdctl	r2,status
   13ed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ed8:	e0fffc17 	ldw	r3,-16(fp)
   13edc:	00bfff84 	movi	r2,-2
   13ee0:	1884703a 	and	r2,r3,r2
   13ee4:	1001703a 	wrctl	status,r2
  
  return context;
   13ee8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   13eec:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   13ef0:	e0bff917 	ldw	r2,-28(fp)
   13ef4:	10800b8b 	ldhu	r2,46(r2)
   13ef8:	10bfffcc 	andi	r2,r2,65535
   13efc:	10003626 	beq	r2,zero,13fd8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   13f00:	e0bff917 	ldw	r2,-28(fp)
   13f04:	10800b8b 	ldhu	r2,46(r2)
   13f08:	10bfffc4 	addi	r2,r2,-1
   13f0c:	1007883a 	mov	r3,r2
   13f10:	e0bff917 	ldw	r2,-28(fp)
   13f14:	10c00b8d 	sth	r3,46(r2)
   13f18:	e0bff917 	ldw	r2,-28(fp)
   13f1c:	10800b8b 	ldhu	r2,46(r2)
   13f20:	10bfffcc 	andi	r2,r2,65535
   13f24:	10002c1e 	bne	r2,zero,13fd8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   13f28:	e0bff917 	ldw	r2,-28(fp)
   13f2c:	10800c03 	ldbu	r2,48(r2)
   13f30:	10803fcc 	andi	r2,r2,255
   13f34:	10800dcc 	andi	r2,r2,55
   13f38:	10000b26 	beq	r2,zero,13f68 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   13f3c:	e0bff917 	ldw	r2,-28(fp)
   13f40:	10c00c03 	ldbu	r3,48(r2)
   13f44:	00bff204 	movi	r2,-56
   13f48:	1884703a 	and	r2,r3,r2
   13f4c:	1007883a 	mov	r3,r2
   13f50:	e0bff917 	ldw	r2,-28(fp)
   13f54:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   13f58:	e0bff917 	ldw	r2,-28(fp)
   13f5c:	00c00044 	movi	r3,1
   13f60:	10c00c45 	stb	r3,49(r2)
   13f64:	00000206 	br	13f70 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13f68:	e0bff917 	ldw	r2,-28(fp)
   13f6c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   13f70:	e0bff917 	ldw	r2,-28(fp)
   13f74:	10800c03 	ldbu	r2,48(r2)
   13f78:	10803fcc 	andi	r2,r2,255
   13f7c:	1080020c 	andi	r2,r2,8
   13f80:	1000151e 	bne	r2,zero,13fd8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   13f84:	e0bff917 	ldw	r2,-28(fp)
   13f88:	10c00d83 	ldbu	r3,54(r2)
   13f8c:	d0a8d883 	ldbu	r2,-23710(gp)
   13f90:	1884b03a 	or	r2,r3,r2
   13f94:	d0a8d885 	stb	r2,-23710(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13f98:	e0bff917 	ldw	r2,-28(fp)
   13f9c:	10800d03 	ldbu	r2,52(r2)
   13fa0:	10c03fcc 	andi	r3,r2,255
   13fa4:	e0bff917 	ldw	r2,-28(fp)
   13fa8:	10800d03 	ldbu	r2,52(r2)
   13fac:	11003fcc 	andi	r4,r2,255
   13fb0:	d0a8d8c4 	addi	r2,gp,-23709
   13fb4:	2085883a 	add	r2,r4,r2
   13fb8:	11000003 	ldbu	r4,0(r2)
   13fbc:	e0bff917 	ldw	r2,-28(fp)
   13fc0:	10800d43 	ldbu	r2,53(r2)
   13fc4:	2084b03a 	or	r2,r4,r2
   13fc8:	1009883a 	mov	r4,r2
   13fcc:	d0a8d8c4 	addi	r2,gp,-23709
   13fd0:	1885883a 	add	r2,r3,r2
   13fd4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   13fd8:	e0bff917 	ldw	r2,-28(fp)
   13fdc:	10800517 	ldw	r2,20(r2)
   13fe0:	e0bff915 	stw	r2,-28(fp)
   13fe4:	e0bffb17 	ldw	r2,-20(fp)
   13fe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fec:	e0bffe17 	ldw	r2,-8(fp)
   13ff0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13ff4:	e0bff917 	ldw	r2,-28(fp)
   13ff8:	10800c83 	ldbu	r2,50(r2)
   13ffc:	10803fcc 	andi	r2,r2,255
   14000:	10800518 	cmpnei	r2,r2,20
   14004:	103fb21e 	bne	r2,zero,13ed0 <OSTimeTick+0xcc>
   14008:	00000106 	br	14010 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   1400c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   14010:	e037883a 	mov	sp,fp
   14014:	dfc00117 	ldw	ra,4(sp)
   14018:	df000017 	ldw	fp,0(sp)
   1401c:	dec00204 	addi	sp,sp,8
   14020:	f800283a 	ret

00014024 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   14024:	deffff04 	addi	sp,sp,-4
   14028:	df000015 	stw	fp,0(sp)
   1402c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   14030:	00804784 	movi	r2,286
}
   14034:	e037883a 	mov	sp,fp
   14038:	df000017 	ldw	fp,0(sp)
   1403c:	dec00104 	addi	sp,sp,4
   14040:	f800283a 	ret

00014044 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   14044:	deffff04 	addi	sp,sp,-4
   14048:	df000015 	stw	fp,0(sp)
   1404c:	d839883a 	mov	fp,sp
}
   14050:	0001883a 	nop
   14054:	e037883a 	mov	sp,fp
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00104 	addi	sp,sp,4
   14060:	f800283a 	ret

00014064 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14064:	defff804 	addi	sp,sp,-32
   14068:	dfc00715 	stw	ra,28(sp)
   1406c:	df000615 	stw	fp,24(sp)
   14070:	df000604 	addi	fp,sp,24
   14074:	e13ffc15 	stw	r4,-16(fp)
   14078:	e17ffd15 	stw	r5,-12(fp)
   1407c:	3007883a 	mov	r3,r6
   14080:	3805883a 	mov	r2,r7
   14084:	e0fffe05 	stb	r3,-8(fp)
   14088:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   1408c:	e0bffc17 	ldw	r2,-16(fp)
   14090:	10800283 	ldbu	r2,10(r2)
   14094:	10c03fcc 	andi	r3,r2,255
   14098:	008000b4 	movhi	r2,2
   1409c:	10924704 	addi	r2,r2,18716
   140a0:	10c5883a 	add	r2,r2,r3
   140a4:	10800003 	ldbu	r2,0(r2)
   140a8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   140ac:	e0bffa03 	ldbu	r2,-24(fp)
   140b0:	e0fffc17 	ldw	r3,-16(fp)
   140b4:	1885883a 	add	r2,r3,r2
   140b8:	108002c4 	addi	r2,r2,11
   140bc:	10800003 	ldbu	r2,0(r2)
   140c0:	10c03fcc 	andi	r3,r2,255
   140c4:	008000b4 	movhi	r2,2
   140c8:	10924704 	addi	r2,r2,18716
   140cc:	10c5883a 	add	r2,r2,r3
   140d0:	10800003 	ldbu	r2,0(r2)
   140d4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   140d8:	e0bffa03 	ldbu	r2,-24(fp)
   140dc:	100490fa 	slli	r2,r2,3
   140e0:	1007883a 	mov	r3,r2
   140e4:	e0bffa43 	ldbu	r2,-23(fp)
   140e8:	1885883a 	add	r2,r3,r2
   140ec:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   140f0:	e0fffa83 	ldbu	r3,-22(fp)
   140f4:	00800274 	movhi	r2,9
   140f8:	109fb704 	addi	r2,r2,32476
   140fc:	18c7883a 	add	r3,r3,r3
   14100:	18c7883a 	add	r3,r3,r3
   14104:	10c5883a 	add	r2,r2,r3
   14108:	10800017 	ldw	r2,0(r2)
   1410c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   14110:	e0bffb17 	ldw	r2,-20(fp)
   14114:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14118:	e0bffb17 	ldw	r2,-20(fp)
   1411c:	e0fffd17 	ldw	r3,-12(fp)
   14120:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14124:	e0bffb17 	ldw	r2,-20(fp)
   14128:	10800c03 	ldbu	r2,48(r2)
   1412c:	1007883a 	mov	r3,r2
   14130:	e0bffe03 	ldbu	r2,-8(fp)
   14134:	0084303a 	nor	r2,zero,r2
   14138:	1884703a 	and	r2,r3,r2
   1413c:	1007883a 	mov	r3,r2
   14140:	e0bffb17 	ldw	r2,-20(fp)
   14144:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14148:	e0bffb17 	ldw	r2,-20(fp)
   1414c:	e0ffff03 	ldbu	r3,-4(fp)
   14150:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14154:	e0bffb17 	ldw	r2,-20(fp)
   14158:	10800c03 	ldbu	r2,48(r2)
   1415c:	10803fcc 	andi	r2,r2,255
   14160:	1080020c 	andi	r2,r2,8
   14164:	1000111e 	bne	r2,zero,141ac <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14168:	e0bffb17 	ldw	r2,-20(fp)
   1416c:	10c00d83 	ldbu	r3,54(r2)
   14170:	d0a8d883 	ldbu	r2,-23710(gp)
   14174:	1884b03a 	or	r2,r3,r2
   14178:	d0a8d885 	stb	r2,-23710(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1417c:	e0fffa03 	ldbu	r3,-24(fp)
   14180:	e13ffa03 	ldbu	r4,-24(fp)
   14184:	d0a8d8c4 	addi	r2,gp,-23709
   14188:	2085883a 	add	r2,r4,r2
   1418c:	11000003 	ldbu	r4,0(r2)
   14190:	e0bffb17 	ldw	r2,-20(fp)
   14194:	10800d43 	ldbu	r2,53(r2)
   14198:	2084b03a 	or	r2,r4,r2
   1419c:	1009883a 	mov	r4,r2
   141a0:	d0a8d8c4 	addi	r2,gp,-23709
   141a4:	1885883a 	add	r2,r3,r2
   141a8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   141ac:	e17ffc17 	ldw	r5,-16(fp)
   141b0:	e13ffb17 	ldw	r4,-20(fp)
   141b4:	001445c0 	call	1445c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   141b8:	e0bffb17 	ldw	r2,-20(fp)
   141bc:	10800817 	ldw	r2,32(r2)
   141c0:	10000826 	beq	r2,zero,141e4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   141c4:	e0bffb17 	ldw	r2,-20(fp)
   141c8:	10800817 	ldw	r2,32(r2)
   141cc:	100b883a 	mov	r5,r2
   141d0:	e13ffb17 	ldw	r4,-20(fp)
   141d4:	00145140 	call	14514 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   141d8:	e0bffb17 	ldw	r2,-20(fp)
   141dc:	e0fffc17 	ldw	r3,-16(fp)
   141e0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   141e4:	e0bffa83 	ldbu	r2,-22(fp)
}
   141e8:	e037883a 	mov	sp,fp
   141ec:	dfc00117 	ldw	ra,4(sp)
   141f0:	df000017 	ldw	fp,0(sp)
   141f4:	dec00204 	addi	sp,sp,8
   141f8:	f800283a 	ret

000141fc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   141fc:	defffd04 	addi	sp,sp,-12
   14200:	df000215 	stw	fp,8(sp)
   14204:	df000204 	addi	fp,sp,8
   14208:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1420c:	d0a8db97 	ldw	r2,-23698(gp)
   14210:	e0ffff17 	ldw	r3,-4(fp)
   14214:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14218:	d0a8db97 	ldw	r2,-23698(gp)
   1421c:	10800d03 	ldbu	r2,52(r2)
   14220:	10803fcc 	andi	r2,r2,255
   14224:	d0e8db97 	ldw	r3,-23698(gp)
   14228:	18c00d03 	ldbu	r3,52(r3)
   1422c:	18c03fcc 	andi	r3,r3,255
   14230:	e13fff17 	ldw	r4,-4(fp)
   14234:	20c7883a 	add	r3,r4,r3
   14238:	18c002c4 	addi	r3,r3,11
   1423c:	19000003 	ldbu	r4,0(r3)
   14240:	d0e8db97 	ldw	r3,-23698(gp)
   14244:	18c00d43 	ldbu	r3,53(r3)
   14248:	20c6b03a 	or	r3,r4,r3
   1424c:	1809883a 	mov	r4,r3
   14250:	e0ffff17 	ldw	r3,-4(fp)
   14254:	1885883a 	add	r2,r3,r2
   14258:	108002c4 	addi	r2,r2,11
   1425c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14260:	e0bfff17 	ldw	r2,-4(fp)
   14264:	10c00283 	ldbu	r3,10(r2)
   14268:	d0a8db97 	ldw	r2,-23698(gp)
   1426c:	10800d83 	ldbu	r2,54(r2)
   14270:	1884b03a 	or	r2,r3,r2
   14274:	1007883a 	mov	r3,r2
   14278:	e0bfff17 	ldw	r2,-4(fp)
   1427c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14280:	d0a8db97 	ldw	r2,-23698(gp)
   14284:	10800d03 	ldbu	r2,52(r2)
   14288:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1428c:	e0fffe03 	ldbu	r3,-8(fp)
   14290:	e13ffe03 	ldbu	r4,-8(fp)
   14294:	d0a8d8c4 	addi	r2,gp,-23709
   14298:	2085883a 	add	r2,r4,r2
   1429c:	10800003 	ldbu	r2,0(r2)
   142a0:	1009883a 	mov	r4,r2
   142a4:	d0a8db97 	ldw	r2,-23698(gp)
   142a8:	10800d43 	ldbu	r2,53(r2)
   142ac:	0084303a 	nor	r2,zero,r2
   142b0:	2084703a 	and	r2,r4,r2
   142b4:	1009883a 	mov	r4,r2
   142b8:	d0a8d8c4 	addi	r2,gp,-23709
   142bc:	1885883a 	add	r2,r3,r2
   142c0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   142c4:	e0fffe03 	ldbu	r3,-8(fp)
   142c8:	d0a8d8c4 	addi	r2,gp,-23709
   142cc:	1885883a 	add	r2,r3,r2
   142d0:	10800003 	ldbu	r2,0(r2)
   142d4:	10803fcc 	andi	r2,r2,255
   142d8:	1000071e 	bne	r2,zero,142f8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   142dc:	d0a8db97 	ldw	r2,-23698(gp)
   142e0:	10800d83 	ldbu	r2,54(r2)
   142e4:	0084303a 	nor	r2,zero,r2
   142e8:	1007883a 	mov	r3,r2
   142ec:	d0a8d883 	ldbu	r2,-23710(gp)
   142f0:	1884703a 	and	r2,r3,r2
   142f4:	d0a8d885 	stb	r2,-23710(gp)
    }
}
   142f8:	0001883a 	nop
   142fc:	e037883a 	mov	sp,fp
   14300:	df000017 	ldw	fp,0(sp)
   14304:	dec00104 	addi	sp,sp,4
   14308:	f800283a 	ret

0001430c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1430c:	defffb04 	addi	sp,sp,-20
   14310:	df000415 	stw	fp,16(sp)
   14314:	df000404 	addi	fp,sp,16
   14318:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1431c:	d0a8db97 	ldw	r2,-23698(gp)
   14320:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   14324:	d0a8db97 	ldw	r2,-23698(gp)
   14328:	e0ffff17 	ldw	r3,-4(fp)
   1432c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   14330:	e0bfff17 	ldw	r2,-4(fp)
   14334:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14338:	e0bffc17 	ldw	r2,-16(fp)
   1433c:	10800017 	ldw	r2,0(r2)
   14340:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14344:	00002006 	br	143c8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14348:	d0a8db97 	ldw	r2,-23698(gp)
   1434c:	10800d03 	ldbu	r2,52(r2)
   14350:	10803fcc 	andi	r2,r2,255
   14354:	d0e8db97 	ldw	r3,-23698(gp)
   14358:	18c00d03 	ldbu	r3,52(r3)
   1435c:	18c03fcc 	andi	r3,r3,255
   14360:	e13ffd17 	ldw	r4,-12(fp)
   14364:	20c7883a 	add	r3,r4,r3
   14368:	18c002c4 	addi	r3,r3,11
   1436c:	19000003 	ldbu	r4,0(r3)
   14370:	d0e8db97 	ldw	r3,-23698(gp)
   14374:	18c00d43 	ldbu	r3,53(r3)
   14378:	20c6b03a 	or	r3,r4,r3
   1437c:	1809883a 	mov	r4,r3
   14380:	e0fffd17 	ldw	r3,-12(fp)
   14384:	1885883a 	add	r2,r3,r2
   14388:	108002c4 	addi	r2,r2,11
   1438c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14390:	e0bffd17 	ldw	r2,-12(fp)
   14394:	10c00283 	ldbu	r3,10(r2)
   14398:	d0a8db97 	ldw	r2,-23698(gp)
   1439c:	10800d83 	ldbu	r2,54(r2)
   143a0:	1884b03a 	or	r2,r3,r2
   143a4:	1007883a 	mov	r3,r2
   143a8:	e0bffd17 	ldw	r2,-12(fp)
   143ac:	10c00285 	stb	r3,10(r2)
        pevents++;
   143b0:	e0bffc17 	ldw	r2,-16(fp)
   143b4:	10800104 	addi	r2,r2,4
   143b8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   143bc:	e0bffc17 	ldw	r2,-16(fp)
   143c0:	10800017 	ldw	r2,0(r2)
   143c4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   143c8:	e0bffd17 	ldw	r2,-12(fp)
   143cc:	103fde1e 	bne	r2,zero,14348 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   143d0:	d0a8db97 	ldw	r2,-23698(gp)
   143d4:	10800d03 	ldbu	r2,52(r2)
   143d8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   143dc:	e0fffe03 	ldbu	r3,-8(fp)
   143e0:	e13ffe03 	ldbu	r4,-8(fp)
   143e4:	d0a8d8c4 	addi	r2,gp,-23709
   143e8:	2085883a 	add	r2,r4,r2
   143ec:	10800003 	ldbu	r2,0(r2)
   143f0:	1009883a 	mov	r4,r2
   143f4:	d0a8db97 	ldw	r2,-23698(gp)
   143f8:	10800d43 	ldbu	r2,53(r2)
   143fc:	0084303a 	nor	r2,zero,r2
   14400:	2084703a 	and	r2,r4,r2
   14404:	1009883a 	mov	r4,r2
   14408:	d0a8d8c4 	addi	r2,gp,-23709
   1440c:	1885883a 	add	r2,r3,r2
   14410:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14414:	e0fffe03 	ldbu	r3,-8(fp)
   14418:	d0a8d8c4 	addi	r2,gp,-23709
   1441c:	1885883a 	add	r2,r3,r2
   14420:	10800003 	ldbu	r2,0(r2)
   14424:	10803fcc 	andi	r2,r2,255
   14428:	1000071e 	bne	r2,zero,14448 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1442c:	d0a8db97 	ldw	r2,-23698(gp)
   14430:	10800d83 	ldbu	r2,54(r2)
   14434:	0084303a 	nor	r2,zero,r2
   14438:	1007883a 	mov	r3,r2
   1443c:	d0a8d883 	ldbu	r2,-23710(gp)
   14440:	1884703a 	and	r2,r3,r2
   14444:	d0a8d885 	stb	r2,-23710(gp)
    }
}
   14448:	0001883a 	nop
   1444c:	e037883a 	mov	sp,fp
   14450:	df000017 	ldw	fp,0(sp)
   14454:	dec00104 	addi	sp,sp,4
   14458:	f800283a 	ret

0001445c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1445c:	defffc04 	addi	sp,sp,-16
   14460:	df000315 	stw	fp,12(sp)
   14464:	df000304 	addi	fp,sp,12
   14468:	e13ffe15 	stw	r4,-8(fp)
   1446c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14470:	e0bffe17 	ldw	r2,-8(fp)
   14474:	10800d03 	ldbu	r2,52(r2)
   14478:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1447c:	e0bffd03 	ldbu	r2,-12(fp)
   14480:	e0fffd03 	ldbu	r3,-12(fp)
   14484:	e13fff17 	ldw	r4,-4(fp)
   14488:	20c7883a 	add	r3,r4,r3
   1448c:	18c002c4 	addi	r3,r3,11
   14490:	18c00003 	ldbu	r3,0(r3)
   14494:	1809883a 	mov	r4,r3
   14498:	e0fffe17 	ldw	r3,-8(fp)
   1449c:	18c00d43 	ldbu	r3,53(r3)
   144a0:	00c6303a 	nor	r3,zero,r3
   144a4:	20c6703a 	and	r3,r4,r3
   144a8:	1809883a 	mov	r4,r3
   144ac:	e0ffff17 	ldw	r3,-4(fp)
   144b0:	1885883a 	add	r2,r3,r2
   144b4:	108002c4 	addi	r2,r2,11
   144b8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   144bc:	e0bffd03 	ldbu	r2,-12(fp)
   144c0:	e0ffff17 	ldw	r3,-4(fp)
   144c4:	1885883a 	add	r2,r3,r2
   144c8:	108002c4 	addi	r2,r2,11
   144cc:	10800003 	ldbu	r2,0(r2)
   144d0:	10803fcc 	andi	r2,r2,255
   144d4:	10000a1e 	bne	r2,zero,14500 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   144d8:	e0bfff17 	ldw	r2,-4(fp)
   144dc:	10800283 	ldbu	r2,10(r2)
   144e0:	1007883a 	mov	r3,r2
   144e4:	e0bffe17 	ldw	r2,-8(fp)
   144e8:	10800d83 	ldbu	r2,54(r2)
   144ec:	0084303a 	nor	r2,zero,r2
   144f0:	1884703a 	and	r2,r3,r2
   144f4:	1007883a 	mov	r3,r2
   144f8:	e0bfff17 	ldw	r2,-4(fp)
   144fc:	10c00285 	stb	r3,10(r2)
    }
}
   14500:	0001883a 	nop
   14504:	e037883a 	mov	sp,fp
   14508:	df000017 	ldw	fp,0(sp)
   1450c:	dec00104 	addi	sp,sp,4
   14510:	f800283a 	ret

00014514 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14514:	defffa04 	addi	sp,sp,-24
   14518:	df000515 	stw	fp,20(sp)
   1451c:	df000504 	addi	fp,sp,20
   14520:	e13ffe15 	stw	r4,-8(fp)
   14524:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   14528:	e0bffe17 	ldw	r2,-8(fp)
   1452c:	10800d03 	ldbu	r2,52(r2)
   14530:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   14534:	e0bffe17 	ldw	r2,-8(fp)
   14538:	10800d83 	ldbu	r2,54(r2)
   1453c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   14540:	e0bffe17 	ldw	r2,-8(fp)
   14544:	10800d43 	ldbu	r2,53(r2)
   14548:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1454c:	e0bfff17 	ldw	r2,-4(fp)
   14550:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   14554:	e0bffb17 	ldw	r2,-20(fp)
   14558:	10800017 	ldw	r2,0(r2)
   1455c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14560:	00002506 	br	145f8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14564:	e0bffd03 	ldbu	r2,-12(fp)
   14568:	e0fffd03 	ldbu	r3,-12(fp)
   1456c:	e13ffc17 	ldw	r4,-16(fp)
   14570:	20c7883a 	add	r3,r4,r3
   14574:	18c002c4 	addi	r3,r3,11
   14578:	18c00003 	ldbu	r3,0(r3)
   1457c:	1809883a 	mov	r4,r3
   14580:	e0fffd83 	ldbu	r3,-10(fp)
   14584:	00c6303a 	nor	r3,zero,r3
   14588:	20c6703a 	and	r3,r4,r3
   1458c:	1809883a 	mov	r4,r3
   14590:	e0fffc17 	ldw	r3,-16(fp)
   14594:	1885883a 	add	r2,r3,r2
   14598:	108002c4 	addi	r2,r2,11
   1459c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   145a0:	e0bffd03 	ldbu	r2,-12(fp)
   145a4:	e0fffc17 	ldw	r3,-16(fp)
   145a8:	1885883a 	add	r2,r3,r2
   145ac:	108002c4 	addi	r2,r2,11
   145b0:	10800003 	ldbu	r2,0(r2)
   145b4:	10803fcc 	andi	r2,r2,255
   145b8:	1000091e 	bne	r2,zero,145e0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   145bc:	e0bffc17 	ldw	r2,-16(fp)
   145c0:	10800283 	ldbu	r2,10(r2)
   145c4:	1007883a 	mov	r3,r2
   145c8:	e0bffd43 	ldbu	r2,-11(fp)
   145cc:	0084303a 	nor	r2,zero,r2
   145d0:	1884703a 	and	r2,r3,r2
   145d4:	1007883a 	mov	r3,r2
   145d8:	e0bffc17 	ldw	r2,-16(fp)
   145dc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   145e0:	e0bffb17 	ldw	r2,-20(fp)
   145e4:	10800104 	addi	r2,r2,4
   145e8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   145ec:	e0bffb17 	ldw	r2,-20(fp)
   145f0:	10800017 	ldw	r2,0(r2)
   145f4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	103fd91e 	bne	r2,zero,14564 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   14600:	0001883a 	nop
   14604:	e037883a 	mov	sp,fp
   14608:	df000017 	ldw	fp,0(sp)
   1460c:	dec00104 	addi	sp,sp,4
   14610:	f800283a 	ret

00014614 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14614:	defffc04 	addi	sp,sp,-16
   14618:	df000315 	stw	fp,12(sp)
   1461c:	df000304 	addi	fp,sp,12
   14620:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14624:	e0bfff17 	ldw	r2,-4(fp)
   14628:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1462c:	e0bfff17 	ldw	r2,-4(fp)
   14630:	108002c4 	addi	r2,r2,11
   14634:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14638:	e03ffe05 	stb	zero,-8(fp)
   1463c:	00000706 	br	1465c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   14640:	e0bffd17 	ldw	r2,-12(fp)
   14644:	10c00044 	addi	r3,r2,1
   14648:	e0fffd15 	stw	r3,-12(fp)
   1464c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14650:	e0bffe03 	ldbu	r2,-8(fp)
   14654:	10800044 	addi	r2,r2,1
   14658:	e0bffe05 	stb	r2,-8(fp)
   1465c:	e0bffe03 	ldbu	r2,-8(fp)
   14660:	108000f0 	cmpltui	r2,r2,3
   14664:	103ff61e 	bne	r2,zero,14640 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   14668:	0001883a 	nop
   1466c:	e037883a 	mov	sp,fp
   14670:	df000017 	ldw	fp,0(sp)
   14674:	dec00104 	addi	sp,sp,4
   14678:	f800283a 	ret

0001467c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1467c:	defffb04 	addi	sp,sp,-20
   14680:	dfc00415 	stw	ra,16(sp)
   14684:	df000315 	stw	fp,12(sp)
   14688:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   1468c:	0142d004 	movi	r5,2880
   14690:	01000274 	movhi	r4,9
   14694:	211ba304 	addi	r4,r4,28300
   14698:	00149f40 	call	149f4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1469c:	00800274 	movhi	r2,9
   146a0:	109ba304 	addi	r2,r2,28300
   146a4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   146a8:	00800274 	movhi	r2,9
   146ac:	109baf04 	addi	r2,r2,28348
   146b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   146b4:	e03ffd0d 	sth	zero,-12(fp)
   146b8:	00001306 	br	14708 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   146bc:	e0bffe17 	ldw	r2,-8(fp)
   146c0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   146c4:	e0bffe17 	ldw	r2,-8(fp)
   146c8:	e0ffff17 	ldw	r3,-4(fp)
   146cc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   146d0:	e0bffe17 	ldw	r2,-8(fp)
   146d4:	00c00fc4 	movi	r3,63
   146d8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   146dc:	e0bffe17 	ldw	r2,-8(fp)
   146e0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   146e4:	e0bffe17 	ldw	r2,-8(fp)
   146e8:	10800c04 	addi	r2,r2,48
   146ec:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   146f0:	e0bfff17 	ldw	r2,-4(fp)
   146f4:	10800c04 	addi	r2,r2,48
   146f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   146fc:	e0bffd0b 	ldhu	r2,-12(fp)
   14700:	10800044 	addi	r2,r2,1
   14704:	e0bffd0d 	sth	r2,-12(fp)
   14708:	e0bffd0b 	ldhu	r2,-12(fp)
   1470c:	10800ef0 	cmpltui	r2,r2,59
   14710:	103fea1e 	bne	r2,zero,146bc <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14714:	e0bffe17 	ldw	r2,-8(fp)
   14718:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1471c:	e0bffe17 	ldw	r2,-8(fp)
   14720:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   14724:	e0bffe17 	ldw	r2,-8(fp)
   14728:	00c00fc4 	movi	r3,63
   1472c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   14730:	e0bffe17 	ldw	r2,-8(fp)
   14734:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   14738:	00800274 	movhi	r2,9
   1473c:	109ba304 	addi	r2,r2,28300
   14740:	d0a8d995 	stw	r2,-23706(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   14744:	0001883a 	nop
   14748:	e037883a 	mov	sp,fp
   1474c:	dfc00117 	ldw	ra,4(sp)
   14750:	df000017 	ldw	fp,0(sp)
   14754:	dec00204 	addi	sp,sp,8
   14758:	f800283a 	ret

0001475c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1475c:	deffff04 	addi	sp,sp,-4
   14760:	df000015 	stw	fp,0(sp)
   14764:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   14768:	d028dc95 	stw	zero,-23694(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1476c:	d028da85 	stb	zero,-23702(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   14770:	d028cc85 	stb	zero,-23758(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14774:	d028d4c5 	stb	zero,-23725(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   14778:	d028ccc5 	stb	zero,-23757(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1477c:	d028d195 	stw	zero,-23738(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   14780:	d028cd95 	stw	zero,-23754(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14784:	d028df95 	stw	zero,-23682(gp)
    OSIdleCtrMax  = 0L;
   14788:	d028d295 	stw	zero,-23734(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1478c:	d028de85 	stb	zero,-23686(gp)
#endif
}
   14790:	0001883a 	nop
   14794:	e037883a 	mov	sp,fp
   14798:	df000017 	ldw	fp,0(sp)
   1479c:	dec00104 	addi	sp,sp,4
   147a0:	f800283a 	ret

000147a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   147a4:	defffd04 	addi	sp,sp,-12
   147a8:	df000215 	stw	fp,8(sp)
   147ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   147b0:	d028d885 	stb	zero,-23710(gp)
    prdytbl       = &OSRdyTbl[0];
   147b4:	d0a8d8c4 	addi	r2,gp,-23709
   147b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   147bc:	e03ffe05 	stb	zero,-8(fp)
   147c0:	00000706 	br	147e0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   147c4:	e0bfff17 	ldw	r2,-4(fp)
   147c8:	10c00044 	addi	r3,r2,1
   147cc:	e0ffff15 	stw	r3,-4(fp)
   147d0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   147d4:	e0bffe03 	ldbu	r2,-8(fp)
   147d8:	10800044 	addi	r2,r2,1
   147dc:	e0bffe05 	stb	r2,-8(fp)
   147e0:	e0bffe03 	ldbu	r2,-8(fp)
   147e4:	108000f0 	cmpltui	r2,r2,3
   147e8:	103ff61e 	bne	r2,zero,147c4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   147ec:	d028cec5 	stb	zero,-23749(gp)
    OSPrioHighRdy = 0;
   147f0:	d028ce85 	stb	zero,-23750(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   147f4:	d028d695 	stw	zero,-23718(gp)
    OSTCBCur      = (OS_TCB *)0;
   147f8:	d028db95 	stw	zero,-23698(gp)
}
   147fc:	0001883a 	nop
   14800:	e037883a 	mov	sp,fp
   14804:	df000017 	ldw	fp,0(sp)
   14808:	dec00104 	addi	sp,sp,4
   1480c:	f800283a 	ret

00014810 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   14810:	defff804 	addi	sp,sp,-32
   14814:	dfc00715 	stw	ra,28(sp)
   14818:	df000615 	stw	fp,24(sp)
   1481c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   14820:	008000c4 	movi	r2,3
   14824:	d8800415 	stw	r2,16(sp)
   14828:	d8000315 	stw	zero,12(sp)
   1482c:	00808004 	movi	r2,512
   14830:	d8800215 	stw	r2,8(sp)
   14834:	00800274 	movhi	r2,9
   14838:	1099a304 	addi	r2,r2,26252
   1483c:	d8800115 	stw	r2,4(sp)
   14840:	00bfffd4 	movui	r2,65535
   14844:	d8800015 	stw	r2,0(sp)
   14848:	01c00504 	movi	r7,20
   1484c:	01800274 	movhi	r6,9
   14850:	319ba204 	addi	r6,r6,28296
   14854:	000b883a 	mov	r5,zero
   14858:	01000074 	movhi	r4,1
   1485c:	21132f04 	addi	r4,r4,19644
   14860:	0019e540 	call	19e54 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14864:	e1bfff04 	addi	r6,fp,-4
   14868:	014000b4 	movhi	r5,2
   1486c:	29528704 	addi	r5,r5,18972
   14870:	01000504 	movi	r4,20
   14874:	001a6640 	call	1a664 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14878:	0001883a 	nop
   1487c:	e037883a 	mov	sp,fp
   14880:	dfc00117 	ldw	ra,4(sp)
   14884:	df000017 	ldw	fp,0(sp)
   14888:	dec00204 	addi	sp,sp,8
   1488c:	f800283a 	ret

00014890 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14890:	defff804 	addi	sp,sp,-32
   14894:	dfc00715 	stw	ra,28(sp)
   14898:	df000615 	stw	fp,24(sp)
   1489c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   148a0:	008000c4 	movi	r2,3
   148a4:	d8800415 	stw	r2,16(sp)
   148a8:	d8000315 	stw	zero,12(sp)
   148ac:	00808004 	movi	r2,512
   148b0:	d8800215 	stw	r2,8(sp)
   148b4:	00800274 	movhi	r2,9
   148b8:	10972b04 	addi	r2,r2,23724
   148bc:	d8800115 	stw	r2,4(sp)
   148c0:	00bfff94 	movui	r2,65534
   148c4:	d8800015 	stw	r2,0(sp)
   148c8:	01c004c4 	movi	r7,19
   148cc:	01800274 	movhi	r6,9
   148d0:	31992a04 	addi	r6,r6,25768
   148d4:	000b883a 	mov	r5,zero
   148d8:	01000074 	movhi	r4,1
   148dc:	21134604 	addi	r4,r4,19736
   148e0:	0019e540 	call	19e54 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   148e4:	e1bfff04 	addi	r6,fp,-4
   148e8:	014000b4 	movhi	r5,2
   148ec:	29528b04 	addi	r5,r5,18988
   148f0:	010004c4 	movi	r4,19
   148f4:	001a6640 	call	1a664 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   148f8:	0001883a 	nop
   148fc:	e037883a 	mov	sp,fp
   14900:	dfc00117 	ldw	ra,4(sp)
   14904:	df000017 	ldw	fp,0(sp)
   14908:	dec00204 	addi	sp,sp,8
   1490c:	f800283a 	ret

00014910 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14910:	defffb04 	addi	sp,sp,-20
   14914:	dfc00415 	stw	ra,16(sp)
   14918:	df000315 	stw	fp,12(sp)
   1491c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14920:	01414404 	movi	r5,1296
   14924:	01000274 	movhi	r4,9
   14928:	211e7304 	addi	r4,r4,31180
   1492c:	00149f40 	call	149f4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14930:	01401504 	movi	r5,84
   14934:	01000274 	movhi	r4,9
   14938:	211fb704 	addi	r4,r4,32476
   1493c:	00149f40 	call	149f4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   14940:	00800274 	movhi	r2,9
   14944:	109e7304 	addi	r2,r2,31180
   14948:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1494c:	00800274 	movhi	r2,9
   14950:	109e8e04 	addi	r2,r2,31288
   14954:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14958:	e03ffd05 	stb	zero,-12(fp)
   1495c:	00001106 	br	149a4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14960:	e0bffe17 	ldw	r2,-8(fp)
   14964:	e0ffff17 	ldw	r3,-4(fp)
   14968:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1496c:	e0bffe17 	ldw	r2,-8(fp)
   14970:	00c00fc4 	movi	r3,63
   14974:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14978:	e0bffe17 	ldw	r2,-8(fp)
   1497c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14980:	e0bffe17 	ldw	r2,-8(fp)
   14984:	10801b04 	addi	r2,r2,108
   14988:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1498c:	e0bfff17 	ldw	r2,-4(fp)
   14990:	10801b04 	addi	r2,r2,108
   14994:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14998:	e0bffd03 	ldbu	r2,-12(fp)
   1499c:	10800044 	addi	r2,r2,1
   149a0:	e0bffd05 	stb	r2,-12(fp)
   149a4:	e0bffd03 	ldbu	r2,-12(fp)
   149a8:	108002f0 	cmpltui	r2,r2,11
   149ac:	103fec1e 	bne	r2,zero,14960 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   149b0:	e0bffe17 	ldw	r2,-8(fp)
   149b4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	00c00fc4 	movi	r3,63
   149c0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   149c4:	e0bffe17 	ldw	r2,-8(fp)
   149c8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   149cc:	d028cf95 	stw	zero,-23746(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   149d0:	00800274 	movhi	r2,9
   149d4:	109e7304 	addi	r2,r2,31180
   149d8:	d0a8d395 	stw	r2,-23730(gp)
}
   149dc:	0001883a 	nop
   149e0:	e037883a 	mov	sp,fp
   149e4:	dfc00117 	ldw	ra,4(sp)
   149e8:	df000017 	ldw	fp,0(sp)
   149ec:	dec00204 	addi	sp,sp,8
   149f0:	f800283a 	ret

000149f4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   149f4:	defffd04 	addi	sp,sp,-12
   149f8:	df000215 	stw	fp,8(sp)
   149fc:	df000204 	addi	fp,sp,8
   14a00:	e13ffe15 	stw	r4,-8(fp)
   14a04:	2805883a 	mov	r2,r5
   14a08:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14a0c:	00000706 	br	14a2c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14a10:	e0bffe17 	ldw	r2,-8(fp)
   14a14:	10c00044 	addi	r3,r2,1
   14a18:	e0fffe15 	stw	r3,-8(fp)
   14a1c:	10000005 	stb	zero,0(r2)
        size--;
   14a20:	e0bfff0b 	ldhu	r2,-4(fp)
   14a24:	10bfffc4 	addi	r2,r2,-1
   14a28:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14a2c:	e0bfff0b 	ldhu	r2,-4(fp)
   14a30:	103ff71e 	bne	r2,zero,14a10 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14a34:	0001883a 	nop
   14a38:	e037883a 	mov	sp,fp
   14a3c:	df000017 	ldw	fp,0(sp)
   14a40:	dec00104 	addi	sp,sp,4
   14a44:	f800283a 	ret

00014a48 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14a48:	defffc04 	addi	sp,sp,-16
   14a4c:	df000315 	stw	fp,12(sp)
   14a50:	df000304 	addi	fp,sp,12
   14a54:	e13ffd15 	stw	r4,-12(fp)
   14a58:	e17ffe15 	stw	r5,-8(fp)
   14a5c:	3005883a 	mov	r2,r6
   14a60:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14a64:	00000b06 	br	14a94 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14a68:	e0bffd17 	ldw	r2,-12(fp)
   14a6c:	10c00044 	addi	r3,r2,1
   14a70:	e0fffd15 	stw	r3,-12(fp)
   14a74:	e0fffe17 	ldw	r3,-8(fp)
   14a78:	19000044 	addi	r4,r3,1
   14a7c:	e13ffe15 	stw	r4,-8(fp)
   14a80:	18c00003 	ldbu	r3,0(r3)
   14a84:	10c00005 	stb	r3,0(r2)
        size--;
   14a88:	e0bfff0b 	ldhu	r2,-4(fp)
   14a8c:	10bfffc4 	addi	r2,r2,-1
   14a90:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14a94:	e0bfff0b 	ldhu	r2,-4(fp)
   14a98:	103ff31e 	bne	r2,zero,14a68 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   14a9c:	0001883a 	nop
   14aa0:	e037883a 	mov	sp,fp
   14aa4:	df000017 	ldw	fp,0(sp)
   14aa8:	dec00104 	addi	sp,sp,4
   14aac:	f800283a 	ret

00014ab0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14ab0:	defffb04 	addi	sp,sp,-20
   14ab4:	dfc00415 	stw	ra,16(sp)
   14ab8:	df000315 	stw	fp,12(sp)
   14abc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14ac0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ac4:	0005303a 	rdctl	r2,status
   14ac8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14acc:	e0ffff17 	ldw	r3,-4(fp)
   14ad0:	00bfff84 	movi	r2,-2
   14ad4:	1884703a 	and	r2,r3,r2
   14ad8:	1001703a 	wrctl	status,r2
  
  return context;
   14adc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   14ae0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14ae4:	d0a8da83 	ldbu	r2,-23702(gp)
   14ae8:	10803fcc 	andi	r2,r2,255
   14aec:	10001a1e 	bne	r2,zero,14b58 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14af0:	d0a8cc83 	ldbu	r2,-23758(gp)
   14af4:	10803fcc 	andi	r2,r2,255
   14af8:	1000171e 	bne	r2,zero,14b58 <OS_Sched+0xa8>
            OS_SchedNew();
   14afc:	0014b800 	call	14b80 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14b00:	d0e8ce83 	ldbu	r3,-23750(gp)
   14b04:	d0a8cec3 	ldbu	r2,-23749(gp)
   14b08:	18c03fcc 	andi	r3,r3,255
   14b0c:	10803fcc 	andi	r2,r2,255
   14b10:	18801126 	beq	r3,r2,14b58 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14b14:	d0a8ce83 	ldbu	r2,-23750(gp)
   14b18:	10c03fcc 	andi	r3,r2,255
   14b1c:	00800274 	movhi	r2,9
   14b20:	109fb704 	addi	r2,r2,32476
   14b24:	18c7883a 	add	r3,r3,r3
   14b28:	18c7883a 	add	r3,r3,r3
   14b2c:	10c5883a 	add	r2,r2,r3
   14b30:	10800017 	ldw	r2,0(r2)
   14b34:	d0a8d695 	stw	r2,-23718(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14b38:	d0a8d697 	ldw	r2,-23718(gp)
   14b3c:	10c00e17 	ldw	r3,56(r2)
   14b40:	18c00044 	addi	r3,r3,1
   14b44:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14b48:	d0a8d197 	ldw	r2,-23738(gp)
   14b4c:	10800044 	addi	r2,r2,1
   14b50:	d0a8d195 	stw	r2,-23738(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14b54:	002399c0 	call	2399c <OSCtxSw>
   14b58:	e0bffd17 	ldw	r2,-12(fp)
   14b5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b60:	e0bffe17 	ldw	r2,-8(fp)
   14b64:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14b68:	0001883a 	nop
   14b6c:	e037883a 	mov	sp,fp
   14b70:	dfc00117 	ldw	ra,4(sp)
   14b74:	df000017 	ldw	fp,0(sp)
   14b78:	dec00204 	addi	sp,sp,8
   14b7c:	f800283a 	ret

00014b80 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14b80:	defffe04 	addi	sp,sp,-8
   14b84:	df000115 	stw	fp,4(sp)
   14b88:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14b8c:	d0a8d883 	ldbu	r2,-23710(gp)
   14b90:	10c03fcc 	andi	r3,r2,255
   14b94:	008000b4 	movhi	r2,2
   14b98:	10924704 	addi	r2,r2,18716
   14b9c:	10c5883a 	add	r2,r2,r3
   14ba0:	10800003 	ldbu	r2,0(r2)
   14ba4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14ba8:	e0bfff03 	ldbu	r2,-4(fp)
   14bac:	100490fa 	slli	r2,r2,3
   14bb0:	1009883a 	mov	r4,r2
   14bb4:	e0ffff03 	ldbu	r3,-4(fp)
   14bb8:	d0a8d8c4 	addi	r2,gp,-23709
   14bbc:	1885883a 	add	r2,r3,r2
   14bc0:	10800003 	ldbu	r2,0(r2)
   14bc4:	10c03fcc 	andi	r3,r2,255
   14bc8:	008000b4 	movhi	r2,2
   14bcc:	10924704 	addi	r2,r2,18716
   14bd0:	10c5883a 	add	r2,r2,r3
   14bd4:	10800003 	ldbu	r2,0(r2)
   14bd8:	2085883a 	add	r2,r4,r2
   14bdc:	d0a8ce85 	stb	r2,-23750(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14be0:	0001883a 	nop
   14be4:	e037883a 	mov	sp,fp
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00104 	addi	sp,sp,4
   14bf0:	f800283a 	ret

00014bf4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14bf4:	defffc04 	addi	sp,sp,-16
   14bf8:	df000315 	stw	fp,12(sp)
   14bfc:	df000304 	addi	fp,sp,12
   14c00:	e13ffe15 	stw	r4,-8(fp)
   14c04:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14c08:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14c0c:	00000b06 	br	14c3c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	10c00044 	addi	r3,r2,1
   14c18:	e0fffe15 	stw	r3,-8(fp)
   14c1c:	e0ffff17 	ldw	r3,-4(fp)
   14c20:	19000044 	addi	r4,r3,1
   14c24:	e13fff15 	stw	r4,-4(fp)
   14c28:	18c00003 	ldbu	r3,0(r3)
   14c2c:	10c00005 	stb	r3,0(r2)
        len++;
   14c30:	e0bffd03 	ldbu	r2,-12(fp)
   14c34:	10800044 	addi	r2,r2,1
   14c38:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14c3c:	e0bfff17 	ldw	r2,-4(fp)
   14c40:	10800003 	ldbu	r2,0(r2)
   14c44:	10803fcc 	andi	r2,r2,255
   14c48:	103ff11e 	bne	r2,zero,14c10 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14c4c:	e0bffe17 	ldw	r2,-8(fp)
   14c50:	10000005 	stb	zero,0(r2)
    return (len);
   14c54:	e0bffd03 	ldbu	r2,-12(fp)
}
   14c58:	e037883a 	mov	sp,fp
   14c5c:	df000017 	ldw	fp,0(sp)
   14c60:	dec00104 	addi	sp,sp,4
   14c64:	f800283a 	ret

00014c68 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14c68:	defffd04 	addi	sp,sp,-12
   14c6c:	df000215 	stw	fp,8(sp)
   14c70:	df000204 	addi	fp,sp,8
   14c74:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14c78:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14c7c:	00000606 	br	14c98 <OS_StrLen+0x30>
        psrc++;
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	10800044 	addi	r2,r2,1
   14c88:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14c8c:	e0bffe03 	ldbu	r2,-8(fp)
   14c90:	10800044 	addi	r2,r2,1
   14c94:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14c98:	e0bfff17 	ldw	r2,-4(fp)
   14c9c:	10800003 	ldbu	r2,0(r2)
   14ca0:	10803fcc 	andi	r2,r2,255
   14ca4:	103ff61e 	bne	r2,zero,14c80 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   14ca8:	e0bffe03 	ldbu	r2,-8(fp)
}
   14cac:	e037883a 	mov	sp,fp
   14cb0:	df000017 	ldw	fp,0(sp)
   14cb4:	dec00104 	addi	sp,sp,4
   14cb8:	f800283a 	ret

00014cbc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14cbc:	defffa04 	addi	sp,sp,-24
   14cc0:	dfc00515 	stw	ra,20(sp)
   14cc4:	df000415 	stw	fp,16(sp)
   14cc8:	df000404 	addi	fp,sp,16
   14ccc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14cd0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fffd17 	ldw	r3,-12(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14cf0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14cf4:	d0a8cd97 	ldw	r2,-23754(gp)
   14cf8:	10800044 	addi	r2,r2,1
   14cfc:	d0a8cd95 	stw	r2,-23754(gp)
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14d10:	0023cb00 	call	23cb0 <OSTaskIdleHook>
    }
   14d14:	003fef06 	br	14cd4 <OS_TaskIdle+0x18>

00014d18 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14d18:	defff804 	addi	sp,sp,-32
   14d1c:	dfc00715 	stw	ra,28(sp)
   14d20:	df000615 	stw	fp,24(sp)
   14d24:	dc400515 	stw	r17,20(sp)
   14d28:	dc000415 	stw	r16,16(sp)
   14d2c:	df000604 	addi	fp,sp,24
   14d30:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d34:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14d38:	00000206 	br	14d44 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14d3c:	01000044 	movi	r4,1
   14d40:	001af240 	call	1af24 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14d44:	d0a8de83 	ldbu	r2,-23686(gp)
   14d48:	10803fcc 	andi	r2,r2,255
   14d4c:	103ffb26 	beq	r2,zero,14d3c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14d50:	d0e8d297 	ldw	r3,-23734(gp)
   14d54:	00947b34 	movhi	r2,20972
   14d58:	10a147c4 	addi	r2,r2,-31457
   14d5c:	1888383a 	mulxuu	r4,r3,r2
   14d60:	1885383a 	mul	r2,r3,r2
   14d64:	1021883a 	mov	r16,r2
   14d68:	2023883a 	mov	r17,r4
   14d6c:	8804d17a 	srli	r2,r17,5
   14d70:	d0a8d295 	stw	r2,-23734(gp)
    if (OSIdleCtrMax == 0L) {
   14d74:	d0a8d297 	ldw	r2,-23734(gp)
   14d78:	1000031e 	bne	r2,zero,14d88 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14d7c:	d028d485 	stb	zero,-23726(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14d80:	01003fc4 	movi	r4,255
   14d84:	001abac0 	call	1abac <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d88:	0005303a 	rdctl	r2,status
   14d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d90:	e0fffb17 	ldw	r3,-20(fp)
   14d94:	00bfff84 	movi	r2,-2
   14d98:	1884703a 	and	r2,r3,r2
   14d9c:	1001703a 	wrctl	status,r2
  
  return context;
   14da0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14da4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14da8:	d0a8cd97 	ldw	r2,-23754(gp)
   14dac:	d0a8df95 	stw	r2,-23682(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14db0:	d028cd95 	stw	zero,-23754(gp)
   14db4:	e0bffa17 	ldw	r2,-24(fp)
   14db8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dbc:	e0bffc17 	ldw	r2,-16(fp)
   14dc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14dc4:	d0e8df97 	ldw	r3,-23682(gp)
   14dc8:	d0a8d297 	ldw	r2,-23734(gp)
   14dcc:	1885203a 	divu	r2,r3,r2
   14dd0:	1007883a 	mov	r3,r2
   14dd4:	00801904 	movi	r2,100
   14dd8:	10c5c83a 	sub	r2,r2,r3
   14ddc:	d0a8d485 	stb	r2,-23726(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14de0:	0023c300 	call	23c30 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14de4:	0014df40 	call	14df4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14de8:	0009883a 	mov	r4,zero
   14dec:	001af240 	call	1af24 <OSTimeDly>
    }
   14df0:	003fe506 	br	14d88 <OS_TaskStat+0x70>

00014df4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14df4:	defffa04 	addi	sp,sp,-24
   14df8:	dfc00515 	stw	ra,20(sp)
   14dfc:	df000415 	stw	fp,16(sp)
   14e00:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14e04:	e03ffc05 	stb	zero,-16(fp)
   14e08:	00002406 	br	14e9c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14e0c:	e0bffc03 	ldbu	r2,-16(fp)
   14e10:	e0fffe04 	addi	r3,fp,-8
   14e14:	180b883a 	mov	r5,r3
   14e18:	1009883a 	mov	r4,r2
   14e1c:	001a9ec0 	call	1a9ec <OSTaskStkChk>
   14e20:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14e24:	e0bffc43 	ldbu	r2,-15(fp)
   14e28:	1000191e 	bne	r2,zero,14e90 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14e2c:	e0fffc03 	ldbu	r3,-16(fp)
   14e30:	00800274 	movhi	r2,9
   14e34:	109fb704 	addi	r2,r2,32476
   14e38:	18c7883a 	add	r3,r3,r3
   14e3c:	18c7883a 	add	r3,r3,r3
   14e40:	10c5883a 	add	r2,r2,r3
   14e44:	10800017 	ldw	r2,0(r2)
   14e48:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14e4c:	e0bffd17 	ldw	r2,-12(fp)
   14e50:	10000f26 	beq	r2,zero,14e90 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14e54:	e0bffd17 	ldw	r2,-12(fp)
   14e58:	10800060 	cmpeqi	r2,r2,1
   14e5c:	10000c1e 	bne	r2,zero,14e90 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14e60:	e0bffd17 	ldw	r2,-12(fp)
   14e64:	10c00217 	ldw	r3,8(r2)
   14e68:	e0bffd17 	ldw	r2,-12(fp)
   14e6c:	10800317 	ldw	r2,12(r2)
   14e70:	1085883a 	add	r2,r2,r2
   14e74:	1085883a 	add	r2,r2,r2
   14e78:	1887883a 	add	r3,r3,r2
   14e7c:	e0bffd17 	ldw	r2,-12(fp)
   14e80:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   14e84:	e0ffff17 	ldw	r3,-4(fp)
   14e88:	e0bffd17 	ldw	r2,-12(fp)
   14e8c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14e90:	e0bffc03 	ldbu	r2,-16(fp)
   14e94:	10800044 	addi	r2,r2,1
   14e98:	e0bffc05 	stb	r2,-16(fp)
   14e9c:	e0bffc03 	ldbu	r2,-16(fp)
   14ea0:	10800570 	cmpltui	r2,r2,21
   14ea4:	103fd91e 	bne	r2,zero,14e0c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   14ea8:	0001883a 	nop
   14eac:	e037883a 	mov	sp,fp
   14eb0:	dfc00117 	ldw	ra,4(sp)
   14eb4:	df000017 	ldw	fp,0(sp)
   14eb8:	dec00204 	addi	sp,sp,8
   14ebc:	f800283a 	ret

00014ec0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   14ec0:	defff204 	addi	sp,sp,-56
   14ec4:	dfc00d15 	stw	ra,52(sp)
   14ec8:	df000c15 	stw	fp,48(sp)
   14ecc:	df000c04 	addi	fp,sp,48
   14ed0:	e17ffc15 	stw	r5,-16(fp)
   14ed4:	e1bffd15 	stw	r6,-12(fp)
   14ed8:	3807883a 	mov	r3,r7
   14edc:	e0800417 	ldw	r2,16(fp)
   14ee0:	e13ffb05 	stb	r4,-20(fp)
   14ee4:	e0fffe0d 	sth	r3,-8(fp)
   14ee8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14eec:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ef0:	0005303a 	rdctl	r2,status
   14ef4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ef8:	e0fffa17 	ldw	r3,-24(fp)
   14efc:	00bfff84 	movi	r2,-2
   14f00:	1884703a 	and	r2,r3,r2
   14f04:	1001703a 	wrctl	status,r2
  
  return context;
   14f08:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   14f0c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   14f10:	d0a8d397 	ldw	r2,-23730(gp)
   14f14:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   14f18:	e0bff617 	ldw	r2,-40(fp)
   14f1c:	10009326 	beq	r2,zero,1516c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   14f20:	e0bff617 	ldw	r2,-40(fp)
   14f24:	10800517 	ldw	r2,20(r2)
   14f28:	d0a8d395 	stw	r2,-23730(gp)
   14f2c:	e0bff417 	ldw	r2,-48(fp)
   14f30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f34:	e0bff817 	ldw	r2,-32(fp)
   14f38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   14f3c:	e0bff617 	ldw	r2,-40(fp)
   14f40:	e0fffc17 	ldw	r3,-16(fp)
   14f44:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   14f48:	e0bff617 	ldw	r2,-40(fp)
   14f4c:	e0fffb03 	ldbu	r3,-20(fp)
   14f50:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   14f54:	e0bff617 	ldw	r2,-40(fp)
   14f58:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   14f5c:	e0bff617 	ldw	r2,-40(fp)
   14f60:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   14f64:	e0bff617 	ldw	r2,-40(fp)
   14f68:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   14f6c:	e0bff617 	ldw	r2,-40(fp)
   14f70:	e0c00317 	ldw	r3,12(fp)
   14f74:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   14f78:	e0bff617 	ldw	r2,-40(fp)
   14f7c:	e0c00217 	ldw	r3,8(fp)
   14f80:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   14f84:	e0bff617 	ldw	r2,-40(fp)
   14f88:	e0fffd17 	ldw	r3,-12(fp)
   14f8c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   14f90:	e0bff617 	ldw	r2,-40(fp)
   14f94:	e0ffff0b 	ldhu	r3,-4(fp)
   14f98:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   14f9c:	e0bff617 	ldw	r2,-40(fp)
   14fa0:	e0fffe0b 	ldhu	r3,-8(fp)
   14fa4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   14fa8:	e0bff617 	ldw	r2,-40(fp)
   14fac:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   14fb0:	e0bffb03 	ldbu	r2,-20(fp)
   14fb4:	1004d0fa 	srli	r2,r2,3
   14fb8:	1007883a 	mov	r3,r2
   14fbc:	e0bff617 	ldw	r2,-40(fp)
   14fc0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   14fc4:	e0bffb03 	ldbu	r2,-20(fp)
   14fc8:	108001cc 	andi	r2,r2,7
   14fcc:	1007883a 	mov	r3,r2
   14fd0:	e0bff617 	ldw	r2,-40(fp)
   14fd4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   14fd8:	e0bff617 	ldw	r2,-40(fp)
   14fdc:	10800d03 	ldbu	r2,52(r2)
   14fe0:	10803fcc 	andi	r2,r2,255
   14fe4:	00c00044 	movi	r3,1
   14fe8:	1884983a 	sll	r2,r3,r2
   14fec:	1007883a 	mov	r3,r2
   14ff0:	e0bff617 	ldw	r2,-40(fp)
   14ff4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   14ff8:	e0bff617 	ldw	r2,-40(fp)
   14ffc:	10800cc3 	ldbu	r2,51(r2)
   15000:	10803fcc 	andi	r2,r2,255
   15004:	00c00044 	movi	r3,1
   15008:	1884983a 	sll	r2,r3,r2
   1500c:	1007883a 	mov	r3,r2
   15010:	e0bff617 	ldw	r2,-40(fp)
   15014:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15018:	e0bff617 	ldw	r2,-40(fp)
   1501c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   15020:	e0bff617 	ldw	r2,-40(fp)
   15024:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   15028:	e0bff617 	ldw	r2,-40(fp)
   1502c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   15030:	e0bff617 	ldw	r2,-40(fp)
   15034:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   15038:	e0bff617 	ldw	r2,-40(fp)
   1503c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   15040:	e0bff617 	ldw	r2,-40(fp)
   15044:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   15048:	e0bff617 	ldw	r2,-40(fp)
   1504c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   15050:	e0bff617 	ldw	r2,-40(fp)
   15054:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   15058:	e0bff617 	ldw	r2,-40(fp)
   1505c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   15060:	e0bff617 	ldw	r2,-40(fp)
   15064:	00c00fc4 	movi	r3,63
   15068:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1506c:	e0bff617 	ldw	r2,-40(fp)
   15070:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15074:	e13ff617 	ldw	r4,-40(fp)
   15078:	0023cd00 	call	23cd0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1507c:	e13ff617 	ldw	r4,-40(fp)
   15080:	0023bc80 	call	23bc8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15084:	0005303a 	rdctl	r2,status
   15088:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1508c:	e0fff517 	ldw	r3,-44(fp)
   15090:	00bfff84 	movi	r2,-2
   15094:	1884703a 	and	r2,r3,r2
   15098:	1001703a 	wrctl	status,r2
  
  return context;
   1509c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   150a0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   150a4:	e0fffb03 	ldbu	r3,-20(fp)
   150a8:	00800274 	movhi	r2,9
   150ac:	109fb704 	addi	r2,r2,32476
   150b0:	18c7883a 	add	r3,r3,r3
   150b4:	18c7883a 	add	r3,r3,r3
   150b8:	10c5883a 	add	r2,r2,r3
   150bc:	e0fff617 	ldw	r3,-40(fp)
   150c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   150c4:	d0e8cf97 	ldw	r3,-23746(gp)
   150c8:	e0bff617 	ldw	r2,-40(fp)
   150cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   150d0:	e0bff617 	ldw	r2,-40(fp)
   150d4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   150d8:	d0a8cf97 	ldw	r2,-23746(gp)
   150dc:	10000326 	beq	r2,zero,150ec <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   150e0:	d0a8cf97 	ldw	r2,-23746(gp)
   150e4:	e0fff617 	ldw	r3,-40(fp)
   150e8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   150ec:	e0bff617 	ldw	r2,-40(fp)
   150f0:	d0a8cf95 	stw	r2,-23746(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   150f4:	e0bff617 	ldw	r2,-40(fp)
   150f8:	10c00d83 	ldbu	r3,54(r2)
   150fc:	d0a8d883 	ldbu	r2,-23710(gp)
   15100:	1884b03a 	or	r2,r3,r2
   15104:	d0a8d885 	stb	r2,-23710(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15108:	e0bff617 	ldw	r2,-40(fp)
   1510c:	10800d03 	ldbu	r2,52(r2)
   15110:	10c03fcc 	andi	r3,r2,255
   15114:	e0bff617 	ldw	r2,-40(fp)
   15118:	10800d03 	ldbu	r2,52(r2)
   1511c:	11003fcc 	andi	r4,r2,255
   15120:	d0a8d8c4 	addi	r2,gp,-23709
   15124:	2085883a 	add	r2,r4,r2
   15128:	11000003 	ldbu	r4,0(r2)
   1512c:	e0bff617 	ldw	r2,-40(fp)
   15130:	10800d43 	ldbu	r2,53(r2)
   15134:	2084b03a 	or	r2,r4,r2
   15138:	1009883a 	mov	r4,r2
   1513c:	d0a8d8c4 	addi	r2,gp,-23709
   15140:	1885883a 	add	r2,r3,r2
   15144:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   15148:	d0a8d4c3 	ldbu	r2,-23725(gp)
   1514c:	10800044 	addi	r2,r2,1
   15150:	d0a8d4c5 	stb	r2,-23725(gp)
   15154:	e0bff417 	ldw	r2,-48(fp)
   15158:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1515c:	e0bff717 	ldw	r2,-36(fp)
   15160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15164:	0005883a 	mov	r2,zero
   15168:	00000506 	br	15180 <OS_TCBInit+0x2c0>
   1516c:	e0bff417 	ldw	r2,-48(fp)
   15170:	e0bff915 	stw	r2,-28(fp)
   15174:	e0bff917 	ldw	r2,-28(fp)
   15178:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1517c:	00801084 	movi	r2,66
}
   15180:	e037883a 	mov	sp,fp
   15184:	dfc00117 	ldw	ra,4(sp)
   15188:	df000017 	ldw	fp,0(sp)
   1518c:	dec00204 	addi	sp,sp,8
   15190:	f800283a 	ret

00015194 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15194:	defffe04 	addi	sp,sp,-8
   15198:	df000115 	stw	fp,4(sp)
   1519c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   151a0:	d0a02284 	addi	r2,gp,-32630
   151a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   151a8:	d0a02384 	addi	r2,gp,-32626
   151ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   151b0:	d0a02504 	addi	r2,gp,-32620
   151b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   151b8:	d0a02584 	addi	r2,gp,-32618
   151bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   151c0:	d0a02484 	addi	r2,gp,-32622
   151c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   151c8:	d0a02604 	addi	r2,gp,-32616
   151cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   151d0:	d0a02684 	addi	r2,gp,-32614
   151d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   151d8:	d0a02704 	addi	r2,gp,-32612
   151dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   151e0:	d0a02784 	addi	r2,gp,-32610
   151e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   151e8:	d0a02804 	addi	r2,gp,-32608
   151ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   151f0:	d0a02884 	addi	r2,gp,-32606
   151f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   151f8:	d0a02904 	addi	r2,gp,-32604
   151fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   15200:	d0a02984 	addi	r2,gp,-32602
   15204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15208:	d0a02a04 	addi	r2,gp,-32600
   1520c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   15210:	d0a02a84 	addi	r2,gp,-32598
   15214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15218:	d0a02b04 	addi	r2,gp,-32596
   1521c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   15220:	d0a02b84 	addi	r2,gp,-32594
   15224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15228:	d0a02c04 	addi	r2,gp,-32592
   1522c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   15230:	d0a02c84 	addi	r2,gp,-32590
   15234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   15238:	d0a02d04 	addi	r2,gp,-32588
   1523c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   15240:	d0a02d84 	addi	r2,gp,-32586
   15244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   15248:	d0a02e04 	addi	r2,gp,-32584
   1524c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   15250:	d0a02e84 	addi	r2,gp,-32582
   15254:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   15258:	d0a02f04 	addi	r2,gp,-32580
   1525c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   15260:	d0a02f84 	addi	r2,gp,-32578
   15264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15268:	d0a03004 	addi	r2,gp,-32576
   1526c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   15270:	d0a03084 	addi	r2,gp,-32574
   15274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15278:	d0a03104 	addi	r2,gp,-32572
   1527c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   15280:	d0a03184 	addi	r2,gp,-32570
   15284:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15288:	d0a03204 	addi	r2,gp,-32568
   1528c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   15290:	d0a03284 	addi	r2,gp,-32566
   15294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15298:	d0a03304 	addi	r2,gp,-32564
   1529c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   152a0:	d0a03384 	addi	r2,gp,-32562
   152a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   152a8:	d0a03404 	addi	r2,gp,-32560
   152ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   152b0:	d0a03484 	addi	r2,gp,-32558
   152b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   152b8:	d0a03504 	addi	r2,gp,-32556
   152bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   152c0:	d0a03584 	addi	r2,gp,-32554
   152c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   152c8:	d0a03604 	addi	r2,gp,-32552
   152cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   152d0:	d0a03684 	addi	r2,gp,-32550
   152d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   152d8:	d0a03704 	addi	r2,gp,-32548
   152dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   152e0:	d0a03784 	addi	r2,gp,-32546
   152e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   152e8:	d0a03804 	addi	r2,gp,-32544
   152ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   152f0:	d0a03884 	addi	r2,gp,-32542
   152f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   152f8:	d0a03904 	addi	r2,gp,-32540
   152fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   15300:	d0a03984 	addi	r2,gp,-32538
   15304:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15308:	d0a03e84 	addi	r2,gp,-32518
   1530c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15310:	0001883a 	nop
   15314:	e037883a 	mov	sp,fp
   15318:	df000017 	ldw	fp,0(sp)
   1531c:	dec00104 	addi	sp,sp,4
   15320:	f800283a 	ret

00015324 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15324:	defff204 	addi	sp,sp,-56
   15328:	df000d15 	stw	fp,52(sp)
   1532c:	df000d04 	addi	fp,sp,52
   15330:	e13ffc15 	stw	r4,-16(fp)
   15334:	2807883a 	mov	r3,r5
   15338:	3005883a 	mov	r2,r6
   1533c:	e1ffff15 	stw	r7,-4(fp)
   15340:	e0fffd0d 	sth	r3,-12(fp)
   15344:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15348:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1534c:	e0bfff17 	ldw	r2,-4(fp)
   15350:	1000021e 	bne	r2,zero,1535c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15354:	0005883a 	mov	r2,zero
   15358:	0000b006 	br	1561c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	1000051e 	bne	r2,zero,15378 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	00c01b84 	movi	r3,110
   1536c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15370:	0005883a 	mov	r2,zero
   15374:	0000a906 	br	1561c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15378:	e0bffc17 	ldw	r2,-16(fp)
   1537c:	10800003 	ldbu	r2,0(r2)
   15380:	10803fcc 	andi	r2,r2,255
   15384:	10800160 	cmpeqi	r2,r2,5
   15388:	1000051e 	bne	r2,zero,153a0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1538c:	e0bfff17 	ldw	r2,-4(fp)
   15390:	00c00044 	movi	r3,1
   15394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15398:	0005883a 	mov	r2,zero
   1539c:	00009f06 	br	1561c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   153a0:	e0fffe03 	ldbu	r3,-8(fp)
   153a4:	00bfe004 	movi	r2,-128
   153a8:	1884703a 	and	r2,r3,r2
   153ac:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   153b0:	e0bff503 	ldbu	r2,-44(fp)
   153b4:	10000626 	beq	r2,zero,153d0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   153b8:	e0bffe03 	ldbu	r2,-8(fp)
   153bc:	10801fcc 	andi	r2,r2,127
   153c0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   153c4:	00800044 	movi	r2,1
   153c8:	e0bff385 	stb	r2,-50(fp)
   153cc:	00000106 	br	153d4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   153d0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   153d4:	e0bfff17 	ldw	r2,-4(fp)
   153d8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153dc:	0005303a 	rdctl	r2,status
   153e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153e4:	e0fffb17 	ldw	r3,-20(fp)
   153e8:	00bfff84 	movi	r2,-2
   153ec:	1884703a 	and	r2,r3,r2
   153f0:	1001703a 	wrctl	status,r2
  
  return context;
   153f4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   153f8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   153fc:	e0bffe03 	ldbu	r2,-8(fp)
   15400:	10c00060 	cmpeqi	r3,r2,1
   15404:	18005f1e 	bne	r3,zero,15584 <OSFlagAccept+0x260>
   15408:	10c00088 	cmpgei	r3,r2,2
   1540c:	1800021e 	bne	r3,zero,15418 <OSFlagAccept+0xf4>
   15410:	10003f26 	beq	r2,zero,15510 <OSFlagAccept+0x1ec>
   15414:	00007706 	br	155f4 <OSFlagAccept+0x2d0>
   15418:	10c000a0 	cmpeqi	r3,r2,2
   1541c:	1800031e 	bne	r3,zero,1542c <OSFlagAccept+0x108>
   15420:	108000e0 	cmpeqi	r2,r2,3
   15424:	10001e1e 	bne	r2,zero,154a0 <OSFlagAccept+0x17c>
   15428:	00007206 	br	155f4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1542c:	e0bffc17 	ldw	r2,-16(fp)
   15430:	10c0020b 	ldhu	r3,8(r2)
   15434:	e0bffd0b 	ldhu	r2,-12(fp)
   15438:	1884703a 	and	r2,r3,r2
   1543c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15440:	e0fff30b 	ldhu	r3,-52(fp)
   15444:	e0bffd0b 	ldhu	r2,-12(fp)
   15448:	18800d1e 	bne	r3,r2,15480 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1544c:	e0bff383 	ldbu	r2,-50(fp)
   15450:	10800058 	cmpnei	r2,r2,1
   15454:	10000d1e 	bne	r2,zero,1548c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15458:	e0bffc17 	ldw	r2,-16(fp)
   1545c:	1080020b 	ldhu	r2,8(r2)
   15460:	1007883a 	mov	r3,r2
   15464:	e0bff30b 	ldhu	r2,-52(fp)
   15468:	0084303a 	nor	r2,zero,r2
   1546c:	1884703a 	and	r2,r3,r2
   15470:	1007883a 	mov	r3,r2
   15474:	e0bffc17 	ldw	r2,-16(fp)
   15478:	10c0020d 	sth	r3,8(r2)
   1547c:	00000306 	br	1548c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	00c01c04 	movi	r3,112
   15488:	10c00005 	stb	r3,0(r2)
   1548c:	e0bff417 	ldw	r2,-48(fp)
   15490:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15494:	e0bff617 	ldw	r2,-40(fp)
   15498:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1549c:	00005e06 	br	15618 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   154a0:	e0bffc17 	ldw	r2,-16(fp)
   154a4:	10c0020b 	ldhu	r3,8(r2)
   154a8:	e0bffd0b 	ldhu	r2,-12(fp)
   154ac:	1884703a 	and	r2,r3,r2
   154b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   154b4:	e0bff30b 	ldhu	r2,-52(fp)
   154b8:	10000d26 	beq	r2,zero,154f0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   154bc:	e0bff383 	ldbu	r2,-50(fp)
   154c0:	10800058 	cmpnei	r2,r2,1
   154c4:	10000d1e 	bne	r2,zero,154fc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   154c8:	e0bffc17 	ldw	r2,-16(fp)
   154cc:	1080020b 	ldhu	r2,8(r2)
   154d0:	1007883a 	mov	r3,r2
   154d4:	e0bff30b 	ldhu	r2,-52(fp)
   154d8:	0084303a 	nor	r2,zero,r2
   154dc:	1884703a 	and	r2,r3,r2
   154e0:	1007883a 	mov	r3,r2
   154e4:	e0bffc17 	ldw	r2,-16(fp)
   154e8:	10c0020d 	sth	r3,8(r2)
   154ec:	00000306 	br	154fc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   154f0:	e0bfff17 	ldw	r2,-4(fp)
   154f4:	00c01c04 	movi	r3,112
   154f8:	10c00005 	stb	r3,0(r2)
   154fc:	e0bff417 	ldw	r2,-48(fp)
   15500:	e0bff715 	stw	r2,-36(fp)
   15504:	e0bff717 	ldw	r2,-36(fp)
   15508:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1550c:	00004206 	br	15618 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15510:	e0bffc17 	ldw	r2,-16(fp)
   15514:	1080020b 	ldhu	r2,8(r2)
   15518:	0084303a 	nor	r2,zero,r2
   1551c:	1007883a 	mov	r3,r2
   15520:	e0bffd0b 	ldhu	r2,-12(fp)
   15524:	1884703a 	and	r2,r3,r2
   15528:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1552c:	e0fff30b 	ldhu	r3,-52(fp)
   15530:	e0bffd0b 	ldhu	r2,-12(fp)
   15534:	18800b1e 	bne	r3,r2,15564 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15538:	e0bff383 	ldbu	r2,-50(fp)
   1553c:	10800058 	cmpnei	r2,r2,1
   15540:	10000b1e 	bne	r2,zero,15570 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15544:	e0bffc17 	ldw	r2,-16(fp)
   15548:	10c0020b 	ldhu	r3,8(r2)
   1554c:	e0bff30b 	ldhu	r2,-52(fp)
   15550:	1884b03a 	or	r2,r3,r2
   15554:	1007883a 	mov	r3,r2
   15558:	e0bffc17 	ldw	r2,-16(fp)
   1555c:	10c0020d 	sth	r3,8(r2)
   15560:	00000306 	br	15570 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15564:	e0bfff17 	ldw	r2,-4(fp)
   15568:	00c01c04 	movi	r3,112
   1556c:	10c00005 	stb	r3,0(r2)
   15570:	e0bff417 	ldw	r2,-48(fp)
   15574:	e0bff815 	stw	r2,-32(fp)
   15578:	e0bff817 	ldw	r2,-32(fp)
   1557c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15580:	00002506 	br	15618 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15584:	e0bffc17 	ldw	r2,-16(fp)
   15588:	1080020b 	ldhu	r2,8(r2)
   1558c:	0084303a 	nor	r2,zero,r2
   15590:	1007883a 	mov	r3,r2
   15594:	e0bffd0b 	ldhu	r2,-12(fp)
   15598:	1884703a 	and	r2,r3,r2
   1559c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   155a0:	e0bff30b 	ldhu	r2,-52(fp)
   155a4:	10000b26 	beq	r2,zero,155d4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   155a8:	e0bff383 	ldbu	r2,-50(fp)
   155ac:	10800058 	cmpnei	r2,r2,1
   155b0:	10000b1e 	bne	r2,zero,155e0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   155b4:	e0bffc17 	ldw	r2,-16(fp)
   155b8:	10c0020b 	ldhu	r3,8(r2)
   155bc:	e0bff30b 	ldhu	r2,-52(fp)
   155c0:	1884b03a 	or	r2,r3,r2
   155c4:	1007883a 	mov	r3,r2
   155c8:	e0bffc17 	ldw	r2,-16(fp)
   155cc:	10c0020d 	sth	r3,8(r2)
   155d0:	00000306 	br	155e0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   155d4:	e0bfff17 	ldw	r2,-4(fp)
   155d8:	00c01c04 	movi	r3,112
   155dc:	10c00005 	stb	r3,0(r2)
   155e0:	e0bff417 	ldw	r2,-48(fp)
   155e4:	e0bff915 	stw	r2,-28(fp)
   155e8:	e0bff917 	ldw	r2,-28(fp)
   155ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   155f0:	00000906 	br	15618 <OSFlagAccept+0x2f4>
   155f4:	e0bff417 	ldw	r2,-48(fp)
   155f8:	e0bffa15 	stw	r2,-24(fp)
   155fc:	e0bffa17 	ldw	r2,-24(fp)
   15600:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15604:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15608:	e0bfff17 	ldw	r2,-4(fp)
   1560c:	00c01bc4 	movi	r3,111
   15610:	10c00005 	stb	r3,0(r2)
             break;
   15614:	0001883a 	nop
    }
    return (flags_rdy);
   15618:	e0bff30b 	ldhu	r2,-52(fp)
}
   1561c:	e037883a 	mov	sp,fp
   15620:	df000017 	ldw	fp,0(sp)
   15624:	dec00104 	addi	sp,sp,4
   15628:	f800283a 	ret

0001562c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1562c:	defff804 	addi	sp,sp,-32
   15630:	df000715 	stw	fp,28(sp)
   15634:	df000704 	addi	fp,sp,28
   15638:	2005883a 	mov	r2,r4
   1563c:	e17fff15 	stw	r5,-4(fp)
   15640:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15644:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15648:	e0bfff17 	ldw	r2,-4(fp)
   1564c:	1000021e 	bne	r2,zero,15658 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   15650:	0005883a 	mov	r2,zero
   15654:	00003306 	br	15724 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   15658:	d0a8da83 	ldbu	r2,-23702(gp)
   1565c:	10803fcc 	andi	r2,r2,255
   15660:	10000526 	beq	r2,zero,15678 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15664:	e0bfff17 	ldw	r2,-4(fp)
   15668:	00c00404 	movi	r3,16
   1566c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   15670:	0005883a 	mov	r2,zero
   15674:	00002b06 	br	15724 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15678:	0005303a 	rdctl	r2,status
   1567c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15680:	e0fffd17 	ldw	r3,-12(fp)
   15684:	00bfff84 	movi	r2,-2
   15688:	1884703a 	and	r2,r3,r2
   1568c:	1001703a 	wrctl	status,r2
  
  return context;
   15690:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15694:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15698:	d0a8dd97 	ldw	r2,-23690(gp)
   1569c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   156a0:	e0bffb17 	ldw	r2,-20(fp)
   156a4:	10001726 	beq	r2,zero,15704 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   156a8:	d0a8dd97 	ldw	r2,-23690(gp)
   156ac:	10800117 	ldw	r2,4(r2)
   156b0:	d0a8dd95 	stw	r2,-23690(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   156b4:	e0bffb17 	ldw	r2,-20(fp)
   156b8:	00c00144 	movi	r3,5
   156bc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   156c0:	e0bffb17 	ldw	r2,-20(fp)
   156c4:	e0fffe0b 	ldhu	r3,-8(fp)
   156c8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   156cc:	e0bffb17 	ldw	r2,-20(fp)
   156d0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   156d4:	e0bffb17 	ldw	r2,-20(fp)
   156d8:	00c00fc4 	movi	r3,63
   156dc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   156e0:	e0bffb17 	ldw	r2,-20(fp)
   156e4:	100002c5 	stb	zero,11(r2)
   156e8:	e0bff917 	ldw	r2,-28(fp)
   156ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156f0:	e0bffa17 	ldw	r2,-24(fp)
   156f4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   156f8:	e0bfff17 	ldw	r2,-4(fp)
   156fc:	10000005 	stb	zero,0(r2)
   15700:	00000706 	br	15720 <OSFlagCreate+0xf4>
   15704:	e0bff917 	ldw	r2,-28(fp)
   15708:	e0bffc15 	stw	r2,-16(fp)
   1570c:	e0bffc17 	ldw	r2,-16(fp)
   15710:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	00c01c84 	movi	r3,114
   1571c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   15720:	e0bffb17 	ldw	r2,-20(fp)
}
   15724:	e037883a 	mov	sp,fp
   15728:	df000017 	ldw	fp,0(sp)
   1572c:	dec00104 	addi	sp,sp,4
   15730:	f800283a 	ret

00015734 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   15734:	defff204 	addi	sp,sp,-56
   15738:	dfc00d15 	stw	ra,52(sp)
   1573c:	df000c15 	stw	fp,48(sp)
   15740:	df000c04 	addi	fp,sp,48
   15744:	e13ffd15 	stw	r4,-12(fp)
   15748:	2805883a 	mov	r2,r5
   1574c:	e1bfff15 	stw	r6,-4(fp)
   15750:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15754:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	1000021e 	bne	r2,zero,15768 <OSFlagDel+0x34>
        return (pgrp);
   15760:	e0bffd17 	ldw	r2,-12(fp)
   15764:	00008006 	br	15968 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15768:	e0bffd17 	ldw	r2,-12(fp)
   1576c:	1000051e 	bne	r2,zero,15784 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15770:	e0bfff17 	ldw	r2,-4(fp)
   15774:	00c01b84 	movi	r3,110
   15778:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1577c:	e0bffd17 	ldw	r2,-12(fp)
   15780:	00007906 	br	15968 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15784:	d0a8da83 	ldbu	r2,-23702(gp)
   15788:	10803fcc 	andi	r2,r2,255
   1578c:	10000526 	beq	r2,zero,157a4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15790:	e0bfff17 	ldw	r2,-4(fp)
   15794:	00c003c4 	movi	r3,15
   15798:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1579c:	e0bffd17 	ldw	r2,-12(fp)
   157a0:	00007106 	br	15968 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   157a4:	e0bffd17 	ldw	r2,-12(fp)
   157a8:	10800003 	ldbu	r2,0(r2)
   157ac:	10803fcc 	andi	r2,r2,255
   157b0:	10800160 	cmpeqi	r2,r2,5
   157b4:	1000051e 	bne	r2,zero,157cc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   157b8:	e0bfff17 	ldw	r2,-4(fp)
   157bc:	00c00044 	movi	r3,1
   157c0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   157c4:	e0bffd17 	ldw	r2,-12(fp)
   157c8:	00006706 	br	15968 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157cc:	0005303a 	rdctl	r2,status
   157d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157d4:	e0fffc17 	ldw	r3,-16(fp)
   157d8:	00bfff84 	movi	r2,-2
   157dc:	1884703a 	and	r2,r3,r2
   157e0:	1001703a 	wrctl	status,r2
  
  return context;
   157e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   157e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   157ec:	e0bffd17 	ldw	r2,-12(fp)
   157f0:	10800117 	ldw	r2,4(r2)
   157f4:	10000326 	beq	r2,zero,15804 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   157f8:	00800044 	movi	r2,1
   157fc:	e0bff405 	stb	r2,-48(fp)
   15800:	00000106 	br	15808 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15804:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15808:	e0bffe03 	ldbu	r2,-8(fp)
   1580c:	10000326 	beq	r2,zero,1581c <OSFlagDel+0xe8>
   15810:	10800060 	cmpeqi	r2,r2,1
   15814:	1000231e 	bne	r2,zero,158a4 <OSFlagDel+0x170>
   15818:	00004806 	br	1593c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1581c:	e0bff403 	ldbu	r2,-48(fp)
   15820:	1000161e 	bne	r2,zero,1587c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   15824:	e0bffd17 	ldw	r2,-12(fp)
   15828:	00c00fc4 	movi	r3,63
   1582c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15830:	e0bffd17 	ldw	r2,-12(fp)
   15834:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15838:	e0bffd17 	ldw	r2,-12(fp)
   1583c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   15840:	d0e8dd97 	ldw	r3,-23690(gp)
   15844:	e0bffd17 	ldw	r2,-12(fp)
   15848:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1584c:	e0bffd17 	ldw	r2,-12(fp)
   15850:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   15854:	e0bffd17 	ldw	r2,-12(fp)
   15858:	d0a8dd95 	stw	r2,-23690(gp)
   1585c:	e0bff717 	ldw	r2,-36(fp)
   15860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15864:	e0bff817 	ldw	r2,-32(fp)
   15868:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1586c:	e0bfff17 	ldw	r2,-4(fp)
   15870:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15874:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15878:	00003a06 	br	15964 <OSFlagDel+0x230>
   1587c:	e0bff717 	ldw	r2,-36(fp)
   15880:	e0bff915 	stw	r2,-28(fp)
   15884:	e0bff917 	ldw	r2,-28(fp)
   15888:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1588c:	e0bfff17 	ldw	r2,-4(fp)
   15890:	00c01244 	movi	r3,73
   15894:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15898:	e0bffd17 	ldw	r2,-12(fp)
   1589c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   158a0:	00003006 	br	15964 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   158a4:	e0bffd17 	ldw	r2,-12(fp)
   158a8:	10800117 	ldw	r2,4(r2)
   158ac:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   158b0:	00000606 	br	158cc <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   158b4:	000b883a 	mov	r5,zero
   158b8:	e13ff517 	ldw	r4,-44(fp)
   158bc:	00168a00 	call	168a0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   158c0:	e0bff517 	ldw	r2,-44(fp)
   158c4:	10800017 	ldw	r2,0(r2)
   158c8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   158cc:	e0bff517 	ldw	r2,-44(fp)
   158d0:	103ff81e 	bne	r2,zero,158b4 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   158d4:	e0bffd17 	ldw	r2,-12(fp)
   158d8:	00c00fc4 	movi	r3,63
   158dc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   158e0:	e0bffd17 	ldw	r2,-12(fp)
   158e4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   158f0:	d0e8dd97 	ldw	r3,-23690(gp)
   158f4:	e0bffd17 	ldw	r2,-12(fp)
   158f8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   158fc:	e0bffd17 	ldw	r2,-12(fp)
   15900:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	d0a8dd95 	stw	r2,-23690(gp)
   1590c:	e0bff717 	ldw	r2,-36(fp)
   15910:	e0bffa15 	stw	r2,-24(fp)
   15914:	e0bffa17 	ldw	r2,-24(fp)
   15918:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1591c:	e0bff403 	ldbu	r2,-48(fp)
   15920:	10800058 	cmpnei	r2,r2,1
   15924:	1000011e 	bne	r2,zero,1592c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15928:	0014ab00 	call	14ab0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15934:	e03ff615 	stw	zero,-40(fp)
             break;
   15938:	00000a06 	br	15964 <OSFlagDel+0x230>
   1593c:	e0bff717 	ldw	r2,-36(fp)
   15940:	e0bffb15 	stw	r2,-20(fp)
   15944:	e0bffb17 	ldw	r2,-20(fp)
   15948:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1594c:	e0bfff17 	ldw	r2,-4(fp)
   15950:	00c001c4 	movi	r3,7
   15954:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15958:	e0bffd17 	ldw	r2,-12(fp)
   1595c:	e0bff615 	stw	r2,-40(fp)
             break;
   15960:	0001883a 	nop
    }
    return (pgrp_return);
   15964:	e0bff617 	ldw	r2,-40(fp)
}
   15968:	e037883a 	mov	sp,fp
   1596c:	dfc00117 	ldw	ra,4(sp)
   15970:	df000017 	ldw	fp,0(sp)
   15974:	dec00204 	addi	sp,sp,8
   15978:	f800283a 	ret

0001597c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1597c:	defff604 	addi	sp,sp,-40
   15980:	dfc00915 	stw	ra,36(sp)
   15984:	df000815 	stw	fp,32(sp)
   15988:	df000804 	addi	fp,sp,32
   1598c:	e13ffd15 	stw	r4,-12(fp)
   15990:	e17ffe15 	stw	r5,-8(fp)
   15994:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15998:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1599c:	e0bfff17 	ldw	r2,-4(fp)
   159a0:	1000021e 	bne	r2,zero,159ac <OSFlagNameGet+0x30>
        return (0);
   159a4:	0005883a 	mov	r2,zero
   159a8:	00003906 	br	15a90 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   159ac:	e0bffd17 	ldw	r2,-12(fp)
   159b0:	1000051e 	bne	r2,zero,159c8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   159b4:	e0bfff17 	ldw	r2,-4(fp)
   159b8:	00c01b84 	movi	r3,110
   159bc:	10c00005 	stb	r3,0(r2)
        return (0);
   159c0:	0005883a 	mov	r2,zero
   159c4:	00003206 	br	15a90 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   159c8:	e0bffe17 	ldw	r2,-8(fp)
   159cc:	1000051e 	bne	r2,zero,159e4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   159d0:	e0bfff17 	ldw	r2,-4(fp)
   159d4:	00c00304 	movi	r3,12
   159d8:	10c00005 	stb	r3,0(r2)
        return (0);
   159dc:	0005883a 	mov	r2,zero
   159e0:	00002b06 	br	15a90 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   159e4:	d0a8da83 	ldbu	r2,-23702(gp)
   159e8:	10803fcc 	andi	r2,r2,255
   159ec:	10000526 	beq	r2,zero,15a04 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   159f0:	e0bfff17 	ldw	r2,-4(fp)
   159f4:	00c00444 	movi	r3,17
   159f8:	10c00005 	stb	r3,0(r2)
        return (0);
   159fc:	0005883a 	mov	r2,zero
   15a00:	00002306 	br	15a90 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a04:	0005303a 	rdctl	r2,status
   15a08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a0c:	e0fffc17 	ldw	r3,-16(fp)
   15a10:	00bfff84 	movi	r2,-2
   15a14:	1884703a 	and	r2,r3,r2
   15a18:	1001703a 	wrctl	status,r2
  
  return context;
   15a1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15a20:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15a24:	e0bffd17 	ldw	r2,-12(fp)
   15a28:	10800003 	ldbu	r2,0(r2)
   15a2c:	10803fcc 	andi	r2,r2,255
   15a30:	10800160 	cmpeqi	r2,r2,5
   15a34:	1000091e 	bne	r2,zero,15a5c <OSFlagNameGet+0xe0>
   15a38:	e0bff817 	ldw	r2,-32(fp)
   15a3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a40:	e0bff917 	ldw	r2,-28(fp)
   15a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15a48:	e0bfff17 	ldw	r2,-4(fp)
   15a4c:	00c00044 	movi	r3,1
   15a50:	10c00005 	stb	r3,0(r2)
        return (0);
   15a54:	0005883a 	mov	r2,zero
   15a58:	00000d06 	br	15a90 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15a5c:	e0bffd17 	ldw	r2,-12(fp)
   15a60:	10800284 	addi	r2,r2,10
   15a64:	100b883a 	mov	r5,r2
   15a68:	e13ffe17 	ldw	r4,-8(fp)
   15a6c:	0014bf40 	call	14bf4 <OS_StrCopy>
   15a70:	e0bffb05 	stb	r2,-20(fp)
   15a74:	e0bff817 	ldw	r2,-32(fp)
   15a78:	e0bffa15 	stw	r2,-24(fp)
   15a7c:	e0bffa17 	ldw	r2,-24(fp)
   15a80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15a84:	e0bfff17 	ldw	r2,-4(fp)
   15a88:	10000005 	stb	zero,0(r2)
    return (len);
   15a8c:	e0bffb03 	ldbu	r2,-20(fp)
}
   15a90:	e037883a 	mov	sp,fp
   15a94:	dfc00117 	ldw	ra,4(sp)
   15a98:	df000017 	ldw	fp,0(sp)
   15a9c:	dec00204 	addi	sp,sp,8
   15aa0:	f800283a 	ret

00015aa4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15aa4:	defff504 	addi	sp,sp,-44
   15aa8:	dfc00a15 	stw	ra,40(sp)
   15aac:	df000915 	stw	fp,36(sp)
   15ab0:	df000904 	addi	fp,sp,36
   15ab4:	e13ffd15 	stw	r4,-12(fp)
   15ab8:	e17ffe15 	stw	r5,-8(fp)
   15abc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15ac0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15ac4:	e0bfff17 	ldw	r2,-4(fp)
   15ac8:	10004326 	beq	r2,zero,15bd8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15acc:	e0bffd17 	ldw	r2,-12(fp)
   15ad0:	1000041e 	bne	r2,zero,15ae4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15ad4:	e0bfff17 	ldw	r2,-4(fp)
   15ad8:	00c01b84 	movi	r3,110
   15adc:	10c00005 	stb	r3,0(r2)
        return;
   15ae0:	00003e06 	br	15bdc <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15ae4:	e0bffe17 	ldw	r2,-8(fp)
   15ae8:	1000041e 	bne	r2,zero,15afc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15aec:	e0bfff17 	ldw	r2,-4(fp)
   15af0:	00c00304 	movi	r3,12
   15af4:	10c00005 	stb	r3,0(r2)
        return;
   15af8:	00003806 	br	15bdc <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15afc:	d0a8da83 	ldbu	r2,-23702(gp)
   15b00:	10803fcc 	andi	r2,r2,255
   15b04:	10000426 	beq	r2,zero,15b18 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15b08:	e0bfff17 	ldw	r2,-4(fp)
   15b0c:	00c00484 	movi	r3,18
   15b10:	10c00005 	stb	r3,0(r2)
        return;
   15b14:	00003106 	br	15bdc <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b18:	0005303a 	rdctl	r2,status
   15b1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b20:	e0fffc17 	ldw	r3,-16(fp)
   15b24:	00bfff84 	movi	r2,-2
   15b28:	1884703a 	and	r2,r3,r2
   15b2c:	1001703a 	wrctl	status,r2
  
  return context;
   15b30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15b34:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15b38:	e0bffd17 	ldw	r2,-12(fp)
   15b3c:	10800003 	ldbu	r2,0(r2)
   15b40:	10803fcc 	andi	r2,r2,255
   15b44:	10800160 	cmpeqi	r2,r2,5
   15b48:	1000081e 	bne	r2,zero,15b6c <OSFlagNameSet+0xc8>
   15b4c:	e0bff717 	ldw	r2,-36(fp)
   15b50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b54:	e0bff817 	ldw	r2,-32(fp)
   15b58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15b5c:	e0bfff17 	ldw	r2,-4(fp)
   15b60:	00c00044 	movi	r3,1
   15b64:	10c00005 	stb	r3,0(r2)
        return;
   15b68:	00001c06 	br	15bdc <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15b6c:	e13ffe17 	ldw	r4,-8(fp)
   15b70:	0014c680 	call	14c68 <OS_StrLen>
   15b74:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15b78:	e0bffa03 	ldbu	r2,-24(fp)
   15b7c:	10800830 	cmpltui	r2,r2,32
   15b80:	1000081e 	bne	r2,zero,15ba4 <OSFlagNameSet+0x100>
   15b84:	e0bff717 	ldw	r2,-36(fp)
   15b88:	e0bff915 	stw	r2,-28(fp)
   15b8c:	e0bff917 	ldw	r2,-28(fp)
   15b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15b94:	e0bfff17 	ldw	r2,-4(fp)
   15b98:	00c01cc4 	movi	r3,115
   15b9c:	10c00005 	stb	r3,0(r2)
        return;
   15ba0:	00000e06 	br	15bdc <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15ba4:	e0bffd17 	ldw	r2,-12(fp)
   15ba8:	10800284 	addi	r2,r2,10
   15bac:	e17ffe17 	ldw	r5,-8(fp)
   15bb0:	1009883a 	mov	r4,r2
   15bb4:	0014bf40 	call	14bf4 <OS_StrCopy>
   15bb8:	e0bff717 	ldw	r2,-36(fp)
   15bbc:	e0bffb15 	stw	r2,-20(fp)
   15bc0:	e0bffb17 	ldw	r2,-20(fp)
   15bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15bc8:	e0bfff17 	ldw	r2,-4(fp)
   15bcc:	10000005 	stb	zero,0(r2)
    return;
   15bd0:	0001883a 	nop
   15bd4:	00000106 	br	15bdc <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15bd8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   15bdc:	e037883a 	mov	sp,fp
   15be0:	dfc00117 	ldw	ra,4(sp)
   15be4:	df000017 	ldw	fp,0(sp)
   15be8:	dec00204 	addi	sp,sp,8
   15bec:	f800283a 	ret

00015bf0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15bf0:	deffe104 	addi	sp,sp,-124
   15bf4:	dfc01e15 	stw	ra,120(sp)
   15bf8:	df001d15 	stw	fp,116(sp)
   15bfc:	df001d04 	addi	fp,sp,116
   15c00:	e13ffc15 	stw	r4,-16(fp)
   15c04:	2809883a 	mov	r4,r5
   15c08:	3007883a 	mov	r3,r6
   15c0c:	3805883a 	mov	r2,r7
   15c10:	e13ffd0d 	sth	r4,-12(fp)
   15c14:	e0fffe05 	stb	r3,-8(fp)
   15c18:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15c1c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15c20:	e0800217 	ldw	r2,8(fp)
   15c24:	1000021e 	bne	r2,zero,15c30 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15c28:	0005883a 	mov	r2,zero
   15c2c:	00015906 	br	16194 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15c30:	e0bffc17 	ldw	r2,-16(fp)
   15c34:	1000051e 	bne	r2,zero,15c4c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c38:	e0800217 	ldw	r2,8(fp)
   15c3c:	00c01b84 	movi	r3,110
   15c40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c44:	0005883a 	mov	r2,zero
   15c48:	00015206 	br	16194 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15c4c:	d0a8da83 	ldbu	r2,-23702(gp)
   15c50:	10803fcc 	andi	r2,r2,255
   15c54:	10000526 	beq	r2,zero,15c6c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15c58:	e0800217 	ldw	r2,8(fp)
   15c5c:	00c00084 	movi	r3,2
   15c60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c64:	0005883a 	mov	r2,zero
   15c68:	00014a06 	br	16194 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15c6c:	d0a8cc83 	ldbu	r2,-23758(gp)
   15c70:	10803fcc 	andi	r2,r2,255
   15c74:	10000526 	beq	r2,zero,15c8c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15c78:	e0800217 	ldw	r2,8(fp)
   15c7c:	00c00344 	movi	r3,13
   15c80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c84:	0005883a 	mov	r2,zero
   15c88:	00014206 	br	16194 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15c8c:	e0bffc17 	ldw	r2,-16(fp)
   15c90:	10800003 	ldbu	r2,0(r2)
   15c94:	10803fcc 	andi	r2,r2,255
   15c98:	10800160 	cmpeqi	r2,r2,5
   15c9c:	1000051e 	bne	r2,zero,15cb4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   15ca0:	e0800217 	ldw	r2,8(fp)
   15ca4:	00c00044 	movi	r3,1
   15ca8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15cac:	0005883a 	mov	r2,zero
   15cb0:	00013806 	br	16194 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15cb4:	e0fffe03 	ldbu	r3,-8(fp)
   15cb8:	00bfe004 	movi	r2,-128
   15cbc:	1884703a 	and	r2,r3,r2
   15cc0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15cc4:	e0bfe603 	ldbu	r2,-104(fp)
   15cc8:	10000626 	beq	r2,zero,15ce4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15ccc:	e0bffe03 	ldbu	r2,-8(fp)
   15cd0:	10801fcc 	andi	r2,r2,127
   15cd4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15cd8:	00800044 	movi	r2,1
   15cdc:	e0bfe405 	stb	r2,-112(fp)
   15ce0:	00000106 	br	15ce8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   15ce4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ce8:	0005303a 	rdctl	r2,status
   15cec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cf0:	e0fff617 	ldw	r3,-40(fp)
   15cf4:	00bfff84 	movi	r2,-2
   15cf8:	1884703a 	and	r2,r3,r2
   15cfc:	1001703a 	wrctl	status,r2
  
  return context;
   15d00:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15d04:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   15d08:	e0bffe03 	ldbu	r2,-8(fp)
   15d0c:	10c00060 	cmpeqi	r3,r2,1
   15d10:	1800921e 	bne	r3,zero,15f5c <OSFlagPend+0x36c>
   15d14:	10c00088 	cmpgei	r3,r2,2
   15d18:	1800021e 	bne	r3,zero,15d24 <OSFlagPend+0x134>
   15d1c:	10006126 	beq	r2,zero,15ea4 <OSFlagPend+0x2b4>
   15d20:	0000bb06 	br	16010 <OSFlagPend+0x420>
   15d24:	10c000a0 	cmpeqi	r3,r2,2
   15d28:	1800031e 	bne	r3,zero,15d38 <OSFlagPend+0x148>
   15d2c:	108000e0 	cmpeqi	r2,r2,3
   15d30:	10002f1e 	bne	r2,zero,15df0 <OSFlagPend+0x200>
   15d34:	0000b606 	br	16010 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15d38:	e0bffc17 	ldw	r2,-16(fp)
   15d3c:	10c0020b 	ldhu	r3,8(r2)
   15d40:	e0bffd0b 	ldhu	r2,-12(fp)
   15d44:	1884703a 	and	r2,r3,r2
   15d48:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15d4c:	e0ffe80b 	ldhu	r3,-96(fp)
   15d50:	e0bffd0b 	ldhu	r2,-12(fp)
   15d54:	1880171e 	bne	r3,r2,15db4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15d58:	e0bfe403 	ldbu	r2,-112(fp)
   15d5c:	10800058 	cmpnei	r2,r2,1
   15d60:	1000091e 	bne	r2,zero,15d88 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15d64:	e0bffc17 	ldw	r2,-16(fp)
   15d68:	1080020b 	ldhu	r2,8(r2)
   15d6c:	1007883a 	mov	r3,r2
   15d70:	e0bfe80b 	ldhu	r2,-96(fp)
   15d74:	0084303a 	nor	r2,zero,r2
   15d78:	1884703a 	and	r2,r3,r2
   15d7c:	1007883a 	mov	r3,r2
   15d80:	e0bffc17 	ldw	r2,-16(fp)
   15d84:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15d88:	d0a8db97 	ldw	r2,-23698(gp)
   15d8c:	e0ffe80b 	ldhu	r3,-96(fp)
   15d90:	10c00b0d 	sth	r3,44(r2)
   15d94:	e0bfe517 	ldw	r2,-108(fp)
   15d98:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d9c:	e0bfe717 	ldw	r2,-100(fp)
   15da0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15da4:	e0800217 	ldw	r2,8(fp)
   15da8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15dac:	e0bfe80b 	ldhu	r2,-96(fp)
   15db0:	0000f806 	br	16194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15db4:	e13ffd0b 	ldhu	r4,-12(fp)
   15db8:	e17ffe03 	ldbu	r5,-8(fp)
   15dbc:	e0bfff0b 	ldhu	r2,-4(fp)
   15dc0:	e0fff704 	addi	r3,fp,-36
   15dc4:	d8800015 	stw	r2,0(sp)
   15dc8:	280f883a 	mov	r7,r5
   15dcc:	200d883a 	mov	r6,r4
   15dd0:	180b883a 	mov	r5,r3
   15dd4:	e13ffc17 	ldw	r4,-16(fp)
   15dd8:	00166600 	call	16660 <OS_FlagBlock>
   15ddc:	e0bfe517 	ldw	r2,-108(fp)
   15de0:	e0bfe915 	stw	r2,-92(fp)
   15de4:	e0bfe917 	ldw	r2,-92(fp)
   15de8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15dec:	00009206 	br	16038 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15df0:	e0bffc17 	ldw	r2,-16(fp)
   15df4:	10c0020b 	ldhu	r3,8(r2)
   15df8:	e0bffd0b 	ldhu	r2,-12(fp)
   15dfc:	1884703a 	and	r2,r3,r2
   15e00:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15e04:	e0bfe80b 	ldhu	r2,-96(fp)
   15e08:	10001726 	beq	r2,zero,15e68 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15e0c:	e0bfe403 	ldbu	r2,-112(fp)
   15e10:	10800058 	cmpnei	r2,r2,1
   15e14:	1000091e 	bne	r2,zero,15e3c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15e18:	e0bffc17 	ldw	r2,-16(fp)
   15e1c:	1080020b 	ldhu	r2,8(r2)
   15e20:	1007883a 	mov	r3,r2
   15e24:	e0bfe80b 	ldhu	r2,-96(fp)
   15e28:	0084303a 	nor	r2,zero,r2
   15e2c:	1884703a 	and	r2,r3,r2
   15e30:	1007883a 	mov	r3,r2
   15e34:	e0bffc17 	ldw	r2,-16(fp)
   15e38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15e3c:	d0a8db97 	ldw	r2,-23698(gp)
   15e40:	e0ffe80b 	ldhu	r3,-96(fp)
   15e44:	10c00b0d 	sth	r3,44(r2)
   15e48:	e0bfe517 	ldw	r2,-108(fp)
   15e4c:	e0bfea15 	stw	r2,-88(fp)
   15e50:	e0bfea17 	ldw	r2,-88(fp)
   15e54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15e58:	e0800217 	ldw	r2,8(fp)
   15e5c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15e60:	e0bfe80b 	ldhu	r2,-96(fp)
   15e64:	0000cb06 	br	16194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15e68:	e13ffd0b 	ldhu	r4,-12(fp)
   15e6c:	e17ffe03 	ldbu	r5,-8(fp)
   15e70:	e0bfff0b 	ldhu	r2,-4(fp)
   15e74:	e0fff704 	addi	r3,fp,-36
   15e78:	d8800015 	stw	r2,0(sp)
   15e7c:	280f883a 	mov	r7,r5
   15e80:	200d883a 	mov	r6,r4
   15e84:	180b883a 	mov	r5,r3
   15e88:	e13ffc17 	ldw	r4,-16(fp)
   15e8c:	00166600 	call	16660 <OS_FlagBlock>
   15e90:	e0bfe517 	ldw	r2,-108(fp)
   15e94:	e0bfeb15 	stw	r2,-84(fp)
   15e98:	e0bfeb17 	ldw	r2,-84(fp)
   15e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15ea0:	00006506 	br	16038 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15ea4:	e0bffc17 	ldw	r2,-16(fp)
   15ea8:	1080020b 	ldhu	r2,8(r2)
   15eac:	0084303a 	nor	r2,zero,r2
   15eb0:	1007883a 	mov	r3,r2
   15eb4:	e0bffd0b 	ldhu	r2,-12(fp)
   15eb8:	1884703a 	and	r2,r3,r2
   15ebc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ec0:	e0ffe80b 	ldhu	r3,-96(fp)
   15ec4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ec8:	1880151e 	bne	r3,r2,15f20 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ecc:	e0bfe403 	ldbu	r2,-112(fp)
   15ed0:	10800058 	cmpnei	r2,r2,1
   15ed4:	1000071e 	bne	r2,zero,15ef4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15ed8:	e0bffc17 	ldw	r2,-16(fp)
   15edc:	10c0020b 	ldhu	r3,8(r2)
   15ee0:	e0bfe80b 	ldhu	r2,-96(fp)
   15ee4:	1884b03a 	or	r2,r3,r2
   15ee8:	1007883a 	mov	r3,r2
   15eec:	e0bffc17 	ldw	r2,-16(fp)
   15ef0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15ef4:	d0a8db97 	ldw	r2,-23698(gp)
   15ef8:	e0ffe80b 	ldhu	r3,-96(fp)
   15efc:	10c00b0d 	sth	r3,44(r2)
   15f00:	e0bfe517 	ldw	r2,-108(fp)
   15f04:	e0bfec15 	stw	r2,-80(fp)
   15f08:	e0bfec17 	ldw	r2,-80(fp)
   15f0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f10:	e0800217 	ldw	r2,8(fp)
   15f14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f18:	e0bfe80b 	ldhu	r2,-96(fp)
   15f1c:	00009d06 	br	16194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f20:	e13ffd0b 	ldhu	r4,-12(fp)
   15f24:	e17ffe03 	ldbu	r5,-8(fp)
   15f28:	e0bfff0b 	ldhu	r2,-4(fp)
   15f2c:	e0fff704 	addi	r3,fp,-36
   15f30:	d8800015 	stw	r2,0(sp)
   15f34:	280f883a 	mov	r7,r5
   15f38:	200d883a 	mov	r6,r4
   15f3c:	180b883a 	mov	r5,r3
   15f40:	e13ffc17 	ldw	r4,-16(fp)
   15f44:	00166600 	call	16660 <OS_FlagBlock>
   15f48:	e0bfe517 	ldw	r2,-108(fp)
   15f4c:	e0bfed15 	stw	r2,-76(fp)
   15f50:	e0bfed17 	ldw	r2,-76(fp)
   15f54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f58:	00003706 	br	16038 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15f5c:	e0bffc17 	ldw	r2,-16(fp)
   15f60:	1080020b 	ldhu	r2,8(r2)
   15f64:	0084303a 	nor	r2,zero,r2
   15f68:	1007883a 	mov	r3,r2
   15f6c:	e0bffd0b 	ldhu	r2,-12(fp)
   15f70:	1884703a 	and	r2,r3,r2
   15f74:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15f78:	e0bfe80b 	ldhu	r2,-96(fp)
   15f7c:	10001526 	beq	r2,zero,15fd4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f80:	e0bfe403 	ldbu	r2,-112(fp)
   15f84:	10800058 	cmpnei	r2,r2,1
   15f88:	1000071e 	bne	r2,zero,15fa8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15f8c:	e0bffc17 	ldw	r2,-16(fp)
   15f90:	10c0020b 	ldhu	r3,8(r2)
   15f94:	e0bfe80b 	ldhu	r2,-96(fp)
   15f98:	1884b03a 	or	r2,r3,r2
   15f9c:	1007883a 	mov	r3,r2
   15fa0:	e0bffc17 	ldw	r2,-16(fp)
   15fa4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fa8:	d0a8db97 	ldw	r2,-23698(gp)
   15fac:	e0ffe80b 	ldhu	r3,-96(fp)
   15fb0:	10c00b0d 	sth	r3,44(r2)
   15fb4:	e0bfe517 	ldw	r2,-108(fp)
   15fb8:	e0bfee15 	stw	r2,-72(fp)
   15fbc:	e0bfee17 	ldw	r2,-72(fp)
   15fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15fc4:	e0800217 	ldw	r2,8(fp)
   15fc8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15fcc:	e0bfe80b 	ldhu	r2,-96(fp)
   15fd0:	00007006 	br	16194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15fd4:	e13ffd0b 	ldhu	r4,-12(fp)
   15fd8:	e17ffe03 	ldbu	r5,-8(fp)
   15fdc:	e0bfff0b 	ldhu	r2,-4(fp)
   15fe0:	e0fff704 	addi	r3,fp,-36
   15fe4:	d8800015 	stw	r2,0(sp)
   15fe8:	280f883a 	mov	r7,r5
   15fec:	200d883a 	mov	r6,r4
   15ff0:	180b883a 	mov	r5,r3
   15ff4:	e13ffc17 	ldw	r4,-16(fp)
   15ff8:	00166600 	call	16660 <OS_FlagBlock>
   15ffc:	e0bfe517 	ldw	r2,-108(fp)
   16000:	e0bfef15 	stw	r2,-68(fp)
   16004:	e0bfef17 	ldw	r2,-68(fp)
   16008:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1600c:	00000a06 	br	16038 <OSFlagPend+0x448>
   16010:	e0bfe517 	ldw	r2,-108(fp)
   16014:	e0bff015 	stw	r2,-64(fp)
   16018:	e0bff017 	ldw	r2,-64(fp)
   1601c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   16020:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   16024:	e0800217 	ldw	r2,8(fp)
   16028:	00c01bc4 	movi	r3,111
   1602c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   16030:	e0bfe80b 	ldhu	r2,-96(fp)
   16034:	00005706 	br	16194 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16038:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1603c:	0005303a 	rdctl	r2,status
   16040:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16044:	e0fff117 	ldw	r3,-60(fp)
   16048:	00bfff84 	movi	r2,-2
   1604c:	1884703a 	and	r2,r3,r2
   16050:	1001703a 	wrctl	status,r2
  
  return context;
   16054:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   16058:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1605c:	d0a8db97 	ldw	r2,-23698(gp)
   16060:	10800c43 	ldbu	r2,49(r2)
   16064:	10803fcc 	andi	r2,r2,255
   16068:	10001c26 	beq	r2,zero,160dc <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1606c:	d0a8db97 	ldw	r2,-23698(gp)
   16070:	10800c43 	ldbu	r2,49(r2)
   16074:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16078:	d0a8db97 	ldw	r2,-23698(gp)
   1607c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   16080:	e0bff704 	addi	r2,fp,-36
   16084:	1009883a 	mov	r4,r2
   16088:	00169940 	call	16994 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1608c:	d0a8db97 	ldw	r2,-23698(gp)
   16090:	10000c05 	stb	zero,48(r2)
   16094:	e0bfe517 	ldw	r2,-108(fp)
   16098:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1609c:	e0bff217 	ldw	r2,-56(fp)
   160a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   160a4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   160a8:	e0bff303 	ldbu	r2,-52(fp)
   160ac:	108000a0 	cmpeqi	r2,r2,2
   160b0:	10000426 	beq	r2,zero,160c4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   160b4:	e0800217 	ldw	r2,8(fp)
   160b8:	00c00384 	movi	r3,14
   160bc:	10c00005 	stb	r3,0(r2)
                 break;
   160c0:	00000406 	br	160d4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   160c4:	e0800217 	ldw	r2,8(fp)
   160c8:	00c00284 	movi	r3,10
   160cc:	10c00005 	stb	r3,0(r2)
                 break;
   160d0:	0001883a 	nop
        }
        return (flags_rdy);
   160d4:	e0bfe80b 	ldhu	r2,-96(fp)
   160d8:	00002e06 	br	16194 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   160dc:	d0a8db97 	ldw	r2,-23698(gp)
   160e0:	10800b0b 	ldhu	r2,44(r2)
   160e4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   160e8:	e0bfe403 	ldbu	r2,-112(fp)
   160ec:	10800058 	cmpnei	r2,r2,1
   160f0:	1000211e 	bne	r2,zero,16178 <OSFlagPend+0x588>
        switch (wait_type) {
   160f4:	e0bffe03 	ldbu	r2,-8(fp)
   160f8:	10001616 	blt	r2,zero,16154 <OSFlagPend+0x564>
   160fc:	10c00090 	cmplti	r3,r2,2
   16100:	18000c1e 	bne	r3,zero,16134 <OSFlagPend+0x544>
   16104:	10800108 	cmpgei	r2,r2,4
   16108:	1000121e 	bne	r2,zero,16154 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1610c:	e0bffc17 	ldw	r2,-16(fp)
   16110:	1080020b 	ldhu	r2,8(r2)
   16114:	1007883a 	mov	r3,r2
   16118:	e0bfe80b 	ldhu	r2,-96(fp)
   1611c:	0084303a 	nor	r2,zero,r2
   16120:	1884703a 	and	r2,r3,r2
   16124:	1007883a 	mov	r3,r2
   16128:	e0bffc17 	ldw	r2,-16(fp)
   1612c:	10c0020d 	sth	r3,8(r2)
                 break;
   16130:	00001106 	br	16178 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16134:	e0bffc17 	ldw	r2,-16(fp)
   16138:	10c0020b 	ldhu	r3,8(r2)
   1613c:	e0bfe80b 	ldhu	r2,-96(fp)
   16140:	1884b03a 	or	r2,r3,r2
   16144:	1007883a 	mov	r3,r2
   16148:	e0bffc17 	ldw	r2,-16(fp)
   1614c:	10c0020d 	sth	r3,8(r2)
                 break;
   16150:	00000906 	br	16178 <OSFlagPend+0x588>
   16154:	e0bfe517 	ldw	r2,-108(fp)
   16158:	e0bff415 	stw	r2,-48(fp)
   1615c:	e0bff417 	ldw	r2,-48(fp)
   16160:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16164:	e0800217 	ldw	r2,8(fp)
   16168:	00c01bc4 	movi	r3,111
   1616c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16170:	0005883a 	mov	r2,zero
   16174:	00000706 	br	16194 <OSFlagPend+0x5a4>
   16178:	e0bfe517 	ldw	r2,-108(fp)
   1617c:	e0bff515 	stw	r2,-44(fp)
   16180:	e0bff517 	ldw	r2,-44(fp)
   16184:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16188:	e0800217 	ldw	r2,8(fp)
   1618c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   16190:	e0bfe80b 	ldhu	r2,-96(fp)
}
   16194:	e037883a 	mov	sp,fp
   16198:	dfc00117 	ldw	ra,4(sp)
   1619c:	df000017 	ldw	fp,0(sp)
   161a0:	dec00204 	addi	sp,sp,8
   161a4:	f800283a 	ret

000161a8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   161a8:	defffb04 	addi	sp,sp,-20
   161ac:	df000415 	stw	fp,16(sp)
   161b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   161b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161b8:	0005303a 	rdctl	r2,status
   161bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161c0:	e0fffe17 	ldw	r3,-8(fp)
   161c4:	00bfff84 	movi	r2,-2
   161c8:	1884703a 	and	r2,r3,r2
   161cc:	1001703a 	wrctl	status,r2
  
  return context;
   161d0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   161d4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   161d8:	d0a8db97 	ldw	r2,-23698(gp)
   161dc:	10800b0b 	ldhu	r2,44(r2)
   161e0:	e0bffd0d 	sth	r2,-12(fp)
   161e4:	e0bffc17 	ldw	r2,-16(fp)
   161e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161ec:	e0bfff17 	ldw	r2,-4(fp)
   161f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   161f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   161f8:	e037883a 	mov	sp,fp
   161fc:	df000017 	ldw	fp,0(sp)
   16200:	dec00104 	addi	sp,sp,4
   16204:	f800283a 	ret

00016208 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16208:	deffef04 	addi	sp,sp,-68
   1620c:	dfc01015 	stw	ra,64(sp)
   16210:	df000f15 	stw	fp,60(sp)
   16214:	df000f04 	addi	fp,sp,60
   16218:	e13ffc15 	stw	r4,-16(fp)
   1621c:	2807883a 	mov	r3,r5
   16220:	3005883a 	mov	r2,r6
   16224:	e1ffff15 	stw	r7,-4(fp)
   16228:	e0fffd0d 	sth	r3,-12(fp)
   1622c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   16230:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16234:	e0bfff17 	ldw	r2,-4(fp)
   16238:	1000021e 	bne	r2,zero,16244 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1623c:	0005883a 	mov	r2,zero
   16240:	0000d106 	br	16588 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16244:	e0bffc17 	ldw	r2,-16(fp)
   16248:	1000051e 	bne	r2,zero,16260 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1624c:	e0bfff17 	ldw	r2,-4(fp)
   16250:	00c01b84 	movi	r3,110
   16254:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16258:	0005883a 	mov	r2,zero
   1625c:	0000ca06 	br	16588 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   16260:	e0bffc17 	ldw	r2,-16(fp)
   16264:	10800003 	ldbu	r2,0(r2)
   16268:	10803fcc 	andi	r2,r2,255
   1626c:	10800160 	cmpeqi	r2,r2,5
   16270:	1000051e 	bne	r2,zero,16288 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16274:	e0bfff17 	ldw	r2,-4(fp)
   16278:	00c00044 	movi	r3,1
   1627c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16280:	0005883a 	mov	r2,zero
   16284:	0000c006 	br	16588 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16288:	0005303a 	rdctl	r2,status
   1628c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16290:	e0fffb17 	ldw	r3,-20(fp)
   16294:	00bfff84 	movi	r2,-2
   16298:	1884703a 	and	r2,r3,r2
   1629c:	1001703a 	wrctl	status,r2
  
  return context;
   162a0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   162a4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   162a8:	e0bffe03 	ldbu	r2,-8(fp)
   162ac:	10000326 	beq	r2,zero,162bc <OSFlagPost+0xb4>
   162b0:	10800060 	cmpeqi	r2,r2,1
   162b4:	10000b1e 	bne	r2,zero,162e4 <OSFlagPost+0xdc>
   162b8:	00001206 	br	16304 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   162bc:	e0bffc17 	ldw	r2,-16(fp)
   162c0:	1080020b 	ldhu	r2,8(r2)
   162c4:	1007883a 	mov	r3,r2
   162c8:	e0bffd0b 	ldhu	r2,-12(fp)
   162cc:	0084303a 	nor	r2,zero,r2
   162d0:	1884703a 	and	r2,r3,r2
   162d4:	1007883a 	mov	r3,r2
   162d8:	e0bffc17 	ldw	r2,-16(fp)
   162dc:	10c0020d 	sth	r3,8(r2)
             break;
   162e0:	00001106 	br	16328 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   162e4:	e0bffc17 	ldw	r2,-16(fp)
   162e8:	10c0020b 	ldhu	r3,8(r2)
   162ec:	e0bffd0b 	ldhu	r2,-12(fp)
   162f0:	1884b03a 	or	r2,r3,r2
   162f4:	1007883a 	mov	r3,r2
   162f8:	e0bffc17 	ldw	r2,-16(fp)
   162fc:	10c0020d 	sth	r3,8(r2)
             break;
   16300:	00000906 	br	16328 <OSFlagPost+0x120>
   16304:	e0bff317 	ldw	r2,-52(fp)
   16308:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1630c:	e0bff417 	ldw	r2,-48(fp)
   16310:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	00c01c44 	movi	r3,113
   1631c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   16320:	0005883a 	mov	r2,zero
   16324:	00009806 	br	16588 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16328:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1632c:	e0bffc17 	ldw	r2,-16(fp)
   16330:	10800117 	ldw	r2,4(r2)
   16334:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16338:	00007706 	br	16518 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1633c:	e0bff117 	ldw	r2,-60(fp)
   16340:	10800483 	ldbu	r2,18(r2)
   16344:	10803fcc 	andi	r2,r2,255
   16348:	10c00060 	cmpeqi	r3,r2,1
   1634c:	18004a1e 	bne	r3,zero,16478 <OSFlagPost+0x270>
   16350:	10c00088 	cmpgei	r3,r2,2
   16354:	1800021e 	bne	r3,zero,16360 <OSFlagPost+0x158>
   16358:	10002f26 	beq	r2,zero,16418 <OSFlagPost+0x210>
   1635c:	00005b06 	br	164cc <OSFlagPost+0x2c4>
   16360:	10c000a0 	cmpeqi	r3,r2,2
   16364:	1800031e 	bne	r3,zero,16374 <OSFlagPost+0x16c>
   16368:	108000e0 	cmpeqi	r2,r2,3
   1636c:	1000171e 	bne	r2,zero,163cc <OSFlagPost+0x1c4>
   16370:	00005606 	br	164cc <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16374:	e0bffc17 	ldw	r2,-16(fp)
   16378:	10c0020b 	ldhu	r3,8(r2)
   1637c:	e0bff117 	ldw	r2,-60(fp)
   16380:	1080040b 	ldhu	r2,16(r2)
   16384:	1884703a 	and	r2,r3,r2
   16388:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1638c:	e0bff117 	ldw	r2,-60(fp)
   16390:	1080040b 	ldhu	r2,16(r2)
   16394:	10ffffcc 	andi	r3,r2,65535
   16398:	e0bff60b 	ldhu	r2,-40(fp)
   1639c:	1880541e 	bne	r3,r2,164f0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   163a0:	e0bff60b 	ldhu	r2,-40(fp)
   163a4:	100b883a 	mov	r5,r2
   163a8:	e13ff117 	ldw	r4,-60(fp)
   163ac:	00168a00 	call	168a0 <OS_FlagTaskRdy>
   163b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   163b4:	e0bff683 	ldbu	r2,-38(fp)
   163b8:	10800058 	cmpnei	r2,r2,1
   163bc:	10004c1e 	bne	r2,zero,164f0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   163c0:	00800044 	movi	r2,1
   163c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   163c8:	00004906 	br	164f0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   163cc:	e0bffc17 	ldw	r2,-16(fp)
   163d0:	10c0020b 	ldhu	r3,8(r2)
   163d4:	e0bff117 	ldw	r2,-60(fp)
   163d8:	1080040b 	ldhu	r2,16(r2)
   163dc:	1884703a 	and	r2,r3,r2
   163e0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   163e4:	e0bff60b 	ldhu	r2,-40(fp)
   163e8:	10004326 	beq	r2,zero,164f8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   163ec:	e0bff60b 	ldhu	r2,-40(fp)
   163f0:	100b883a 	mov	r5,r2
   163f4:	e13ff117 	ldw	r4,-60(fp)
   163f8:	00168a00 	call	168a0 <OS_FlagTaskRdy>
   163fc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16400:	e0bff683 	ldbu	r2,-38(fp)
   16404:	10800058 	cmpnei	r2,r2,1
   16408:	10003b1e 	bne	r2,zero,164f8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1640c:	00800044 	movi	r2,1
   16410:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16414:	00003806 	br	164f8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16418:	e0bffc17 	ldw	r2,-16(fp)
   1641c:	1080020b 	ldhu	r2,8(r2)
   16420:	0084303a 	nor	r2,zero,r2
   16424:	1007883a 	mov	r3,r2
   16428:	e0bff117 	ldw	r2,-60(fp)
   1642c:	1080040b 	ldhu	r2,16(r2)
   16430:	1884703a 	and	r2,r3,r2
   16434:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16438:	e0bff117 	ldw	r2,-60(fp)
   1643c:	1080040b 	ldhu	r2,16(r2)
   16440:	10ffffcc 	andi	r3,r2,65535
   16444:	e0bff60b 	ldhu	r2,-40(fp)
   16448:	18802d1e 	bne	r3,r2,16500 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1644c:	e0bff60b 	ldhu	r2,-40(fp)
   16450:	100b883a 	mov	r5,r2
   16454:	e13ff117 	ldw	r4,-60(fp)
   16458:	00168a00 	call	168a0 <OS_FlagTaskRdy>
   1645c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16460:	e0bff683 	ldbu	r2,-38(fp)
   16464:	10800058 	cmpnei	r2,r2,1
   16468:	1000251e 	bne	r2,zero,16500 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1646c:	00800044 	movi	r2,1
   16470:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16474:	00002206 	br	16500 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16478:	e0bffc17 	ldw	r2,-16(fp)
   1647c:	1080020b 	ldhu	r2,8(r2)
   16480:	0084303a 	nor	r2,zero,r2
   16484:	1007883a 	mov	r3,r2
   16488:	e0bff117 	ldw	r2,-60(fp)
   1648c:	1080040b 	ldhu	r2,16(r2)
   16490:	1884703a 	and	r2,r3,r2
   16494:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16498:	e0bff60b 	ldhu	r2,-40(fp)
   1649c:	10001a26 	beq	r2,zero,16508 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   164a0:	e0bff60b 	ldhu	r2,-40(fp)
   164a4:	100b883a 	mov	r5,r2
   164a8:	e13ff117 	ldw	r4,-60(fp)
   164ac:	00168a00 	call	168a0 <OS_FlagTaskRdy>
   164b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   164b4:	e0bff683 	ldbu	r2,-38(fp)
   164b8:	10800058 	cmpnei	r2,r2,1
   164bc:	1000121e 	bne	r2,zero,16508 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   164c0:	00800044 	movi	r2,1
   164c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   164c8:	00000f06 	br	16508 <OSFlagPost+0x300>
   164cc:	e0bff317 	ldw	r2,-52(fp)
   164d0:	e0bff515 	stw	r2,-44(fp)
   164d4:	e0bff517 	ldw	r2,-44(fp)
   164d8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   164dc:	e0bfff17 	ldw	r2,-4(fp)
   164e0:	00c01bc4 	movi	r3,111
   164e4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   164e8:	0005883a 	mov	r2,zero
   164ec:	00002606 	br	16588 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   164f0:	0001883a 	nop
   164f4:	00000506 	br	1650c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   164f8:	0001883a 	nop
   164fc:	00000306 	br	1650c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16500:	0001883a 	nop
   16504:	00000106 	br	1650c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16508:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1650c:	e0bff117 	ldw	r2,-60(fp)
   16510:	10800017 	ldw	r2,0(r2)
   16514:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16518:	e0bff117 	ldw	r2,-60(fp)
   1651c:	103f871e 	bne	r2,zero,1633c <OSFlagPost+0x134>
   16520:	e0bff317 	ldw	r2,-52(fp)
   16524:	e0bff715 	stw	r2,-36(fp)
   16528:	e0bff717 	ldw	r2,-36(fp)
   1652c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   16530:	e0bff203 	ldbu	r2,-56(fp)
   16534:	10800058 	cmpnei	r2,r2,1
   16538:	1000011e 	bne	r2,zero,16540 <OSFlagPost+0x338>
        OS_Sched();
   1653c:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16540:	0005303a 	rdctl	r2,status
   16544:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16548:	e0fffa17 	ldw	r3,-24(fp)
   1654c:	00bfff84 	movi	r2,-2
   16550:	1884703a 	and	r2,r3,r2
   16554:	1001703a 	wrctl	status,r2
  
  return context;
   16558:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1655c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16560:	e0bffc17 	ldw	r2,-16(fp)
   16564:	1080020b 	ldhu	r2,8(r2)
   16568:	e0bff90d 	sth	r2,-28(fp)
   1656c:	e0bff317 	ldw	r2,-52(fp)
   16570:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16574:	e0bff817 	ldw	r2,-32(fp)
   16578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1657c:	e0bfff17 	ldw	r2,-4(fp)
   16580:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16584:	e0bff90b 	ldhu	r2,-28(fp)
}
   16588:	e037883a 	mov	sp,fp
   1658c:	dfc00117 	ldw	ra,4(sp)
   16590:	df000017 	ldw	fp,0(sp)
   16594:	dec00204 	addi	sp,sp,8
   16598:	f800283a 	ret

0001659c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1659c:	defff904 	addi	sp,sp,-28
   165a0:	df000615 	stw	fp,24(sp)
   165a4:	df000604 	addi	fp,sp,24
   165a8:	e13ffe15 	stw	r4,-8(fp)
   165ac:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   165b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   165b4:	e0bfff17 	ldw	r2,-4(fp)
   165b8:	1000021e 	bne	r2,zero,165c4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   165bc:	0005883a 	mov	r2,zero
   165c0:	00002306 	br	16650 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   165c4:	e0bffe17 	ldw	r2,-8(fp)
   165c8:	1000051e 	bne	r2,zero,165e0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   165cc:	e0bfff17 	ldw	r2,-4(fp)
   165d0:	00c01b84 	movi	r3,110
   165d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   165d8:	0005883a 	mov	r2,zero
   165dc:	00001c06 	br	16650 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   165e0:	e0bffe17 	ldw	r2,-8(fp)
   165e4:	10800003 	ldbu	r2,0(r2)
   165e8:	10803fcc 	andi	r2,r2,255
   165ec:	10800160 	cmpeqi	r2,r2,5
   165f0:	1000051e 	bne	r2,zero,16608 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   165f4:	e0bfff17 	ldw	r2,-4(fp)
   165f8:	00c00044 	movi	r3,1
   165fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16600:	0005883a 	mov	r2,zero
   16604:	00001206 	br	16650 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16608:	0005303a 	rdctl	r2,status
   1660c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16610:	e0fffc17 	ldw	r3,-16(fp)
   16614:	00bfff84 	movi	r2,-2
   16618:	1884703a 	and	r2,r3,r2
   1661c:	1001703a 	wrctl	status,r2
  
  return context;
   16620:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16624:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16628:	e0bffe17 	ldw	r2,-8(fp)
   1662c:	1080020b 	ldhu	r2,8(r2)
   16630:	e0bffb0d 	sth	r2,-20(fp)
   16634:	e0bffa17 	ldw	r2,-24(fp)
   16638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16644:	e0bfff17 	ldw	r2,-4(fp)
   16648:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1664c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16650:	e037883a 	mov	sp,fp
   16654:	df000017 	ldw	fp,0(sp)
   16658:	dec00104 	addi	sp,sp,4
   1665c:	f800283a 	ret

00016660 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   16660:	defff804 	addi	sp,sp,-32
   16664:	df000715 	stw	fp,28(sp)
   16668:	df000704 	addi	fp,sp,28
   1666c:	e13ffb15 	stw	r4,-20(fp)
   16670:	e17ffc15 	stw	r5,-16(fp)
   16674:	3009883a 	mov	r4,r6
   16678:	3807883a 	mov	r3,r7
   1667c:	e0800117 	ldw	r2,4(fp)
   16680:	e13ffd0d 	sth	r4,-12(fp)
   16684:	e0fffe05 	stb	r3,-8(fp)
   16688:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1668c:	d0a8db97 	ldw	r2,-23698(gp)
   16690:	d0e8db97 	ldw	r3,-23698(gp)
   16694:	18c00c03 	ldbu	r3,48(r3)
   16698:	18c00814 	ori	r3,r3,32
   1669c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   166a0:	d0a8db97 	ldw	r2,-23698(gp)
   166a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   166a8:	d0a8db97 	ldw	r2,-23698(gp)
   166ac:	e0ffff0b 	ldhu	r3,-4(fp)
   166b0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   166b4:	d0a8db97 	ldw	r2,-23698(gp)
   166b8:	e0fffc17 	ldw	r3,-16(fp)
   166bc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   166c0:	e0bffc17 	ldw	r2,-16(fp)
   166c4:	e0fffd0b 	ldhu	r3,-12(fp)
   166c8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   166cc:	e0bffc17 	ldw	r2,-16(fp)
   166d0:	e0fffe03 	ldbu	r3,-8(fp)
   166d4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   166d8:	d0e8db97 	ldw	r3,-23698(gp)
   166dc:	e0bffc17 	ldw	r2,-16(fp)
   166e0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   166e4:	e0bffb17 	ldw	r2,-20(fp)
   166e8:	10c00117 	ldw	r3,4(r2)
   166ec:	e0bffc17 	ldw	r2,-16(fp)
   166f0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   166f4:	e0bffc17 	ldw	r2,-16(fp)
   166f8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   166fc:	e0bffc17 	ldw	r2,-16(fp)
   16700:	e0fffb17 	ldw	r3,-20(fp)
   16704:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16708:	e0bffb17 	ldw	r2,-20(fp)
   1670c:	10800117 	ldw	r2,4(r2)
   16710:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16714:	e0bff917 	ldw	r2,-28(fp)
   16718:	10000326 	beq	r2,zero,16728 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1671c:	e0bff917 	ldw	r2,-28(fp)
   16720:	e0fffc17 	ldw	r3,-16(fp)
   16724:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16728:	e0bffb17 	ldw	r2,-20(fp)
   1672c:	e0fffc17 	ldw	r3,-16(fp)
   16730:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   16734:	d0a8db97 	ldw	r2,-23698(gp)
   16738:	10800d03 	ldbu	r2,52(r2)
   1673c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16740:	e0fffa03 	ldbu	r3,-24(fp)
   16744:	e13ffa03 	ldbu	r4,-24(fp)
   16748:	d0a8d8c4 	addi	r2,gp,-23709
   1674c:	2085883a 	add	r2,r4,r2
   16750:	10800003 	ldbu	r2,0(r2)
   16754:	1009883a 	mov	r4,r2
   16758:	d0a8db97 	ldw	r2,-23698(gp)
   1675c:	10800d43 	ldbu	r2,53(r2)
   16760:	0084303a 	nor	r2,zero,r2
   16764:	2084703a 	and	r2,r4,r2
   16768:	1009883a 	mov	r4,r2
   1676c:	d0a8d8c4 	addi	r2,gp,-23709
   16770:	1885883a 	add	r2,r3,r2
   16774:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16778:	e0fffa03 	ldbu	r3,-24(fp)
   1677c:	d0a8d8c4 	addi	r2,gp,-23709
   16780:	1885883a 	add	r2,r3,r2
   16784:	10800003 	ldbu	r2,0(r2)
   16788:	10803fcc 	andi	r2,r2,255
   1678c:	1000071e 	bne	r2,zero,167ac <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   16790:	d0a8db97 	ldw	r2,-23698(gp)
   16794:	10800d83 	ldbu	r2,54(r2)
   16798:	0084303a 	nor	r2,zero,r2
   1679c:	1007883a 	mov	r3,r2
   167a0:	d0a8d883 	ldbu	r2,-23710(gp)
   167a4:	1884703a 	and	r2,r3,r2
   167a8:	d0a8d885 	stb	r2,-23710(gp)
    }
}
   167ac:	0001883a 	nop
   167b0:	e037883a 	mov	sp,fp
   167b4:	df000017 	ldw	fp,0(sp)
   167b8:	dec00104 	addi	sp,sp,4
   167bc:	f800283a 	ret

000167c0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   167c0:	defffb04 	addi	sp,sp,-20
   167c4:	dfc00415 	stw	ra,16(sp)
   167c8:	df000315 	stw	fp,12(sp)
   167cc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   167d0:	0140dc04 	movi	r5,880
   167d4:	01000274 	movhi	r4,9
   167d8:	21134304 	addi	r4,r4,19724
   167dc:	00149f40 	call	149f4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   167e0:	00800274 	movhi	r2,9
   167e4:	10934304 	addi	r2,r2,19724
   167e8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   167ec:	00800274 	movhi	r2,9
   167f0:	10934e04 	addi	r2,r2,19768
   167f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   167f8:	e03ffd0d 	sth	zero,-12(fp)
   167fc:	00001306 	br	1684c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16800:	e0bffe17 	ldw	r2,-8(fp)
   16804:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16808:	e0bffe17 	ldw	r2,-8(fp)
   1680c:	e0ffff17 	ldw	r3,-4(fp)
   16810:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16814:	e0bffe17 	ldw	r2,-8(fp)
   16818:	00c00fc4 	movi	r3,63
   1681c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16820:	e0bffe17 	ldw	r2,-8(fp)
   16824:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   16828:	e0bffe17 	ldw	r2,-8(fp)
   1682c:	10800b04 	addi	r2,r2,44
   16830:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   16834:	e0bfff17 	ldw	r2,-4(fp)
   16838:	10800b04 	addi	r2,r2,44
   1683c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16840:	e0bffd0b 	ldhu	r2,-12(fp)
   16844:	10800044 	addi	r2,r2,1
   16848:	e0bffd0d 	sth	r2,-12(fp)
   1684c:	e0bffd0b 	ldhu	r2,-12(fp)
   16850:	108004f0 	cmpltui	r2,r2,19
   16854:	103fea1e 	bne	r2,zero,16800 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16858:	e0bffe17 	ldw	r2,-8(fp)
   1685c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   16860:	e0bffe17 	ldw	r2,-8(fp)
   16864:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   16868:	e0bffe17 	ldw	r2,-8(fp)
   1686c:	00c00fc4 	movi	r3,63
   16870:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16874:	e0bffe17 	ldw	r2,-8(fp)
   16878:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1687c:	00800274 	movhi	r2,9
   16880:	10934304 	addi	r2,r2,19724
   16884:	d0a8dd95 	stw	r2,-23690(gp)
#endif
}
   16888:	0001883a 	nop
   1688c:	e037883a 	mov	sp,fp
   16890:	dfc00117 	ldw	ra,4(sp)
   16894:	df000017 	ldw	fp,0(sp)
   16898:	dec00204 	addi	sp,sp,8
   1689c:	f800283a 	ret

000168a0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   168a0:	defffa04 	addi	sp,sp,-24
   168a4:	dfc00515 	stw	ra,20(sp)
   168a8:	df000415 	stw	fp,16(sp)
   168ac:	df000404 	addi	fp,sp,16
   168b0:	e13ffe15 	stw	r4,-8(fp)
   168b4:	2805883a 	mov	r2,r5
   168b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   168bc:	e0bffe17 	ldw	r2,-8(fp)
   168c0:	10800217 	ldw	r2,8(r2)
   168c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   168c8:	e0bffd17 	ldw	r2,-12(fp)
   168cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   168d0:	e0bffd17 	ldw	r2,-12(fp)
   168d4:	e0ffff0b 	ldhu	r3,-4(fp)
   168d8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   168dc:	e0bffd17 	ldw	r2,-12(fp)
   168e0:	10c00c03 	ldbu	r3,48(r2)
   168e4:	00bff7c4 	movi	r2,-33
   168e8:	1884703a 	and	r2,r3,r2
   168ec:	1007883a 	mov	r3,r2
   168f0:	e0bffd17 	ldw	r2,-12(fp)
   168f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   168f8:	e0bffd17 	ldw	r2,-12(fp)
   168fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16900:	e0bffd17 	ldw	r2,-12(fp)
   16904:	10800c03 	ldbu	r2,48(r2)
   16908:	10803fcc 	andi	r2,r2,255
   1690c:	1000181e 	bne	r2,zero,16970 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16910:	e0bffd17 	ldw	r2,-12(fp)
   16914:	10c00d83 	ldbu	r3,54(r2)
   16918:	d0a8d883 	ldbu	r2,-23710(gp)
   1691c:	1884b03a 	or	r2,r3,r2
   16920:	d0a8d885 	stb	r2,-23710(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16924:	e0bffd17 	ldw	r2,-12(fp)
   16928:	10800d03 	ldbu	r2,52(r2)
   1692c:	10c03fcc 	andi	r3,r2,255
   16930:	e0bffd17 	ldw	r2,-12(fp)
   16934:	10800d03 	ldbu	r2,52(r2)
   16938:	11003fcc 	andi	r4,r2,255
   1693c:	d0a8d8c4 	addi	r2,gp,-23709
   16940:	2085883a 	add	r2,r4,r2
   16944:	11000003 	ldbu	r4,0(r2)
   16948:	e0bffd17 	ldw	r2,-12(fp)
   1694c:	10800d43 	ldbu	r2,53(r2)
   16950:	2084b03a 	or	r2,r4,r2
   16954:	1009883a 	mov	r4,r2
   16958:	d0a8d8c4 	addi	r2,gp,-23709
   1695c:	1885883a 	add	r2,r3,r2
   16960:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16964:	00800044 	movi	r2,1
   16968:	e0bffc05 	stb	r2,-16(fp)
   1696c:	00000106 	br	16974 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   16970:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16974:	e13ffe17 	ldw	r4,-8(fp)
   16978:	00169940 	call	16994 <OS_FlagUnlink>
    return (sched);
   1697c:	e0bffc03 	ldbu	r2,-16(fp)
}
   16980:	e037883a 	mov	sp,fp
   16984:	dfc00117 	ldw	ra,4(sp)
   16988:	df000017 	ldw	fp,0(sp)
   1698c:	dec00204 	addi	sp,sp,8
   16990:	f800283a 	ret

00016994 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16994:	defffa04 	addi	sp,sp,-24
   16998:	df000515 	stw	fp,20(sp)
   1699c:	df000504 	addi	fp,sp,20
   169a0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   169a4:	e0bfff17 	ldw	r2,-4(fp)
   169a8:	10800117 	ldw	r2,4(r2)
   169ac:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   169b0:	e0bfff17 	ldw	r2,-4(fp)
   169b4:	10800017 	ldw	r2,0(r2)
   169b8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   169bc:	e0bffb17 	ldw	r2,-20(fp)
   169c0:	10000b1e 	bne	r2,zero,169f0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   169c4:	e0bfff17 	ldw	r2,-4(fp)
   169c8:	10800317 	ldw	r2,12(r2)
   169cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   169d0:	e0bffd17 	ldw	r2,-12(fp)
   169d4:	e0fffc17 	ldw	r3,-16(fp)
   169d8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   169dc:	e0bffc17 	ldw	r2,-16(fp)
   169e0:	10000b26 	beq	r2,zero,16a10 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10000115 	stw	zero,4(r2)
   169ec:	00000806 	br	16a10 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   169f0:	e0bffb17 	ldw	r2,-20(fp)
   169f4:	e0fffc17 	ldw	r3,-16(fp)
   169f8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   169fc:	e0bffc17 	ldw	r2,-16(fp)
   16a00:	10000326 	beq	r2,zero,16a10 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16a04:	e0bffc17 	ldw	r2,-16(fp)
   16a08:	e0fffb17 	ldw	r3,-20(fp)
   16a0c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16a10:	e0bfff17 	ldw	r2,-4(fp)
   16a14:	10800217 	ldw	r2,8(r2)
   16a18:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	10000a15 	stw	zero,40(r2)
#endif
}
   16a24:	0001883a 	nop
   16a28:	e037883a 	mov	sp,fp
   16a2c:	df000017 	ldw	fp,0(sp)
   16a30:	dec00104 	addi	sp,sp,4
   16a34:	f800283a 	ret

00016a38 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   16a38:	defffa04 	addi	sp,sp,-24
   16a3c:	df000515 	stw	fp,20(sp)
   16a40:	df000504 	addi	fp,sp,20
   16a44:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   16a48:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   16a4c:	e0bfff17 	ldw	r2,-4(fp)
   16a50:	1000021e 	bne	r2,zero,16a5c <OSMboxAccept+0x24>
        return ((void *)0);
   16a54:	0005883a 	mov	r2,zero
   16a58:	00001906 	br	16ac0 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   16a5c:	e0bfff17 	ldw	r2,-4(fp)
   16a60:	10800003 	ldbu	r2,0(r2)
   16a64:	10803fcc 	andi	r2,r2,255
   16a68:	10800060 	cmpeqi	r2,r2,1
   16a6c:	1000021e 	bne	r2,zero,16a78 <OSMboxAccept+0x40>
        return ((void *)0);
   16a70:	0005883a 	mov	r2,zero
   16a74:	00001206 	br	16ac0 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a78:	0005303a 	rdctl	r2,status
   16a7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a80:	e0fffd17 	ldw	r3,-12(fp)
   16a84:	00bfff84 	movi	r2,-2
   16a88:	1884703a 	and	r2,r3,r2
   16a8c:	1001703a 	wrctl	status,r2
  
  return context;
   16a90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16a94:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   16a98:	e0bfff17 	ldw	r2,-4(fp)
   16a9c:	10800117 	ldw	r2,4(r2)
   16aa0:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   16aa4:	e0bfff17 	ldw	r2,-4(fp)
   16aa8:	10000115 	stw	zero,4(r2)
   16aac:	e0bffb17 	ldw	r2,-20(fp)
   16ab0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   16abc:	e0bffc17 	ldw	r2,-16(fp)
}
   16ac0:	e037883a 	mov	sp,fp
   16ac4:	df000017 	ldw	fp,0(sp)
   16ac8:	dec00104 	addi	sp,sp,4
   16acc:	f800283a 	ret

00016ad0 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   16ad0:	defff904 	addi	sp,sp,-28
   16ad4:	dfc00615 	stw	ra,24(sp)
   16ad8:	df000515 	stw	fp,20(sp)
   16adc:	df000504 	addi	fp,sp,20
   16ae0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16ae4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16ae8:	d0a8da83 	ldbu	r2,-23702(gp)
   16aec:	10803fcc 	andi	r2,r2,255
   16af0:	10000226 	beq	r2,zero,16afc <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16af4:	0005883a 	mov	r2,zero
   16af8:	00002506 	br	16b90 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16afc:	0005303a 	rdctl	r2,status
   16b00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b04:	e0fffe17 	ldw	r3,-8(fp)
   16b08:	00bfff84 	movi	r2,-2
   16b0c:	1884703a 	and	r2,r3,r2
   16b10:	1001703a 	wrctl	status,r2
  
  return context;
   16b14:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   16b18:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   16b1c:	d0a8d997 	ldw	r2,-23706(gp)
   16b20:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   16b24:	d0a8d997 	ldw	r2,-23706(gp)
   16b28:	10000326 	beq	r2,zero,16b38 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16b2c:	d0a8d997 	ldw	r2,-23706(gp)
   16b30:	10800117 	ldw	r2,4(r2)
   16b34:	d0a8d995 	stw	r2,-23706(gp)
   16b38:	e0bffb17 	ldw	r2,-20(fp)
   16b3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b40:	e0bffc17 	ldw	r2,-16(fp)
   16b44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   16b48:	e0bffd17 	ldw	r2,-12(fp)
   16b4c:	10000f26 	beq	r2,zero,16b8c <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   16b50:	e0bffd17 	ldw	r2,-12(fp)
   16b54:	00c00044 	movi	r3,1
   16b58:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   16b5c:	e0bffd17 	ldw	r2,-12(fp)
   16b60:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   16b64:	e0bffd17 	ldw	r2,-12(fp)
   16b68:	e0ffff17 	ldw	r3,-4(fp)
   16b6c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   16b70:	e0bffd17 	ldw	r2,-12(fp)
   16b74:	00c00fc4 	movi	r3,63
   16b78:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16b7c:	e0bffd17 	ldw	r2,-12(fp)
   16b80:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   16b84:	e13ffd17 	ldw	r4,-12(fp)
   16b88:	00146140 	call	14614 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   16b8c:	e0bffd17 	ldw	r2,-12(fp)
}
   16b90:	e037883a 	mov	sp,fp
   16b94:	dfc00117 	ldw	ra,4(sp)
   16b98:	df000017 	ldw	fp,0(sp)
   16b9c:	dec00204 	addi	sp,sp,8
   16ba0:	f800283a 	ret

00016ba4 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16ba4:	defff304 	addi	sp,sp,-52
   16ba8:	dfc00c15 	stw	ra,48(sp)
   16bac:	df000b15 	stw	fp,44(sp)
   16bb0:	df000b04 	addi	fp,sp,44
   16bb4:	e13ffd15 	stw	r4,-12(fp)
   16bb8:	2805883a 	mov	r2,r5
   16bbc:	e1bfff15 	stw	r6,-4(fp)
   16bc0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16bc4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16bc8:	e0bfff17 	ldw	r2,-4(fp)
   16bcc:	1000021e 	bne	r2,zero,16bd8 <OSMboxDel+0x34>
        return (pevent);
   16bd0:	e0bffd17 	ldw	r2,-12(fp)
   16bd4:	00007e06 	br	16dd0 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16bd8:	e0bffd17 	ldw	r2,-12(fp)
   16bdc:	1000051e 	bne	r2,zero,16bf4 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16be0:	e0bfff17 	ldw	r2,-4(fp)
   16be4:	00c00104 	movi	r3,4
   16be8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16bec:	e0bffd17 	ldw	r2,-12(fp)
   16bf0:	00007706 	br	16dd0 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   16bf4:	e0bffd17 	ldw	r2,-12(fp)
   16bf8:	10800003 	ldbu	r2,0(r2)
   16bfc:	10803fcc 	andi	r2,r2,255
   16c00:	10800060 	cmpeqi	r2,r2,1
   16c04:	1000051e 	bne	r2,zero,16c1c <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16c08:	e0bfff17 	ldw	r2,-4(fp)
   16c0c:	00c00044 	movi	r3,1
   16c10:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16c14:	e0bffd17 	ldw	r2,-12(fp)
   16c18:	00006d06 	br	16dd0 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16c1c:	d0a8da83 	ldbu	r2,-23702(gp)
   16c20:	10803fcc 	andi	r2,r2,255
   16c24:	10000526 	beq	r2,zero,16c3c <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16c28:	e0bfff17 	ldw	r2,-4(fp)
   16c2c:	00c003c4 	movi	r3,15
   16c30:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16c34:	e0bffd17 	ldw	r2,-12(fp)
   16c38:	00006506 	br	16dd0 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c3c:	0005303a 	rdctl	r2,status
   16c40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c44:	e0fffc17 	ldw	r3,-16(fp)
   16c48:	00bfff84 	movi	r2,-2
   16c4c:	1884703a 	and	r2,r3,r2
   16c50:	1001703a 	wrctl	status,r2
  
  return context;
   16c54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16c58:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   16c5c:	e0bffd17 	ldw	r2,-12(fp)
   16c60:	10800283 	ldbu	r2,10(r2)
   16c64:	10803fcc 	andi	r2,r2,255
   16c68:	10000326 	beq	r2,zero,16c78 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16c6c:	00800044 	movi	r2,1
   16c70:	e0bff505 	stb	r2,-44(fp)
   16c74:	00000106 	br	16c7c <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16c78:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16c7c:	e0bffe03 	ldbu	r2,-8(fp)
   16c80:	10000326 	beq	r2,zero,16c90 <OSMboxDel+0xec>
   16c84:	10800060 	cmpeqi	r2,r2,1
   16c88:	1000281e 	bne	r2,zero,16d2c <OSMboxDel+0x188>
   16c8c:	00004506 	br	16da4 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   16c90:	e0bff503 	ldbu	r2,-44(fp)
   16c94:	1000161e 	bne	r2,zero,16cf0 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16c98:	e0bffd17 	ldw	r2,-12(fp)
   16c9c:	00c00fc4 	movi	r3,63
   16ca0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16ca4:	e0bffd17 	ldw	r2,-12(fp)
   16ca8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   16cac:	e0bffd17 	ldw	r2,-12(fp)
   16cb0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   16cb4:	d0e8d997 	ldw	r3,-23706(gp)
   16cb8:	e0bffd17 	ldw	r2,-12(fp)
   16cbc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   16cc0:	e0bffd17 	ldw	r2,-12(fp)
   16cc4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   16cc8:	e0bffd17 	ldw	r2,-12(fp)
   16ccc:	d0a8d995 	stw	r2,-23706(gp)
   16cd0:	e0bff717 	ldw	r2,-36(fp)
   16cd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cd8:	e0bff817 	ldw	r2,-32(fp)
   16cdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   16ce0:	e0bfff17 	ldw	r2,-4(fp)
   16ce4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   16ce8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   16cec:	00003706 	br	16dcc <OSMboxDel+0x228>
   16cf0:	e0bff717 	ldw	r2,-36(fp)
   16cf4:	e0bff915 	stw	r2,-28(fp)
   16cf8:	e0bff917 	ldw	r2,-28(fp)
   16cfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   16d00:	e0bfff17 	ldw	r2,-4(fp)
   16d04:	00c01244 	movi	r3,73
   16d08:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   16d0c:	e0bffd17 	ldw	r2,-12(fp)
   16d10:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16d14:	00002d06 	br	16dcc <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16d18:	000f883a 	mov	r7,zero
   16d1c:	01800084 	movi	r6,2
   16d20:	000b883a 	mov	r5,zero
   16d24:	e13ffd17 	ldw	r4,-12(fp)
   16d28:	00140640 	call	14064 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   16d2c:	e0bffd17 	ldw	r2,-12(fp)
   16d30:	10800283 	ldbu	r2,10(r2)
   16d34:	10803fcc 	andi	r2,r2,255
   16d38:	103ff71e 	bne	r2,zero,16d18 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16d3c:	e0bffd17 	ldw	r2,-12(fp)
   16d40:	00c00fc4 	movi	r3,63
   16d44:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16d48:	e0bffd17 	ldw	r2,-12(fp)
   16d4c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16d50:	e0bffd17 	ldw	r2,-12(fp)
   16d54:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16d58:	d0e8d997 	ldw	r3,-23706(gp)
   16d5c:	e0bffd17 	ldw	r2,-12(fp)
   16d60:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16d64:	e0bffd17 	ldw	r2,-12(fp)
   16d68:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16d6c:	e0bffd17 	ldw	r2,-12(fp)
   16d70:	d0a8d995 	stw	r2,-23706(gp)
   16d74:	e0bff717 	ldw	r2,-36(fp)
   16d78:	e0bffa15 	stw	r2,-24(fp)
   16d7c:	e0bffa17 	ldw	r2,-24(fp)
   16d80:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16d84:	e0bff503 	ldbu	r2,-44(fp)
   16d88:	10800058 	cmpnei	r2,r2,1
   16d8c:	1000011e 	bne	r2,zero,16d94 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16d90:	0014ab00 	call	14ab0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   16d94:	e0bfff17 	ldw	r2,-4(fp)
   16d98:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   16d9c:	e03ff615 	stw	zero,-40(fp)
             break;
   16da0:	00000a06 	br	16dcc <OSMboxDel+0x228>
   16da4:	e0bff717 	ldw	r2,-36(fp)
   16da8:	e0bffb15 	stw	r2,-20(fp)
   16dac:	e0bffb17 	ldw	r2,-20(fp)
   16db0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   16db4:	e0bfff17 	ldw	r2,-4(fp)
   16db8:	00c001c4 	movi	r3,7
   16dbc:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   16dc0:	e0bffd17 	ldw	r2,-12(fp)
   16dc4:	e0bff615 	stw	r2,-40(fp)
             break;
   16dc8:	0001883a 	nop
    }
    return (pevent_return);
   16dcc:	e0bff617 	ldw	r2,-40(fp)
}
   16dd0:	e037883a 	mov	sp,fp
   16dd4:	dfc00117 	ldw	ra,4(sp)
   16dd8:	df000017 	ldw	fp,0(sp)
   16ddc:	dec00204 	addi	sp,sp,8
   16de0:	f800283a 	ret

00016de4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16de4:	defff404 	addi	sp,sp,-48
   16de8:	dfc00b15 	stw	ra,44(sp)
   16dec:	df000a15 	stw	fp,40(sp)
   16df0:	df000a04 	addi	fp,sp,40
   16df4:	e13ffd15 	stw	r4,-12(fp)
   16df8:	2805883a 	mov	r2,r5
   16dfc:	e1bfff15 	stw	r6,-4(fp)
   16e00:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16e04:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16e08:	e0bfff17 	ldw	r2,-4(fp)
   16e0c:	1000021e 	bne	r2,zero,16e18 <OSMboxPend+0x34>
        return ((void *)0);
   16e10:	0005883a 	mov	r2,zero
   16e14:	00007b06 	br	17004 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16e18:	e0bffd17 	ldw	r2,-12(fp)
   16e1c:	1000051e 	bne	r2,zero,16e34 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16e20:	e0bfff17 	ldw	r2,-4(fp)
   16e24:	00c00104 	movi	r3,4
   16e28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16e2c:	0005883a 	mov	r2,zero
   16e30:	00007406 	br	17004 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   16e34:	e0bffd17 	ldw	r2,-12(fp)
   16e38:	10800003 	ldbu	r2,0(r2)
   16e3c:	10803fcc 	andi	r2,r2,255
   16e40:	10800060 	cmpeqi	r2,r2,1
   16e44:	1000051e 	bne	r2,zero,16e5c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16e48:	e0bfff17 	ldw	r2,-4(fp)
   16e4c:	00c00044 	movi	r3,1
   16e50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16e54:	0005883a 	mov	r2,zero
   16e58:	00006a06 	br	17004 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   16e5c:	d0a8da83 	ldbu	r2,-23702(gp)
   16e60:	10803fcc 	andi	r2,r2,255
   16e64:	10000526 	beq	r2,zero,16e7c <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16e68:	e0bfff17 	ldw	r2,-4(fp)
   16e6c:	00c00084 	movi	r3,2
   16e70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16e74:	0005883a 	mov	r2,zero
   16e78:	00006206 	br	17004 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16e7c:	d0a8cc83 	ldbu	r2,-23758(gp)
   16e80:	10803fcc 	andi	r2,r2,255
   16e84:	10000526 	beq	r2,zero,16e9c <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16e88:	e0bfff17 	ldw	r2,-4(fp)
   16e8c:	00c00344 	movi	r3,13
   16e90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16e94:	0005883a 	mov	r2,zero
   16e98:	00005a06 	br	17004 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e9c:	0005303a 	rdctl	r2,status
   16ea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ea4:	e0fffc17 	ldw	r3,-16(fp)
   16ea8:	00bfff84 	movi	r2,-2
   16eac:	1884703a 	and	r2,r3,r2
   16eb0:	1001703a 	wrctl	status,r2
  
  return context;
   16eb4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16eb8:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   16ebc:	e0bffd17 	ldw	r2,-12(fp)
   16ec0:	10800117 	ldw	r2,4(r2)
   16ec4:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   16ec8:	e0bff617 	ldw	r2,-40(fp)
   16ecc:	10000a26 	beq	r2,zero,16ef8 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   16ed0:	e0bffd17 	ldw	r2,-12(fp)
   16ed4:	10000115 	stw	zero,4(r2)
   16ed8:	e0bff717 	ldw	r2,-36(fp)
   16edc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ee0:	e0bff817 	ldw	r2,-32(fp)
   16ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   16ee8:	e0bfff17 	ldw	r2,-4(fp)
   16eec:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   16ef0:	e0bff617 	ldw	r2,-40(fp)
   16ef4:	00004306 	br	17004 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   16ef8:	d0a8db97 	ldw	r2,-23698(gp)
   16efc:	d0e8db97 	ldw	r3,-23698(gp)
   16f00:	18c00c03 	ldbu	r3,48(r3)
   16f04:	18c00094 	ori	r3,r3,2
   16f08:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16f0c:	d0a8db97 	ldw	r2,-23698(gp)
   16f10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   16f14:	d0a8db97 	ldw	r2,-23698(gp)
   16f18:	e0fffe0b 	ldhu	r3,-8(fp)
   16f1c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   16f20:	e13ffd17 	ldw	r4,-12(fp)
   16f24:	00141fc0 	call	141fc <OS_EventTaskWait>
   16f28:	e0bff717 	ldw	r2,-36(fp)
   16f2c:	e0bffb15 	stw	r2,-20(fp)
   16f30:	e0bffb17 	ldw	r2,-20(fp)
   16f34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   16f38:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f3c:	0005303a 	rdctl	r2,status
   16f40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f44:	e0fff917 	ldw	r3,-28(fp)
   16f48:	00bfff84 	movi	r2,-2
   16f4c:	1884703a 	and	r2,r3,r2
   16f50:	1001703a 	wrctl	status,r2
  
  return context;
   16f54:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   16f58:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16f5c:	d0a8db97 	ldw	r2,-23698(gp)
   16f60:	10800c43 	ldbu	r2,49(r2)
   16f64:	10803fcc 	andi	r2,r2,255
   16f68:	10000326 	beq	r2,zero,16f78 <OSMboxPend+0x194>
   16f6c:	108000a0 	cmpeqi	r2,r2,2
   16f70:	1000071e 	bne	r2,zero,16f90 <OSMboxPend+0x1ac>
   16f74:	00000b06 	br	16fa4 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   16f78:	d0a8db97 	ldw	r2,-23698(gp)
   16f7c:	10800917 	ldw	r2,36(r2)
   16f80:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	10000005 	stb	zero,0(r2)
             break;
   16f8c:	00000e06 	br	16fc8 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   16f90:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   16f94:	e0bfff17 	ldw	r2,-4(fp)
   16f98:	00c00384 	movi	r3,14
   16f9c:	10c00005 	stb	r3,0(r2)
             break;
   16fa0:	00000906 	br	16fc8 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   16fa4:	d0a8db97 	ldw	r2,-23698(gp)
   16fa8:	e17ffd17 	ldw	r5,-12(fp)
   16fac:	1009883a 	mov	r4,r2
   16fb0:	001445c0 	call	1445c <OS_EventTaskRemove>
             pmsg = (void *)0;
   16fb4:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   16fb8:	e0bfff17 	ldw	r2,-4(fp)
   16fbc:	00c00284 	movi	r3,10
   16fc0:	10c00005 	stb	r3,0(r2)
             break;
   16fc4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   16fc8:	d0a8db97 	ldw	r2,-23698(gp)
   16fcc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   16fd0:	d0a8db97 	ldw	r2,-23698(gp)
   16fd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   16fd8:	d0a8db97 	ldw	r2,-23698(gp)
   16fdc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   16fe0:	d0a8db97 	ldw	r2,-23698(gp)
   16fe4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   16fe8:	d0a8db97 	ldw	r2,-23698(gp)
   16fec:	10000915 	stw	zero,36(r2)
   16ff0:	e0bff717 	ldw	r2,-36(fp)
   16ff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ff8:	e0bffa17 	ldw	r2,-24(fp)
   16ffc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17000:	e0bff617 	ldw	r2,-40(fp)
}
   17004:	e037883a 	mov	sp,fp
   17008:	dfc00117 	ldw	ra,4(sp)
   1700c:	df000017 	ldw	fp,0(sp)
   17010:	dec00204 	addi	sp,sp,8
   17014:	f800283a 	ret

00017018 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17018:	defff604 	addi	sp,sp,-40
   1701c:	dfc00915 	stw	ra,36(sp)
   17020:	df000815 	stw	fp,32(sp)
   17024:	df000804 	addi	fp,sp,32
   17028:	e13ffd15 	stw	r4,-12(fp)
   1702c:	2805883a 	mov	r2,r5
   17030:	e1bfff15 	stw	r6,-4(fp)
   17034:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17038:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1703c:	e0bfff17 	ldw	r2,-4(fp)
   17040:	1000021e 	bne	r2,zero,1704c <OSMboxPendAbort+0x34>
        return (0);
   17044:	0005883a 	mov	r2,zero
   17048:	00004906 	br	17170 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1704c:	e0bffd17 	ldw	r2,-12(fp)
   17050:	1000051e 	bne	r2,zero,17068 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17054:	e0bfff17 	ldw	r2,-4(fp)
   17058:	00c00104 	movi	r3,4
   1705c:	10c00005 	stb	r3,0(r2)
        return (0);
   17060:	0005883a 	mov	r2,zero
   17064:	00004206 	br	17170 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17068:	e0bffd17 	ldw	r2,-12(fp)
   1706c:	10800003 	ldbu	r2,0(r2)
   17070:	10803fcc 	andi	r2,r2,255
   17074:	10800060 	cmpeqi	r2,r2,1
   17078:	1000051e 	bne	r2,zero,17090 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1707c:	e0bfff17 	ldw	r2,-4(fp)
   17080:	00c00044 	movi	r3,1
   17084:	10c00005 	stb	r3,0(r2)
        return (0);
   17088:	0005883a 	mov	r2,zero
   1708c:	00003806 	br	17170 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17090:	0005303a 	rdctl	r2,status
   17094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17098:	e0fffc17 	ldw	r3,-16(fp)
   1709c:	00bfff84 	movi	r2,-2
   170a0:	1884703a 	and	r2,r3,r2
   170a4:	1001703a 	wrctl	status,r2
  
  return context;
   170a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   170ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   170b0:	e0bffd17 	ldw	r2,-12(fp)
   170b4:	10800283 	ldbu	r2,10(r2)
   170b8:	10803fcc 	andi	r2,r2,255
   170bc:	10002526 	beq	r2,zero,17154 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   170c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   170c4:	e0bffe03 	ldbu	r2,-8(fp)
   170c8:	10800060 	cmpeqi	r2,r2,1
   170cc:	10000e26 	beq	r2,zero,17108 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   170d0:	00000806 	br	170f4 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   170d4:	01c00084 	movi	r7,2
   170d8:	01800084 	movi	r6,2
   170dc:	000b883a 	mov	r5,zero
   170e0:	e13ffd17 	ldw	r4,-12(fp)
   170e4:	00140640 	call	14064 <OS_EventTaskRdy>
                     nbr_tasks++;
   170e8:	e0bff803 	ldbu	r2,-32(fp)
   170ec:	10800044 	addi	r2,r2,1
   170f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   170f4:	e0bffd17 	ldw	r2,-12(fp)
   170f8:	10800283 	ldbu	r2,10(r2)
   170fc:	10803fcc 	andi	r2,r2,255
   17100:	103ff41e 	bne	r2,zero,170d4 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17104:	00000906 	br	1712c <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17108:	01c00084 	movi	r7,2
   1710c:	01800084 	movi	r6,2
   17110:	000b883a 	mov	r5,zero
   17114:	e13ffd17 	ldw	r4,-12(fp)
   17118:	00140640 	call	14064 <OS_EventTaskRdy>
                 nbr_tasks++;
   1711c:	e0bff803 	ldbu	r2,-32(fp)
   17120:	10800044 	addi	r2,r2,1
   17124:	e0bff805 	stb	r2,-32(fp)
                 break;
   17128:	0001883a 	nop
   1712c:	e0bff917 	ldw	r2,-28(fp)
   17130:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17134:	e0bffa17 	ldw	r2,-24(fp)
   17138:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1713c:	0014ab00 	call	14ab0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17140:	e0bfff17 	ldw	r2,-4(fp)
   17144:	00c00384 	movi	r3,14
   17148:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1714c:	e0bff803 	ldbu	r2,-32(fp)
   17150:	00000706 	br	17170 <OSMboxPendAbort+0x158>
   17154:	e0bff917 	ldw	r2,-28(fp)
   17158:	e0bffb15 	stw	r2,-20(fp)
   1715c:	e0bffb17 	ldw	r2,-20(fp)
   17160:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17164:	e0bfff17 	ldw	r2,-4(fp)
   17168:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   1716c:	0005883a 	mov	r2,zero
}
   17170:	e037883a 	mov	sp,fp
   17174:	dfc00117 	ldw	ra,4(sp)
   17178:	df000017 	ldw	fp,0(sp)
   1717c:	dec00204 	addi	sp,sp,8
   17180:	f800283a 	ret

00017184 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   17184:	defff704 	addi	sp,sp,-36
   17188:	dfc00815 	stw	ra,32(sp)
   1718c:	df000715 	stw	fp,28(sp)
   17190:	df000704 	addi	fp,sp,28
   17194:	e13ffe15 	stw	r4,-8(fp)
   17198:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1719c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   171a0:	e0bffe17 	ldw	r2,-8(fp)
   171a4:	1000021e 	bne	r2,zero,171b0 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   171a8:	00800104 	movi	r2,4
   171ac:	00003406 	br	17280 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   171b0:	e0bfff17 	ldw	r2,-4(fp)
   171b4:	1000021e 	bne	r2,zero,171c0 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   171b8:	008000c4 	movi	r2,3
   171bc:	00003006 	br	17280 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   171c0:	e0bffe17 	ldw	r2,-8(fp)
   171c4:	10800003 	ldbu	r2,0(r2)
   171c8:	10803fcc 	andi	r2,r2,255
   171cc:	10800060 	cmpeqi	r2,r2,1
   171d0:	1000021e 	bne	r2,zero,171dc <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   171d4:	00800044 	movi	r2,1
   171d8:	00002906 	br	17280 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171dc:	0005303a 	rdctl	r2,status
   171e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171e4:	e0fffd17 	ldw	r3,-12(fp)
   171e8:	00bfff84 	movi	r2,-2
   171ec:	1884703a 	and	r2,r3,r2
   171f0:	1001703a 	wrctl	status,r2
  
  return context;
   171f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   171f8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   171fc:	e0bffe17 	ldw	r2,-8(fp)
   17200:	10800283 	ldbu	r2,10(r2)
   17204:	10803fcc 	andi	r2,r2,255
   17208:	10000c26 	beq	r2,zero,1723c <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1720c:	000f883a 	mov	r7,zero
   17210:	01800084 	movi	r6,2
   17214:	e17fff17 	ldw	r5,-4(fp)
   17218:	e13ffe17 	ldw	r4,-8(fp)
   1721c:	00140640 	call	14064 <OS_EventTaskRdy>
   17220:	e0bff917 	ldw	r2,-28(fp)
   17224:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17228:	e0bffa17 	ldw	r2,-24(fp)
   1722c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17230:	0014ab00 	call	14ab0 <OS_Sched>
        return (OS_ERR_NONE);
   17234:	0005883a 	mov	r2,zero
   17238:	00001106 	br	17280 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   1723c:	e0bffe17 	ldw	r2,-8(fp)
   17240:	10800117 	ldw	r2,4(r2)
   17244:	10000626 	beq	r2,zero,17260 <OSMboxPost+0xdc>
   17248:	e0bff917 	ldw	r2,-28(fp)
   1724c:	e0bffb15 	stw	r2,-20(fp)
   17250:	e0bffb17 	ldw	r2,-20(fp)
   17254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17258:	00800504 	movi	r2,20
   1725c:	00000806 	br	17280 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17260:	e0bffe17 	ldw	r2,-8(fp)
   17264:	e0ffff17 	ldw	r3,-4(fp)
   17268:	10c00115 	stw	r3,4(r2)
   1726c:	e0bff917 	ldw	r2,-28(fp)
   17270:	e0bffc15 	stw	r2,-16(fp)
   17274:	e0bffc17 	ldw	r2,-16(fp)
   17278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1727c:	0005883a 	mov	r2,zero
}
   17280:	e037883a 	mov	sp,fp
   17284:	dfc00117 	ldw	ra,4(sp)
   17288:	df000017 	ldw	fp,0(sp)
   1728c:	dec00204 	addi	sp,sp,8
   17290:	f800283a 	ret

00017294 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17294:	defff604 	addi	sp,sp,-40
   17298:	dfc00915 	stw	ra,36(sp)
   1729c:	df000815 	stw	fp,32(sp)
   172a0:	df000804 	addi	fp,sp,32
   172a4:	e13ffd15 	stw	r4,-12(fp)
   172a8:	e17ffe15 	stw	r5,-8(fp)
   172ac:	3005883a 	mov	r2,r6
   172b0:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   172b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   172b8:	e0bffd17 	ldw	r2,-12(fp)
   172bc:	1000021e 	bne	r2,zero,172c8 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   172c0:	00800104 	movi	r2,4
   172c4:	00004506 	br	173dc <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   172c8:	e0bffe17 	ldw	r2,-8(fp)
   172cc:	1000021e 	bne	r2,zero,172d8 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   172d0:	008000c4 	movi	r2,3
   172d4:	00004106 	br	173dc <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   172d8:	e0bffd17 	ldw	r2,-12(fp)
   172dc:	10800003 	ldbu	r2,0(r2)
   172e0:	10803fcc 	andi	r2,r2,255
   172e4:	10800060 	cmpeqi	r2,r2,1
   172e8:	1000021e 	bne	r2,zero,172f4 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   172ec:	00800044 	movi	r2,1
   172f0:	00003a06 	br	173dc <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172f4:	0005303a 	rdctl	r2,status
   172f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172fc:	e0fffc17 	ldw	r3,-16(fp)
   17300:	00bfff84 	movi	r2,-2
   17304:	1884703a 	and	r2,r3,r2
   17308:	1001703a 	wrctl	status,r2
  
  return context;
   1730c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17310:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17314:	e0bffd17 	ldw	r2,-12(fp)
   17318:	10800283 	ldbu	r2,10(r2)
   1731c:	10803fcc 	andi	r2,r2,255
   17320:	10001d26 	beq	r2,zero,17398 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17324:	e0bfff03 	ldbu	r2,-4(fp)
   17328:	1080004c 	andi	r2,r2,1
   1732c:	10000b26 	beq	r2,zero,1735c <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17330:	00000506 	br	17348 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17334:	000f883a 	mov	r7,zero
   17338:	01800084 	movi	r6,2
   1733c:	e17ffe17 	ldw	r5,-8(fp)
   17340:	e13ffd17 	ldw	r4,-12(fp)
   17344:	00140640 	call	14064 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17348:	e0bffd17 	ldw	r2,-12(fp)
   1734c:	10800283 	ldbu	r2,10(r2)
   17350:	10803fcc 	andi	r2,r2,255
   17354:	103ff71e 	bne	r2,zero,17334 <OSMboxPostOpt+0xa0>
   17358:	00000506 	br	17370 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1735c:	000f883a 	mov	r7,zero
   17360:	01800084 	movi	r6,2
   17364:	e17ffe17 	ldw	r5,-8(fp)
   17368:	e13ffd17 	ldw	r4,-12(fp)
   1736c:	00140640 	call	14064 <OS_EventTaskRdy>
   17370:	e0bff817 	ldw	r2,-32(fp)
   17374:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17378:	e0bff917 	ldw	r2,-28(fp)
   1737c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17380:	e0bfff03 	ldbu	r2,-4(fp)
   17384:	1080010c 	andi	r2,r2,4
   17388:	1000011e 	bne	r2,zero,17390 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   1738c:	0014ab00 	call	14ab0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   17390:	0005883a 	mov	r2,zero
   17394:	00001106 	br	173dc <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17398:	e0bffd17 	ldw	r2,-12(fp)
   1739c:	10800117 	ldw	r2,4(r2)
   173a0:	10000626 	beq	r2,zero,173bc <OSMboxPostOpt+0x128>
   173a4:	e0bff817 	ldw	r2,-32(fp)
   173a8:	e0bffa15 	stw	r2,-24(fp)
   173ac:	e0bffa17 	ldw	r2,-24(fp)
   173b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   173b4:	00800504 	movi	r2,20
   173b8:	00000806 	br	173dc <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   173bc:	e0bffd17 	ldw	r2,-12(fp)
   173c0:	e0fffe17 	ldw	r3,-8(fp)
   173c4:	10c00115 	stw	r3,4(r2)
   173c8:	e0bff817 	ldw	r2,-32(fp)
   173cc:	e0bffb15 	stw	r2,-20(fp)
   173d0:	e0bffb17 	ldw	r2,-20(fp)
   173d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   173d8:	0005883a 	mov	r2,zero
}
   173dc:	e037883a 	mov	sp,fp
   173e0:	dfc00117 	ldw	ra,4(sp)
   173e4:	df000017 	ldw	fp,0(sp)
   173e8:	dec00204 	addi	sp,sp,8
   173ec:	f800283a 	ret

000173f0 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   173f0:	defff704 	addi	sp,sp,-36
   173f4:	df000815 	stw	fp,32(sp)
   173f8:	df000804 	addi	fp,sp,32
   173fc:	e13ffe15 	stw	r4,-8(fp)
   17400:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17404:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17408:	e0bffe17 	ldw	r2,-8(fp)
   1740c:	1000021e 	bne	r2,zero,17418 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17410:	00800104 	movi	r2,4
   17414:	00003606 	br	174f0 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   17418:	e0bfff17 	ldw	r2,-4(fp)
   1741c:	1000021e 	bne	r2,zero,17428 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17420:	00800244 	movi	r2,9
   17424:	00003206 	br	174f0 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17428:	e0bffe17 	ldw	r2,-8(fp)
   1742c:	10800003 	ldbu	r2,0(r2)
   17430:	10803fcc 	andi	r2,r2,255
   17434:	10800060 	cmpeqi	r2,r2,1
   17438:	1000021e 	bne	r2,zero,17444 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1743c:	00800044 	movi	r2,1
   17440:	00002b06 	br	174f0 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17444:	0005303a 	rdctl	r2,status
   17448:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1744c:	e0fffd17 	ldw	r3,-12(fp)
   17450:	00bfff84 	movi	r2,-2
   17454:	1884703a 	and	r2,r3,r2
   17458:	1001703a 	wrctl	status,r2
  
  return context;
   1745c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17460:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   17464:	e0bffe17 	ldw	r2,-8(fp)
   17468:	10c00283 	ldbu	r3,10(r2)
   1746c:	e0bfff17 	ldw	r2,-4(fp)
   17470:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   17474:	e0bffe17 	ldw	r2,-8(fp)
   17478:	108002c4 	addi	r2,r2,11
   1747c:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   17480:	e0bfff17 	ldw	r2,-4(fp)
   17484:	10800104 	addi	r2,r2,4
   17488:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1748c:	e03ff805 	stb	zero,-32(fp)
   17490:	00000b06 	br	174c0 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   17494:	e0bffa17 	ldw	r2,-24(fp)
   17498:	10c00044 	addi	r3,r2,1
   1749c:	e0fffa15 	stw	r3,-24(fp)
   174a0:	e0fff917 	ldw	r3,-28(fp)
   174a4:	19000044 	addi	r4,r3,1
   174a8:	e13ff915 	stw	r4,-28(fp)
   174ac:	18c00003 	ldbu	r3,0(r3)
   174b0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   174b4:	e0bff803 	ldbu	r2,-32(fp)
   174b8:	10800044 	addi	r2,r2,1
   174bc:	e0bff805 	stb	r2,-32(fp)
   174c0:	e0bff803 	ldbu	r2,-32(fp)
   174c4:	108000f0 	cmpltui	r2,r2,3
   174c8:	103ff21e 	bne	r2,zero,17494 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   174cc:	e0bffe17 	ldw	r2,-8(fp)
   174d0:	10c00117 	ldw	r3,4(r2)
   174d4:	e0bfff17 	ldw	r2,-4(fp)
   174d8:	10c00015 	stw	r3,0(r2)
   174dc:	e0bffb17 	ldw	r2,-20(fp)
   174e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174e4:	e0bffc17 	ldw	r2,-16(fp)
   174e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   174ec:	0005883a 	mov	r2,zero
}
   174f0:	e037883a 	mov	sp,fp
   174f4:	df000017 	ldw	fp,0(sp)
   174f8:	dec00104 	addi	sp,sp,4
   174fc:	f800283a 	ret

00017500 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   17500:	defff404 	addi	sp,sp,-48
   17504:	df000b15 	stw	fp,44(sp)
   17508:	df000b04 	addi	fp,sp,44
   1750c:	e13ffc15 	stw	r4,-16(fp)
   17510:	e17ffd15 	stw	r5,-12(fp)
   17514:	e1bffe15 	stw	r6,-8(fp)
   17518:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1751c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17520:	e0bfff17 	ldw	r2,-4(fp)
   17524:	1000021e 	bne	r2,zero,17530 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   17528:	0005883a 	mov	r2,zero
   1752c:	00006506 	br	176c4 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17530:	e0bffc17 	ldw	r2,-16(fp)
   17534:	1000051e 	bne	r2,zero,1754c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17538:	e0bfff17 	ldw	r2,-4(fp)
   1753c:	00c01884 	movi	r3,98
   17540:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17544:	0005883a 	mov	r2,zero
   17548:	00005e06 	br	176c4 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1754c:	e0bffc17 	ldw	r2,-16(fp)
   17550:	108000cc 	andi	r2,r2,3
   17554:	10000526 	beq	r2,zero,1756c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17558:	e0bfff17 	ldw	r2,-4(fp)
   1755c:	00c01884 	movi	r3,98
   17560:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17564:	0005883a 	mov	r2,zero
   17568:	00005606 	br	176c4 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1756c:	e0bffd17 	ldw	r2,-12(fp)
   17570:	108000a8 	cmpgeui	r2,r2,2
   17574:	1000051e 	bne	r2,zero,1758c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	00c016c4 	movi	r3,91
   17580:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17584:	0005883a 	mov	r2,zero
   17588:	00004e06 	br	176c4 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1758c:	e0bffe17 	ldw	r2,-8(fp)
   17590:	10800128 	cmpgeui	r2,r2,4
   17594:	1000051e 	bne	r2,zero,175ac <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   17598:	e0bfff17 	ldw	r2,-4(fp)
   1759c:	00c01704 	movi	r3,92
   175a0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   175a4:	0005883a 	mov	r2,zero
   175a8:	00004606 	br	176c4 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175ac:	0005303a 	rdctl	r2,status
   175b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175b4:	e0fffb17 	ldw	r3,-20(fp)
   175b8:	00bfff84 	movi	r2,-2
   175bc:	1884703a 	and	r2,r3,r2
   175c0:	1001703a 	wrctl	status,r2
  
  return context;
   175c4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   175c8:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   175cc:	d0a8d597 	ldw	r2,-23722(gp)
   175d0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   175d4:	d0a8d597 	ldw	r2,-23722(gp)
   175d8:	10000326 	beq	r2,zero,175e8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   175dc:	d0a8d597 	ldw	r2,-23722(gp)
   175e0:	10800117 	ldw	r2,4(r2)
   175e4:	d0a8d595 	stw	r2,-23722(gp)
   175e8:	e0bff817 	ldw	r2,-32(fp)
   175ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175f0:	e0bff917 	ldw	r2,-28(fp)
   175f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   175f8:	e0bffa17 	ldw	r2,-24(fp)
   175fc:	1000051e 	bne	r2,zero,17614 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   17600:	e0bfff17 	ldw	r2,-4(fp)
   17604:	00c01684 	movi	r3,90
   17608:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1760c:	0005883a 	mov	r2,zero
   17610:	00002c06 	br	176c4 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   17614:	e0bffc17 	ldw	r2,-16(fp)
   17618:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1761c:	e0fffc17 	ldw	r3,-16(fp)
   17620:	e0bffe17 	ldw	r2,-8(fp)
   17624:	1885883a 	add	r2,r3,r2
   17628:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1762c:	e03ff715 	stw	zero,-36(fp)
   17630:	00000c06 	br	17664 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   17634:	e0bff617 	ldw	r2,-40(fp)
   17638:	e0fff517 	ldw	r3,-44(fp)
   1763c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   17640:	e0bff517 	ldw	r2,-44(fp)
   17644:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   17648:	e0fff517 	ldw	r3,-44(fp)
   1764c:	e0bffe17 	ldw	r2,-8(fp)
   17650:	1885883a 	add	r2,r3,r2
   17654:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   17658:	e0bff717 	ldw	r2,-36(fp)
   1765c:	10800044 	addi	r2,r2,1
   17660:	e0bff715 	stw	r2,-36(fp)
   17664:	e0bffd17 	ldw	r2,-12(fp)
   17668:	10bfffc4 	addi	r2,r2,-1
   1766c:	e0fff717 	ldw	r3,-36(fp)
   17670:	18bff036 	bltu	r3,r2,17634 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   17674:	e0bff617 	ldw	r2,-40(fp)
   17678:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1767c:	e0bffa17 	ldw	r2,-24(fp)
   17680:	e0fffc17 	ldw	r3,-16(fp)
   17684:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   17688:	e0bffa17 	ldw	r2,-24(fp)
   1768c:	e0fffc17 	ldw	r3,-16(fp)
   17690:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   17694:	e0bffa17 	ldw	r2,-24(fp)
   17698:	e0fffd17 	ldw	r3,-12(fp)
   1769c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   176a0:	e0bffa17 	ldw	r2,-24(fp)
   176a4:	e0fffd17 	ldw	r3,-12(fp)
   176a8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   176ac:	e0bffa17 	ldw	r2,-24(fp)
   176b0:	e0fffe17 	ldw	r3,-8(fp)
   176b4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   176b8:	e0bfff17 	ldw	r2,-4(fp)
   176bc:	10000005 	stb	zero,0(r2)
    return (pmem);
   176c0:	e0bffa17 	ldw	r2,-24(fp)
}
   176c4:	e037883a 	mov	sp,fp
   176c8:	df000017 	ldw	fp,0(sp)
   176cc:	dec00104 	addi	sp,sp,4
   176d0:	f800283a 	ret

000176d4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   176d4:	defff804 	addi	sp,sp,-32
   176d8:	df000715 	stw	fp,28(sp)
   176dc:	df000704 	addi	fp,sp,28
   176e0:	e13ffe15 	stw	r4,-8(fp)
   176e4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   176e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   176ec:	e0bfff17 	ldw	r2,-4(fp)
   176f0:	1000021e 	bne	r2,zero,176fc <OSMemGet+0x28>
        return ((void *)0);
   176f4:	0005883a 	mov	r2,zero
   176f8:	00002e06 	br	177b4 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   176fc:	e0bffe17 	ldw	r2,-8(fp)
   17700:	1000051e 	bne	r2,zero,17718 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17704:	e0bfff17 	ldw	r2,-4(fp)
   17708:	00c01804 	movi	r3,96
   1770c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17710:	0005883a 	mov	r2,zero
   17714:	00002706 	br	177b4 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17718:	0005303a 	rdctl	r2,status
   1771c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17720:	e0fffd17 	ldw	r3,-12(fp)
   17724:	00bfff84 	movi	r2,-2
   17728:	1884703a 	and	r2,r3,r2
   1772c:	1001703a 	wrctl	status,r2
  
  return context;
   17730:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17734:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   17738:	e0bffe17 	ldw	r2,-8(fp)
   1773c:	10800417 	ldw	r2,16(r2)
   17740:	10001426 	beq	r2,zero,17794 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   17744:	e0bffe17 	ldw	r2,-8(fp)
   17748:	10800117 	ldw	r2,4(r2)
   1774c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   17750:	e0bffb17 	ldw	r2,-20(fp)
   17754:	10c00017 	ldw	r3,0(r2)
   17758:	e0bffe17 	ldw	r2,-8(fp)
   1775c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   17760:	e0bffe17 	ldw	r2,-8(fp)
   17764:	10800417 	ldw	r2,16(r2)
   17768:	10ffffc4 	addi	r3,r2,-1
   1776c:	e0bffe17 	ldw	r2,-8(fp)
   17770:	10c00415 	stw	r3,16(r2)
   17774:	e0bff917 	ldw	r2,-28(fp)
   17778:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1777c:	e0bffa17 	ldw	r2,-24(fp)
   17780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   17784:	e0bfff17 	ldw	r2,-4(fp)
   17788:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1778c:	e0bffb17 	ldw	r2,-20(fp)
   17790:	00000806 	br	177b4 <OSMemGet+0xe0>
   17794:	e0bff917 	ldw	r2,-28(fp)
   17798:	e0bffc15 	stw	r2,-16(fp)
   1779c:	e0bffc17 	ldw	r2,-16(fp)
   177a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   177a4:	e0bfff17 	ldw	r2,-4(fp)
   177a8:	00c01744 	movi	r3,93
   177ac:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   177b0:	0005883a 	mov	r2,zero
}
   177b4:	e037883a 	mov	sp,fp
   177b8:	df000017 	ldw	fp,0(sp)
   177bc:	dec00104 	addi	sp,sp,4
   177c0:	f800283a 	ret

000177c4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   177c4:	defff704 	addi	sp,sp,-36
   177c8:	dfc00815 	stw	ra,32(sp)
   177cc:	df000715 	stw	fp,28(sp)
   177d0:	df000704 	addi	fp,sp,28
   177d4:	e13ffd15 	stw	r4,-12(fp)
   177d8:	e17ffe15 	stw	r5,-8(fp)
   177dc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   177e4:	e0bfff17 	ldw	r2,-4(fp)
   177e8:	1000021e 	bne	r2,zero,177f4 <OSMemNameGet+0x30>
        return (0);
   177ec:	0005883a 	mov	r2,zero
   177f0:	00002b06 	br	178a0 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   177f4:	e0bffd17 	ldw	r2,-12(fp)
   177f8:	1000051e 	bne	r2,zero,17810 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   177fc:	e0bfff17 	ldw	r2,-4(fp)
   17800:	00c01804 	movi	r3,96
   17804:	10c00005 	stb	r3,0(r2)
        return (0);
   17808:	0005883a 	mov	r2,zero
   1780c:	00002406 	br	178a0 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17810:	e0bffe17 	ldw	r2,-8(fp)
   17814:	1000051e 	bne	r2,zero,1782c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17818:	e0bfff17 	ldw	r2,-4(fp)
   1781c:	00c00304 	movi	r3,12
   17820:	10c00005 	stb	r3,0(r2)
        return (0);
   17824:	0005883a 	mov	r2,zero
   17828:	00001d06 	br	178a0 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1782c:	d0a8da83 	ldbu	r2,-23702(gp)
   17830:	10803fcc 	andi	r2,r2,255
   17834:	10000526 	beq	r2,zero,1784c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   17838:	e0bfff17 	ldw	r2,-4(fp)
   1783c:	00c00444 	movi	r3,17
   17840:	10c00005 	stb	r3,0(r2)
        return (0);
   17844:	0005883a 	mov	r2,zero
   17848:	00001506 	br	178a0 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1784c:	0005303a 	rdctl	r2,status
   17850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17854:	e0fffb17 	ldw	r3,-20(fp)
   17858:	00bfff84 	movi	r2,-2
   1785c:	1884703a 	and	r2,r3,r2
   17860:	1001703a 	wrctl	status,r2
  
  return context;
   17864:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17868:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1786c:	e0bffd17 	ldw	r2,-12(fp)
   17870:	10800504 	addi	r2,r2,20
   17874:	100b883a 	mov	r5,r2
   17878:	e13ffe17 	ldw	r4,-8(fp)
   1787c:	0014bf40 	call	14bf4 <OS_StrCopy>
   17880:	e0bffa05 	stb	r2,-24(fp)
   17884:	e0bff917 	ldw	r2,-28(fp)
   17888:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1788c:	e0bffc17 	ldw	r2,-16(fp)
   17890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17894:	e0bfff17 	ldw	r2,-4(fp)
   17898:	10000005 	stb	zero,0(r2)
    return (len);
   1789c:	e0bffa03 	ldbu	r2,-24(fp)
}
   178a0:	e037883a 	mov	sp,fp
   178a4:	dfc00117 	ldw	ra,4(sp)
   178a8:	df000017 	ldw	fp,0(sp)
   178ac:	dec00204 	addi	sp,sp,8
   178b0:	f800283a 	ret

000178b4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   178b4:	defff604 	addi	sp,sp,-40
   178b8:	dfc00915 	stw	ra,36(sp)
   178bc:	df000815 	stw	fp,32(sp)
   178c0:	df000804 	addi	fp,sp,32
   178c4:	e13ffd15 	stw	r4,-12(fp)
   178c8:	e17ffe15 	stw	r5,-8(fp)
   178cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   178d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   178d4:	e0bfff17 	ldw	r2,-4(fp)
   178d8:	10003526 	beq	r2,zero,179b0 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   178dc:	e0bffd17 	ldw	r2,-12(fp)
   178e0:	1000041e 	bne	r2,zero,178f4 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   178e4:	e0bfff17 	ldw	r2,-4(fp)
   178e8:	00c01804 	movi	r3,96
   178ec:	10c00005 	stb	r3,0(r2)
        return;
   178f0:	00003006 	br	179b4 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   178f4:	e0bffe17 	ldw	r2,-8(fp)
   178f8:	1000041e 	bne	r2,zero,1790c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   178fc:	e0bfff17 	ldw	r2,-4(fp)
   17900:	00c00304 	movi	r3,12
   17904:	10c00005 	stb	r3,0(r2)
        return;
   17908:	00002a06 	br	179b4 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1790c:	d0a8da83 	ldbu	r2,-23702(gp)
   17910:	10803fcc 	andi	r2,r2,255
   17914:	10000426 	beq	r2,zero,17928 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   17918:	e0bfff17 	ldw	r2,-4(fp)
   1791c:	00c00484 	movi	r3,18
   17920:	10c00005 	stb	r3,0(r2)
        return;
   17924:	00002306 	br	179b4 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17928:	0005303a 	rdctl	r2,status
   1792c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17930:	e0fffc17 	ldw	r3,-16(fp)
   17934:	00bfff84 	movi	r2,-2
   17938:	1884703a 	and	r2,r3,r2
   1793c:	1001703a 	wrctl	status,r2
  
  return context;
   17940:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17944:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17948:	e13ffe17 	ldw	r4,-8(fp)
   1794c:	0014c680 	call	14c68 <OS_StrLen>
   17950:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17954:	e0bffa03 	ldbu	r2,-24(fp)
   17958:	10800830 	cmpltui	r2,r2,32
   1795c:	1000081e 	bne	r2,zero,17980 <OSMemNameSet+0xcc>
   17960:	e0bff817 	ldw	r2,-32(fp)
   17964:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17968:	e0bff917 	ldw	r2,-28(fp)
   1796c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17970:	e0bfff17 	ldw	r2,-4(fp)
   17974:	00c018c4 	movi	r3,99
   17978:	10c00005 	stb	r3,0(r2)
        return;
   1797c:	00000d06 	br	179b4 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17980:	e0bffd17 	ldw	r2,-12(fp)
   17984:	10800504 	addi	r2,r2,20
   17988:	e17ffe17 	ldw	r5,-8(fp)
   1798c:	1009883a 	mov	r4,r2
   17990:	0014bf40 	call	14bf4 <OS_StrCopy>
   17994:	e0bff817 	ldw	r2,-32(fp)
   17998:	e0bffb15 	stw	r2,-20(fp)
   1799c:	e0bffb17 	ldw	r2,-20(fp)
   179a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   179a4:	e0bfff17 	ldw	r2,-4(fp)
   179a8:	10000005 	stb	zero,0(r2)
   179ac:	00000106 	br	179b4 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   179b0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   179b4:	e037883a 	mov	sp,fp
   179b8:	dfc00117 	ldw	ra,4(sp)
   179bc:	df000017 	ldw	fp,0(sp)
   179c0:	dec00204 	addi	sp,sp,8
   179c4:	f800283a 	ret

000179c8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   179c8:	defff904 	addi	sp,sp,-28
   179cc:	df000615 	stw	fp,24(sp)
   179d0:	df000604 	addi	fp,sp,24
   179d4:	e13ffe15 	stw	r4,-8(fp)
   179d8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   179dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   179e0:	e0bffe17 	ldw	r2,-8(fp)
   179e4:	1000021e 	bne	r2,zero,179f0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   179e8:	00801804 	movi	r2,96
   179ec:	00002806 	br	17a90 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   179f0:	e0bfff17 	ldw	r2,-4(fp)
   179f4:	1000021e 	bne	r2,zero,17a00 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   179f8:	008017c4 	movi	r2,95
   179fc:	00002406 	br	17a90 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a00:	0005303a 	rdctl	r2,status
   17a04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a08:	e0fffd17 	ldw	r3,-12(fp)
   17a0c:	00bfff84 	movi	r2,-2
   17a10:	1884703a 	and	r2,r3,r2
   17a14:	1001703a 	wrctl	status,r2
  
  return context;
   17a18:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17a1c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   17a20:	e0bffe17 	ldw	r2,-8(fp)
   17a24:	10c00417 	ldw	r3,16(r2)
   17a28:	e0bffe17 	ldw	r2,-8(fp)
   17a2c:	10800317 	ldw	r2,12(r2)
   17a30:	18800636 	bltu	r3,r2,17a4c <OSMemPut+0x84>
   17a34:	e0bffa17 	ldw	r2,-24(fp)
   17a38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a3c:	e0bffb17 	ldw	r2,-20(fp)
   17a40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   17a44:	00801784 	movi	r2,94
   17a48:	00001106 	br	17a90 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17a4c:	e0bffe17 	ldw	r2,-8(fp)
   17a50:	10c00117 	ldw	r3,4(r2)
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17a5c:	e0bffe17 	ldw	r2,-8(fp)
   17a60:	e0ffff17 	ldw	r3,-4(fp)
   17a64:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   17a68:	e0bffe17 	ldw	r2,-8(fp)
   17a6c:	10800417 	ldw	r2,16(r2)
   17a70:	10c00044 	addi	r3,r2,1
   17a74:	e0bffe17 	ldw	r2,-8(fp)
   17a78:	10c00415 	stw	r3,16(r2)
   17a7c:	e0bffa17 	ldw	r2,-24(fp)
   17a80:	e0bffc15 	stw	r2,-16(fp)
   17a84:	e0bffc17 	ldw	r2,-16(fp)
   17a88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17a8c:	0005883a 	mov	r2,zero
}
   17a90:	e037883a 	mov	sp,fp
   17a94:	df000017 	ldw	fp,0(sp)
   17a98:	dec00104 	addi	sp,sp,4
   17a9c:	f800283a 	ret

00017aa0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17aa0:	defffa04 	addi	sp,sp,-24
   17aa4:	df000515 	stw	fp,20(sp)
   17aa8:	df000504 	addi	fp,sp,20
   17aac:	e13ffe15 	stw	r4,-8(fp)
   17ab0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17ab4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17ab8:	e0bffe17 	ldw	r2,-8(fp)
   17abc:	1000021e 	bne	r2,zero,17ac8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17ac0:	00801804 	movi	r2,96
   17ac4:	00002c06 	br	17b78 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   17ac8:	e0bfff17 	ldw	r2,-4(fp)
   17acc:	1000021e 	bne	r2,zero,17ad8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   17ad0:	00801844 	movi	r2,97
   17ad4:	00002806 	br	17b78 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ad8:	0005303a 	rdctl	r2,status
   17adc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ae0:	e0fffc17 	ldw	r3,-16(fp)
   17ae4:	00bfff84 	movi	r2,-2
   17ae8:	1884703a 	and	r2,r3,r2
   17aec:	1001703a 	wrctl	status,r2
  
  return context;
   17af0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17af4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   17af8:	e0bffe17 	ldw	r2,-8(fp)
   17afc:	10c00017 	ldw	r3,0(r2)
   17b00:	e0bfff17 	ldw	r2,-4(fp)
   17b04:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   17b08:	e0bffe17 	ldw	r2,-8(fp)
   17b0c:	10c00117 	ldw	r3,4(r2)
   17b10:	e0bfff17 	ldw	r2,-4(fp)
   17b14:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   17b18:	e0bffe17 	ldw	r2,-8(fp)
   17b1c:	10c00217 	ldw	r3,8(r2)
   17b20:	e0bfff17 	ldw	r2,-4(fp)
   17b24:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   17b28:	e0bffe17 	ldw	r2,-8(fp)
   17b2c:	10c00317 	ldw	r3,12(r2)
   17b30:	e0bfff17 	ldw	r2,-4(fp)
   17b34:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   17b38:	e0bffe17 	ldw	r2,-8(fp)
   17b3c:	10c00417 	ldw	r3,16(r2)
   17b40:	e0bfff17 	ldw	r2,-4(fp)
   17b44:	10c00415 	stw	r3,16(r2)
   17b48:	e0bffb17 	ldw	r2,-20(fp)
   17b4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b50:	e0bffd17 	ldw	r2,-12(fp)
   17b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   17b58:	e0bfff17 	ldw	r2,-4(fp)
   17b5c:	10c00317 	ldw	r3,12(r2)
   17b60:	e0bfff17 	ldw	r2,-4(fp)
   17b64:	10800417 	ldw	r2,16(r2)
   17b68:	1887c83a 	sub	r3,r3,r2
   17b6c:	e0bfff17 	ldw	r2,-4(fp)
   17b70:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17b74:	0005883a 	mov	r2,zero
}
   17b78:	e037883a 	mov	sp,fp
   17b7c:	df000017 	ldw	fp,0(sp)
   17b80:	dec00104 	addi	sp,sp,4
   17b84:	f800283a 	ret

00017b88 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   17b88:	defffc04 	addi	sp,sp,-16
   17b8c:	dfc00315 	stw	ra,12(sp)
   17b90:	df000215 	stw	fp,8(sp)
   17b94:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   17b98:	01430c04 	movi	r5,3120
   17b9c:	01000274 	movhi	r4,9
   17ba0:	21141f04 	addi	r4,r4,20604
   17ba4:	00149f40 	call	149f4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   17ba8:	00800274 	movhi	r2,9
   17bac:	10941f04 	addi	r2,r2,20604
   17bb0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17bb4:	e03fff0d 	sth	zero,-4(fp)
   17bb8:	00001306 	br	17c08 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17bbc:	e0bfff0b 	ldhu	r2,-4(fp)
   17bc0:	10800044 	addi	r2,r2,1
   17bc4:	10c00d24 	muli	r3,r2,52
   17bc8:	00800274 	movhi	r2,9
   17bcc:	10941f04 	addi	r2,r2,20604
   17bd0:	1887883a 	add	r3,r3,r2
   17bd4:	e0bffe17 	ldw	r2,-8(fp)
   17bd8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17bdc:	e0bffe17 	ldw	r2,-8(fp)
   17be0:	00c00fc4 	movi	r3,63
   17be4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   17be8:	e0bffe17 	ldw	r2,-8(fp)
   17bec:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   17bf0:	e0bffe17 	ldw	r2,-8(fp)
   17bf4:	10800d04 	addi	r2,r2,52
   17bf8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17bfc:	e0bfff0b 	ldhu	r2,-4(fp)
   17c00:	10800044 	addi	r2,r2,1
   17c04:	e0bfff0d 	sth	r2,-4(fp)
   17c08:	e0bfff0b 	ldhu	r2,-4(fp)
   17c0c:	10800ef0 	cmpltui	r2,r2,59
   17c10:	103fea1e 	bne	r2,zero,17bbc <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   17c14:	e0bffe17 	ldw	r2,-8(fp)
   17c18:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   17c1c:	e0bffe17 	ldw	r2,-8(fp)
   17c20:	00c00fc4 	movi	r3,63
   17c24:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   17c28:	e0bffe17 	ldw	r2,-8(fp)
   17c2c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17c30:	00800274 	movhi	r2,9
   17c34:	10941f04 	addi	r2,r2,20604
   17c38:	d0a8d595 	stw	r2,-23722(gp)
#endif
}
   17c3c:	0001883a 	nop
   17c40:	e037883a 	mov	sp,fp
   17c44:	dfc00117 	ldw	ra,4(sp)
   17c48:	df000017 	ldw	fp,0(sp)
   17c4c:	dec00204 	addi	sp,sp,8
   17c50:	f800283a 	ret

00017c54 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17c54:	defff804 	addi	sp,sp,-32
   17c58:	df000715 	stw	fp,28(sp)
   17c5c:	df000704 	addi	fp,sp,28
   17c60:	e13ffe15 	stw	r4,-8(fp)
   17c64:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17c68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17c6c:	e0bfff17 	ldw	r2,-4(fp)
   17c70:	1000021e 	bne	r2,zero,17c7c <OSQAccept+0x28>
        return ((void *)0);
   17c74:	0005883a 	mov	r2,zero
   17c78:	00004206 	br	17d84 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17c7c:	e0bffe17 	ldw	r2,-8(fp)
   17c80:	1000051e 	bne	r2,zero,17c98 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17c84:	e0bfff17 	ldw	r2,-4(fp)
   17c88:	00c00104 	movi	r3,4
   17c8c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17c90:	0005883a 	mov	r2,zero
   17c94:	00003b06 	br	17d84 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17c98:	e0bffe17 	ldw	r2,-8(fp)
   17c9c:	10800003 	ldbu	r2,0(r2)
   17ca0:	10803fcc 	andi	r2,r2,255
   17ca4:	108000a0 	cmpeqi	r2,r2,2
   17ca8:	1000051e 	bne	r2,zero,17cc0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17cac:	e0bfff17 	ldw	r2,-4(fp)
   17cb0:	00c00044 	movi	r3,1
   17cb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17cb8:	0005883a 	mov	r2,zero
   17cbc:	00003106 	br	17d84 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17cc0:	0005303a 	rdctl	r2,status
   17cc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cc8:	e0fffd17 	ldw	r3,-12(fp)
   17ccc:	00bfff84 	movi	r2,-2
   17cd0:	1884703a 	and	r2,r3,r2
   17cd4:	1001703a 	wrctl	status,r2
  
  return context;
   17cd8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17cdc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17ce0:	e0bffe17 	ldw	r2,-8(fp)
   17ce4:	10800117 	ldw	r2,4(r2)
   17ce8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17cec:	e0bffc17 	ldw	r2,-16(fp)
   17cf0:	1080058b 	ldhu	r2,22(r2)
   17cf4:	10bfffcc 	andi	r2,r2,65535
   17cf8:	10001926 	beq	r2,zero,17d60 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17cfc:	e0bffc17 	ldw	r2,-16(fp)
   17d00:	10800417 	ldw	r2,16(r2)
   17d04:	11000104 	addi	r4,r2,4
   17d08:	e0fffc17 	ldw	r3,-16(fp)
   17d0c:	19000415 	stw	r4,16(r3)
   17d10:	10800017 	ldw	r2,0(r2)
   17d14:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17d18:	e0bffc17 	ldw	r2,-16(fp)
   17d1c:	1080058b 	ldhu	r2,22(r2)
   17d20:	10bfffc4 	addi	r2,r2,-1
   17d24:	1007883a 	mov	r3,r2
   17d28:	e0bffc17 	ldw	r2,-16(fp)
   17d2c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17d30:	e0bffc17 	ldw	r2,-16(fp)
   17d34:	10c00417 	ldw	r3,16(r2)
   17d38:	e0bffc17 	ldw	r2,-16(fp)
   17d3c:	10800217 	ldw	r2,8(r2)
   17d40:	1880041e 	bne	r3,r2,17d54 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   17d44:	e0bffc17 	ldw	r2,-16(fp)
   17d48:	10c00117 	ldw	r3,4(r2)
   17d4c:	e0bffc17 	ldw	r2,-16(fp)
   17d50:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   17d54:	e0bfff17 	ldw	r2,-4(fp)
   17d58:	10000005 	stb	zero,0(r2)
   17d5c:	00000406 	br	17d70 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   17d60:	e0bfff17 	ldw	r2,-4(fp)
   17d64:	00c007c4 	movi	r3,31
   17d68:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   17d6c:	e03ff915 	stw	zero,-28(fp)
   17d70:	e0bffa17 	ldw	r2,-24(fp)
   17d74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d78:	e0bffb17 	ldw	r2,-20(fp)
   17d7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   17d80:	e0bff917 	ldw	r2,-28(fp)
}
   17d84:	e037883a 	mov	sp,fp
   17d88:	df000017 	ldw	fp,0(sp)
   17d8c:	dec00104 	addi	sp,sp,4
   17d90:	f800283a 	ret

00017d94 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17d94:	defff404 	addi	sp,sp,-48
   17d98:	dfc00b15 	stw	ra,44(sp)
   17d9c:	df000a15 	stw	fp,40(sp)
   17da0:	df000a04 	addi	fp,sp,40
   17da4:	e13ffe15 	stw	r4,-8(fp)
   17da8:	2805883a 	mov	r2,r5
   17dac:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17db0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17db4:	d0a8da83 	ldbu	r2,-23702(gp)
   17db8:	10803fcc 	andi	r2,r2,255
   17dbc:	10000226 	beq	r2,zero,17dc8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17dc0:	0005883a 	mov	r2,zero
   17dc4:	00005906 	br	17f2c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dc8:	0005303a 	rdctl	r2,status
   17dcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17dd0:	e0fffd17 	ldw	r3,-12(fp)
   17dd4:	00bfff84 	movi	r2,-2
   17dd8:	1884703a 	and	r2,r3,r2
   17ddc:	1001703a 	wrctl	status,r2
  
  return context;
   17de0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17de4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   17de8:	d0a8d997 	ldw	r2,-23706(gp)
   17dec:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   17df0:	d0a8d997 	ldw	r2,-23706(gp)
   17df4:	10000326 	beq	r2,zero,17e04 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17df8:	d0a8d997 	ldw	r2,-23706(gp)
   17dfc:	10800117 	ldw	r2,4(r2)
   17e00:	d0a8d995 	stw	r2,-23706(gp)
   17e04:	e0bff717 	ldw	r2,-36(fp)
   17e08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e0c:	e0bff817 	ldw	r2,-32(fp)
   17e10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   17e14:	e0bff617 	ldw	r2,-40(fp)
   17e18:	10004326 	beq	r2,zero,17f28 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e1c:	0005303a 	rdctl	r2,status
   17e20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e24:	e0fff917 	ldw	r3,-28(fp)
   17e28:	00bfff84 	movi	r2,-2
   17e2c:	1884703a 	and	r2,r3,r2
   17e30:	1001703a 	wrctl	status,r2
  
  return context;
   17e34:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   17e38:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   17e3c:	d0a8d797 	ldw	r2,-23714(gp)
   17e40:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   17e44:	e0bffb17 	ldw	r2,-20(fp)
   17e48:	10002d26 	beq	r2,zero,17f00 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   17e4c:	d0a8d797 	ldw	r2,-23714(gp)
   17e50:	10800017 	ldw	r2,0(r2)
   17e54:	d0a8d795 	stw	r2,-23714(gp)
   17e58:	e0bff717 	ldw	r2,-36(fp)
   17e5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e60:	e0bffa17 	ldw	r2,-24(fp)
   17e64:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   17e68:	e0bffb17 	ldw	r2,-20(fp)
   17e6c:	e0fffe17 	ldw	r3,-8(fp)
   17e70:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   17e74:	e0bfff0b 	ldhu	r2,-4(fp)
   17e78:	1085883a 	add	r2,r2,r2
   17e7c:	1085883a 	add	r2,r2,r2
   17e80:	1007883a 	mov	r3,r2
   17e84:	e0bffe17 	ldw	r2,-8(fp)
   17e88:	10c7883a 	add	r3,r2,r3
   17e8c:	e0bffb17 	ldw	r2,-20(fp)
   17e90:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   17e94:	e0bffb17 	ldw	r2,-20(fp)
   17e98:	e0fffe17 	ldw	r3,-8(fp)
   17e9c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   17ea0:	e0bffb17 	ldw	r2,-20(fp)
   17ea4:	e0fffe17 	ldw	r3,-8(fp)
   17ea8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17eac:	e0bffb17 	ldw	r2,-20(fp)
   17eb0:	e0ffff0b 	ldhu	r3,-4(fp)
   17eb4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   17eb8:	e0bffb17 	ldw	r2,-20(fp)
   17ebc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   17ec0:	e0bff617 	ldw	r2,-40(fp)
   17ec4:	00c00084 	movi	r3,2
   17ec8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   17ecc:	e0bff617 	ldw	r2,-40(fp)
   17ed0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   17ed4:	e0bff617 	ldw	r2,-40(fp)
   17ed8:	e0fffb17 	ldw	r3,-20(fp)
   17edc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   17ee0:	e0bff617 	ldw	r2,-40(fp)
   17ee4:	00c00fc4 	movi	r3,63
   17ee8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   17eec:	e0bff617 	ldw	r2,-40(fp)
   17ef0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   17ef4:	e13ff617 	ldw	r4,-40(fp)
   17ef8:	00146140 	call	14614 <OS_EventWaitListInit>
   17efc:	00000a06 	br	17f28 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   17f00:	d0e8d997 	ldw	r3,-23706(gp)
   17f04:	e0bff617 	ldw	r2,-40(fp)
   17f08:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   17f0c:	e0bff617 	ldw	r2,-40(fp)
   17f10:	d0a8d995 	stw	r2,-23706(gp)
   17f14:	e0bff717 	ldw	r2,-36(fp)
   17f18:	e0bffc15 	stw	r2,-16(fp)
   17f1c:	e0bffc17 	ldw	r2,-16(fp)
   17f20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   17f24:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   17f28:	e0bff617 	ldw	r2,-40(fp)
}
   17f2c:	e037883a 	mov	sp,fp
   17f30:	dfc00117 	ldw	ra,4(sp)
   17f34:	df000017 	ldw	fp,0(sp)
   17f38:	dec00204 	addi	sp,sp,8
   17f3c:	f800283a 	ret

00017f40 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17f40:	defff204 	addi	sp,sp,-56
   17f44:	dfc00d15 	stw	ra,52(sp)
   17f48:	df000c15 	stw	fp,48(sp)
   17f4c:	df000c04 	addi	fp,sp,48
   17f50:	e13ffd15 	stw	r4,-12(fp)
   17f54:	2805883a 	mov	r2,r5
   17f58:	e1bfff15 	stw	r6,-4(fp)
   17f5c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17f60:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17f64:	e0bfff17 	ldw	r2,-4(fp)
   17f68:	1000021e 	bne	r2,zero,17f74 <OSQDel+0x34>
        return (pevent);
   17f6c:	e0bffd17 	ldw	r2,-12(fp)
   17f70:	00008e06 	br	181ac <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17f74:	e0bffd17 	ldw	r2,-12(fp)
   17f78:	1000051e 	bne	r2,zero,17f90 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17f7c:	e0bfff17 	ldw	r2,-4(fp)
   17f80:	00c00104 	movi	r3,4
   17f84:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17f88:	e0bffd17 	ldw	r2,-12(fp)
   17f8c:	00008706 	br	181ac <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17f90:	e0bffd17 	ldw	r2,-12(fp)
   17f94:	10800003 	ldbu	r2,0(r2)
   17f98:	10803fcc 	andi	r2,r2,255
   17f9c:	108000a0 	cmpeqi	r2,r2,2
   17fa0:	1000051e 	bne	r2,zero,17fb8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17fa4:	e0bfff17 	ldw	r2,-4(fp)
   17fa8:	00c00044 	movi	r3,1
   17fac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17fb0:	e0bffd17 	ldw	r2,-12(fp)
   17fb4:	00007d06 	br	181ac <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17fb8:	d0a8da83 	ldbu	r2,-23702(gp)
   17fbc:	10803fcc 	andi	r2,r2,255
   17fc0:	10000526 	beq	r2,zero,17fd8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17fc4:	e0bfff17 	ldw	r2,-4(fp)
   17fc8:	00c003c4 	movi	r3,15
   17fcc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17fd0:	e0bffd17 	ldw	r2,-12(fp)
   17fd4:	00007506 	br	181ac <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17fd8:	0005303a 	rdctl	r2,status
   17fdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17fe0:	e0fffc17 	ldw	r3,-16(fp)
   17fe4:	00bfff84 	movi	r2,-2
   17fe8:	1884703a 	and	r2,r3,r2
   17fec:	1001703a 	wrctl	status,r2
  
  return context;
   17ff0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17ff4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   17ff8:	e0bffd17 	ldw	r2,-12(fp)
   17ffc:	10800283 	ldbu	r2,10(r2)
   18000:	10803fcc 	andi	r2,r2,255
   18004:	10000326 	beq	r2,zero,18014 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18008:	00800044 	movi	r2,1
   1800c:	e0bff405 	stb	r2,-48(fp)
   18010:	00000106 	br	18018 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18014:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   18018:	e0bffe03 	ldbu	r2,-8(fp)
   1801c:	10000326 	beq	r2,zero,1802c <OSQDel+0xec>
   18020:	10800060 	cmpeqi	r2,r2,1
   18024:	1000301e 	bne	r2,zero,180e8 <OSQDel+0x1a8>
   18028:	00005506 	br	18180 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1802c:	e0bff403 	ldbu	r2,-48(fp)
   18030:	10001e1e 	bne	r2,zero,180ac <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18034:	e0bffd17 	ldw	r2,-12(fp)
   18038:	00c00fc4 	movi	r3,63
   1803c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18040:	e0bffd17 	ldw	r2,-12(fp)
   18044:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   18048:	e0bffd17 	ldw	r2,-12(fp)
   1804c:	10800117 	ldw	r2,4(r2)
   18050:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   18054:	d0e8d797 	ldw	r3,-23714(gp)
   18058:	e0bff817 	ldw	r2,-32(fp)
   1805c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   18060:	e0bff817 	ldw	r2,-32(fp)
   18064:	d0a8d795 	stw	r2,-23714(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18068:	e0bffd17 	ldw	r2,-12(fp)
   1806c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18070:	d0e8d997 	ldw	r3,-23706(gp)
   18074:	e0bffd17 	ldw	r2,-12(fp)
   18078:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1807c:	e0bffd17 	ldw	r2,-12(fp)
   18080:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18084:	e0bffd17 	ldw	r2,-12(fp)
   18088:	d0a8d995 	stw	r2,-23706(gp)
   1808c:	e0bff617 	ldw	r2,-40(fp)
   18090:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18094:	e0bff717 	ldw	r2,-36(fp)
   18098:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1809c:	e0bfff17 	ldw	r2,-4(fp)
   180a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   180a4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   180a8:	00003f06 	br	181a8 <OSQDel+0x268>
   180ac:	e0bff617 	ldw	r2,-40(fp)
   180b0:	e0bff915 	stw	r2,-28(fp)
   180b4:	e0bff917 	ldw	r2,-28(fp)
   180b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   180bc:	e0bfff17 	ldw	r2,-4(fp)
   180c0:	00c01244 	movi	r3,73
   180c4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   180c8:	e0bffd17 	ldw	r2,-12(fp)
   180cc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   180d0:	00003506 	br	181a8 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   180d4:	000f883a 	mov	r7,zero
   180d8:	01800104 	movi	r6,4
   180dc:	000b883a 	mov	r5,zero
   180e0:	e13ffd17 	ldw	r4,-12(fp)
   180e4:	00140640 	call	14064 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   180e8:	e0bffd17 	ldw	r2,-12(fp)
   180ec:	10800283 	ldbu	r2,10(r2)
   180f0:	10803fcc 	andi	r2,r2,255
   180f4:	103ff71e 	bne	r2,zero,180d4 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   180f8:	e0bffd17 	ldw	r2,-12(fp)
   180fc:	00c00fc4 	movi	r3,63
   18100:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18104:	e0bffd17 	ldw	r2,-12(fp)
   18108:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1810c:	e0bffd17 	ldw	r2,-12(fp)
   18110:	10800117 	ldw	r2,4(r2)
   18114:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   18118:	d0e8d797 	ldw	r3,-23714(gp)
   1811c:	e0bff817 	ldw	r2,-32(fp)
   18120:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18124:	e0bff817 	ldw	r2,-32(fp)
   18128:	d0a8d795 	stw	r2,-23714(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1812c:	e0bffd17 	ldw	r2,-12(fp)
   18130:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18134:	d0e8d997 	ldw	r3,-23706(gp)
   18138:	e0bffd17 	ldw	r2,-12(fp)
   1813c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18140:	e0bffd17 	ldw	r2,-12(fp)
   18144:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18148:	e0bffd17 	ldw	r2,-12(fp)
   1814c:	d0a8d995 	stw	r2,-23706(gp)
   18150:	e0bff617 	ldw	r2,-40(fp)
   18154:	e0bffa15 	stw	r2,-24(fp)
   18158:	e0bffa17 	ldw	r2,-24(fp)
   1815c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18160:	e0bff403 	ldbu	r2,-48(fp)
   18164:	10800058 	cmpnei	r2,r2,1
   18168:	1000011e 	bne	r2,zero,18170 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1816c:	0014ab00 	call	14ab0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18170:	e0bfff17 	ldw	r2,-4(fp)
   18174:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   18178:	e03ff515 	stw	zero,-44(fp)
             break;
   1817c:	00000a06 	br	181a8 <OSQDel+0x268>
   18180:	e0bff617 	ldw	r2,-40(fp)
   18184:	e0bffb15 	stw	r2,-20(fp)
   18188:	e0bffb17 	ldw	r2,-20(fp)
   1818c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18190:	e0bfff17 	ldw	r2,-4(fp)
   18194:	00c001c4 	movi	r3,7
   18198:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1819c:	e0bffd17 	ldw	r2,-12(fp)
   181a0:	e0bff515 	stw	r2,-44(fp)
             break;
   181a4:	0001883a 	nop
    }
    return (pevent_return);
   181a8:	e0bff517 	ldw	r2,-44(fp)
}
   181ac:	e037883a 	mov	sp,fp
   181b0:	dfc00117 	ldw	ra,4(sp)
   181b4:	df000017 	ldw	fp,0(sp)
   181b8:	dec00204 	addi	sp,sp,8
   181bc:	f800283a 	ret

000181c0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   181c0:	defffa04 	addi	sp,sp,-24
   181c4:	df000515 	stw	fp,20(sp)
   181c8:	df000504 	addi	fp,sp,20
   181cc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   181d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   181d4:	e0bfff17 	ldw	r2,-4(fp)
   181d8:	1000021e 	bne	r2,zero,181e4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   181dc:	00800104 	movi	r2,4
   181e0:	00002106 	br	18268 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   181e4:	e0bfff17 	ldw	r2,-4(fp)
   181e8:	10800003 	ldbu	r2,0(r2)
   181ec:	10803fcc 	andi	r2,r2,255
   181f0:	108000a0 	cmpeqi	r2,r2,2
   181f4:	1000021e 	bne	r2,zero,18200 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   181f8:	00800044 	movi	r2,1
   181fc:	00001a06 	br	18268 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18200:	0005303a 	rdctl	r2,status
   18204:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18208:	e0fffd17 	ldw	r3,-12(fp)
   1820c:	00bfff84 	movi	r2,-2
   18210:	1884703a 	and	r2,r3,r2
   18214:	1001703a 	wrctl	status,r2
  
  return context;
   18218:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1821c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   18220:	e0bfff17 	ldw	r2,-4(fp)
   18224:	10800117 	ldw	r2,4(r2)
   18228:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1822c:	e0bffc17 	ldw	r2,-16(fp)
   18230:	10c00117 	ldw	r3,4(r2)
   18234:	e0bffc17 	ldw	r2,-16(fp)
   18238:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1823c:	e0bffc17 	ldw	r2,-16(fp)
   18240:	10c00117 	ldw	r3,4(r2)
   18244:	e0bffc17 	ldw	r2,-16(fp)
   18248:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1824c:	e0bffc17 	ldw	r2,-16(fp)
   18250:	1000058d 	sth	zero,22(r2)
   18254:	e0bffb17 	ldw	r2,-20(fp)
   18258:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1825c:	e0bffe17 	ldw	r2,-8(fp)
   18260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18264:	0005883a 	mov	r2,zero
}
   18268:	e037883a 	mov	sp,fp
   1826c:	df000017 	ldw	fp,0(sp)
   18270:	dec00104 	addi	sp,sp,4
   18274:	f800283a 	ret

00018278 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18278:	defff304 	addi	sp,sp,-52
   1827c:	dfc00c15 	stw	ra,48(sp)
   18280:	df000b15 	stw	fp,44(sp)
   18284:	df000b04 	addi	fp,sp,44
   18288:	e13ffd15 	stw	r4,-12(fp)
   1828c:	2805883a 	mov	r2,r5
   18290:	e1bfff15 	stw	r6,-4(fp)
   18294:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18298:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1829c:	e0bfff17 	ldw	r2,-4(fp)
   182a0:	1000021e 	bne	r2,zero,182ac <OSQPend+0x34>
        return ((void *)0);
   182a4:	0005883a 	mov	r2,zero
   182a8:	00009106 	br	184f0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   182ac:	e0bffd17 	ldw	r2,-12(fp)
   182b0:	1000051e 	bne	r2,zero,182c8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   182b4:	e0bfff17 	ldw	r2,-4(fp)
   182b8:	00c00104 	movi	r3,4
   182bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   182c0:	0005883a 	mov	r2,zero
   182c4:	00008a06 	br	184f0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   182c8:	e0bffd17 	ldw	r2,-12(fp)
   182cc:	10800003 	ldbu	r2,0(r2)
   182d0:	10803fcc 	andi	r2,r2,255
   182d4:	108000a0 	cmpeqi	r2,r2,2
   182d8:	1000051e 	bne	r2,zero,182f0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   182dc:	e0bfff17 	ldw	r2,-4(fp)
   182e0:	00c00044 	movi	r3,1
   182e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   182e8:	0005883a 	mov	r2,zero
   182ec:	00008006 	br	184f0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   182f0:	d0a8da83 	ldbu	r2,-23702(gp)
   182f4:	10803fcc 	andi	r2,r2,255
   182f8:	10000526 	beq	r2,zero,18310 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   182fc:	e0bfff17 	ldw	r2,-4(fp)
   18300:	00c00084 	movi	r3,2
   18304:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18308:	0005883a 	mov	r2,zero
   1830c:	00007806 	br	184f0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   18310:	d0a8cc83 	ldbu	r2,-23758(gp)
   18314:	10803fcc 	andi	r2,r2,255
   18318:	10000526 	beq	r2,zero,18330 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1831c:	e0bfff17 	ldw	r2,-4(fp)
   18320:	00c00344 	movi	r3,13
   18324:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18328:	0005883a 	mov	r2,zero
   1832c:	00007006 	br	184f0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18330:	0005303a 	rdctl	r2,status
   18334:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18338:	e0fffc17 	ldw	r3,-16(fp)
   1833c:	00bfff84 	movi	r2,-2
   18340:	1884703a 	and	r2,r3,r2
   18344:	1001703a 	wrctl	status,r2
  
  return context;
   18348:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1834c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18350:	e0bffd17 	ldw	r2,-12(fp)
   18354:	10800117 	ldw	r2,4(r2)
   18358:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1835c:	e0bff817 	ldw	r2,-32(fp)
   18360:	1080058b 	ldhu	r2,22(r2)
   18364:	10bfffcc 	andi	r2,r2,65535
   18368:	10001e26 	beq	r2,zero,183e4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1836c:	e0bff817 	ldw	r2,-32(fp)
   18370:	10800417 	ldw	r2,16(r2)
   18374:	11000104 	addi	r4,r2,4
   18378:	e0fff817 	ldw	r3,-32(fp)
   1837c:	19000415 	stw	r4,16(r3)
   18380:	10800017 	ldw	r2,0(r2)
   18384:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18388:	e0bff817 	ldw	r2,-32(fp)
   1838c:	1080058b 	ldhu	r2,22(r2)
   18390:	10bfffc4 	addi	r2,r2,-1
   18394:	1007883a 	mov	r3,r2
   18398:	e0bff817 	ldw	r2,-32(fp)
   1839c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   183a0:	e0bff817 	ldw	r2,-32(fp)
   183a4:	10c00417 	ldw	r3,16(r2)
   183a8:	e0bff817 	ldw	r2,-32(fp)
   183ac:	10800217 	ldw	r2,8(r2)
   183b0:	1880041e 	bne	r3,r2,183c4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   183b4:	e0bff817 	ldw	r2,-32(fp)
   183b8:	10c00117 	ldw	r3,4(r2)
   183bc:	e0bff817 	ldw	r2,-32(fp)
   183c0:	10c00415 	stw	r3,16(r2)
   183c4:	e0bff617 	ldw	r2,-40(fp)
   183c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183cc:	e0bff717 	ldw	r2,-36(fp)
   183d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   183d4:	e0bfff17 	ldw	r2,-4(fp)
   183d8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   183dc:	e0bff517 	ldw	r2,-44(fp)
   183e0:	00004306 	br	184f0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   183e4:	d0a8db97 	ldw	r2,-23698(gp)
   183e8:	d0e8db97 	ldw	r3,-23698(gp)
   183ec:	18c00c03 	ldbu	r3,48(r3)
   183f0:	18c00114 	ori	r3,r3,4
   183f4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   183f8:	d0a8db97 	ldw	r2,-23698(gp)
   183fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   18400:	d0a8db97 	ldw	r2,-23698(gp)
   18404:	e0fffe0b 	ldhu	r3,-8(fp)
   18408:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1840c:	e13ffd17 	ldw	r4,-12(fp)
   18410:	00141fc0 	call	141fc <OS_EventTaskWait>
   18414:	e0bff617 	ldw	r2,-40(fp)
   18418:	e0bffb15 	stw	r2,-20(fp)
   1841c:	e0bffb17 	ldw	r2,-20(fp)
   18420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   18424:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18428:	0005303a 	rdctl	r2,status
   1842c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18430:	e0fff917 	ldw	r3,-28(fp)
   18434:	00bfff84 	movi	r2,-2
   18438:	1884703a 	and	r2,r3,r2
   1843c:	1001703a 	wrctl	status,r2
  
  return context;
   18440:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   18444:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18448:	d0a8db97 	ldw	r2,-23698(gp)
   1844c:	10800c43 	ldbu	r2,49(r2)
   18450:	10803fcc 	andi	r2,r2,255
   18454:	10000326 	beq	r2,zero,18464 <OSQPend+0x1ec>
   18458:	108000a0 	cmpeqi	r2,r2,2
   1845c:	1000071e 	bne	r2,zero,1847c <OSQPend+0x204>
   18460:	00000b06 	br	18490 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   18464:	d0a8db97 	ldw	r2,-23698(gp)
   18468:	10800917 	ldw	r2,36(r2)
   1846c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   18470:	e0bfff17 	ldw	r2,-4(fp)
   18474:	10000005 	stb	zero,0(r2)
             break;
   18478:	00000e06 	br	184b4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1847c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18480:	e0bfff17 	ldw	r2,-4(fp)
   18484:	00c00384 	movi	r3,14
   18488:	10c00005 	stb	r3,0(r2)
             break;
   1848c:	00000906 	br	184b4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   18490:	d0a8db97 	ldw	r2,-23698(gp)
   18494:	e17ffd17 	ldw	r5,-12(fp)
   18498:	1009883a 	mov	r4,r2
   1849c:	001445c0 	call	1445c <OS_EventTaskRemove>
             pmsg = (void *)0;
   184a0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   184a4:	e0bfff17 	ldw	r2,-4(fp)
   184a8:	00c00284 	movi	r3,10
   184ac:	10c00005 	stb	r3,0(r2)
             break;
   184b0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   184b4:	d0a8db97 	ldw	r2,-23698(gp)
   184b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   184bc:	d0a8db97 	ldw	r2,-23698(gp)
   184c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   184c4:	d0a8db97 	ldw	r2,-23698(gp)
   184c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   184cc:	d0a8db97 	ldw	r2,-23698(gp)
   184d0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   184d4:	d0a8db97 	ldw	r2,-23698(gp)
   184d8:	10000915 	stw	zero,36(r2)
   184dc:	e0bff617 	ldw	r2,-40(fp)
   184e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184e4:	e0bffa17 	ldw	r2,-24(fp)
   184e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   184ec:	e0bff517 	ldw	r2,-44(fp)
}
   184f0:	e037883a 	mov	sp,fp
   184f4:	dfc00117 	ldw	ra,4(sp)
   184f8:	df000017 	ldw	fp,0(sp)
   184fc:	dec00204 	addi	sp,sp,8
   18500:	f800283a 	ret

00018504 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18504:	defff604 	addi	sp,sp,-40
   18508:	dfc00915 	stw	ra,36(sp)
   1850c:	df000815 	stw	fp,32(sp)
   18510:	df000804 	addi	fp,sp,32
   18514:	e13ffd15 	stw	r4,-12(fp)
   18518:	2805883a 	mov	r2,r5
   1851c:	e1bfff15 	stw	r6,-4(fp)
   18520:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18524:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18528:	e0bfff17 	ldw	r2,-4(fp)
   1852c:	1000021e 	bne	r2,zero,18538 <OSQPendAbort+0x34>
        return (0);
   18530:	0005883a 	mov	r2,zero
   18534:	00004906 	br	1865c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18538:	e0bffd17 	ldw	r2,-12(fp)
   1853c:	1000051e 	bne	r2,zero,18554 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18540:	e0bfff17 	ldw	r2,-4(fp)
   18544:	00c00104 	movi	r3,4
   18548:	10c00005 	stb	r3,0(r2)
        return (0);
   1854c:	0005883a 	mov	r2,zero
   18550:	00004206 	br	1865c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18554:	e0bffd17 	ldw	r2,-12(fp)
   18558:	10800003 	ldbu	r2,0(r2)
   1855c:	10803fcc 	andi	r2,r2,255
   18560:	108000a0 	cmpeqi	r2,r2,2
   18564:	1000051e 	bne	r2,zero,1857c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18568:	e0bfff17 	ldw	r2,-4(fp)
   1856c:	00c00044 	movi	r3,1
   18570:	10c00005 	stb	r3,0(r2)
        return (0);
   18574:	0005883a 	mov	r2,zero
   18578:	00003806 	br	1865c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1857c:	0005303a 	rdctl	r2,status
   18580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18584:	e0fffc17 	ldw	r3,-16(fp)
   18588:	00bfff84 	movi	r2,-2
   1858c:	1884703a 	and	r2,r3,r2
   18590:	1001703a 	wrctl	status,r2
  
  return context;
   18594:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18598:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1859c:	e0bffd17 	ldw	r2,-12(fp)
   185a0:	10800283 	ldbu	r2,10(r2)
   185a4:	10803fcc 	andi	r2,r2,255
   185a8:	10002526 	beq	r2,zero,18640 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   185ac:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   185b0:	e0bffe03 	ldbu	r2,-8(fp)
   185b4:	10800060 	cmpeqi	r2,r2,1
   185b8:	10000e26 	beq	r2,zero,185f4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   185bc:	00000806 	br	185e0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   185c0:	01c00084 	movi	r7,2
   185c4:	01800104 	movi	r6,4
   185c8:	000b883a 	mov	r5,zero
   185cc:	e13ffd17 	ldw	r4,-12(fp)
   185d0:	00140640 	call	14064 <OS_EventTaskRdy>
                     nbr_tasks++;
   185d4:	e0bff803 	ldbu	r2,-32(fp)
   185d8:	10800044 	addi	r2,r2,1
   185dc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   185e0:	e0bffd17 	ldw	r2,-12(fp)
   185e4:	10800283 	ldbu	r2,10(r2)
   185e8:	10803fcc 	andi	r2,r2,255
   185ec:	103ff41e 	bne	r2,zero,185c0 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   185f0:	00000906 	br	18618 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   185f4:	01c00084 	movi	r7,2
   185f8:	01800104 	movi	r6,4
   185fc:	000b883a 	mov	r5,zero
   18600:	e13ffd17 	ldw	r4,-12(fp)
   18604:	00140640 	call	14064 <OS_EventTaskRdy>
                 nbr_tasks++;
   18608:	e0bff803 	ldbu	r2,-32(fp)
   1860c:	10800044 	addi	r2,r2,1
   18610:	e0bff805 	stb	r2,-32(fp)
                 break;
   18614:	0001883a 	nop
   18618:	e0bff917 	ldw	r2,-28(fp)
   1861c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18620:	e0bffa17 	ldw	r2,-24(fp)
   18624:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   18628:	0014ab00 	call	14ab0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1862c:	e0bfff17 	ldw	r2,-4(fp)
   18630:	00c00384 	movi	r3,14
   18634:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18638:	e0bff803 	ldbu	r2,-32(fp)
   1863c:	00000706 	br	1865c <OSQPendAbort+0x158>
   18640:	e0bff917 	ldw	r2,-28(fp)
   18644:	e0bffb15 	stw	r2,-20(fp)
   18648:	e0bffb17 	ldw	r2,-20(fp)
   1864c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18650:	e0bfff17 	ldw	r2,-4(fp)
   18654:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   18658:	0005883a 	mov	r2,zero
}
   1865c:	e037883a 	mov	sp,fp
   18660:	dfc00117 	ldw	ra,4(sp)
   18664:	df000017 	ldw	fp,0(sp)
   18668:	dec00204 	addi	sp,sp,8
   1866c:	f800283a 	ret

00018670 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   18670:	defff604 	addi	sp,sp,-40
   18674:	dfc00915 	stw	ra,36(sp)
   18678:	df000815 	stw	fp,32(sp)
   1867c:	df000804 	addi	fp,sp,32
   18680:	e13ffe15 	stw	r4,-8(fp)
   18684:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18688:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1868c:	e0bffe17 	ldw	r2,-8(fp)
   18690:	1000021e 	bne	r2,zero,1869c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18694:	00800104 	movi	r2,4
   18698:	00004a06 	br	187c4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1869c:	e0bffe17 	ldw	r2,-8(fp)
   186a0:	10800003 	ldbu	r2,0(r2)
   186a4:	10803fcc 	andi	r2,r2,255
   186a8:	108000a0 	cmpeqi	r2,r2,2
   186ac:	1000021e 	bne	r2,zero,186b8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   186b0:	00800044 	movi	r2,1
   186b4:	00004306 	br	187c4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186b8:	0005303a 	rdctl	r2,status
   186bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186c0:	e0fffd17 	ldw	r3,-12(fp)
   186c4:	00bfff84 	movi	r2,-2
   186c8:	1884703a 	and	r2,r3,r2
   186cc:	1001703a 	wrctl	status,r2
  
  return context;
   186d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   186d4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   186d8:	e0bffe17 	ldw	r2,-8(fp)
   186dc:	10800283 	ldbu	r2,10(r2)
   186e0:	10803fcc 	andi	r2,r2,255
   186e4:	10000c26 	beq	r2,zero,18718 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   186e8:	000f883a 	mov	r7,zero
   186ec:	01800104 	movi	r6,4
   186f0:	e17fff17 	ldw	r5,-4(fp)
   186f4:	e13ffe17 	ldw	r4,-8(fp)
   186f8:	00140640 	call	14064 <OS_EventTaskRdy>
   186fc:	e0bff817 	ldw	r2,-32(fp)
   18700:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18704:	e0bff917 	ldw	r2,-28(fp)
   18708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1870c:	0014ab00 	call	14ab0 <OS_Sched>
        return (OS_ERR_NONE);
   18710:	0005883a 	mov	r2,zero
   18714:	00002b06 	br	187c4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   18718:	e0bffe17 	ldw	r2,-8(fp)
   1871c:	10800117 	ldw	r2,4(r2)
   18720:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   18724:	e0bffb17 	ldw	r2,-20(fp)
   18728:	10c0058b 	ldhu	r3,22(r2)
   1872c:	e0bffb17 	ldw	r2,-20(fp)
   18730:	1080050b 	ldhu	r2,20(r2)
   18734:	18ffffcc 	andi	r3,r3,65535
   18738:	10bfffcc 	andi	r2,r2,65535
   1873c:	18800636 	bltu	r3,r2,18758 <OSQPost+0xe8>
   18740:	e0bff817 	ldw	r2,-32(fp)
   18744:	e0bffa15 	stw	r2,-24(fp)
   18748:	e0bffa17 	ldw	r2,-24(fp)
   1874c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18750:	00800784 	movi	r2,30
   18754:	00001b06 	br	187c4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   18758:	e0bffb17 	ldw	r2,-20(fp)
   1875c:	10800317 	ldw	r2,12(r2)
   18760:	11000104 	addi	r4,r2,4
   18764:	e0fffb17 	ldw	r3,-20(fp)
   18768:	19000315 	stw	r4,12(r3)
   1876c:	e0ffff17 	ldw	r3,-4(fp)
   18770:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   18774:	e0bffb17 	ldw	r2,-20(fp)
   18778:	1080058b 	ldhu	r2,22(r2)
   1877c:	10800044 	addi	r2,r2,1
   18780:	1007883a 	mov	r3,r2
   18784:	e0bffb17 	ldw	r2,-20(fp)
   18788:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1878c:	e0bffb17 	ldw	r2,-20(fp)
   18790:	10c00317 	ldw	r3,12(r2)
   18794:	e0bffb17 	ldw	r2,-20(fp)
   18798:	10800217 	ldw	r2,8(r2)
   1879c:	1880041e 	bne	r3,r2,187b0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   187a0:	e0bffb17 	ldw	r2,-20(fp)
   187a4:	10c00117 	ldw	r3,4(r2)
   187a8:	e0bffb17 	ldw	r2,-20(fp)
   187ac:	10c00315 	stw	r3,12(r2)
   187b0:	e0bff817 	ldw	r2,-32(fp)
   187b4:	e0bffc15 	stw	r2,-16(fp)
   187b8:	e0bffc17 	ldw	r2,-16(fp)
   187bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   187c0:	0005883a 	mov	r2,zero
}
   187c4:	e037883a 	mov	sp,fp
   187c8:	dfc00117 	ldw	ra,4(sp)
   187cc:	df000017 	ldw	fp,0(sp)
   187d0:	dec00204 	addi	sp,sp,8
   187d4:	f800283a 	ret

000187d8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   187d8:	defff604 	addi	sp,sp,-40
   187dc:	dfc00915 	stw	ra,36(sp)
   187e0:	df000815 	stw	fp,32(sp)
   187e4:	df000804 	addi	fp,sp,32
   187e8:	e13ffe15 	stw	r4,-8(fp)
   187ec:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   187f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   187f4:	e0bffe17 	ldw	r2,-8(fp)
   187f8:	1000021e 	bne	r2,zero,18804 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   187fc:	00800104 	movi	r2,4
   18800:	00004c06 	br	18934 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18804:	e0bffe17 	ldw	r2,-8(fp)
   18808:	10800003 	ldbu	r2,0(r2)
   1880c:	10803fcc 	andi	r2,r2,255
   18810:	108000a0 	cmpeqi	r2,r2,2
   18814:	1000021e 	bne	r2,zero,18820 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   18818:	00800044 	movi	r2,1
   1881c:	00004506 	br	18934 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18820:	0005303a 	rdctl	r2,status
   18824:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18828:	e0fffd17 	ldw	r3,-12(fp)
   1882c:	00bfff84 	movi	r2,-2
   18830:	1884703a 	and	r2,r3,r2
   18834:	1001703a 	wrctl	status,r2
  
  return context;
   18838:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1883c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   18840:	e0bffe17 	ldw	r2,-8(fp)
   18844:	10800283 	ldbu	r2,10(r2)
   18848:	10803fcc 	andi	r2,r2,255
   1884c:	10000c26 	beq	r2,zero,18880 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18850:	000f883a 	mov	r7,zero
   18854:	01800104 	movi	r6,4
   18858:	e17fff17 	ldw	r5,-4(fp)
   1885c:	e13ffe17 	ldw	r4,-8(fp)
   18860:	00140640 	call	14064 <OS_EventTaskRdy>
   18864:	e0bff817 	ldw	r2,-32(fp)
   18868:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1886c:	e0bff917 	ldw	r2,-28(fp)
   18870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18874:	0014ab00 	call	14ab0 <OS_Sched>
        return (OS_ERR_NONE);
   18878:	0005883a 	mov	r2,zero
   1887c:	00002d06 	br	18934 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18880:	e0bffe17 	ldw	r2,-8(fp)
   18884:	10800117 	ldw	r2,4(r2)
   18888:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1888c:	e0bffb17 	ldw	r2,-20(fp)
   18890:	10c0058b 	ldhu	r3,22(r2)
   18894:	e0bffb17 	ldw	r2,-20(fp)
   18898:	1080050b 	ldhu	r2,20(r2)
   1889c:	18ffffcc 	andi	r3,r3,65535
   188a0:	10bfffcc 	andi	r2,r2,65535
   188a4:	18800636 	bltu	r3,r2,188c0 <OSQPostFront+0xe8>
   188a8:	e0bff817 	ldw	r2,-32(fp)
   188ac:	e0bffa15 	stw	r2,-24(fp)
   188b0:	e0bffa17 	ldw	r2,-24(fp)
   188b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   188b8:	00800784 	movi	r2,30
   188bc:	00001d06 	br	18934 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   188c0:	e0bffb17 	ldw	r2,-20(fp)
   188c4:	10c00417 	ldw	r3,16(r2)
   188c8:	e0bffb17 	ldw	r2,-20(fp)
   188cc:	10800117 	ldw	r2,4(r2)
   188d0:	1880041e 	bne	r3,r2,188e4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   188d4:	e0bffb17 	ldw	r2,-20(fp)
   188d8:	10c00217 	ldw	r3,8(r2)
   188dc:	e0bffb17 	ldw	r2,-20(fp)
   188e0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   188e4:	e0bffb17 	ldw	r2,-20(fp)
   188e8:	10800417 	ldw	r2,16(r2)
   188ec:	10ffff04 	addi	r3,r2,-4
   188f0:	e0bffb17 	ldw	r2,-20(fp)
   188f4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   188f8:	e0bffb17 	ldw	r2,-20(fp)
   188fc:	10800417 	ldw	r2,16(r2)
   18900:	e0ffff17 	ldw	r3,-4(fp)
   18904:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18908:	e0bffb17 	ldw	r2,-20(fp)
   1890c:	1080058b 	ldhu	r2,22(r2)
   18910:	10800044 	addi	r2,r2,1
   18914:	1007883a 	mov	r3,r2
   18918:	e0bffb17 	ldw	r2,-20(fp)
   1891c:	10c0058d 	sth	r3,22(r2)
   18920:	e0bff817 	ldw	r2,-32(fp)
   18924:	e0bffc15 	stw	r2,-16(fp)
   18928:	e0bffc17 	ldw	r2,-16(fp)
   1892c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18930:	0005883a 	mov	r2,zero
}
   18934:	e037883a 	mov	sp,fp
   18938:	dfc00117 	ldw	ra,4(sp)
   1893c:	df000017 	ldw	fp,0(sp)
   18940:	dec00204 	addi	sp,sp,8
   18944:	f800283a 	ret

00018948 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   18948:	defff504 	addi	sp,sp,-44
   1894c:	dfc00a15 	stw	ra,40(sp)
   18950:	df000915 	stw	fp,36(sp)
   18954:	df000904 	addi	fp,sp,36
   18958:	e13ffd15 	stw	r4,-12(fp)
   1895c:	e17ffe15 	stw	r5,-8(fp)
   18960:	3005883a 	mov	r2,r6
   18964:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18968:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1896c:	e0bffd17 	ldw	r2,-12(fp)
   18970:	1000021e 	bne	r2,zero,1897c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18974:	00800104 	movi	r2,4
   18978:	00007106 	br	18b40 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1897c:	e0bffd17 	ldw	r2,-12(fp)
   18980:	10800003 	ldbu	r2,0(r2)
   18984:	10803fcc 	andi	r2,r2,255
   18988:	108000a0 	cmpeqi	r2,r2,2
   1898c:	1000021e 	bne	r2,zero,18998 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18990:	00800044 	movi	r2,1
   18994:	00006a06 	br	18b40 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18998:	0005303a 	rdctl	r2,status
   1899c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189a0:	e0fffc17 	ldw	r3,-16(fp)
   189a4:	00bfff84 	movi	r2,-2
   189a8:	1884703a 	and	r2,r3,r2
   189ac:	1001703a 	wrctl	status,r2
  
  return context;
   189b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   189b4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   189b8:	e0bffd17 	ldw	r2,-12(fp)
   189bc:	10800283 	ldbu	r2,10(r2)
   189c0:	10803fcc 	andi	r2,r2,255
   189c4:	10001d26 	beq	r2,zero,18a3c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   189c8:	e0bfff03 	ldbu	r2,-4(fp)
   189cc:	1080004c 	andi	r2,r2,1
   189d0:	10000b26 	beq	r2,zero,18a00 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   189d4:	00000506 	br	189ec <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   189d8:	000f883a 	mov	r7,zero
   189dc:	01800104 	movi	r6,4
   189e0:	e17ffe17 	ldw	r5,-8(fp)
   189e4:	e13ffd17 	ldw	r4,-12(fp)
   189e8:	00140640 	call	14064 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   189ec:	e0bffd17 	ldw	r2,-12(fp)
   189f0:	10800283 	ldbu	r2,10(r2)
   189f4:	10803fcc 	andi	r2,r2,255
   189f8:	103ff71e 	bne	r2,zero,189d8 <OSQPostOpt+0x90>
   189fc:	00000506 	br	18a14 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18a00:	000f883a 	mov	r7,zero
   18a04:	01800104 	movi	r6,4
   18a08:	e17ffe17 	ldw	r5,-8(fp)
   18a0c:	e13ffd17 	ldw	r4,-12(fp)
   18a10:	00140640 	call	14064 <OS_EventTaskRdy>
   18a14:	e0bff717 	ldw	r2,-36(fp)
   18a18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a1c:	e0bff817 	ldw	r2,-32(fp)
   18a20:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18a24:	e0bfff03 	ldbu	r2,-4(fp)
   18a28:	1080010c 	andi	r2,r2,4
   18a2c:	1000011e 	bne	r2,zero,18a34 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   18a30:	0014ab00 	call	14ab0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   18a34:	0005883a 	mov	r2,zero
   18a38:	00004106 	br	18b40 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18a3c:	e0bffd17 	ldw	r2,-12(fp)
   18a40:	10800117 	ldw	r2,4(r2)
   18a44:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18a48:	e0bffa17 	ldw	r2,-24(fp)
   18a4c:	10c0058b 	ldhu	r3,22(r2)
   18a50:	e0bffa17 	ldw	r2,-24(fp)
   18a54:	1080050b 	ldhu	r2,20(r2)
   18a58:	18ffffcc 	andi	r3,r3,65535
   18a5c:	10bfffcc 	andi	r2,r2,65535
   18a60:	18800636 	bltu	r3,r2,18a7c <OSQPostOpt+0x134>
   18a64:	e0bff717 	ldw	r2,-36(fp)
   18a68:	e0bff915 	stw	r2,-28(fp)
   18a6c:	e0bff917 	ldw	r2,-28(fp)
   18a70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18a74:	00800784 	movi	r2,30
   18a78:	00003106 	br	18b40 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18a7c:	e0bfff03 	ldbu	r2,-4(fp)
   18a80:	1080008c 	andi	r2,r2,2
   18a84:	10001326 	beq	r2,zero,18ad4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   18a88:	e0bffa17 	ldw	r2,-24(fp)
   18a8c:	10c00417 	ldw	r3,16(r2)
   18a90:	e0bffa17 	ldw	r2,-24(fp)
   18a94:	10800117 	ldw	r2,4(r2)
   18a98:	1880041e 	bne	r3,r2,18aac <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18a9c:	e0bffa17 	ldw	r2,-24(fp)
   18aa0:	10c00217 	ldw	r3,8(r2)
   18aa4:	e0bffa17 	ldw	r2,-24(fp)
   18aa8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18aac:	e0bffa17 	ldw	r2,-24(fp)
   18ab0:	10800417 	ldw	r2,16(r2)
   18ab4:	10ffff04 	addi	r3,r2,-4
   18ab8:	e0bffa17 	ldw	r2,-24(fp)
   18abc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18ac0:	e0bffa17 	ldw	r2,-24(fp)
   18ac4:	10800417 	ldw	r2,16(r2)
   18ac8:	e0fffe17 	ldw	r3,-8(fp)
   18acc:	10c00015 	stw	r3,0(r2)
   18ad0:	00001006 	br	18b14 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   18ad4:	e0bffa17 	ldw	r2,-24(fp)
   18ad8:	10800317 	ldw	r2,12(r2)
   18adc:	11000104 	addi	r4,r2,4
   18ae0:	e0fffa17 	ldw	r3,-24(fp)
   18ae4:	19000315 	stw	r4,12(r3)
   18ae8:	e0fffe17 	ldw	r3,-8(fp)
   18aec:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   18af0:	e0bffa17 	ldw	r2,-24(fp)
   18af4:	10c00317 	ldw	r3,12(r2)
   18af8:	e0bffa17 	ldw	r2,-24(fp)
   18afc:	10800217 	ldw	r2,8(r2)
   18b00:	1880041e 	bne	r3,r2,18b14 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   18b04:	e0bffa17 	ldw	r2,-24(fp)
   18b08:	10c00117 	ldw	r3,4(r2)
   18b0c:	e0bffa17 	ldw	r2,-24(fp)
   18b10:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18b14:	e0bffa17 	ldw	r2,-24(fp)
   18b18:	1080058b 	ldhu	r2,22(r2)
   18b1c:	10800044 	addi	r2,r2,1
   18b20:	1007883a 	mov	r3,r2
   18b24:	e0bffa17 	ldw	r2,-24(fp)
   18b28:	10c0058d 	sth	r3,22(r2)
   18b2c:	e0bff717 	ldw	r2,-36(fp)
   18b30:	e0bffb15 	stw	r2,-20(fp)
   18b34:	e0bffb17 	ldw	r2,-20(fp)
   18b38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18b3c:	0005883a 	mov	r2,zero
}
   18b40:	e037883a 	mov	sp,fp
   18b44:	dfc00117 	ldw	ra,4(sp)
   18b48:	df000017 	ldw	fp,0(sp)
   18b4c:	dec00204 	addi	sp,sp,8
   18b50:	f800283a 	ret

00018b54 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18b54:	defff604 	addi	sp,sp,-40
   18b58:	df000915 	stw	fp,36(sp)
   18b5c:	df000904 	addi	fp,sp,36
   18b60:	e13ffe15 	stw	r4,-8(fp)
   18b64:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18b68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18b6c:	e0bffe17 	ldw	r2,-8(fp)
   18b70:	1000021e 	bne	r2,zero,18b7c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18b74:	00800104 	movi	r2,4
   18b78:	00004906 	br	18ca0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18b7c:	e0bfff17 	ldw	r2,-4(fp)
   18b80:	1000021e 	bne	r2,zero,18b8c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18b84:	00800244 	movi	r2,9
   18b88:	00004506 	br	18ca0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18b8c:	e0bffe17 	ldw	r2,-8(fp)
   18b90:	10800003 	ldbu	r2,0(r2)
   18b94:	10803fcc 	andi	r2,r2,255
   18b98:	108000a0 	cmpeqi	r2,r2,2
   18b9c:	1000021e 	bne	r2,zero,18ba8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18ba0:	00800044 	movi	r2,1
   18ba4:	00003e06 	br	18ca0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ba8:	0005303a 	rdctl	r2,status
   18bac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18bb0:	e0fffd17 	ldw	r3,-12(fp)
   18bb4:	00bfff84 	movi	r2,-2
   18bb8:	1884703a 	and	r2,r3,r2
   18bbc:	1001703a 	wrctl	status,r2
  
  return context;
   18bc0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18bc4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   18bc8:	e0bffe17 	ldw	r2,-8(fp)
   18bcc:	10c00283 	ldbu	r3,10(r2)
   18bd0:	e0bfff17 	ldw	r2,-4(fp)
   18bd4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   18bd8:	e0bffe17 	ldw	r2,-8(fp)
   18bdc:	108002c4 	addi	r2,r2,11
   18be0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18be4:	e0bfff17 	ldw	r2,-4(fp)
   18be8:	10800204 	addi	r2,r2,8
   18bec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18bf0:	e03ff705 	stb	zero,-36(fp)
   18bf4:	00000b06 	br	18c24 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   18bf8:	e0bff917 	ldw	r2,-28(fp)
   18bfc:	10c00044 	addi	r3,r2,1
   18c00:	e0fff915 	stw	r3,-28(fp)
   18c04:	e0fff817 	ldw	r3,-32(fp)
   18c08:	19000044 	addi	r4,r3,1
   18c0c:	e13ff815 	stw	r4,-32(fp)
   18c10:	18c00003 	ldbu	r3,0(r3)
   18c14:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18c18:	e0bff703 	ldbu	r2,-36(fp)
   18c1c:	10800044 	addi	r2,r2,1
   18c20:	e0bff705 	stb	r2,-36(fp)
   18c24:	e0bff703 	ldbu	r2,-36(fp)
   18c28:	108000f0 	cmpltui	r2,r2,3
   18c2c:	103ff21e 	bne	r2,zero,18bf8 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   18c30:	e0bffe17 	ldw	r2,-8(fp)
   18c34:	10800117 	ldw	r2,4(r2)
   18c38:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   18c3c:	e0bffc17 	ldw	r2,-16(fp)
   18c40:	1080058b 	ldhu	r2,22(r2)
   18c44:	10bfffcc 	andi	r2,r2,65535
   18c48:	10000626 	beq	r2,zero,18c64 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   18c4c:	e0bffc17 	ldw	r2,-16(fp)
   18c50:	10800417 	ldw	r2,16(r2)
   18c54:	10c00017 	ldw	r3,0(r2)
   18c58:	e0bfff17 	ldw	r2,-4(fp)
   18c5c:	10c00015 	stw	r3,0(r2)
   18c60:	00000206 	br	18c6c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   18c64:	e0bfff17 	ldw	r2,-4(fp)
   18c68:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   18c6c:	e0bffc17 	ldw	r2,-16(fp)
   18c70:	10c0058b 	ldhu	r3,22(r2)
   18c74:	e0bfff17 	ldw	r2,-4(fp)
   18c78:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   18c7c:	e0bffc17 	ldw	r2,-16(fp)
   18c80:	10c0050b 	ldhu	r3,20(r2)
   18c84:	e0bfff17 	ldw	r2,-4(fp)
   18c88:	10c0018d 	sth	r3,6(r2)
   18c8c:	e0bffa17 	ldw	r2,-24(fp)
   18c90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c94:	e0bffb17 	ldw	r2,-20(fp)
   18c98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18c9c:	0005883a 	mov	r2,zero
}
   18ca0:	e037883a 	mov	sp,fp
   18ca4:	df000017 	ldw	fp,0(sp)
   18ca8:	dec00104 	addi	sp,sp,4
   18cac:	f800283a 	ret

00018cb0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18cb0:	defffb04 	addi	sp,sp,-20
   18cb4:	dfc00415 	stw	ra,16(sp)
   18cb8:	df000315 	stw	fp,12(sp)
   18cbc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18cc0:	01407804 	movi	r5,480
   18cc4:	01000274 	movhi	r4,9
   18cc8:	21192b04 	addi	r4,r4,25772
   18ccc:	00149f40 	call	149f4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18cd0:	00800274 	movhi	r2,9
   18cd4:	10992b04 	addi	r2,r2,25772
   18cd8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18cdc:	00800274 	movhi	r2,9
   18ce0:	10993104 	addi	r2,r2,25796
   18ce4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18ce8:	e03ffd0d 	sth	zero,-12(fp)
   18cec:	00000c06 	br	18d20 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   18cf0:	e0bffe17 	ldw	r2,-8(fp)
   18cf4:	e0ffff17 	ldw	r3,-4(fp)
   18cf8:	10c00015 	stw	r3,0(r2)
        pq1++;
   18cfc:	e0bffe17 	ldw	r2,-8(fp)
   18d00:	10800604 	addi	r2,r2,24
   18d04:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   18d08:	e0bfff17 	ldw	r2,-4(fp)
   18d0c:	10800604 	addi	r2,r2,24
   18d10:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18d14:	e0bffd0b 	ldhu	r2,-12(fp)
   18d18:	10800044 	addi	r2,r2,1
   18d1c:	e0bffd0d 	sth	r2,-12(fp)
   18d20:	e0bffd0b 	ldhu	r2,-12(fp)
   18d24:	108004f0 	cmpltui	r2,r2,19
   18d28:	103ff11e 	bne	r2,zero,18cf0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   18d2c:	e0bffe17 	ldw	r2,-8(fp)
   18d30:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   18d34:	00800274 	movhi	r2,9
   18d38:	10992b04 	addi	r2,r2,25772
   18d3c:	d0a8d795 	stw	r2,-23714(gp)
#endif
}
   18d40:	0001883a 	nop
   18d44:	e037883a 	mov	sp,fp
   18d48:	dfc00117 	ldw	ra,4(sp)
   18d4c:	df000017 	ldw	fp,0(sp)
   18d50:	dec00204 	addi	sp,sp,8
   18d54:	f800283a 	ret

00018d58 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   18d58:	defffa04 	addi	sp,sp,-24
   18d5c:	df000515 	stw	fp,20(sp)
   18d60:	df000504 	addi	fp,sp,20
   18d64:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18d68:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18d6c:	e0bfff17 	ldw	r2,-4(fp)
   18d70:	1000021e 	bne	r2,zero,18d7c <OSSemAccept+0x24>
        return (0);
   18d74:	0005883a 	mov	r2,zero
   18d78:	00001f06 	br	18df8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18d7c:	e0bfff17 	ldw	r2,-4(fp)
   18d80:	10800003 	ldbu	r2,0(r2)
   18d84:	10803fcc 	andi	r2,r2,255
   18d88:	108000e0 	cmpeqi	r2,r2,3
   18d8c:	1000021e 	bne	r2,zero,18d98 <OSSemAccept+0x40>
        return (0);
   18d90:	0005883a 	mov	r2,zero
   18d94:	00001806 	br	18df8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d98:	0005303a 	rdctl	r2,status
   18d9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18da0:	e0fffe17 	ldw	r3,-8(fp)
   18da4:	00bfff84 	movi	r2,-2
   18da8:	1884703a 	and	r2,r3,r2
   18dac:	1001703a 	wrctl	status,r2
  
  return context;
   18db0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18db4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   18db8:	e0bfff17 	ldw	r2,-4(fp)
   18dbc:	1080020b 	ldhu	r2,8(r2)
   18dc0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   18dc4:	e0bffd0b 	ldhu	r2,-12(fp)
   18dc8:	10000626 	beq	r2,zero,18de4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   18dcc:	e0bfff17 	ldw	r2,-4(fp)
   18dd0:	1080020b 	ldhu	r2,8(r2)
   18dd4:	10bfffc4 	addi	r2,r2,-1
   18dd8:	1007883a 	mov	r3,r2
   18ddc:	e0bfff17 	ldw	r2,-4(fp)
   18de0:	10c0020d 	sth	r3,8(r2)
   18de4:	e0bffb17 	ldw	r2,-20(fp)
   18de8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dec:	e0bffc17 	ldw	r2,-16(fp)
   18df0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   18df4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   18df8:	e037883a 	mov	sp,fp
   18dfc:	df000017 	ldw	fp,0(sp)
   18e00:	dec00104 	addi	sp,sp,4
   18e04:	f800283a 	ret

00018e08 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   18e08:	defff904 	addi	sp,sp,-28
   18e0c:	dfc00615 	stw	ra,24(sp)
   18e10:	df000515 	stw	fp,20(sp)
   18e14:	df000504 	addi	fp,sp,20
   18e18:	2005883a 	mov	r2,r4
   18e1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18e20:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18e24:	d0a8da83 	ldbu	r2,-23702(gp)
   18e28:	10803fcc 	andi	r2,r2,255
   18e2c:	10000226 	beq	r2,zero,18e38 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   18e30:	0005883a 	mov	r2,zero
   18e34:	00002506 	br	18ecc <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e38:	0005303a 	rdctl	r2,status
   18e3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e40:	e0fffe17 	ldw	r3,-8(fp)
   18e44:	00bfff84 	movi	r2,-2
   18e48:	1884703a 	and	r2,r3,r2
   18e4c:	1001703a 	wrctl	status,r2
  
  return context;
   18e50:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18e54:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   18e58:	d0a8d997 	ldw	r2,-23706(gp)
   18e5c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   18e60:	d0a8d997 	ldw	r2,-23706(gp)
   18e64:	10000326 	beq	r2,zero,18e74 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18e68:	d0a8d997 	ldw	r2,-23706(gp)
   18e6c:	10800117 	ldw	r2,4(r2)
   18e70:	d0a8d995 	stw	r2,-23706(gp)
   18e74:	e0bffb17 	ldw	r2,-20(fp)
   18e78:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e7c:	e0bffc17 	ldw	r2,-16(fp)
   18e80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   18e84:	e0bffd17 	ldw	r2,-12(fp)
   18e88:	10000f26 	beq	r2,zero,18ec8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   18e8c:	e0bffd17 	ldw	r2,-12(fp)
   18e90:	00c000c4 	movi	r3,3
   18e94:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   18e98:	e0bffd17 	ldw	r2,-12(fp)
   18e9c:	e0ffff0b 	ldhu	r3,-4(fp)
   18ea0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   18ea4:	e0bffd17 	ldw	r2,-12(fp)
   18ea8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   18eac:	e0bffd17 	ldw	r2,-12(fp)
   18eb0:	00c00fc4 	movi	r3,63
   18eb4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   18eb8:	e0bffd17 	ldw	r2,-12(fp)
   18ebc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18ec0:	e13ffd17 	ldw	r4,-12(fp)
   18ec4:	00146140 	call	14614 <OS_EventWaitListInit>
    }
    return (pevent);
   18ec8:	e0bffd17 	ldw	r2,-12(fp)
}
   18ecc:	e037883a 	mov	sp,fp
   18ed0:	dfc00117 	ldw	ra,4(sp)
   18ed4:	df000017 	ldw	fp,0(sp)
   18ed8:	dec00204 	addi	sp,sp,8
   18edc:	f800283a 	ret

00018ee0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18ee0:	defff304 	addi	sp,sp,-52
   18ee4:	dfc00c15 	stw	ra,48(sp)
   18ee8:	df000b15 	stw	fp,44(sp)
   18eec:	df000b04 	addi	fp,sp,44
   18ef0:	e13ffd15 	stw	r4,-12(fp)
   18ef4:	2805883a 	mov	r2,r5
   18ef8:	e1bfff15 	stw	r6,-4(fp)
   18efc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18f00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18f04:	e0bfff17 	ldw	r2,-4(fp)
   18f08:	1000021e 	bne	r2,zero,18f14 <OSSemDel+0x34>
        return (pevent);
   18f0c:	e0bffd17 	ldw	r2,-12(fp)
   18f10:	00007e06 	br	1910c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18f14:	e0bffd17 	ldw	r2,-12(fp)
   18f18:	1000051e 	bne	r2,zero,18f30 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18f1c:	e0bfff17 	ldw	r2,-4(fp)
   18f20:	00c00104 	movi	r3,4
   18f24:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18f28:	e0bffd17 	ldw	r2,-12(fp)
   18f2c:	00007706 	br	1910c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18f30:	e0bffd17 	ldw	r2,-12(fp)
   18f34:	10800003 	ldbu	r2,0(r2)
   18f38:	10803fcc 	andi	r2,r2,255
   18f3c:	108000e0 	cmpeqi	r2,r2,3
   18f40:	1000051e 	bne	r2,zero,18f58 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18f44:	e0bfff17 	ldw	r2,-4(fp)
   18f48:	00c00044 	movi	r3,1
   18f4c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18f50:	e0bffd17 	ldw	r2,-12(fp)
   18f54:	00006d06 	br	1910c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18f58:	d0a8da83 	ldbu	r2,-23702(gp)
   18f5c:	10803fcc 	andi	r2,r2,255
   18f60:	10000526 	beq	r2,zero,18f78 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   18f64:	e0bfff17 	ldw	r2,-4(fp)
   18f68:	00c003c4 	movi	r3,15
   18f6c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18f70:	e0bffd17 	ldw	r2,-12(fp)
   18f74:	00006506 	br	1910c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f78:	0005303a 	rdctl	r2,status
   18f7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f80:	e0fffc17 	ldw	r3,-16(fp)
   18f84:	00bfff84 	movi	r2,-2
   18f88:	1884703a 	and	r2,r3,r2
   18f8c:	1001703a 	wrctl	status,r2
  
  return context;
   18f90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18f94:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   18f98:	e0bffd17 	ldw	r2,-12(fp)
   18f9c:	10800283 	ldbu	r2,10(r2)
   18fa0:	10803fcc 	andi	r2,r2,255
   18fa4:	10000326 	beq	r2,zero,18fb4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18fa8:	00800044 	movi	r2,1
   18fac:	e0bff505 	stb	r2,-44(fp)
   18fb0:	00000106 	br	18fb8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18fb4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   18fb8:	e0bffe03 	ldbu	r2,-8(fp)
   18fbc:	10000326 	beq	r2,zero,18fcc <OSSemDel+0xec>
   18fc0:	10800060 	cmpeqi	r2,r2,1
   18fc4:	1000281e 	bne	r2,zero,19068 <OSSemDel+0x188>
   18fc8:	00004506 	br	190e0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18fcc:	e0bff503 	ldbu	r2,-44(fp)
   18fd0:	1000161e 	bne	r2,zero,1902c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18fd4:	e0bffd17 	ldw	r2,-12(fp)
   18fd8:	00c00fc4 	movi	r3,63
   18fdc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18fe0:	e0bffd17 	ldw	r2,-12(fp)
   18fe4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18fe8:	e0bffd17 	ldw	r2,-12(fp)
   18fec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18ff0:	d0e8d997 	ldw	r3,-23706(gp)
   18ff4:	e0bffd17 	ldw	r2,-12(fp)
   18ff8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18ffc:	e0bffd17 	ldw	r2,-12(fp)
   19000:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19004:	e0bffd17 	ldw	r2,-12(fp)
   19008:	d0a8d995 	stw	r2,-23706(gp)
   1900c:	e0bff717 	ldw	r2,-36(fp)
   19010:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19014:	e0bff817 	ldw	r2,-32(fp)
   19018:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1901c:	e0bfff17 	ldw	r2,-4(fp)
   19020:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   19024:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19028:	00003706 	br	19108 <OSSemDel+0x228>
   1902c:	e0bff717 	ldw	r2,-36(fp)
   19030:	e0bff915 	stw	r2,-28(fp)
   19034:	e0bff917 	ldw	r2,-28(fp)
   19038:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1903c:	e0bfff17 	ldw	r2,-4(fp)
   19040:	00c01244 	movi	r3,73
   19044:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19048:	e0bffd17 	ldw	r2,-12(fp)
   1904c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   19050:	00002d06 	br	19108 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19054:	000f883a 	mov	r7,zero
   19058:	01800044 	movi	r6,1
   1905c:	000b883a 	mov	r5,zero
   19060:	e13ffd17 	ldw	r4,-12(fp)
   19064:	00140640 	call	14064 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   19068:	e0bffd17 	ldw	r2,-12(fp)
   1906c:	10800283 	ldbu	r2,10(r2)
   19070:	10803fcc 	andi	r2,r2,255
   19074:	103ff71e 	bne	r2,zero,19054 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19078:	e0bffd17 	ldw	r2,-12(fp)
   1907c:	00c00fc4 	movi	r3,63
   19080:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19084:	e0bffd17 	ldw	r2,-12(fp)
   19088:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1908c:	e0bffd17 	ldw	r2,-12(fp)
   19090:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19094:	d0e8d997 	ldw	r3,-23706(gp)
   19098:	e0bffd17 	ldw	r2,-12(fp)
   1909c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   190a0:	e0bffd17 	ldw	r2,-12(fp)
   190a4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   190a8:	e0bffd17 	ldw	r2,-12(fp)
   190ac:	d0a8d995 	stw	r2,-23706(gp)
   190b0:	e0bff717 	ldw	r2,-36(fp)
   190b4:	e0bffa15 	stw	r2,-24(fp)
   190b8:	e0bffa17 	ldw	r2,-24(fp)
   190bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   190c0:	e0bff503 	ldbu	r2,-44(fp)
   190c4:	10800058 	cmpnei	r2,r2,1
   190c8:	1000011e 	bne	r2,zero,190d0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   190cc:	0014ab00 	call	14ab0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   190d0:	e0bfff17 	ldw	r2,-4(fp)
   190d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   190d8:	e03ff615 	stw	zero,-40(fp)
             break;
   190dc:	00000a06 	br	19108 <OSSemDel+0x228>
   190e0:	e0bff717 	ldw	r2,-36(fp)
   190e4:	e0bffb15 	stw	r2,-20(fp)
   190e8:	e0bffb17 	ldw	r2,-20(fp)
   190ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   190f0:	e0bfff17 	ldw	r2,-4(fp)
   190f4:	00c001c4 	movi	r3,7
   190f8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   190fc:	e0bffd17 	ldw	r2,-12(fp)
   19100:	e0bff615 	stw	r2,-40(fp)
             break;
   19104:	0001883a 	nop
    }
    return (pevent_return);
   19108:	e0bff617 	ldw	r2,-40(fp)
}
   1910c:	e037883a 	mov	sp,fp
   19110:	dfc00117 	ldw	ra,4(sp)
   19114:	df000017 	ldw	fp,0(sp)
   19118:	dec00204 	addi	sp,sp,8
   1911c:	f800283a 	ret

00019120 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19120:	defff504 	addi	sp,sp,-44
   19124:	dfc00a15 	stw	ra,40(sp)
   19128:	df000915 	stw	fp,36(sp)
   1912c:	df000904 	addi	fp,sp,36
   19130:	e13ffd15 	stw	r4,-12(fp)
   19134:	2805883a 	mov	r2,r5
   19138:	e1bfff15 	stw	r6,-4(fp)
   1913c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19140:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19144:	e0bfff17 	ldw	r2,-4(fp)
   19148:	10007226 	beq	r2,zero,19314 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1914c:	e0bffd17 	ldw	r2,-12(fp)
   19150:	1000041e 	bne	r2,zero,19164 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19154:	e0bfff17 	ldw	r2,-4(fp)
   19158:	00c00104 	movi	r3,4
   1915c:	10c00005 	stb	r3,0(r2)
        return;
   19160:	00006d06 	br	19318 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19164:	e0bffd17 	ldw	r2,-12(fp)
   19168:	10800003 	ldbu	r2,0(r2)
   1916c:	10803fcc 	andi	r2,r2,255
   19170:	108000e0 	cmpeqi	r2,r2,3
   19174:	1000041e 	bne	r2,zero,19188 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   19178:	e0bfff17 	ldw	r2,-4(fp)
   1917c:	00c00044 	movi	r3,1
   19180:	10c00005 	stb	r3,0(r2)
        return;
   19184:	00006406 	br	19318 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   19188:	d0a8da83 	ldbu	r2,-23702(gp)
   1918c:	10803fcc 	andi	r2,r2,255
   19190:	10000426 	beq	r2,zero,191a4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19194:	e0bfff17 	ldw	r2,-4(fp)
   19198:	00c00084 	movi	r3,2
   1919c:	10c00005 	stb	r3,0(r2)
        return;
   191a0:	00005d06 	br	19318 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   191a4:	d0a8cc83 	ldbu	r2,-23758(gp)
   191a8:	10803fcc 	andi	r2,r2,255
   191ac:	10000426 	beq	r2,zero,191c0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   191b0:	e0bfff17 	ldw	r2,-4(fp)
   191b4:	00c00344 	movi	r3,13
   191b8:	10c00005 	stb	r3,0(r2)
        return;
   191bc:	00005606 	br	19318 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191c0:	0005303a 	rdctl	r2,status
   191c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191c8:	e0fffc17 	ldw	r3,-16(fp)
   191cc:	00bfff84 	movi	r2,-2
   191d0:	1884703a 	and	r2,r3,r2
   191d4:	1001703a 	wrctl	status,r2
  
  return context;
   191d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   191dc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   191e0:	e0bffd17 	ldw	r2,-12(fp)
   191e4:	1080020b 	ldhu	r2,8(r2)
   191e8:	10bfffcc 	andi	r2,r2,65535
   191ec:	10000d26 	beq	r2,zero,19224 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   191f0:	e0bffd17 	ldw	r2,-12(fp)
   191f4:	1080020b 	ldhu	r2,8(r2)
   191f8:	10bfffc4 	addi	r2,r2,-1
   191fc:	1007883a 	mov	r3,r2
   19200:	e0bffd17 	ldw	r2,-12(fp)
   19204:	10c0020d 	sth	r3,8(r2)
   19208:	e0bff717 	ldw	r2,-36(fp)
   1920c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19210:	e0bff817 	ldw	r2,-32(fp)
   19214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   19218:	e0bfff17 	ldw	r2,-4(fp)
   1921c:	10000005 	stb	zero,0(r2)
        return;
   19220:	00003d06 	br	19318 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   19224:	d0a8db97 	ldw	r2,-23698(gp)
   19228:	d0e8db97 	ldw	r3,-23698(gp)
   1922c:	18c00c03 	ldbu	r3,48(r3)
   19230:	18c00054 	ori	r3,r3,1
   19234:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19238:	d0a8db97 	ldw	r2,-23698(gp)
   1923c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19240:	d0a8db97 	ldw	r2,-23698(gp)
   19244:	e0fffe0b 	ldhu	r3,-8(fp)
   19248:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1924c:	e13ffd17 	ldw	r4,-12(fp)
   19250:	00141fc0 	call	141fc <OS_EventTaskWait>
   19254:	e0bff717 	ldw	r2,-36(fp)
   19258:	e0bffb15 	stw	r2,-20(fp)
   1925c:	e0bffb17 	ldw	r2,-20(fp)
   19260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   19264:	0014ab00 	call	14ab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19268:	0005303a 	rdctl	r2,status
   1926c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19270:	e0fff917 	ldw	r3,-28(fp)
   19274:	00bfff84 	movi	r2,-2
   19278:	1884703a 	and	r2,r3,r2
   1927c:	1001703a 	wrctl	status,r2
  
  return context;
   19280:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   19284:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19288:	d0a8db97 	ldw	r2,-23698(gp)
   1928c:	10800c43 	ldbu	r2,49(r2)
   19290:	10803fcc 	andi	r2,r2,255
   19294:	10000326 	beq	r2,zero,192a4 <OSSemPend+0x184>
   19298:	108000a0 	cmpeqi	r2,r2,2
   1929c:	1000041e 	bne	r2,zero,192b0 <OSSemPend+0x190>
   192a0:	00000706 	br	192c0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   192a4:	e0bfff17 	ldw	r2,-4(fp)
   192a8:	10000005 	stb	zero,0(r2)
             break;
   192ac:	00000c06 	br	192e0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   192b0:	e0bfff17 	ldw	r2,-4(fp)
   192b4:	00c00384 	movi	r3,14
   192b8:	10c00005 	stb	r3,0(r2)
             break;
   192bc:	00000806 	br	192e0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   192c0:	d0a8db97 	ldw	r2,-23698(gp)
   192c4:	e17ffd17 	ldw	r5,-12(fp)
   192c8:	1009883a 	mov	r4,r2
   192cc:	001445c0 	call	1445c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   192d0:	e0bfff17 	ldw	r2,-4(fp)
   192d4:	00c00284 	movi	r3,10
   192d8:	10c00005 	stb	r3,0(r2)
             break;
   192dc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   192e0:	d0a8db97 	ldw	r2,-23698(gp)
   192e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   192e8:	d0a8db97 	ldw	r2,-23698(gp)
   192ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   192f0:	d0a8db97 	ldw	r2,-23698(gp)
   192f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   192f8:	d0a8db97 	ldw	r2,-23698(gp)
   192fc:	10000815 	stw	zero,32(r2)
   19300:	e0bff717 	ldw	r2,-36(fp)
   19304:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19308:	e0bffa17 	ldw	r2,-24(fp)
   1930c:	1001703a 	wrctl	status,r2
   19310:	00000106 	br	19318 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   19314:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   19318:	e037883a 	mov	sp,fp
   1931c:	dfc00117 	ldw	ra,4(sp)
   19320:	df000017 	ldw	fp,0(sp)
   19324:	dec00204 	addi	sp,sp,8
   19328:	f800283a 	ret

0001932c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1932c:	defff604 	addi	sp,sp,-40
   19330:	dfc00915 	stw	ra,36(sp)
   19334:	df000815 	stw	fp,32(sp)
   19338:	df000804 	addi	fp,sp,32
   1933c:	e13ffd15 	stw	r4,-12(fp)
   19340:	2805883a 	mov	r2,r5
   19344:	e1bfff15 	stw	r6,-4(fp)
   19348:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1934c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19350:	e0bfff17 	ldw	r2,-4(fp)
   19354:	1000021e 	bne	r2,zero,19360 <OSSemPendAbort+0x34>
        return (0);
   19358:	0005883a 	mov	r2,zero
   1935c:	00004906 	br	19484 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19360:	e0bffd17 	ldw	r2,-12(fp)
   19364:	1000051e 	bne	r2,zero,1937c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19368:	e0bfff17 	ldw	r2,-4(fp)
   1936c:	00c00104 	movi	r3,4
   19370:	10c00005 	stb	r3,0(r2)
        return (0);
   19374:	0005883a 	mov	r2,zero
   19378:	00004206 	br	19484 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1937c:	e0bffd17 	ldw	r2,-12(fp)
   19380:	10800003 	ldbu	r2,0(r2)
   19384:	10803fcc 	andi	r2,r2,255
   19388:	108000e0 	cmpeqi	r2,r2,3
   1938c:	1000051e 	bne	r2,zero,193a4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19390:	e0bfff17 	ldw	r2,-4(fp)
   19394:	00c00044 	movi	r3,1
   19398:	10c00005 	stb	r3,0(r2)
        return (0);
   1939c:	0005883a 	mov	r2,zero
   193a0:	00003806 	br	19484 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193a4:	0005303a 	rdctl	r2,status
   193a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193ac:	e0fffc17 	ldw	r3,-16(fp)
   193b0:	00bfff84 	movi	r2,-2
   193b4:	1884703a 	and	r2,r3,r2
   193b8:	1001703a 	wrctl	status,r2
  
  return context;
   193bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   193c0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   193c4:	e0bffd17 	ldw	r2,-12(fp)
   193c8:	10800283 	ldbu	r2,10(r2)
   193cc:	10803fcc 	andi	r2,r2,255
   193d0:	10002526 	beq	r2,zero,19468 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   193d4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   193d8:	e0bffe03 	ldbu	r2,-8(fp)
   193dc:	10800060 	cmpeqi	r2,r2,1
   193e0:	10000e26 	beq	r2,zero,1941c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   193e4:	00000806 	br	19408 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   193e8:	01c00084 	movi	r7,2
   193ec:	01800044 	movi	r6,1
   193f0:	000b883a 	mov	r5,zero
   193f4:	e13ffd17 	ldw	r4,-12(fp)
   193f8:	00140640 	call	14064 <OS_EventTaskRdy>
                     nbr_tasks++;
   193fc:	e0bff803 	ldbu	r2,-32(fp)
   19400:	10800044 	addi	r2,r2,1
   19404:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19408:	e0bffd17 	ldw	r2,-12(fp)
   1940c:	10800283 	ldbu	r2,10(r2)
   19410:	10803fcc 	andi	r2,r2,255
   19414:	103ff41e 	bne	r2,zero,193e8 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19418:	00000906 	br	19440 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1941c:	01c00084 	movi	r7,2
   19420:	01800044 	movi	r6,1
   19424:	000b883a 	mov	r5,zero
   19428:	e13ffd17 	ldw	r4,-12(fp)
   1942c:	00140640 	call	14064 <OS_EventTaskRdy>
                 nbr_tasks++;
   19430:	e0bff803 	ldbu	r2,-32(fp)
   19434:	10800044 	addi	r2,r2,1
   19438:	e0bff805 	stb	r2,-32(fp)
                 break;
   1943c:	0001883a 	nop
   19440:	e0bff917 	ldw	r2,-28(fp)
   19444:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19448:	e0bffa17 	ldw	r2,-24(fp)
   1944c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19450:	0014ab00 	call	14ab0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19454:	e0bfff17 	ldw	r2,-4(fp)
   19458:	00c00384 	movi	r3,14
   1945c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19460:	e0bff803 	ldbu	r2,-32(fp)
   19464:	00000706 	br	19484 <OSSemPendAbort+0x158>
   19468:	e0bff917 	ldw	r2,-28(fp)
   1946c:	e0bffb15 	stw	r2,-20(fp)
   19470:	e0bffb17 	ldw	r2,-20(fp)
   19474:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19478:	e0bfff17 	ldw	r2,-4(fp)
   1947c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   19480:	0005883a 	mov	r2,zero
}
   19484:	e037883a 	mov	sp,fp
   19488:	dfc00117 	ldw	ra,4(sp)
   1948c:	df000017 	ldw	fp,0(sp)
   19490:	dec00204 	addi	sp,sp,8
   19494:	f800283a 	ret

00019498 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   19498:	defff804 	addi	sp,sp,-32
   1949c:	dfc00715 	stw	ra,28(sp)
   194a0:	df000615 	stw	fp,24(sp)
   194a4:	df000604 	addi	fp,sp,24
   194a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   194ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   194b0:	e0bfff17 	ldw	r2,-4(fp)
   194b4:	1000021e 	bne	r2,zero,194c0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   194b8:	00800104 	movi	r2,4
   194bc:	00003506 	br	19594 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   194c0:	e0bfff17 	ldw	r2,-4(fp)
   194c4:	10800003 	ldbu	r2,0(r2)
   194c8:	10803fcc 	andi	r2,r2,255
   194cc:	108000e0 	cmpeqi	r2,r2,3
   194d0:	1000021e 	bne	r2,zero,194dc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   194d4:	00800044 	movi	r2,1
   194d8:	00002e06 	br	19594 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   194dc:	0005303a 	rdctl	r2,status
   194e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   194e4:	e0fffe17 	ldw	r3,-8(fp)
   194e8:	00bfff84 	movi	r2,-2
   194ec:	1884703a 	and	r2,r3,r2
   194f0:	1001703a 	wrctl	status,r2
  
  return context;
   194f4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   194f8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   194fc:	e0bfff17 	ldw	r2,-4(fp)
   19500:	10800283 	ldbu	r2,10(r2)
   19504:	10803fcc 	andi	r2,r2,255
   19508:	10000c26 	beq	r2,zero,1953c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1950c:	000f883a 	mov	r7,zero
   19510:	01800044 	movi	r6,1
   19514:	000b883a 	mov	r5,zero
   19518:	e13fff17 	ldw	r4,-4(fp)
   1951c:	00140640 	call	14064 <OS_EventTaskRdy>
   19520:	e0bffa17 	ldw	r2,-24(fp)
   19524:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19528:	e0bffb17 	ldw	r2,-20(fp)
   1952c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19530:	0014ab00 	call	14ab0 <OS_Sched>
        return (OS_ERR_NONE);
   19534:	0005883a 	mov	r2,zero
   19538:	00001606 	br	19594 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1953c:	e0bfff17 	ldw	r2,-4(fp)
   19540:	1080020b 	ldhu	r2,8(r2)
   19544:	10ffffcc 	andi	r3,r2,65535
   19548:	00bfffd4 	movui	r2,65535
   1954c:	18800c26 	beq	r3,r2,19580 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19550:	e0bfff17 	ldw	r2,-4(fp)
   19554:	1080020b 	ldhu	r2,8(r2)
   19558:	10800044 	addi	r2,r2,1
   1955c:	1007883a 	mov	r3,r2
   19560:	e0bfff17 	ldw	r2,-4(fp)
   19564:	10c0020d 	sth	r3,8(r2)
   19568:	e0bffa17 	ldw	r2,-24(fp)
   1956c:	e0bffc15 	stw	r2,-16(fp)
   19570:	e0bffc17 	ldw	r2,-16(fp)
   19574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   19578:	0005883a 	mov	r2,zero
   1957c:	00000506 	br	19594 <OSSemPost+0xfc>
   19580:	e0bffa17 	ldw	r2,-24(fp)
   19584:	e0bffd15 	stw	r2,-12(fp)
   19588:	e0bffd17 	ldw	r2,-12(fp)
   1958c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   19590:	00800c84 	movi	r2,50
}
   19594:	e037883a 	mov	sp,fp
   19598:	dfc00117 	ldw	ra,4(sp)
   1959c:	df000017 	ldw	fp,0(sp)
   195a0:	dec00204 	addi	sp,sp,8
   195a4:	f800283a 	ret

000195a8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   195a8:	defff704 	addi	sp,sp,-36
   195ac:	df000815 	stw	fp,32(sp)
   195b0:	df000804 	addi	fp,sp,32
   195b4:	e13ffe15 	stw	r4,-8(fp)
   195b8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   195bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   195c0:	e0bffe17 	ldw	r2,-8(fp)
   195c4:	1000021e 	bne	r2,zero,195d0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   195c8:	00800104 	movi	r2,4
   195cc:	00003606 	br	196a8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   195d0:	e0bfff17 	ldw	r2,-4(fp)
   195d4:	1000021e 	bne	r2,zero,195e0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   195d8:	00800244 	movi	r2,9
   195dc:	00003206 	br	196a8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   195e0:	e0bffe17 	ldw	r2,-8(fp)
   195e4:	10800003 	ldbu	r2,0(r2)
   195e8:	10803fcc 	andi	r2,r2,255
   195ec:	108000e0 	cmpeqi	r2,r2,3
   195f0:	1000021e 	bne	r2,zero,195fc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   195f4:	00800044 	movi	r2,1
   195f8:	00002b06 	br	196a8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195fc:	0005303a 	rdctl	r2,status
   19600:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19604:	e0fffd17 	ldw	r3,-12(fp)
   19608:	00bfff84 	movi	r2,-2
   1960c:	1884703a 	and	r2,r3,r2
   19610:	1001703a 	wrctl	status,r2
  
  return context;
   19614:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19618:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1961c:	e0bffe17 	ldw	r2,-8(fp)
   19620:	10c00283 	ldbu	r3,10(r2)
   19624:	e0bfff17 	ldw	r2,-4(fp)
   19628:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1962c:	e0bffe17 	ldw	r2,-8(fp)
   19630:	108002c4 	addi	r2,r2,11
   19634:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   19638:	e0bfff17 	ldw	r2,-4(fp)
   1963c:	10800084 	addi	r2,r2,2
   19640:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19644:	e03ffa05 	stb	zero,-24(fp)
   19648:	00000b06 	br	19678 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1964c:	e0bff917 	ldw	r2,-28(fp)
   19650:	10c00044 	addi	r3,r2,1
   19654:	e0fff915 	stw	r3,-28(fp)
   19658:	e0fff817 	ldw	r3,-32(fp)
   1965c:	19000044 	addi	r4,r3,1
   19660:	e13ff815 	stw	r4,-32(fp)
   19664:	18c00003 	ldbu	r3,0(r3)
   19668:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1966c:	e0bffa03 	ldbu	r2,-24(fp)
   19670:	10800044 	addi	r2,r2,1
   19674:	e0bffa05 	stb	r2,-24(fp)
   19678:	e0bffa03 	ldbu	r2,-24(fp)
   1967c:	108000f0 	cmpltui	r2,r2,3
   19680:	103ff21e 	bne	r2,zero,1964c <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   19684:	e0bffe17 	ldw	r2,-8(fp)
   19688:	10c0020b 	ldhu	r3,8(r2)
   1968c:	e0bfff17 	ldw	r2,-4(fp)
   19690:	10c0000d 	sth	r3,0(r2)
   19694:	e0bffb17 	ldw	r2,-20(fp)
   19698:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1969c:	e0bffc17 	ldw	r2,-16(fp)
   196a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   196a4:	0005883a 	mov	r2,zero
}
   196a8:	e037883a 	mov	sp,fp
   196ac:	df000017 	ldw	fp,0(sp)
   196b0:	dec00104 	addi	sp,sp,4
   196b4:	f800283a 	ret

000196b8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   196b8:	defff904 	addi	sp,sp,-28
   196bc:	df000615 	stw	fp,24(sp)
   196c0:	df000604 	addi	fp,sp,24
   196c4:	e13ffd15 	stw	r4,-12(fp)
   196c8:	2805883a 	mov	r2,r5
   196cc:	e1bfff15 	stw	r6,-4(fp)
   196d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   196d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   196d8:	e0bfff17 	ldw	r2,-4(fp)
   196dc:	10003126 	beq	r2,zero,197a4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   196e0:	e0bffd17 	ldw	r2,-12(fp)
   196e4:	1000041e 	bne	r2,zero,196f8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   196e8:	e0bfff17 	ldw	r2,-4(fp)
   196ec:	00c00104 	movi	r3,4
   196f0:	10c00005 	stb	r3,0(r2)
        return;
   196f4:	00002c06 	br	197a8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   196f8:	e0bffd17 	ldw	r2,-12(fp)
   196fc:	10800003 	ldbu	r2,0(r2)
   19700:	10803fcc 	andi	r2,r2,255
   19704:	108000e0 	cmpeqi	r2,r2,3
   19708:	1000041e 	bne	r2,zero,1971c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   1970c:	e0bfff17 	ldw	r2,-4(fp)
   19710:	00c00044 	movi	r3,1
   19714:	10c00005 	stb	r3,0(r2)
        return;
   19718:	00002306 	br	197a8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1971c:	0005303a 	rdctl	r2,status
   19720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19724:	e0fffc17 	ldw	r3,-16(fp)
   19728:	00bfff84 	movi	r2,-2
   1972c:	1884703a 	and	r2,r3,r2
   19730:	1001703a 	wrctl	status,r2
  
  return context;
   19734:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19738:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1973c:	e0bfff17 	ldw	r2,-4(fp)
   19740:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   19744:	e0bffd17 	ldw	r2,-12(fp)
   19748:	1080020b 	ldhu	r2,8(r2)
   1974c:	10bfffcc 	andi	r2,r2,65535
   19750:	10000426 	beq	r2,zero,19764 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   19754:	e0bffd17 	ldw	r2,-12(fp)
   19758:	e0fffe0b 	ldhu	r3,-8(fp)
   1975c:	10c0020d 	sth	r3,8(r2)
   19760:	00000b06 	br	19790 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   19764:	e0bffd17 	ldw	r2,-12(fp)
   19768:	10800283 	ldbu	r2,10(r2)
   1976c:	10803fcc 	andi	r2,r2,255
   19770:	1000041e 	bne	r2,zero,19784 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   19774:	e0bffd17 	ldw	r2,-12(fp)
   19778:	e0fffe0b 	ldhu	r3,-8(fp)
   1977c:	10c0020d 	sth	r3,8(r2)
   19780:	00000306 	br	19790 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   19784:	e0bfff17 	ldw	r2,-4(fp)
   19788:	00c01244 	movi	r3,73
   1978c:	10c00005 	stb	r3,0(r2)
   19790:	e0bffa17 	ldw	r2,-24(fp)
   19794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19798:	e0bffb17 	ldw	r2,-20(fp)
   1979c:	1001703a 	wrctl	status,r2
   197a0:	00000106 	br	197a8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   197a4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   197a8:	e037883a 	mov	sp,fp
   197ac:	df000017 	ldw	fp,0(sp)
   197b0:	dec00104 	addi	sp,sp,4
   197b4:	f800283a 	ret

000197b8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   197b8:	defff104 	addi	sp,sp,-60
   197bc:	dfc00e15 	stw	ra,56(sp)
   197c0:	df000d15 	stw	fp,52(sp)
   197c4:	df000d04 	addi	fp,sp,52
   197c8:	2007883a 	mov	r3,r4
   197cc:	2805883a 	mov	r2,r5
   197d0:	e0fffe05 	stb	r3,-8(fp)
   197d4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   197d8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   197dc:	e0bffe03 	ldbu	r2,-8(fp)
   197e0:	10800530 	cmpltui	r2,r2,20
   197e4:	1000051e 	bne	r2,zero,197fc <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   197e8:	e0bffe03 	ldbu	r2,-8(fp)
   197ec:	10803fe0 	cmpeqi	r2,r2,255
   197f0:	1000021e 	bne	r2,zero,197fc <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   197f4:	00800a84 	movi	r2,42
   197f8:	00012606 	br	19c94 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   197fc:	e0bfff03 	ldbu	r2,-4(fp)
   19800:	10800530 	cmpltui	r2,r2,20
   19804:	1000021e 	bne	r2,zero,19810 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   19808:	00800a84 	movi	r2,42
   1980c:	00012106 	br	19c94 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19810:	0005303a 	rdctl	r2,status
   19814:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19818:	e0fffd17 	ldw	r3,-12(fp)
   1981c:	00bfff84 	movi	r2,-2
   19820:	1884703a 	and	r2,r3,r2
   19824:	1001703a 	wrctl	status,r2
  
  return context;
   19828:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1982c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   19830:	e0ffff03 	ldbu	r3,-4(fp)
   19834:	00800274 	movhi	r2,9
   19838:	109fb704 	addi	r2,r2,32476
   1983c:	18c7883a 	add	r3,r3,r3
   19840:	18c7883a 	add	r3,r3,r3
   19844:	10c5883a 	add	r2,r2,r3
   19848:	10800017 	ldw	r2,0(r2)
   1984c:	10000626 	beq	r2,zero,19868 <OSTaskChangePrio+0xb0>
   19850:	e0bff517 	ldw	r2,-44(fp)
   19854:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19858:	e0bff617 	ldw	r2,-40(fp)
   1985c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   19860:	00800a04 	movi	r2,40
   19864:	00010b06 	br	19c94 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   19868:	e0bffe03 	ldbu	r2,-8(fp)
   1986c:	10803fd8 	cmpnei	r2,r2,255
   19870:	1000031e 	bne	r2,zero,19880 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   19874:	d0a8db97 	ldw	r2,-23698(gp)
   19878:	10800c83 	ldbu	r2,50(r2)
   1987c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   19880:	e0fffe03 	ldbu	r3,-8(fp)
   19884:	00800274 	movhi	r2,9
   19888:	109fb704 	addi	r2,r2,32476
   1988c:	18c7883a 	add	r3,r3,r3
   19890:	18c7883a 	add	r3,r3,r3
   19894:	10c5883a 	add	r2,r2,r3
   19898:	10800017 	ldw	r2,0(r2)
   1989c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   198a0:	e0bff817 	ldw	r2,-32(fp)
   198a4:	1000061e 	bne	r2,zero,198c0 <OSTaskChangePrio+0x108>
   198a8:	e0bff517 	ldw	r2,-44(fp)
   198ac:	e0bff715 	stw	r2,-36(fp)
   198b0:	e0bff717 	ldw	r2,-36(fp)
   198b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   198b8:	00800a44 	movi	r2,41
   198bc:	0000f506 	br	19c94 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   198c0:	e0bff817 	ldw	r2,-32(fp)
   198c4:	10800058 	cmpnei	r2,r2,1
   198c8:	1000061e 	bne	r2,zero,198e4 <OSTaskChangePrio+0x12c>
   198cc:	e0bff517 	ldw	r2,-44(fp)
   198d0:	e0bff915 	stw	r2,-28(fp)
   198d4:	e0bff917 	ldw	r2,-28(fp)
   198d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   198dc:	008010c4 	movi	r2,67
   198e0:	0000ec06 	br	19c94 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   198e4:	e0bfff03 	ldbu	r2,-4(fp)
   198e8:	1004d0fa 	srli	r2,r2,3
   198ec:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   198f0:	e0bfff03 	ldbu	r2,-4(fp)
   198f4:	108001cc 	andi	r2,r2,7
   198f8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   198fc:	e0bffb03 	ldbu	r2,-20(fp)
   19900:	00c00044 	movi	r3,1
   19904:	1884983a 	sll	r2,r3,r2
   19908:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1990c:	e0bffb43 	ldbu	r2,-19(fp)
   19910:	00c00044 	movi	r3,1
   19914:	1884983a 	sll	r2,r3,r2
   19918:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1991c:	e0fffe03 	ldbu	r3,-8(fp)
   19920:	00800274 	movhi	r2,9
   19924:	109fb704 	addi	r2,r2,32476
   19928:	18c7883a 	add	r3,r3,r3
   1992c:	18c7883a 	add	r3,r3,r3
   19930:	10c5883a 	add	r2,r2,r3
   19934:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   19938:	e0ffff03 	ldbu	r3,-4(fp)
   1993c:	00800274 	movhi	r2,9
   19940:	109fb704 	addi	r2,r2,32476
   19944:	18c7883a 	add	r3,r3,r3
   19948:	18c7883a 	add	r3,r3,r3
   1994c:	10c5883a 	add	r2,r2,r3
   19950:	e0fff817 	ldw	r3,-32(fp)
   19954:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   19958:	e0bff817 	ldw	r2,-32(fp)
   1995c:	10800d03 	ldbu	r2,52(r2)
   19960:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19964:	e0bff817 	ldw	r2,-32(fp)
   19968:	10800d83 	ldbu	r2,54(r2)
   1996c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19970:	e0bff817 	ldw	r2,-32(fp)
   19974:	10800d43 	ldbu	r2,53(r2)
   19978:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1997c:	e0fffc03 	ldbu	r3,-16(fp)
   19980:	d0a8d8c4 	addi	r2,gp,-23709
   19984:	1885883a 	add	r2,r3,r2
   19988:	10c00003 	ldbu	r3,0(r2)
   1998c:	e0bffc83 	ldbu	r2,-14(fp)
   19990:	1884703a 	and	r2,r3,r2
   19994:	10803fcc 	andi	r2,r2,255
   19998:	10002826 	beq	r2,zero,19a3c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   1999c:	e0fffc03 	ldbu	r3,-16(fp)
   199a0:	e13ffc03 	ldbu	r4,-16(fp)
   199a4:	d0a8d8c4 	addi	r2,gp,-23709
   199a8:	2085883a 	add	r2,r4,r2
   199ac:	10800003 	ldbu	r2,0(r2)
   199b0:	1009883a 	mov	r4,r2
   199b4:	e0bffc83 	ldbu	r2,-14(fp)
   199b8:	0084303a 	nor	r2,zero,r2
   199bc:	2084703a 	and	r2,r4,r2
   199c0:	1009883a 	mov	r4,r2
   199c4:	d0a8d8c4 	addi	r2,gp,-23709
   199c8:	1885883a 	add	r2,r3,r2
   199cc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   199d0:	e0fffc03 	ldbu	r3,-16(fp)
   199d4:	d0a8d8c4 	addi	r2,gp,-23709
   199d8:	1885883a 	add	r2,r3,r2
   199dc:	10800003 	ldbu	r2,0(r2)
   199e0:	10803fcc 	andi	r2,r2,255
   199e4:	1000061e 	bne	r2,zero,19a00 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   199e8:	e0bffc43 	ldbu	r2,-15(fp)
   199ec:	0084303a 	nor	r2,zero,r2
   199f0:	1007883a 	mov	r3,r2
   199f4:	d0a8d883 	ldbu	r2,-23710(gp)
   199f8:	1884703a 	and	r2,r3,r2
   199fc:	d0a8d885 	stb	r2,-23710(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   19a00:	d0e8d883 	ldbu	r3,-23710(gp)
   19a04:	e0bffb83 	ldbu	r2,-18(fp)
   19a08:	1884b03a 	or	r2,r3,r2
   19a0c:	d0a8d885 	stb	r2,-23710(gp)
         OSRdyTbl[y_new] |= bitx_new;
   19a10:	e0fffb03 	ldbu	r3,-20(fp)
   19a14:	e13ffb03 	ldbu	r4,-20(fp)
   19a18:	d0a8d8c4 	addi	r2,gp,-23709
   19a1c:	2085883a 	add	r2,r4,r2
   19a20:	11000003 	ldbu	r4,0(r2)
   19a24:	e0bffbc3 	ldbu	r2,-17(fp)
   19a28:	2084b03a 	or	r2,r4,r2
   19a2c:	1009883a 	mov	r4,r2
   19a30:	d0a8d8c4 	addi	r2,gp,-23709
   19a34:	1885883a 	add	r2,r3,r2
   19a38:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   19a3c:	e0bff817 	ldw	r2,-32(fp)
   19a40:	10800717 	ldw	r2,28(r2)
   19a44:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   19a48:	e0bff317 	ldw	r2,-52(fp)
   19a4c:	10003326 	beq	r2,zero,19b1c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19a50:	e0bffc03 	ldbu	r2,-16(fp)
   19a54:	e0fffc03 	ldbu	r3,-16(fp)
   19a58:	e13ff317 	ldw	r4,-52(fp)
   19a5c:	20c7883a 	add	r3,r4,r3
   19a60:	18c002c4 	addi	r3,r3,11
   19a64:	18c00003 	ldbu	r3,0(r3)
   19a68:	1809883a 	mov	r4,r3
   19a6c:	e0fffc83 	ldbu	r3,-14(fp)
   19a70:	00c6303a 	nor	r3,zero,r3
   19a74:	20c6703a 	and	r3,r4,r3
   19a78:	1809883a 	mov	r4,r3
   19a7c:	e0fff317 	ldw	r3,-52(fp)
   19a80:	1885883a 	add	r2,r3,r2
   19a84:	108002c4 	addi	r2,r2,11
   19a88:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19a8c:	e0bffc03 	ldbu	r2,-16(fp)
   19a90:	e0fff317 	ldw	r3,-52(fp)
   19a94:	1885883a 	add	r2,r3,r2
   19a98:	108002c4 	addi	r2,r2,11
   19a9c:	10800003 	ldbu	r2,0(r2)
   19aa0:	10803fcc 	andi	r2,r2,255
   19aa4:	1000091e 	bne	r2,zero,19acc <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   19aa8:	e0bff317 	ldw	r2,-52(fp)
   19aac:	10800283 	ldbu	r2,10(r2)
   19ab0:	1007883a 	mov	r3,r2
   19ab4:	e0bffc43 	ldbu	r2,-15(fp)
   19ab8:	0084303a 	nor	r2,zero,r2
   19abc:	1884703a 	and	r2,r3,r2
   19ac0:	1007883a 	mov	r3,r2
   19ac4:	e0bff317 	ldw	r2,-52(fp)
   19ac8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   19acc:	e0bff317 	ldw	r2,-52(fp)
   19ad0:	10c00283 	ldbu	r3,10(r2)
   19ad4:	e0bffb83 	ldbu	r2,-18(fp)
   19ad8:	1884b03a 	or	r2,r3,r2
   19adc:	1007883a 	mov	r3,r2
   19ae0:	e0bff317 	ldw	r2,-52(fp)
   19ae4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   19ae8:	e0bffb03 	ldbu	r2,-20(fp)
   19aec:	e0fffb03 	ldbu	r3,-20(fp)
   19af0:	e13ff317 	ldw	r4,-52(fp)
   19af4:	20c7883a 	add	r3,r4,r3
   19af8:	18c002c4 	addi	r3,r3,11
   19afc:	19000003 	ldbu	r4,0(r3)
   19b00:	e0fffbc3 	ldbu	r3,-17(fp)
   19b04:	20c6b03a 	or	r3,r4,r3
   19b08:	1809883a 	mov	r4,r3
   19b0c:	e0fff317 	ldw	r3,-52(fp)
   19b10:	1885883a 	add	r2,r3,r2
   19b14:	108002c4 	addi	r2,r2,11
   19b18:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   19b1c:	e0bff817 	ldw	r2,-32(fp)
   19b20:	10800817 	ldw	r2,32(r2)
   19b24:	10004226 	beq	r2,zero,19c30 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   19b28:	e0bff817 	ldw	r2,-32(fp)
   19b2c:	10800817 	ldw	r2,32(r2)
   19b30:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   19b34:	e0bff417 	ldw	r2,-48(fp)
   19b38:	10800017 	ldw	r2,0(r2)
   19b3c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   19b40:	00003906 	br	19c28 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   19b44:	e0bffc03 	ldbu	r2,-16(fp)
   19b48:	e0fffc03 	ldbu	r3,-16(fp)
   19b4c:	e13ff317 	ldw	r4,-52(fp)
   19b50:	20c7883a 	add	r3,r4,r3
   19b54:	18c002c4 	addi	r3,r3,11
   19b58:	18c00003 	ldbu	r3,0(r3)
   19b5c:	1809883a 	mov	r4,r3
   19b60:	e0fffc83 	ldbu	r3,-14(fp)
   19b64:	00c6303a 	nor	r3,zero,r3
   19b68:	20c6703a 	and	r3,r4,r3
   19b6c:	1809883a 	mov	r4,r3
   19b70:	e0fff317 	ldw	r3,-52(fp)
   19b74:	1885883a 	add	r2,r3,r2
   19b78:	108002c4 	addi	r2,r2,11
   19b7c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   19b80:	e0bffc03 	ldbu	r2,-16(fp)
   19b84:	e0fff317 	ldw	r3,-52(fp)
   19b88:	1885883a 	add	r2,r3,r2
   19b8c:	108002c4 	addi	r2,r2,11
   19b90:	10800003 	ldbu	r2,0(r2)
   19b94:	10803fcc 	andi	r2,r2,255
   19b98:	1000091e 	bne	r2,zero,19bc0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   19b9c:	e0bff317 	ldw	r2,-52(fp)
   19ba0:	10800283 	ldbu	r2,10(r2)
   19ba4:	1007883a 	mov	r3,r2
   19ba8:	e0bffc43 	ldbu	r2,-15(fp)
   19bac:	0084303a 	nor	r2,zero,r2
   19bb0:	1884703a 	and	r2,r3,r2
   19bb4:	1007883a 	mov	r3,r2
   19bb8:	e0bff317 	ldw	r2,-52(fp)
   19bbc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19bc0:	e0bff317 	ldw	r2,-52(fp)
   19bc4:	10c00283 	ldbu	r3,10(r2)
   19bc8:	e0bffb83 	ldbu	r2,-18(fp)
   19bcc:	1884b03a 	or	r2,r3,r2
   19bd0:	1007883a 	mov	r3,r2
   19bd4:	e0bff317 	ldw	r2,-52(fp)
   19bd8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19bdc:	e0bffb03 	ldbu	r2,-20(fp)
   19be0:	e0fffb03 	ldbu	r3,-20(fp)
   19be4:	e13ff317 	ldw	r4,-52(fp)
   19be8:	20c7883a 	add	r3,r4,r3
   19bec:	18c002c4 	addi	r3,r3,11
   19bf0:	19000003 	ldbu	r4,0(r3)
   19bf4:	e0fffbc3 	ldbu	r3,-17(fp)
   19bf8:	20c6b03a 	or	r3,r4,r3
   19bfc:	1809883a 	mov	r4,r3
   19c00:	e0fff317 	ldw	r3,-52(fp)
   19c04:	1885883a 	add	r2,r3,r2
   19c08:	108002c4 	addi	r2,r2,11
   19c0c:	11000005 	stb	r4,0(r2)
            pevents++;
   19c10:	e0bff417 	ldw	r2,-48(fp)
   19c14:	10800104 	addi	r2,r2,4
   19c18:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   19c1c:	e0bff417 	ldw	r2,-48(fp)
   19c20:	10800017 	ldw	r2,0(r2)
   19c24:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   19c28:	e0bff317 	ldw	r2,-52(fp)
   19c2c:	103fc51e 	bne	r2,zero,19b44 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19c30:	e0bff817 	ldw	r2,-32(fp)
   19c34:	e0ffff03 	ldbu	r3,-4(fp)
   19c38:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   19c3c:	e0bff817 	ldw	r2,-32(fp)
   19c40:	e0fffb03 	ldbu	r3,-20(fp)
   19c44:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   19c48:	e0bff817 	ldw	r2,-32(fp)
   19c4c:	e0fffb43 	ldbu	r3,-19(fp)
   19c50:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   19c54:	e0bff817 	ldw	r2,-32(fp)
   19c58:	e0fffb83 	ldbu	r3,-18(fp)
   19c5c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   19c60:	e0bff817 	ldw	r2,-32(fp)
   19c64:	e0fffbc3 	ldbu	r3,-17(fp)
   19c68:	10c00d45 	stb	r3,53(r2)
   19c6c:	e0bff517 	ldw	r2,-44(fp)
   19c70:	e0bffa15 	stw	r2,-24(fp)
   19c74:	e0bffa17 	ldw	r2,-24(fp)
   19c78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19c7c:	d0a8ccc3 	ldbu	r2,-23757(gp)
   19c80:	10803fcc 	andi	r2,r2,255
   19c84:	10800058 	cmpnei	r2,r2,1
   19c88:	1000011e 	bne	r2,zero,19c90 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   19c8c:	0014ab00 	call	14ab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19c90:	0005883a 	mov	r2,zero
}
   19c94:	e037883a 	mov	sp,fp
   19c98:	dfc00117 	ldw	ra,4(sp)
   19c9c:	df000017 	ldw	fp,0(sp)
   19ca0:	dec00204 	addi	sp,sp,8
   19ca4:	f800283a 	ret

00019ca8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   19ca8:	deffee04 	addi	sp,sp,-72
   19cac:	dfc01115 	stw	ra,68(sp)
   19cb0:	df001015 	stw	fp,64(sp)
   19cb4:	df001004 	addi	fp,sp,64
   19cb8:	e13ffc15 	stw	r4,-16(fp)
   19cbc:	e17ffd15 	stw	r5,-12(fp)
   19cc0:	e1bffe15 	stw	r6,-8(fp)
   19cc4:	3805883a 	mov	r2,r7
   19cc8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19ccc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19cd0:	e0bfff03 	ldbu	r2,-4(fp)
   19cd4:	10800570 	cmpltui	r2,r2,21
   19cd8:	1000021e 	bne	r2,zero,19ce4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   19cdc:	00800a84 	movi	r2,42
   19ce0:	00005706 	br	19e40 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ce4:	0005303a 	rdctl	r2,status
   19ce8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19cec:	e0fffb17 	ldw	r3,-20(fp)
   19cf0:	00bfff84 	movi	r2,-2
   19cf4:	1884703a 	and	r2,r3,r2
   19cf8:	1001703a 	wrctl	status,r2
  
  return context;
   19cfc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19d00:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19d04:	d0a8da83 	ldbu	r2,-23702(gp)
   19d08:	10803fcc 	andi	r2,r2,255
   19d0c:	10000626 	beq	r2,zero,19d28 <OSTaskCreate+0x80>
   19d10:	e0bff317 	ldw	r2,-52(fp)
   19d14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d18:	e0bff417 	ldw	r2,-48(fp)
   19d1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19d20:	00800f04 	movi	r2,60
   19d24:	00004606 	br	19e40 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19d28:	e0ffff03 	ldbu	r3,-4(fp)
   19d2c:	00800274 	movhi	r2,9
   19d30:	109fb704 	addi	r2,r2,32476
   19d34:	18c7883a 	add	r3,r3,r3
   19d38:	18c7883a 	add	r3,r3,r3
   19d3c:	10c5883a 	add	r2,r2,r3
   19d40:	10800017 	ldw	r2,0(r2)
   19d44:	1000391e 	bne	r2,zero,19e2c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19d48:	e0ffff03 	ldbu	r3,-4(fp)
   19d4c:	00800274 	movhi	r2,9
   19d50:	109fb704 	addi	r2,r2,32476
   19d54:	18c7883a 	add	r3,r3,r3
   19d58:	18c7883a 	add	r3,r3,r3
   19d5c:	10c5883a 	add	r2,r2,r3
   19d60:	00c00044 	movi	r3,1
   19d64:	10c00015 	stw	r3,0(r2)
   19d68:	e0bff317 	ldw	r2,-52(fp)
   19d6c:	e0bff515 	stw	r2,-44(fp)
   19d70:	e0bff517 	ldw	r2,-44(fp)
   19d74:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   19d78:	000f883a 	mov	r7,zero
   19d7c:	e1bffe17 	ldw	r6,-8(fp)
   19d80:	e17ffd17 	ldw	r5,-12(fp)
   19d84:	e13ffc17 	ldw	r4,-16(fp)
   19d88:	0023a6c0 	call	23a6c <OSTaskStkInit>
   19d8c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   19d90:	e0bfff03 	ldbu	r2,-4(fp)
   19d94:	d8000215 	stw	zero,8(sp)
   19d98:	d8000115 	stw	zero,4(sp)
   19d9c:	d8000015 	stw	zero,0(sp)
   19da0:	000f883a 	mov	r7,zero
   19da4:	000d883a 	mov	r6,zero
   19da8:	e17ff717 	ldw	r5,-36(fp)
   19dac:	1009883a 	mov	r4,r2
   19db0:	0014ec00 	call	14ec0 <OS_TCBInit>
   19db4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   19db8:	e0bff803 	ldbu	r2,-32(fp)
   19dbc:	1000061e 	bne	r2,zero,19dd8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19dc0:	d0a8ccc3 	ldbu	r2,-23757(gp)
   19dc4:	10803fcc 	andi	r2,r2,255
   19dc8:	10800058 	cmpnei	r2,r2,1
   19dcc:	1000151e 	bne	r2,zero,19e24 <OSTaskCreate+0x17c>
                OS_Sched();
   19dd0:	0014ab00 	call	14ab0 <OS_Sched>
   19dd4:	00001306 	br	19e24 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19dd8:	0005303a 	rdctl	r2,status
   19ddc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19de0:	e0fffa17 	ldw	r3,-24(fp)
   19de4:	00bfff84 	movi	r2,-2
   19de8:	1884703a 	and	r2,r3,r2
   19dec:	1001703a 	wrctl	status,r2
  
  return context;
   19df0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19df4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   19df8:	e0ffff03 	ldbu	r3,-4(fp)
   19dfc:	00800274 	movhi	r2,9
   19e00:	109fb704 	addi	r2,r2,32476
   19e04:	18c7883a 	add	r3,r3,r3
   19e08:	18c7883a 	add	r3,r3,r3
   19e0c:	10c5883a 	add	r2,r2,r3
   19e10:	10000015 	stw	zero,0(r2)
   19e14:	e0bff317 	ldw	r2,-52(fp)
   19e18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e1c:	e0bff617 	ldw	r2,-40(fp)
   19e20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   19e24:	e0bff803 	ldbu	r2,-32(fp)
   19e28:	00000506 	br	19e40 <OSTaskCreate+0x198>
   19e2c:	e0bff317 	ldw	r2,-52(fp)
   19e30:	e0bff915 	stw	r2,-28(fp)
   19e34:	e0bff917 	ldw	r2,-28(fp)
   19e38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19e3c:	00800a04 	movi	r2,40
}
   19e40:	e037883a 	mov	sp,fp
   19e44:	dfc00117 	ldw	ra,4(sp)
   19e48:	df000017 	ldw	fp,0(sp)
   19e4c:	dec00204 	addi	sp,sp,8
   19e50:	f800283a 	ret

00019e54 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   19e54:	deffec04 	addi	sp,sp,-80
   19e58:	dfc01315 	stw	ra,76(sp)
   19e5c:	df001215 	stw	fp,72(sp)
   19e60:	df001204 	addi	fp,sp,72
   19e64:	e13ffa15 	stw	r4,-24(fp)
   19e68:	e17ffb15 	stw	r5,-20(fp)
   19e6c:	e1bffc15 	stw	r6,-16(fp)
   19e70:	3809883a 	mov	r4,r7
   19e74:	e0c00217 	ldw	r3,8(fp)
   19e78:	e0800617 	ldw	r2,24(fp)
   19e7c:	e13ffd05 	stb	r4,-12(fp)
   19e80:	e0fffe0d 	sth	r3,-8(fp)
   19e84:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19e88:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19e8c:	e0bffd03 	ldbu	r2,-12(fp)
   19e90:	10800570 	cmpltui	r2,r2,21
   19e94:	1000021e 	bne	r2,zero,19ea0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   19e98:	00800a84 	movi	r2,42
   19e9c:	00006106 	br	1a024 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ea0:	0005303a 	rdctl	r2,status
   19ea4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ea8:	e0fff917 	ldw	r3,-28(fp)
   19eac:	00bfff84 	movi	r2,-2
   19eb0:	1884703a 	and	r2,r3,r2
   19eb4:	1001703a 	wrctl	status,r2
  
  return context;
   19eb8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19ebc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19ec0:	d0a8da83 	ldbu	r2,-23702(gp)
   19ec4:	10803fcc 	andi	r2,r2,255
   19ec8:	10000626 	beq	r2,zero,19ee4 <OSTaskCreateExt+0x90>
   19ecc:	e0bff117 	ldw	r2,-60(fp)
   19ed0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ed4:	e0bff217 	ldw	r2,-56(fp)
   19ed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19edc:	00800f04 	movi	r2,60
   19ee0:	00005006 	br	1a024 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19ee4:	e0fffd03 	ldbu	r3,-12(fp)
   19ee8:	00800274 	movhi	r2,9
   19eec:	109fb704 	addi	r2,r2,32476
   19ef0:	18c7883a 	add	r3,r3,r3
   19ef4:	18c7883a 	add	r3,r3,r3
   19ef8:	10c5883a 	add	r2,r2,r3
   19efc:	10800017 	ldw	r2,0(r2)
   19f00:	1000431e 	bne	r2,zero,1a010 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19f04:	e0fffd03 	ldbu	r3,-12(fp)
   19f08:	00800274 	movhi	r2,9
   19f0c:	109fb704 	addi	r2,r2,32476
   19f10:	18c7883a 	add	r3,r3,r3
   19f14:	18c7883a 	add	r3,r3,r3
   19f18:	10c5883a 	add	r2,r2,r3
   19f1c:	00c00044 	movi	r3,1
   19f20:	10c00015 	stw	r3,0(r2)
   19f24:	e0bff117 	ldw	r2,-60(fp)
   19f28:	e0bff315 	stw	r2,-52(fp)
   19f2c:	e0bff317 	ldw	r2,-52(fp)
   19f30:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   19f34:	e0bfff0b 	ldhu	r2,-4(fp)
   19f38:	100d883a 	mov	r6,r2
   19f3c:	e1400417 	ldw	r5,16(fp)
   19f40:	e1000317 	ldw	r4,12(fp)
   19f44:	001aeb40 	call	1aeb4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   19f48:	e0bfff0b 	ldhu	r2,-4(fp)
   19f4c:	100f883a 	mov	r7,r2
   19f50:	e1bffc17 	ldw	r6,-16(fp)
   19f54:	e17ffb17 	ldw	r5,-20(fp)
   19f58:	e13ffa17 	ldw	r4,-24(fp)
   19f5c:	0023a6c0 	call	23a6c <OSTaskStkInit>
   19f60:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   19f64:	e0fffd03 	ldbu	r3,-12(fp)
   19f68:	e13ffe0b 	ldhu	r4,-8(fp)
   19f6c:	e0bfff0b 	ldhu	r2,-4(fp)
   19f70:	d8800215 	stw	r2,8(sp)
   19f74:	e0800517 	ldw	r2,20(fp)
   19f78:	d8800115 	stw	r2,4(sp)
   19f7c:	e0800417 	ldw	r2,16(fp)
   19f80:	d8800015 	stw	r2,0(sp)
   19f84:	200f883a 	mov	r7,r4
   19f88:	e1800317 	ldw	r6,12(fp)
   19f8c:	e17ff517 	ldw	r5,-44(fp)
   19f90:	1809883a 	mov	r4,r3
   19f94:	0014ec00 	call	14ec0 <OS_TCBInit>
   19f98:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   19f9c:	e0bff603 	ldbu	r2,-40(fp)
   19fa0:	1000061e 	bne	r2,zero,19fbc <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   19fa4:	d0a8ccc3 	ldbu	r2,-23757(gp)
   19fa8:	10803fcc 	andi	r2,r2,255
   19fac:	10800058 	cmpnei	r2,r2,1
   19fb0:	1000151e 	bne	r2,zero,1a008 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   19fb4:	0014ab00 	call	14ab0 <OS_Sched>
   19fb8:	00001306 	br	1a008 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19fbc:	0005303a 	rdctl	r2,status
   19fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19fc4:	e0fff817 	ldw	r3,-32(fp)
   19fc8:	00bfff84 	movi	r2,-2
   19fcc:	1884703a 	and	r2,r3,r2
   19fd0:	1001703a 	wrctl	status,r2
  
  return context;
   19fd4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19fd8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19fdc:	e0fffd03 	ldbu	r3,-12(fp)
   19fe0:	00800274 	movhi	r2,9
   19fe4:	109fb704 	addi	r2,r2,32476
   19fe8:	18c7883a 	add	r3,r3,r3
   19fec:	18c7883a 	add	r3,r3,r3
   19ff0:	10c5883a 	add	r2,r2,r3
   19ff4:	10000015 	stw	zero,0(r2)
   19ff8:	e0bff117 	ldw	r2,-60(fp)
   19ffc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a000:	e0bff417 	ldw	r2,-48(fp)
   1a004:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a008:	e0bff603 	ldbu	r2,-40(fp)
   1a00c:	00000506 	br	1a024 <OSTaskCreateExt+0x1d0>
   1a010:	e0bff117 	ldw	r2,-60(fp)
   1a014:	e0bff715 	stw	r2,-36(fp)
   1a018:	e0bff717 	ldw	r2,-36(fp)
   1a01c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a020:	00800a04 	movi	r2,40
}
   1a024:	e037883a 	mov	sp,fp
   1a028:	dfc00117 	ldw	ra,4(sp)
   1a02c:	df000017 	ldw	fp,0(sp)
   1a030:	dec00204 	addi	sp,sp,8
   1a034:	f800283a 	ret

0001a038 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1a038:	defff404 	addi	sp,sp,-48
   1a03c:	dfc00b15 	stw	ra,44(sp)
   1a040:	df000a15 	stw	fp,40(sp)
   1a044:	df000a04 	addi	fp,sp,40
   1a048:	2005883a 	mov	r2,r4
   1a04c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1a050:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1a054:	d0a8da83 	ldbu	r2,-23702(gp)
   1a058:	10803fcc 	andi	r2,r2,255
   1a05c:	10000226 	beq	r2,zero,1a068 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   1a060:	00801004 	movi	r2,64
   1a064:	0000c006 	br	1a368 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1a068:	e0bfff03 	ldbu	r2,-4(fp)
   1a06c:	10800518 	cmpnei	r2,r2,20
   1a070:	1000021e 	bne	r2,zero,1a07c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   1a074:	00800f84 	movi	r2,62
   1a078:	0000bb06 	br	1a368 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1a07c:	e0bfff03 	ldbu	r2,-4(fp)
   1a080:	10800530 	cmpltui	r2,r2,20
   1a084:	1000051e 	bne	r2,zero,1a09c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1a088:	e0bfff03 	ldbu	r2,-4(fp)
   1a08c:	10803fe0 	cmpeqi	r2,r2,255
   1a090:	1000021e 	bne	r2,zero,1a09c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   1a094:	00800a84 	movi	r2,42
   1a098:	0000b306 	br	1a368 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a09c:	0005303a 	rdctl	r2,status
   1a0a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0a4:	e0fffe17 	ldw	r3,-8(fp)
   1a0a8:	00bfff84 	movi	r2,-2
   1a0ac:	1884703a 	and	r2,r3,r2
   1a0b0:	1001703a 	wrctl	status,r2
  
  return context;
   1a0b4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1a0b8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1a0bc:	e0bfff03 	ldbu	r2,-4(fp)
   1a0c0:	10803fd8 	cmpnei	r2,r2,255
   1a0c4:	1000031e 	bne	r2,zero,1a0d4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1a0c8:	d0a8db97 	ldw	r2,-23698(gp)
   1a0cc:	10800c83 	ldbu	r2,50(r2)
   1a0d0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a0d4:	e0ffff03 	ldbu	r3,-4(fp)
   1a0d8:	00800274 	movhi	r2,9
   1a0dc:	109fb704 	addi	r2,r2,32476
   1a0e0:	18c7883a 	add	r3,r3,r3
   1a0e4:	18c7883a 	add	r3,r3,r3
   1a0e8:	10c5883a 	add	r2,r2,r3
   1a0ec:	10800017 	ldw	r2,0(r2)
   1a0f0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1a0f4:	e0bff817 	ldw	r2,-32(fp)
   1a0f8:	1000061e 	bne	r2,zero,1a114 <OSTaskDel+0xdc>
   1a0fc:	e0bff617 	ldw	r2,-40(fp)
   1a100:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a104:	e0bff717 	ldw	r2,-36(fp)
   1a108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a10c:	008010c4 	movi	r2,67
   1a110:	00009506 	br	1a368 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1a114:	e0bff817 	ldw	r2,-32(fp)
   1a118:	10800058 	cmpnei	r2,r2,1
   1a11c:	1000061e 	bne	r2,zero,1a138 <OSTaskDel+0x100>
   1a120:	e0bff617 	ldw	r2,-40(fp)
   1a124:	e0bff915 	stw	r2,-28(fp)
   1a128:	e0bff917 	ldw	r2,-28(fp)
   1a12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a130:	00800f44 	movi	r2,61
   1a134:	00008c06 	br	1a368 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1a138:	e0bff817 	ldw	r2,-32(fp)
   1a13c:	10800d03 	ldbu	r2,52(r2)
   1a140:	10c03fcc 	andi	r3,r2,255
   1a144:	e0bff817 	ldw	r2,-32(fp)
   1a148:	10800d03 	ldbu	r2,52(r2)
   1a14c:	11003fcc 	andi	r4,r2,255
   1a150:	d0a8d8c4 	addi	r2,gp,-23709
   1a154:	2085883a 	add	r2,r4,r2
   1a158:	10800003 	ldbu	r2,0(r2)
   1a15c:	1009883a 	mov	r4,r2
   1a160:	e0bff817 	ldw	r2,-32(fp)
   1a164:	10800d43 	ldbu	r2,53(r2)
   1a168:	0084303a 	nor	r2,zero,r2
   1a16c:	2084703a 	and	r2,r4,r2
   1a170:	1009883a 	mov	r4,r2
   1a174:	d0a8d8c4 	addi	r2,gp,-23709
   1a178:	1885883a 	add	r2,r3,r2
   1a17c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1a180:	e0bff817 	ldw	r2,-32(fp)
   1a184:	10800d03 	ldbu	r2,52(r2)
   1a188:	10c03fcc 	andi	r3,r2,255
   1a18c:	d0a8d8c4 	addi	r2,gp,-23709
   1a190:	1885883a 	add	r2,r3,r2
   1a194:	10800003 	ldbu	r2,0(r2)
   1a198:	10803fcc 	andi	r2,r2,255
   1a19c:	1000071e 	bne	r2,zero,1a1bc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1a1a0:	e0bff817 	ldw	r2,-32(fp)
   1a1a4:	10800d83 	ldbu	r2,54(r2)
   1a1a8:	0084303a 	nor	r2,zero,r2
   1a1ac:	1007883a 	mov	r3,r2
   1a1b0:	d0a8d883 	ldbu	r2,-23710(gp)
   1a1b4:	1884703a 	and	r2,r3,r2
   1a1b8:	d0a8d885 	stb	r2,-23710(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1a1bc:	e0bff817 	ldw	r2,-32(fp)
   1a1c0:	10800717 	ldw	r2,28(r2)
   1a1c4:	10000526 	beq	r2,zero,1a1dc <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1a1c8:	e0bff817 	ldw	r2,-32(fp)
   1a1cc:	10800717 	ldw	r2,28(r2)
   1a1d0:	100b883a 	mov	r5,r2
   1a1d4:	e13ff817 	ldw	r4,-32(fp)
   1a1d8:	001445c0 	call	1445c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1a1dc:	e0bff817 	ldw	r2,-32(fp)
   1a1e0:	10800817 	ldw	r2,32(r2)
   1a1e4:	10000526 	beq	r2,zero,1a1fc <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1a1e8:	e0bff817 	ldw	r2,-32(fp)
   1a1ec:	10800817 	ldw	r2,32(r2)
   1a1f0:	100b883a 	mov	r5,r2
   1a1f4:	e13ff817 	ldw	r4,-32(fp)
   1a1f8:	00145140 	call	14514 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1a1fc:	e0bff817 	ldw	r2,-32(fp)
   1a200:	10800a17 	ldw	r2,40(r2)
   1a204:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1a208:	e0bffb17 	ldw	r2,-20(fp)
   1a20c:	10000226 	beq	r2,zero,1a218 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1a210:	e13ffb17 	ldw	r4,-20(fp)
   1a214:	00169940 	call	16994 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1a218:	e0bff817 	ldw	r2,-32(fp)
   1a21c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1a220:	e0bff817 	ldw	r2,-32(fp)
   1a224:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1a228:	e0bff817 	ldw	r2,-32(fp)
   1a22c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1a230:	d0a8cc83 	ldbu	r2,-23758(gp)
   1a234:	10803fcc 	andi	r2,r2,255
   1a238:	10803fe0 	cmpeqi	r2,r2,255
   1a23c:	1000031e 	bne	r2,zero,1a24c <OSTaskDel+0x214>
        OSLockNesting++;
   1a240:	d0a8cc83 	ldbu	r2,-23758(gp)
   1a244:	10800044 	addi	r2,r2,1
   1a248:	d0a8cc85 	stb	r2,-23758(gp)
   1a24c:	e0bff617 	ldw	r2,-40(fp)
   1a250:	e0bffd15 	stw	r2,-12(fp)
   1a254:	e0bffd17 	ldw	r2,-12(fp)
   1a258:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1a25c:	00140440 	call	14044 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a260:	0005303a 	rdctl	r2,status
   1a264:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a268:	e0fffa17 	ldw	r3,-24(fp)
   1a26c:	00bfff84 	movi	r2,-2
   1a270:	1884703a 	and	r2,r3,r2
   1a274:	1001703a 	wrctl	status,r2
  
  return context;
   1a278:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1a27c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1a280:	d0a8cc83 	ldbu	r2,-23758(gp)
   1a284:	10803fcc 	andi	r2,r2,255
   1a288:	10000326 	beq	r2,zero,1a298 <OSTaskDel+0x260>
        OSLockNesting--;
   1a28c:	d0a8cc83 	ldbu	r2,-23758(gp)
   1a290:	10bfffc4 	addi	r2,r2,-1
   1a294:	d0a8cc85 	stb	r2,-23758(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1a298:	e13ff817 	ldw	r4,-32(fp)
   1a29c:	0023bec0 	call	23bec <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1a2a0:	d0a8d4c3 	ldbu	r2,-23725(gp)
   1a2a4:	10bfffc4 	addi	r2,r2,-1
   1a2a8:	d0a8d4c5 	stb	r2,-23725(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1a2ac:	e0ffff03 	ldbu	r3,-4(fp)
   1a2b0:	00800274 	movhi	r2,9
   1a2b4:	109fb704 	addi	r2,r2,32476
   1a2b8:	18c7883a 	add	r3,r3,r3
   1a2bc:	18c7883a 	add	r3,r3,r3
   1a2c0:	10c5883a 	add	r2,r2,r3
   1a2c4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1a2c8:	e0bff817 	ldw	r2,-32(fp)
   1a2cc:	10800617 	ldw	r2,24(r2)
   1a2d0:	1000071e 	bne	r2,zero,1a2f0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1a2d4:	e0bff817 	ldw	r2,-32(fp)
   1a2d8:	10800517 	ldw	r2,20(r2)
   1a2dc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1a2e0:	e0bff817 	ldw	r2,-32(fp)
   1a2e4:	10800517 	ldw	r2,20(r2)
   1a2e8:	d0a8cf95 	stw	r2,-23746(gp)
   1a2ec:	00000a06 	br	1a318 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1a2f0:	e0bff817 	ldw	r2,-32(fp)
   1a2f4:	10800617 	ldw	r2,24(r2)
   1a2f8:	e0fff817 	ldw	r3,-32(fp)
   1a2fc:	18c00517 	ldw	r3,20(r3)
   1a300:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1a304:	e0bff817 	ldw	r2,-32(fp)
   1a308:	10800517 	ldw	r2,20(r2)
   1a30c:	e0fff817 	ldw	r3,-32(fp)
   1a310:	18c00617 	ldw	r3,24(r3)
   1a314:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1a318:	d0e8d397 	ldw	r3,-23730(gp)
   1a31c:	e0bff817 	ldw	r2,-32(fp)
   1a320:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1a324:	e0bff817 	ldw	r2,-32(fp)
   1a328:	d0a8d395 	stw	r2,-23730(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1a32c:	e0bff817 	ldw	r2,-32(fp)
   1a330:	00c00fc4 	movi	r3,63
   1a334:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1a338:	e0bff817 	ldw	r2,-32(fp)
   1a33c:	10001345 	stb	zero,77(r2)
   1a340:	e0bff617 	ldw	r2,-40(fp)
   1a344:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a348:	e0bffc17 	ldw	r2,-16(fp)
   1a34c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a350:	d0a8ccc3 	ldbu	r2,-23757(gp)
   1a354:	10803fcc 	andi	r2,r2,255
   1a358:	10800058 	cmpnei	r2,r2,1
   1a35c:	1000011e 	bne	r2,zero,1a364 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   1a360:	0014ab00 	call	14ab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a364:	0005883a 	mov	r2,zero
}
   1a368:	e037883a 	mov	sp,fp
   1a36c:	dfc00117 	ldw	ra,4(sp)
   1a370:	df000017 	ldw	fp,0(sp)
   1a374:	dec00204 	addi	sp,sp,8
   1a378:	f800283a 	ret

0001a37c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1a37c:	defff504 	addi	sp,sp,-44
   1a380:	df000a15 	stw	fp,40(sp)
   1a384:	df000a04 	addi	fp,sp,40
   1a388:	2005883a 	mov	r2,r4
   1a38c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a390:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1a394:	e0bfff03 	ldbu	r2,-4(fp)
   1a398:	10800518 	cmpnei	r2,r2,20
   1a39c:	1000021e 	bne	r2,zero,1a3a8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a3a0:	00800f84 	movi	r2,62
   1a3a4:	00004506 	br	1a4bc <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a3a8:	e0bfff03 	ldbu	r2,-4(fp)
   1a3ac:	10800530 	cmpltui	r2,r2,20
   1a3b0:	1000051e 	bne	r2,zero,1a3c8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1a3b4:	e0bfff03 	ldbu	r2,-4(fp)
   1a3b8:	10803fe0 	cmpeqi	r2,r2,255
   1a3bc:	1000021e 	bne	r2,zero,1a3c8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1a3c0:	00800a84 	movi	r2,42
   1a3c4:	00003d06 	br	1a4bc <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1a3c8:	e0bfff03 	ldbu	r2,-4(fp)
   1a3cc:	10803fd8 	cmpnei	r2,r2,255
   1a3d0:	1000111e 	bne	r2,zero,1a418 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a3d4:	0005303a 	rdctl	r2,status
   1a3d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a3dc:	e0fff917 	ldw	r3,-28(fp)
   1a3e0:	00bfff84 	movi	r2,-2
   1a3e4:	1884703a 	and	r2,r3,r2
   1a3e8:	1001703a 	wrctl	status,r2
  
  return context;
   1a3ec:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1a3f0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1a3f4:	d0a8db97 	ldw	r2,-23698(gp)
   1a3f8:	10800dc3 	ldbu	r2,55(r2)
   1a3fc:	e0bff805 	stb	r2,-32(fp)
   1a400:	e0bff617 	ldw	r2,-40(fp)
   1a404:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a408:	e0bffe17 	ldw	r2,-8(fp)
   1a40c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1a410:	e0bff803 	ldbu	r2,-32(fp)
   1a414:	00002906 	br	1a4bc <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a418:	0005303a 	rdctl	r2,status
   1a41c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a420:	e0fff717 	ldw	r3,-36(fp)
   1a424:	00bfff84 	movi	r2,-2
   1a428:	1884703a 	and	r2,r3,r2
   1a42c:	1001703a 	wrctl	status,r2
  
  return context;
   1a430:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1a434:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1a438:	e0ffff03 	ldbu	r3,-4(fp)
   1a43c:	00800274 	movhi	r2,9
   1a440:	109fb704 	addi	r2,r2,32476
   1a444:	18c7883a 	add	r3,r3,r3
   1a448:	18c7883a 	add	r3,r3,r3
   1a44c:	10c5883a 	add	r2,r2,r3
   1a450:	10800017 	ldw	r2,0(r2)
   1a454:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1a458:	e0bffb17 	ldw	r2,-20(fp)
   1a45c:	1000061e 	bne	r2,zero,1a478 <OSTaskDelReq+0xfc>
   1a460:	e0bff617 	ldw	r2,-40(fp)
   1a464:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a468:	e0bffa17 	ldw	r2,-24(fp)
   1a46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1a470:	008010c4 	movi	r2,67
   1a474:	00001106 	br	1a4bc <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1a478:	e0bffb17 	ldw	r2,-20(fp)
   1a47c:	10800058 	cmpnei	r2,r2,1
   1a480:	1000061e 	bne	r2,zero,1a49c <OSTaskDelReq+0x120>
   1a484:	e0bff617 	ldw	r2,-40(fp)
   1a488:	e0bffc15 	stw	r2,-16(fp)
   1a48c:	e0bffc17 	ldw	r2,-16(fp)
   1a490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a494:	00800f44 	movi	r2,61
   1a498:	00000806 	br	1a4bc <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1a49c:	e0bffb17 	ldw	r2,-20(fp)
   1a4a0:	00c00fc4 	movi	r3,63
   1a4a4:	10c00dc5 	stb	r3,55(r2)
   1a4a8:	e0bff617 	ldw	r2,-40(fp)
   1a4ac:	e0bffd15 	stw	r2,-12(fp)
   1a4b0:	e0bffd17 	ldw	r2,-12(fp)
   1a4b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a4b8:	0005883a 	mov	r2,zero
}
   1a4bc:	e037883a 	mov	sp,fp
   1a4c0:	df000017 	ldw	fp,0(sp)
   1a4c4:	dec00104 	addi	sp,sp,4
   1a4c8:	f800283a 	ret

0001a4cc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1a4cc:	defff404 	addi	sp,sp,-48
   1a4d0:	dfc00b15 	stw	ra,44(sp)
   1a4d4:	df000a15 	stw	fp,40(sp)
   1a4d8:	df000a04 	addi	fp,sp,40
   1a4dc:	2005883a 	mov	r2,r4
   1a4e0:	e17ffe15 	stw	r5,-8(fp)
   1a4e4:	e1bfff15 	stw	r6,-4(fp)
   1a4e8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1a4ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1a4f0:	e0bfff17 	ldw	r2,-4(fp)
   1a4f4:	1000021e 	bne	r2,zero,1a500 <OSTaskNameGet+0x34>
        return (0);
   1a4f8:	0005883a 	mov	r2,zero
   1a4fc:	00005406 	br	1a650 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1a500:	e0bffd03 	ldbu	r2,-12(fp)
   1a504:	10800570 	cmpltui	r2,r2,21
   1a508:	1000081e 	bne	r2,zero,1a52c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1a50c:	e0bffd03 	ldbu	r2,-12(fp)
   1a510:	10803fe0 	cmpeqi	r2,r2,255
   1a514:	1000051e 	bne	r2,zero,1a52c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1a518:	e0bfff17 	ldw	r2,-4(fp)
   1a51c:	00c00a84 	movi	r3,42
   1a520:	10c00005 	stb	r3,0(r2)
            return (0);
   1a524:	0005883a 	mov	r2,zero
   1a528:	00004906 	br	1a650 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1a52c:	e0bffe17 	ldw	r2,-8(fp)
   1a530:	1000051e 	bne	r2,zero,1a548 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1a534:	e0bfff17 	ldw	r2,-4(fp)
   1a538:	00c00304 	movi	r3,12
   1a53c:	10c00005 	stb	r3,0(r2)
        return (0);
   1a540:	0005883a 	mov	r2,zero
   1a544:	00004206 	br	1a650 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1a548:	d0a8da83 	ldbu	r2,-23702(gp)
   1a54c:	10803fcc 	andi	r2,r2,255
   1a550:	10000526 	beq	r2,zero,1a568 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   1a554:	e0bfff17 	ldw	r2,-4(fp)
   1a558:	00c00444 	movi	r3,17
   1a55c:	10c00005 	stb	r3,0(r2)
        return (0);
   1a560:	0005883a 	mov	r2,zero
   1a564:	00003a06 	br	1a650 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a568:	0005303a 	rdctl	r2,status
   1a56c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a570:	e0fffc17 	ldw	r3,-16(fp)
   1a574:	00bfff84 	movi	r2,-2
   1a578:	1884703a 	and	r2,r3,r2
   1a57c:	1001703a 	wrctl	status,r2
  
  return context;
   1a580:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a584:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1a588:	e0bffd03 	ldbu	r2,-12(fp)
   1a58c:	10803fd8 	cmpnei	r2,r2,255
   1a590:	1000031e 	bne	r2,zero,1a5a0 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1a594:	d0a8db97 	ldw	r2,-23698(gp)
   1a598:	10800c83 	ldbu	r2,50(r2)
   1a59c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a5a0:	e0fffd03 	ldbu	r3,-12(fp)
   1a5a4:	00800274 	movhi	r2,9
   1a5a8:	109fb704 	addi	r2,r2,32476
   1a5ac:	18c7883a 	add	r3,r3,r3
   1a5b0:	18c7883a 	add	r3,r3,r3
   1a5b4:	10c5883a 	add	r2,r2,r3
   1a5b8:	10800017 	ldw	r2,0(r2)
   1a5bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1a5c0:	e0bff817 	ldw	r2,-32(fp)
   1a5c4:	1000091e 	bne	r2,zero,1a5ec <OSTaskNameGet+0x120>
   1a5c8:	e0bff617 	ldw	r2,-40(fp)
   1a5cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a5d0:	e0bff717 	ldw	r2,-36(fp)
   1a5d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a5d8:	e0bfff17 	ldw	r2,-4(fp)
   1a5dc:	00c010c4 	movi	r3,67
   1a5e0:	10c00005 	stb	r3,0(r2)
        return (0);
   1a5e4:	0005883a 	mov	r2,zero
   1a5e8:	00001906 	br	1a650 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1a5ec:	e0bff817 	ldw	r2,-32(fp)
   1a5f0:	10800058 	cmpnei	r2,r2,1
   1a5f4:	1000091e 	bne	r2,zero,1a61c <OSTaskNameGet+0x150>
   1a5f8:	e0bff617 	ldw	r2,-40(fp)
   1a5fc:	e0bff915 	stw	r2,-28(fp)
   1a600:	e0bff917 	ldw	r2,-28(fp)
   1a604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a608:	e0bfff17 	ldw	r2,-4(fp)
   1a60c:	00c010c4 	movi	r3,67
   1a610:	10c00005 	stb	r3,0(r2)
        return (0);
   1a614:	0005883a 	mov	r2,zero
   1a618:	00000d06 	br	1a650 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1a61c:	e0bff817 	ldw	r2,-32(fp)
   1a620:	10801304 	addi	r2,r2,76
   1a624:	100b883a 	mov	r5,r2
   1a628:	e13ffe17 	ldw	r4,-8(fp)
   1a62c:	0014bf40 	call	14bf4 <OS_StrCopy>
   1a630:	e0bffb05 	stb	r2,-20(fp)
   1a634:	e0bff617 	ldw	r2,-40(fp)
   1a638:	e0bffa15 	stw	r2,-24(fp)
   1a63c:	e0bffa17 	ldw	r2,-24(fp)
   1a640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a644:	e0bfff17 	ldw	r2,-4(fp)
   1a648:	10000005 	stb	zero,0(r2)
    return (len);
   1a64c:	e0bffb03 	ldbu	r2,-20(fp)
}
   1a650:	e037883a 	mov	sp,fp
   1a654:	dfc00117 	ldw	ra,4(sp)
   1a658:	df000017 	ldw	fp,0(sp)
   1a65c:	dec00204 	addi	sp,sp,8
   1a660:	f800283a 	ret

0001a664 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1a664:	defff304 	addi	sp,sp,-52
   1a668:	dfc00c15 	stw	ra,48(sp)
   1a66c:	df000b15 	stw	fp,44(sp)
   1a670:	df000b04 	addi	fp,sp,44
   1a674:	2005883a 	mov	r2,r4
   1a678:	e17ffe15 	stw	r5,-8(fp)
   1a67c:	e1bfff15 	stw	r6,-4(fp)
   1a680:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1a684:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1a688:	e0bfff17 	ldw	r2,-4(fp)
   1a68c:	10005c26 	beq	r2,zero,1a800 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1a690:	e0bffd03 	ldbu	r2,-12(fp)
   1a694:	10800570 	cmpltui	r2,r2,21
   1a698:	1000071e 	bne	r2,zero,1a6b8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   1a69c:	e0bffd03 	ldbu	r2,-12(fp)
   1a6a0:	10803fe0 	cmpeqi	r2,r2,255
   1a6a4:	1000041e 	bne	r2,zero,1a6b8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1a6a8:	e0bfff17 	ldw	r2,-4(fp)
   1a6ac:	00c00a84 	movi	r3,42
   1a6b0:	10c00005 	stb	r3,0(r2)
            return;
   1a6b4:	00005306 	br	1a804 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1a6b8:	e0bffe17 	ldw	r2,-8(fp)
   1a6bc:	1000041e 	bne	r2,zero,1a6d0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1a6c0:	e0bfff17 	ldw	r2,-4(fp)
   1a6c4:	00c00304 	movi	r3,12
   1a6c8:	10c00005 	stb	r3,0(r2)
        return;
   1a6cc:	00004d06 	br	1a804 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1a6d0:	d0a8da83 	ldbu	r2,-23702(gp)
   1a6d4:	10803fcc 	andi	r2,r2,255
   1a6d8:	10000426 	beq	r2,zero,1a6ec <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   1a6dc:	e0bfff17 	ldw	r2,-4(fp)
   1a6e0:	00c00484 	movi	r3,18
   1a6e4:	10c00005 	stb	r3,0(r2)
        return;
   1a6e8:	00004606 	br	1a804 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a6ec:	0005303a 	rdctl	r2,status
   1a6f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a6f4:	e0fffc17 	ldw	r3,-16(fp)
   1a6f8:	00bfff84 	movi	r2,-2
   1a6fc:	1884703a 	and	r2,r3,r2
   1a700:	1001703a 	wrctl	status,r2
  
  return context;
   1a704:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a708:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1a70c:	e0bffd03 	ldbu	r2,-12(fp)
   1a710:	10803fd8 	cmpnei	r2,r2,255
   1a714:	1000031e 	bne	r2,zero,1a724 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1a718:	d0a8db97 	ldw	r2,-23698(gp)
   1a71c:	10800c83 	ldbu	r2,50(r2)
   1a720:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a724:	e0fffd03 	ldbu	r3,-12(fp)
   1a728:	00800274 	movhi	r2,9
   1a72c:	109fb704 	addi	r2,r2,32476
   1a730:	18c7883a 	add	r3,r3,r3
   1a734:	18c7883a 	add	r3,r3,r3
   1a738:	10c5883a 	add	r2,r2,r3
   1a73c:	10800017 	ldw	r2,0(r2)
   1a740:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1a744:	e0bff717 	ldw	r2,-36(fp)
   1a748:	1000081e 	bne	r2,zero,1a76c <OSTaskNameSet+0x108>
   1a74c:	e0bff517 	ldw	r2,-44(fp)
   1a750:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a754:	e0bff617 	ldw	r2,-40(fp)
   1a758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a75c:	e0bfff17 	ldw	r2,-4(fp)
   1a760:	00c010c4 	movi	r3,67
   1a764:	10c00005 	stb	r3,0(r2)
        return;
   1a768:	00002606 	br	1a804 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1a76c:	e0bff717 	ldw	r2,-36(fp)
   1a770:	10800058 	cmpnei	r2,r2,1
   1a774:	1000081e 	bne	r2,zero,1a798 <OSTaskNameSet+0x134>
   1a778:	e0bff517 	ldw	r2,-44(fp)
   1a77c:	e0bff815 	stw	r2,-32(fp)
   1a780:	e0bff817 	ldw	r2,-32(fp)
   1a784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	00c010c4 	movi	r3,67
   1a790:	10c00005 	stb	r3,0(r2)
        return;
   1a794:	00001b06 	br	1a804 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1a798:	e13ffe17 	ldw	r4,-8(fp)
   1a79c:	0014c680 	call	14c68 <OS_StrLen>
   1a7a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1a7a4:	e0bffa03 	ldbu	r2,-24(fp)
   1a7a8:	10800830 	cmpltui	r2,r2,32
   1a7ac:	1000081e 	bne	r2,zero,1a7d0 <OSTaskNameSet+0x16c>
   1a7b0:	e0bff517 	ldw	r2,-44(fp)
   1a7b4:	e0bff915 	stw	r2,-28(fp)
   1a7b8:	e0bff917 	ldw	r2,-28(fp)
   1a7bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1a7c0:	e0bfff17 	ldw	r2,-4(fp)
   1a7c4:	00c01044 	movi	r3,65
   1a7c8:	10c00005 	stb	r3,0(r2)
        return;
   1a7cc:	00000d06 	br	1a804 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1a7d0:	e0bff717 	ldw	r2,-36(fp)
   1a7d4:	10801304 	addi	r2,r2,76
   1a7d8:	e17ffe17 	ldw	r5,-8(fp)
   1a7dc:	1009883a 	mov	r4,r2
   1a7e0:	0014bf40 	call	14bf4 <OS_StrCopy>
   1a7e4:	e0bff517 	ldw	r2,-44(fp)
   1a7e8:	e0bffb15 	stw	r2,-20(fp)
   1a7ec:	e0bffb17 	ldw	r2,-20(fp)
   1a7f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a7f4:	e0bfff17 	ldw	r2,-4(fp)
   1a7f8:	10000005 	stb	zero,0(r2)
   1a7fc:	00000106 	br	1a804 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   1a800:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1a804:	e037883a 	mov	sp,fp
   1a808:	dfc00117 	ldw	ra,4(sp)
   1a80c:	df000017 	ldw	fp,0(sp)
   1a810:	dec00204 	addi	sp,sp,8
   1a814:	f800283a 	ret

0001a818 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1a818:	defff404 	addi	sp,sp,-48
   1a81c:	dfc00b15 	stw	ra,44(sp)
   1a820:	df000a15 	stw	fp,40(sp)
   1a824:	df000a04 	addi	fp,sp,40
   1a828:	2005883a 	mov	r2,r4
   1a82c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1a830:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1a834:	e0bfff03 	ldbu	r2,-4(fp)
   1a838:	10800530 	cmpltui	r2,r2,20
   1a83c:	1000021e 	bne	r2,zero,1a848 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a840:	00800a84 	movi	r2,42
   1a844:	00006406 	br	1a9d8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a848:	0005303a 	rdctl	r2,status
   1a84c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a850:	e0fffe17 	ldw	r3,-8(fp)
   1a854:	00bfff84 	movi	r2,-2
   1a858:	1884703a 	and	r2,r3,r2
   1a85c:	1001703a 	wrctl	status,r2
  
  return context;
   1a860:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a864:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1a868:	e0ffff03 	ldbu	r3,-4(fp)
   1a86c:	00800274 	movhi	r2,9
   1a870:	109fb704 	addi	r2,r2,32476
   1a874:	18c7883a 	add	r3,r3,r3
   1a878:	18c7883a 	add	r3,r3,r3
   1a87c:	10c5883a 	add	r2,r2,r3
   1a880:	10800017 	ldw	r2,0(r2)
   1a884:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1a888:	e0bff817 	ldw	r2,-32(fp)
   1a88c:	1000061e 	bne	r2,zero,1a8a8 <OSTaskResume+0x90>
   1a890:	e0bff617 	ldw	r2,-40(fp)
   1a894:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a898:	e0bff717 	ldw	r2,-36(fp)
   1a89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1a8a0:	00801184 	movi	r2,70
   1a8a4:	00004c06 	br	1a9d8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1a8a8:	e0bff817 	ldw	r2,-32(fp)
   1a8ac:	10800058 	cmpnei	r2,r2,1
   1a8b0:	1000061e 	bne	r2,zero,1a8cc <OSTaskResume+0xb4>
   1a8b4:	e0bff617 	ldw	r2,-40(fp)
   1a8b8:	e0bff915 	stw	r2,-28(fp)
   1a8bc:	e0bff917 	ldw	r2,-28(fp)
   1a8c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a8c4:	008010c4 	movi	r2,67
   1a8c8:	00004306 	br	1a9d8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1a8cc:	e0bff817 	ldw	r2,-32(fp)
   1a8d0:	10800c03 	ldbu	r2,48(r2)
   1a8d4:	10803fcc 	andi	r2,r2,255
   1a8d8:	1080020c 	andi	r2,r2,8
   1a8dc:	10003926 	beq	r2,zero,1a9c4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1a8e0:	e0bff817 	ldw	r2,-32(fp)
   1a8e4:	10c00c03 	ldbu	r3,48(r2)
   1a8e8:	00bffdc4 	movi	r2,-9
   1a8ec:	1884703a 	and	r2,r3,r2
   1a8f0:	1007883a 	mov	r3,r2
   1a8f4:	e0bff817 	ldw	r2,-32(fp)
   1a8f8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1a8fc:	e0bff817 	ldw	r2,-32(fp)
   1a900:	10800c03 	ldbu	r2,48(r2)
   1a904:	10803fcc 	andi	r2,r2,255
   1a908:	1000281e 	bne	r2,zero,1a9ac <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   1a90c:	e0bff817 	ldw	r2,-32(fp)
   1a910:	10800b8b 	ldhu	r2,46(r2)
   1a914:	10bfffcc 	andi	r2,r2,65535
   1a918:	10001f1e 	bne	r2,zero,1a998 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1a91c:	e0bff817 	ldw	r2,-32(fp)
   1a920:	10c00d83 	ldbu	r3,54(r2)
   1a924:	d0a8d883 	ldbu	r2,-23710(gp)
   1a928:	1884b03a 	or	r2,r3,r2
   1a92c:	d0a8d885 	stb	r2,-23710(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a930:	e0bff817 	ldw	r2,-32(fp)
   1a934:	10800d03 	ldbu	r2,52(r2)
   1a938:	10c03fcc 	andi	r3,r2,255
   1a93c:	e0bff817 	ldw	r2,-32(fp)
   1a940:	10800d03 	ldbu	r2,52(r2)
   1a944:	11003fcc 	andi	r4,r2,255
   1a948:	d0a8d8c4 	addi	r2,gp,-23709
   1a94c:	2085883a 	add	r2,r4,r2
   1a950:	11000003 	ldbu	r4,0(r2)
   1a954:	e0bff817 	ldw	r2,-32(fp)
   1a958:	10800d43 	ldbu	r2,53(r2)
   1a95c:	2084b03a 	or	r2,r4,r2
   1a960:	1009883a 	mov	r4,r2
   1a964:	d0a8d8c4 	addi	r2,gp,-23709
   1a968:	1885883a 	add	r2,r3,r2
   1a96c:	11000005 	stb	r4,0(r2)
   1a970:	e0bff617 	ldw	r2,-40(fp)
   1a974:	e0bffa15 	stw	r2,-24(fp)
   1a978:	e0bffa17 	ldw	r2,-24(fp)
   1a97c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1a980:	d0a8ccc3 	ldbu	r2,-23757(gp)
   1a984:	10803fcc 	andi	r2,r2,255
   1a988:	10800058 	cmpnei	r2,r2,1
   1a98c:	10000b1e 	bne	r2,zero,1a9bc <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1a990:	0014ab00 	call	14ab0 <OS_Sched>
   1a994:	00000906 	br	1a9bc <OSTaskResume+0x1a4>
   1a998:	e0bff617 	ldw	r2,-40(fp)
   1a99c:	e0bffb15 	stw	r2,-20(fp)
   1a9a0:	e0bffb17 	ldw	r2,-20(fp)
   1a9a4:	1001703a 	wrctl	status,r2
   1a9a8:	00000406 	br	1a9bc <OSTaskResume+0x1a4>
   1a9ac:	e0bff617 	ldw	r2,-40(fp)
   1a9b0:	e0bffc15 	stw	r2,-16(fp)
   1a9b4:	e0bffc17 	ldw	r2,-16(fp)
   1a9b8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1a9bc:	0005883a 	mov	r2,zero
   1a9c0:	00000506 	br	1a9d8 <OSTaskResume+0x1c0>
   1a9c4:	e0bff617 	ldw	r2,-40(fp)
   1a9c8:	e0bffd15 	stw	r2,-12(fp)
   1a9cc:	e0bffd17 	ldw	r2,-12(fp)
   1a9d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1a9d4:	00801104 	movi	r2,68
}
   1a9d8:	e037883a 	mov	sp,fp
   1a9dc:	dfc00117 	ldw	ra,4(sp)
   1a9e0:	df000017 	ldw	fp,0(sp)
   1a9e4:	dec00204 	addi	sp,sp,8
   1a9e8:	f800283a 	ret

0001a9ec <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1a9ec:	defff304 	addi	sp,sp,-52
   1a9f0:	df000c15 	stw	fp,48(sp)
   1a9f4:	df000c04 	addi	fp,sp,48
   1a9f8:	2005883a 	mov	r2,r4
   1a9fc:	e17fff15 	stw	r5,-4(fp)
   1aa00:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1aa04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1aa08:	e0bffe03 	ldbu	r2,-8(fp)
   1aa0c:	10800570 	cmpltui	r2,r2,21
   1aa10:	1000051e 	bne	r2,zero,1aa28 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1aa14:	e0bffe03 	ldbu	r2,-8(fp)
   1aa18:	10803fe0 	cmpeqi	r2,r2,255
   1aa1c:	1000021e 	bne	r2,zero,1aa28 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1aa20:	00800a84 	movi	r2,42
   1aa24:	00005d06 	br	1ab9c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1aa28:	e0bfff17 	ldw	r2,-4(fp)
   1aa2c:	1000021e 	bne	r2,zero,1aa38 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1aa30:	00800244 	movi	r2,9
   1aa34:	00005906 	br	1ab9c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1aa38:	e0bfff17 	ldw	r2,-4(fp)
   1aa3c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1aa40:	e0bfff17 	ldw	r2,-4(fp)
   1aa44:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa48:	0005303a 	rdctl	r2,status
   1aa4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa50:	e0fffd17 	ldw	r3,-12(fp)
   1aa54:	00bfff84 	movi	r2,-2
   1aa58:	1884703a 	and	r2,r3,r2
   1aa5c:	1001703a 	wrctl	status,r2
  
  return context;
   1aa60:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   1aa64:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1aa68:	e0bffe03 	ldbu	r2,-8(fp)
   1aa6c:	10803fd8 	cmpnei	r2,r2,255
   1aa70:	1000031e 	bne	r2,zero,1aa80 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1aa74:	d0a8db97 	ldw	r2,-23698(gp)
   1aa78:	10800c83 	ldbu	r2,50(r2)
   1aa7c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1aa80:	e0fffe03 	ldbu	r3,-8(fp)
   1aa84:	00800274 	movhi	r2,9
   1aa88:	109fb704 	addi	r2,r2,32476
   1aa8c:	18c7883a 	add	r3,r3,r3
   1aa90:	18c7883a 	add	r3,r3,r3
   1aa94:	10c5883a 	add	r2,r2,r3
   1aa98:	10800017 	ldw	r2,0(r2)
   1aa9c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1aaa0:	e0bff817 	ldw	r2,-32(fp)
   1aaa4:	1000061e 	bne	r2,zero,1aac0 <OSTaskStkChk+0xd4>
   1aaa8:	e0bff617 	ldw	r2,-40(fp)
   1aaac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aab0:	e0bff717 	ldw	r2,-36(fp)
   1aab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1aab8:	008010c4 	movi	r2,67
   1aabc:	00003706 	br	1ab9c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1aac0:	e0bff817 	ldw	r2,-32(fp)
   1aac4:	10800058 	cmpnei	r2,r2,1
   1aac8:	1000061e 	bne	r2,zero,1aae4 <OSTaskStkChk+0xf8>
   1aacc:	e0bff617 	ldw	r2,-40(fp)
   1aad0:	e0bff915 	stw	r2,-28(fp)
   1aad4:	e0bff917 	ldw	r2,-28(fp)
   1aad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1aadc:	008010c4 	movi	r2,67
   1aae0:	00002e06 	br	1ab9c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1aae4:	e0bff817 	ldw	r2,-32(fp)
   1aae8:	1080040b 	ldhu	r2,16(r2)
   1aaec:	10bfffcc 	andi	r2,r2,65535
   1aaf0:	1080004c 	andi	r2,r2,1
   1aaf4:	1000061e 	bne	r2,zero,1ab10 <OSTaskStkChk+0x124>
   1aaf8:	e0bff617 	ldw	r2,-40(fp)
   1aafc:	e0bffa15 	stw	r2,-24(fp)
   1ab00:	e0bffa17 	ldw	r2,-24(fp)
   1ab04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1ab08:	00801144 	movi	r2,69
   1ab0c:	00002306 	br	1ab9c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1ab10:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1ab14:	e0bff817 	ldw	r2,-32(fp)
   1ab18:	10800317 	ldw	r2,12(r2)
   1ab1c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1ab20:	e0bff817 	ldw	r2,-32(fp)
   1ab24:	10800217 	ldw	r2,8(r2)
   1ab28:	e0bff415 	stw	r2,-48(fp)
   1ab2c:	e0bff617 	ldw	r2,-40(fp)
   1ab30:	e0bffb15 	stw	r2,-20(fp)
   1ab34:	e0bffb17 	ldw	r2,-20(fp)
   1ab38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1ab3c:	00000306 	br	1ab4c <OSTaskStkChk+0x160>
        nfree++;
   1ab40:	e0bff517 	ldw	r2,-44(fp)
   1ab44:	10800044 	addi	r2,r2,1
   1ab48:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1ab4c:	e0bff417 	ldw	r2,-48(fp)
   1ab50:	10c00104 	addi	r3,r2,4
   1ab54:	e0fff415 	stw	r3,-48(fp)
   1ab58:	10800017 	ldw	r2,0(r2)
   1ab5c:	103ff826 	beq	r2,zero,1ab40 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1ab60:	e0bff517 	ldw	r2,-44(fp)
   1ab64:	1085883a 	add	r2,r2,r2
   1ab68:	1085883a 	add	r2,r2,r2
   1ab6c:	1007883a 	mov	r3,r2
   1ab70:	e0bfff17 	ldw	r2,-4(fp)
   1ab74:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1ab78:	e0fffc17 	ldw	r3,-16(fp)
   1ab7c:	e0bff517 	ldw	r2,-44(fp)
   1ab80:	1885c83a 	sub	r2,r3,r2
   1ab84:	1085883a 	add	r2,r2,r2
   1ab88:	1085883a 	add	r2,r2,r2
   1ab8c:	1007883a 	mov	r3,r2
   1ab90:	e0bfff17 	ldw	r2,-4(fp)
   1ab94:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1ab98:	0005883a 	mov	r2,zero
}
   1ab9c:	e037883a 	mov	sp,fp
   1aba0:	df000017 	ldw	fp,0(sp)
   1aba4:	dec00104 	addi	sp,sp,4
   1aba8:	f800283a 	ret

0001abac <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1abac:	defff504 	addi	sp,sp,-44
   1abb0:	dfc00a15 	stw	ra,40(sp)
   1abb4:	df000915 	stw	fp,36(sp)
   1abb8:	df000904 	addi	fp,sp,36
   1abbc:	2005883a 	mov	r2,r4
   1abc0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1abc4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1abc8:	e0bfff03 	ldbu	r2,-4(fp)
   1abcc:	10800518 	cmpnei	r2,r2,20
   1abd0:	1000021e 	bne	r2,zero,1abdc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1abd4:	008011c4 	movi	r2,71
   1abd8:	00006806 	br	1ad7c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1abdc:	e0bfff03 	ldbu	r2,-4(fp)
   1abe0:	10800530 	cmpltui	r2,r2,20
   1abe4:	1000051e 	bne	r2,zero,1abfc <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1abe8:	e0bfff03 	ldbu	r2,-4(fp)
   1abec:	10803fe0 	cmpeqi	r2,r2,255
   1abf0:	1000021e 	bne	r2,zero,1abfc <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1abf4:	00800a84 	movi	r2,42
   1abf8:	00006006 	br	1ad7c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1abfc:	0005303a 	rdctl	r2,status
   1ac00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ac04:	e0fffe17 	ldw	r3,-8(fp)
   1ac08:	00bfff84 	movi	r2,-2
   1ac0c:	1884703a 	and	r2,r3,r2
   1ac10:	1001703a 	wrctl	status,r2
  
  return context;
   1ac14:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1ac18:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1ac1c:	e0bfff03 	ldbu	r2,-4(fp)
   1ac20:	10803fd8 	cmpnei	r2,r2,255
   1ac24:	1000061e 	bne	r2,zero,1ac40 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1ac28:	d0a8db97 	ldw	r2,-23698(gp)
   1ac2c:	10800c83 	ldbu	r2,50(r2)
   1ac30:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1ac34:	00800044 	movi	r2,1
   1ac38:	e0bff705 	stb	r2,-36(fp)
   1ac3c:	00000906 	br	1ac64 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1ac40:	d0a8db97 	ldw	r2,-23698(gp)
   1ac44:	10800c83 	ldbu	r2,50(r2)
   1ac48:	10c03fcc 	andi	r3,r2,255
   1ac4c:	e0bfff03 	ldbu	r2,-4(fp)
   1ac50:	1880031e 	bne	r3,r2,1ac60 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1ac54:	00800044 	movi	r2,1
   1ac58:	e0bff705 	stb	r2,-36(fp)
   1ac5c:	00000106 	br	1ac64 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1ac60:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ac64:	e0ffff03 	ldbu	r3,-4(fp)
   1ac68:	00800274 	movhi	r2,9
   1ac6c:	109fb704 	addi	r2,r2,32476
   1ac70:	18c7883a 	add	r3,r3,r3
   1ac74:	18c7883a 	add	r3,r3,r3
   1ac78:	10c5883a 	add	r2,r2,r3
   1ac7c:	10800017 	ldw	r2,0(r2)
   1ac80:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1ac84:	e0bffa17 	ldw	r2,-24(fp)
   1ac88:	1000061e 	bne	r2,zero,1aca4 <OSTaskSuspend+0xf8>
   1ac8c:	e0bff817 	ldw	r2,-32(fp)
   1ac90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac94:	e0bff917 	ldw	r2,-28(fp)
   1ac98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1ac9c:	00801204 	movi	r2,72
   1aca0:	00003606 	br	1ad7c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1aca4:	e0bffa17 	ldw	r2,-24(fp)
   1aca8:	10800058 	cmpnei	r2,r2,1
   1acac:	1000061e 	bne	r2,zero,1acc8 <OSTaskSuspend+0x11c>
   1acb0:	e0bff817 	ldw	r2,-32(fp)
   1acb4:	e0bffb15 	stw	r2,-20(fp)
   1acb8:	e0bffb17 	ldw	r2,-20(fp)
   1acbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1acc0:	008010c4 	movi	r2,67
   1acc4:	00002d06 	br	1ad7c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1acc8:	e0bffa17 	ldw	r2,-24(fp)
   1accc:	10800d03 	ldbu	r2,52(r2)
   1acd0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1acd4:	e0fffd03 	ldbu	r3,-12(fp)
   1acd8:	e13ffd03 	ldbu	r4,-12(fp)
   1acdc:	d0a8d8c4 	addi	r2,gp,-23709
   1ace0:	2085883a 	add	r2,r4,r2
   1ace4:	10800003 	ldbu	r2,0(r2)
   1ace8:	1009883a 	mov	r4,r2
   1acec:	e0bffa17 	ldw	r2,-24(fp)
   1acf0:	10800d43 	ldbu	r2,53(r2)
   1acf4:	0084303a 	nor	r2,zero,r2
   1acf8:	2084703a 	and	r2,r4,r2
   1acfc:	1009883a 	mov	r4,r2
   1ad00:	d0a8d8c4 	addi	r2,gp,-23709
   1ad04:	1885883a 	add	r2,r3,r2
   1ad08:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1ad0c:	e0fffd03 	ldbu	r3,-12(fp)
   1ad10:	d0a8d8c4 	addi	r2,gp,-23709
   1ad14:	1885883a 	add	r2,r3,r2
   1ad18:	10800003 	ldbu	r2,0(r2)
   1ad1c:	10803fcc 	andi	r2,r2,255
   1ad20:	1000071e 	bne	r2,zero,1ad40 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1ad24:	e0bffa17 	ldw	r2,-24(fp)
   1ad28:	10800d83 	ldbu	r2,54(r2)
   1ad2c:	0084303a 	nor	r2,zero,r2
   1ad30:	1007883a 	mov	r3,r2
   1ad34:	d0a8d883 	ldbu	r2,-23710(gp)
   1ad38:	1884703a 	and	r2,r3,r2
   1ad3c:	d0a8d885 	stb	r2,-23710(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1ad40:	e0bffa17 	ldw	r2,-24(fp)
   1ad44:	10800c03 	ldbu	r2,48(r2)
   1ad48:	10800214 	ori	r2,r2,8
   1ad4c:	1007883a 	mov	r3,r2
   1ad50:	e0bffa17 	ldw	r2,-24(fp)
   1ad54:	10c00c05 	stb	r3,48(r2)
   1ad58:	e0bff817 	ldw	r2,-32(fp)
   1ad5c:	e0bffc15 	stw	r2,-16(fp)
   1ad60:	e0bffc17 	ldw	r2,-16(fp)
   1ad64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1ad68:	e0bff703 	ldbu	r2,-36(fp)
   1ad6c:	10800058 	cmpnei	r2,r2,1
   1ad70:	1000011e 	bne	r2,zero,1ad78 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1ad74:	0014ab00 	call	14ab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ad78:	0005883a 	mov	r2,zero
}
   1ad7c:	e037883a 	mov	sp,fp
   1ad80:	dfc00117 	ldw	ra,4(sp)
   1ad84:	df000017 	ldw	fp,0(sp)
   1ad88:	dec00204 	addi	sp,sp,8
   1ad8c:	f800283a 	ret

0001ad90 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1ad90:	defff604 	addi	sp,sp,-40
   1ad94:	dfc00915 	stw	ra,36(sp)
   1ad98:	df000815 	stw	fp,32(sp)
   1ad9c:	df000804 	addi	fp,sp,32
   1ada0:	2005883a 	mov	r2,r4
   1ada4:	e17fff15 	stw	r5,-4(fp)
   1ada8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1adac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1adb0:	e0bffe03 	ldbu	r2,-8(fp)
   1adb4:	10800570 	cmpltui	r2,r2,21
   1adb8:	1000051e 	bne	r2,zero,1add0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1adbc:	e0bffe03 	ldbu	r2,-8(fp)
   1adc0:	10803fe0 	cmpeqi	r2,r2,255
   1adc4:	1000021e 	bne	r2,zero,1add0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1adc8:	00800a84 	movi	r2,42
   1adcc:	00003406 	br	1aea0 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1add0:	e0bfff17 	ldw	r2,-4(fp)
   1add4:	1000021e 	bne	r2,zero,1ade0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1add8:	00800244 	movi	r2,9
   1addc:	00003006 	br	1aea0 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ade0:	0005303a 	rdctl	r2,status
   1ade4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ade8:	e0fffd17 	ldw	r3,-12(fp)
   1adec:	00bfff84 	movi	r2,-2
   1adf0:	1884703a 	and	r2,r3,r2
   1adf4:	1001703a 	wrctl	status,r2
  
  return context;
   1adf8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1adfc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1ae00:	e0bffe03 	ldbu	r2,-8(fp)
   1ae04:	10803fd8 	cmpnei	r2,r2,255
   1ae08:	1000031e 	bne	r2,zero,1ae18 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1ae0c:	d0a8db97 	ldw	r2,-23698(gp)
   1ae10:	10800c83 	ldbu	r2,50(r2)
   1ae14:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ae18:	e0fffe03 	ldbu	r3,-8(fp)
   1ae1c:	00800274 	movhi	r2,9
   1ae20:	109fb704 	addi	r2,r2,32476
   1ae24:	18c7883a 	add	r3,r3,r3
   1ae28:	18c7883a 	add	r3,r3,r3
   1ae2c:	10c5883a 	add	r2,r2,r3
   1ae30:	10800017 	ldw	r2,0(r2)
   1ae34:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1ae38:	e0bffa17 	ldw	r2,-24(fp)
   1ae3c:	1000061e 	bne	r2,zero,1ae58 <OSTaskQuery+0xc8>
   1ae40:	e0bff817 	ldw	r2,-32(fp)
   1ae44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ae48:	e0bff917 	ldw	r2,-28(fp)
   1ae4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1ae50:	00800a44 	movi	r2,41
   1ae54:	00001206 	br	1aea0 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1ae58:	e0bffa17 	ldw	r2,-24(fp)
   1ae5c:	10800058 	cmpnei	r2,r2,1
   1ae60:	1000061e 	bne	r2,zero,1ae7c <OSTaskQuery+0xec>
   1ae64:	e0bff817 	ldw	r2,-32(fp)
   1ae68:	e0bffb15 	stw	r2,-20(fp)
   1ae6c:	e0bffb17 	ldw	r2,-20(fp)
   1ae70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ae74:	008010c4 	movi	r2,67
   1ae78:	00000906 	br	1aea0 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1ae7c:	01801b04 	movi	r6,108
   1ae80:	e17ffa17 	ldw	r5,-24(fp)
   1ae84:	e13fff17 	ldw	r4,-4(fp)
   1ae88:	0014a480 	call	14a48 <OS_MemCopy>
   1ae8c:	e0bff817 	ldw	r2,-32(fp)
   1ae90:	e0bffc15 	stw	r2,-16(fp)
   1ae94:	e0bffc17 	ldw	r2,-16(fp)
   1ae98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ae9c:	0005883a 	mov	r2,zero
}
   1aea0:	e037883a 	mov	sp,fp
   1aea4:	dfc00117 	ldw	ra,4(sp)
   1aea8:	df000017 	ldw	fp,0(sp)
   1aeac:	dec00204 	addi	sp,sp,8
   1aeb0:	f800283a 	ret

0001aeb4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1aeb4:	defffc04 	addi	sp,sp,-16
   1aeb8:	df000315 	stw	fp,12(sp)
   1aebc:	df000304 	addi	fp,sp,12
   1aec0:	e13ffd15 	stw	r4,-12(fp)
   1aec4:	e17ffe15 	stw	r5,-8(fp)
   1aec8:	3005883a 	mov	r2,r6
   1aecc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1aed0:	e0bfff0b 	ldhu	r2,-4(fp)
   1aed4:	1080004c 	andi	r2,r2,1
   1aed8:	10000d26 	beq	r2,zero,1af10 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1aedc:	e0bfff0b 	ldhu	r2,-4(fp)
   1aee0:	1080008c 	andi	r2,r2,2
   1aee4:	10000a26 	beq	r2,zero,1af10 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1aee8:	00000706 	br	1af08 <OS_TaskStkClr+0x54>
                size--;
   1aeec:	e0bffe17 	ldw	r2,-8(fp)
   1aef0:	10bfffc4 	addi	r2,r2,-1
   1aef4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1aef8:	e0bffd17 	ldw	r2,-12(fp)
   1aefc:	10c00104 	addi	r3,r2,4
   1af00:	e0fffd15 	stw	r3,-12(fp)
   1af04:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1af08:	e0bffe17 	ldw	r2,-8(fp)
   1af0c:	103ff71e 	bne	r2,zero,1aeec <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1af10:	0001883a 	nop
   1af14:	e037883a 	mov	sp,fp
   1af18:	df000017 	ldw	fp,0(sp)
   1af1c:	dec00104 	addi	sp,sp,4
   1af20:	f800283a 	ret

0001af24 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1af24:	defff904 	addi	sp,sp,-28
   1af28:	dfc00615 	stw	ra,24(sp)
   1af2c:	df000515 	stw	fp,20(sp)
   1af30:	df000504 	addi	fp,sp,20
   1af34:	2005883a 	mov	r2,r4
   1af38:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1af3c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1af40:	d0a8da83 	ldbu	r2,-23702(gp)
   1af44:	10803fcc 	andi	r2,r2,255
   1af48:	1000311e 	bne	r2,zero,1b010 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1af4c:	e0bfff0b 	ldhu	r2,-4(fp)
   1af50:	10003026 	beq	r2,zero,1b014 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1af54:	0005303a 	rdctl	r2,status
   1af58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af5c:	e0fffe17 	ldw	r3,-8(fp)
   1af60:	00bfff84 	movi	r2,-2
   1af64:	1884703a 	and	r2,r3,r2
   1af68:	1001703a 	wrctl	status,r2
  
  return context;
   1af6c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1af70:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1af74:	d0a8db97 	ldw	r2,-23698(gp)
   1af78:	10800d03 	ldbu	r2,52(r2)
   1af7c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1af80:	e0fffd03 	ldbu	r3,-12(fp)
   1af84:	e13ffd03 	ldbu	r4,-12(fp)
   1af88:	d0a8d8c4 	addi	r2,gp,-23709
   1af8c:	2085883a 	add	r2,r4,r2
   1af90:	10800003 	ldbu	r2,0(r2)
   1af94:	1009883a 	mov	r4,r2
   1af98:	d0a8db97 	ldw	r2,-23698(gp)
   1af9c:	10800d43 	ldbu	r2,53(r2)
   1afa0:	0084303a 	nor	r2,zero,r2
   1afa4:	2084703a 	and	r2,r4,r2
   1afa8:	1009883a 	mov	r4,r2
   1afac:	d0a8d8c4 	addi	r2,gp,-23709
   1afb0:	1885883a 	add	r2,r3,r2
   1afb4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1afb8:	e0fffd03 	ldbu	r3,-12(fp)
   1afbc:	d0a8d8c4 	addi	r2,gp,-23709
   1afc0:	1885883a 	add	r2,r3,r2
   1afc4:	10800003 	ldbu	r2,0(r2)
   1afc8:	10803fcc 	andi	r2,r2,255
   1afcc:	1000071e 	bne	r2,zero,1afec <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1afd0:	d0a8db97 	ldw	r2,-23698(gp)
   1afd4:	10800d83 	ldbu	r2,54(r2)
   1afd8:	0084303a 	nor	r2,zero,r2
   1afdc:	1007883a 	mov	r3,r2
   1afe0:	d0a8d883 	ldbu	r2,-23710(gp)
   1afe4:	1884703a 	and	r2,r3,r2
   1afe8:	d0a8d885 	stb	r2,-23710(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1afec:	d0a8db97 	ldw	r2,-23698(gp)
   1aff0:	e0ffff0b 	ldhu	r3,-4(fp)
   1aff4:	10c00b8d 	sth	r3,46(r2)
   1aff8:	e0bffb17 	ldw	r2,-20(fp)
   1affc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b000:	e0bffc17 	ldw	r2,-16(fp)
   1b004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1b008:	0014ab00 	call	14ab0 <OS_Sched>
   1b00c:	00000106 	br	1b014 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1b010:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1b014:	e037883a 	mov	sp,fp
   1b018:	dfc00117 	ldw	ra,4(sp)
   1b01c:	df000017 	ldw	fp,0(sp)
   1b020:	dec00204 	addi	sp,sp,8
   1b024:	f800283a 	ret

0001b028 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1b028:	defff804 	addi	sp,sp,-32
   1b02c:	dfc00715 	stw	ra,28(sp)
   1b030:	df000615 	stw	fp,24(sp)
   1b034:	df000604 	addi	fp,sp,24
   1b038:	2015883a 	mov	r10,r4
   1b03c:	2809883a 	mov	r4,r5
   1b040:	3007883a 	mov	r3,r6
   1b044:	3805883a 	mov	r2,r7
   1b048:	e2bffc05 	stb	r10,-16(fp)
   1b04c:	e13ffd05 	stb	r4,-12(fp)
   1b050:	e0fffe05 	stb	r3,-8(fp)
   1b054:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b058:	d0a8da83 	ldbu	r2,-23702(gp)
   1b05c:	10803fcc 	andi	r2,r2,255
   1b060:	10000226 	beq	r2,zero,1b06c <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1b064:	00801544 	movi	r2,85
   1b068:	00004206 	br	1b174 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1b06c:	e0bffc03 	ldbu	r2,-16(fp)
   1b070:	1000081e 	bne	r2,zero,1b094 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1b074:	e0bffd03 	ldbu	r2,-12(fp)
   1b078:	1000061e 	bne	r2,zero,1b094 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1b07c:	e0bffe03 	ldbu	r2,-8(fp)
   1b080:	1000041e 	bne	r2,zero,1b094 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1b084:	e0bfff0b 	ldhu	r2,-4(fp)
   1b088:	1000021e 	bne	r2,zero,1b094 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1b08c:	00801504 	movi	r2,84
   1b090:	00003806 	br	1b174 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1b094:	e0bffd03 	ldbu	r2,-12(fp)
   1b098:	10800f30 	cmpltui	r2,r2,60
   1b09c:	1000021e 	bne	r2,zero,1b0a8 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1b0a0:	00801444 	movi	r2,81
   1b0a4:	00003306 	br	1b174 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1b0a8:	e0bffe03 	ldbu	r2,-8(fp)
   1b0ac:	10800f30 	cmpltui	r2,r2,60
   1b0b0:	1000021e 	bne	r2,zero,1b0bc <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1b0b4:	00801484 	movi	r2,82
   1b0b8:	00002e06 	br	1b174 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1b0bc:	e0bfff0b 	ldhu	r2,-4(fp)
   1b0c0:	1080fa30 	cmpltui	r2,r2,1000
   1b0c4:	1000021e 	bne	r2,zero,1b0d0 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1b0c8:	008014c4 	movi	r2,83
   1b0cc:	00002906 	br	1b174 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b0d0:	e0bffc03 	ldbu	r2,-16(fp)
   1b0d4:	10c38424 	muli	r3,r2,3600
   1b0d8:	e0bffd03 	ldbu	r2,-12(fp)
   1b0dc:	10800f24 	muli	r2,r2,60
   1b0e0:	1887883a 	add	r3,r3,r2
   1b0e4:	e0bffe03 	ldbu	r2,-8(fp)
   1b0e8:	1885883a 	add	r2,r3,r2
   1b0ec:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1b0f0:	e0bfff0b 	ldhu	r2,-4(fp)
   1b0f4:	10800f84 	addi	r2,r2,62
   1b0f8:	100690fa 	slli	r3,r2,3
   1b0fc:	008418b4 	movhi	r2,4194
   1b100:	109374c4 	addi	r2,r2,19923
   1b104:	188a383a 	mulxuu	r5,r3,r2
   1b108:	1885383a 	mul	r2,r3,r2
   1b10c:	1011883a 	mov	r8,r2
   1b110:	2813883a 	mov	r9,r5
   1b114:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b118:	2085883a 	add	r2,r4,r2
   1b11c:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1b120:	e0bffb17 	ldw	r2,-20(fp)
   1b124:	1004d43a 	srli	r2,r2,16
   1b128:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1b12c:	e0bffb17 	ldw	r2,-20(fp)
   1b130:	10bfffcc 	andi	r2,r2,65535
   1b134:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1b138:	e0bffb17 	ldw	r2,-20(fp)
   1b13c:	10bfffcc 	andi	r2,r2,65535
   1b140:	1009883a 	mov	r4,r2
   1b144:	001af240 	call	1af24 <OSTimeDly>
    while (loops > 0) {
   1b148:	00000706 	br	1b168 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1b14c:	01200014 	movui	r4,32768
   1b150:	001af240 	call	1af24 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1b154:	01200014 	movui	r4,32768
   1b158:	001af240 	call	1af24 <OSTimeDly>
        loops--;
   1b15c:	e0bffa0b 	ldhu	r2,-24(fp)
   1b160:	10bfffc4 	addi	r2,r2,-1
   1b164:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1b168:	e0bffa0b 	ldhu	r2,-24(fp)
   1b16c:	103ff71e 	bne	r2,zero,1b14c <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1b170:	0005883a 	mov	r2,zero
}
   1b174:	e037883a 	mov	sp,fp
   1b178:	dfc00117 	ldw	ra,4(sp)
   1b17c:	df000017 	ldw	fp,0(sp)
   1b180:	dec00204 	addi	sp,sp,8
   1b184:	f800283a 	ret

0001b188 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1b188:	defff504 	addi	sp,sp,-44
   1b18c:	dfc00a15 	stw	ra,40(sp)
   1b190:	df000915 	stw	fp,36(sp)
   1b194:	df000904 	addi	fp,sp,36
   1b198:	2005883a 	mov	r2,r4
   1b19c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b1a0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1b1a4:	e0bfff03 	ldbu	r2,-4(fp)
   1b1a8:	10800530 	cmpltui	r2,r2,20
   1b1ac:	1000021e 	bne	r2,zero,1b1b8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b1b0:	00800a84 	movi	r2,42
   1b1b4:	00006406 	br	1b348 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b1b8:	0005303a 	rdctl	r2,status
   1b1bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b1c0:	e0fffe17 	ldw	r3,-8(fp)
   1b1c4:	00bfff84 	movi	r2,-2
   1b1c8:	1884703a 	and	r2,r3,r2
   1b1cc:	1001703a 	wrctl	status,r2
  
  return context;
   1b1d0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1b1d4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1b1d8:	e0ffff03 	ldbu	r3,-4(fp)
   1b1dc:	00800274 	movhi	r2,9
   1b1e0:	109fb704 	addi	r2,r2,32476
   1b1e4:	18c7883a 	add	r3,r3,r3
   1b1e8:	18c7883a 	add	r3,r3,r3
   1b1ec:	10c5883a 	add	r2,r2,r3
   1b1f0:	10800017 	ldw	r2,0(r2)
   1b1f4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1b1f8:	e0bff917 	ldw	r2,-28(fp)
   1b1fc:	1000061e 	bne	r2,zero,1b218 <OSTimeDlyResume+0x90>
   1b200:	e0bff717 	ldw	r2,-36(fp)
   1b204:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b208:	e0bff817 	ldw	r2,-32(fp)
   1b20c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b210:	008010c4 	movi	r2,67
   1b214:	00004c06 	br	1b348 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b218:	e0bff917 	ldw	r2,-28(fp)
   1b21c:	10800058 	cmpnei	r2,r2,1
   1b220:	1000061e 	bne	r2,zero,1b23c <OSTimeDlyResume+0xb4>
   1b224:	e0bff717 	ldw	r2,-36(fp)
   1b228:	e0bffa15 	stw	r2,-24(fp)
   1b22c:	e0bffa17 	ldw	r2,-24(fp)
   1b230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b234:	008010c4 	movi	r2,67
   1b238:	00004306 	br	1b348 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1b23c:	e0bff917 	ldw	r2,-28(fp)
   1b240:	10800b8b 	ldhu	r2,46(r2)
   1b244:	10bfffcc 	andi	r2,r2,65535
   1b248:	1000061e 	bne	r2,zero,1b264 <OSTimeDlyResume+0xdc>
   1b24c:	e0bff717 	ldw	r2,-36(fp)
   1b250:	e0bffb15 	stw	r2,-20(fp)
   1b254:	e0bffb17 	ldw	r2,-20(fp)
   1b258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1b25c:	00801404 	movi	r2,80
   1b260:	00003906 	br	1b348 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1b264:	e0bff917 	ldw	r2,-28(fp)
   1b268:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1b26c:	e0bff917 	ldw	r2,-28(fp)
   1b270:	10800c03 	ldbu	r2,48(r2)
   1b274:	10803fcc 	andi	r2,r2,255
   1b278:	10800dcc 	andi	r2,r2,55
   1b27c:	10000b26 	beq	r2,zero,1b2ac <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1b280:	e0bff917 	ldw	r2,-28(fp)
   1b284:	10c00c03 	ldbu	r3,48(r2)
   1b288:	00bff204 	movi	r2,-56
   1b28c:	1884703a 	and	r2,r3,r2
   1b290:	1007883a 	mov	r3,r2
   1b294:	e0bff917 	ldw	r2,-28(fp)
   1b298:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1b29c:	e0bff917 	ldw	r2,-28(fp)
   1b2a0:	00c00044 	movi	r3,1
   1b2a4:	10c00c45 	stb	r3,49(r2)
   1b2a8:	00000206 	br	1b2b4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1b2ac:	e0bff917 	ldw	r2,-28(fp)
   1b2b0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1b2b4:	e0bff917 	ldw	r2,-28(fp)
   1b2b8:	10800c03 	ldbu	r2,48(r2)
   1b2bc:	10803fcc 	andi	r2,r2,255
   1b2c0:	1080020c 	andi	r2,r2,8
   1b2c4:	10001b1e 	bne	r2,zero,1b334 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1b2c8:	e0bff917 	ldw	r2,-28(fp)
   1b2cc:	10c00d83 	ldbu	r3,54(r2)
   1b2d0:	d0a8d883 	ldbu	r2,-23710(gp)
   1b2d4:	1884b03a 	or	r2,r3,r2
   1b2d8:	d0a8d885 	stb	r2,-23710(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b2dc:	e0bff917 	ldw	r2,-28(fp)
   1b2e0:	10800d03 	ldbu	r2,52(r2)
   1b2e4:	10c03fcc 	andi	r3,r2,255
   1b2e8:	e0bff917 	ldw	r2,-28(fp)
   1b2ec:	10800d03 	ldbu	r2,52(r2)
   1b2f0:	11003fcc 	andi	r4,r2,255
   1b2f4:	d0a8d8c4 	addi	r2,gp,-23709
   1b2f8:	2085883a 	add	r2,r4,r2
   1b2fc:	11000003 	ldbu	r4,0(r2)
   1b300:	e0bff917 	ldw	r2,-28(fp)
   1b304:	10800d43 	ldbu	r2,53(r2)
   1b308:	2084b03a 	or	r2,r4,r2
   1b30c:	1009883a 	mov	r4,r2
   1b310:	d0a8d8c4 	addi	r2,gp,-23709
   1b314:	1885883a 	add	r2,r3,r2
   1b318:	11000005 	stb	r4,0(r2)
   1b31c:	e0bff717 	ldw	r2,-36(fp)
   1b320:	e0bffc15 	stw	r2,-16(fp)
   1b324:	e0bffc17 	ldw	r2,-16(fp)
   1b328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1b32c:	0014ab00 	call	14ab0 <OS_Sched>
   1b330:	00000406 	br	1b344 <OSTimeDlyResume+0x1bc>
   1b334:	e0bff717 	ldw	r2,-36(fp)
   1b338:	e0bffd15 	stw	r2,-12(fp)
   1b33c:	e0bffd17 	ldw	r2,-12(fp)
   1b340:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1b344:	0005883a 	mov	r2,zero
}
   1b348:	e037883a 	mov	sp,fp
   1b34c:	dfc00117 	ldw	ra,4(sp)
   1b350:	df000017 	ldw	fp,0(sp)
   1b354:	dec00204 	addi	sp,sp,8
   1b358:	f800283a 	ret

0001b35c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1b35c:	defffb04 	addi	sp,sp,-20
   1b360:	df000415 	stw	fp,16(sp)
   1b364:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b368:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b36c:	0005303a 	rdctl	r2,status
   1b370:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b374:	e0fffe17 	ldw	r3,-8(fp)
   1b378:	00bfff84 	movi	r2,-2
   1b37c:	1884703a 	and	r2,r3,r2
   1b380:	1001703a 	wrctl	status,r2
  
  return context;
   1b384:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1b388:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1b38c:	d0a8dc97 	ldw	r2,-23694(gp)
   1b390:	e0bffd15 	stw	r2,-12(fp)
   1b394:	e0bffc17 	ldw	r2,-16(fp)
   1b398:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b39c:	e0bfff17 	ldw	r2,-4(fp)
   1b3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1b3a4:	e0bffd17 	ldw	r2,-12(fp)
}
   1b3a8:	e037883a 	mov	sp,fp
   1b3ac:	df000017 	ldw	fp,0(sp)
   1b3b0:	dec00104 	addi	sp,sp,4
   1b3b4:	f800283a 	ret

0001b3b8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1b3b8:	defffb04 	addi	sp,sp,-20
   1b3bc:	df000415 	stw	fp,16(sp)
   1b3c0:	df000404 	addi	fp,sp,16
   1b3c4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b3c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3cc:	0005303a 	rdctl	r2,status
   1b3d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3d4:	e0fffd17 	ldw	r3,-12(fp)
   1b3d8:	00bfff84 	movi	r2,-2
   1b3dc:	1884703a 	and	r2,r3,r2
   1b3e0:	1001703a 	wrctl	status,r2
  
  return context;
   1b3e4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1b3e8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1b3ec:	e0bfff17 	ldw	r2,-4(fp)
   1b3f0:	d0a8dc95 	stw	r2,-23694(gp)
   1b3f4:	e0bffc17 	ldw	r2,-16(fp)
   1b3f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3fc:	e0bffe17 	ldw	r2,-8(fp)
   1b400:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1b404:	0001883a 	nop
   1b408:	e037883a 	mov	sp,fp
   1b40c:	df000017 	ldw	fp,0(sp)
   1b410:	dec00104 	addi	sp,sp,4
   1b414:	f800283a 	ret

0001b418 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1b418:	defffd04 	addi	sp,sp,-12
   1b41c:	dfc00215 	stw	ra,8(sp)
   1b420:	df000115 	stw	fp,4(sp)
   1b424:	df000104 	addi	fp,sp,4
   1b428:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1b42c:	d1601b84 	addi	r5,gp,-32658
   1b430:	e13fff17 	ldw	r4,-4(fp)
   1b434:	00230980 	call	23098 <alt_dev_llist_insert>
}
   1b438:	e037883a 	mov	sp,fp
   1b43c:	dfc00117 	ldw	ra,4(sp)
   1b440:	df000017 	ldw	fp,0(sp)
   1b444:	dec00204 	addi	sp,sp,8
   1b448:	f800283a 	ret

0001b44c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1b44c:	defffd04 	addi	sp,sp,-12
   1b450:	dfc00215 	stw	ra,8(sp)
   1b454:	df000115 	stw	fp,4(sp)
   1b458:	df000104 	addi	fp,sp,4
   1b45c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1b460:	00239780 	call	23978 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1b464:	00800044 	movi	r2,1
   1b468:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1b46c:	0001883a 	nop
   1b470:	e037883a 	mov	sp,fp
   1b474:	dfc00117 	ldw	ra,4(sp)
   1b478:	df000017 	ldw	fp,0(sp)
   1b47c:	dec00204 	addi	sp,sp,8
   1b480:	f800283a 	ret

0001b484 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1b484:	defffb04 	addi	sp,sp,-20
   1b488:	dfc00415 	stw	ra,16(sp)
   1b48c:	df000315 	stw	fp,12(sp)
   1b490:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1b494:	01c00204 	movi	r7,8
   1b498:	000d883a 	mov	r6,zero
   1b49c:	000b883a 	mov	r5,zero
   1b4a0:	013fc834 	movhi	r4,65312
   1b4a4:	21080004 	addi	r4,r4,8192
   1b4a8:	0020e580 	call	20e58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1b4ac:	01800204 	movi	r6,8
   1b4b0:	000b883a 	mov	r5,zero
   1b4b4:	010000b4 	movhi	r4,2
   1b4b8:	21161b04 	addi	r4,r4,22636
   1b4bc:	002021c0 	call	2021c <altera_avalon_jtag_uart_init>
   1b4c0:	010000b4 	movhi	r4,2
   1b4c4:	21161104 	addi	r4,r4,22596
   1b4c8:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1b4cc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1b4d0:	010000b4 	movhi	r4,2
   1b4d4:	211a2c04 	addi	r4,r4,26800
   1b4d8:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1b4dc:	010000b4 	movhi	r4,2
   1b4e0:	211a3804 	addi	r4,r4,26848
   1b4e4:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1b4e8:	010000b4 	movhi	r4,2
   1b4ec:	211a4404 	addi	r4,r4,26896
   1b4f0:	00217280 	call	21728 <alt_up_character_lcd_init>
   1b4f4:	010000b4 	movhi	r4,2
   1b4f8:	211a4404 	addi	r4,r4,26896
   1b4fc:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1b500:	010000b4 	movhi	r4,2
   1b504:	211a4f04 	addi	r4,r4,26940
   1b508:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1b50c:	010000b4 	movhi	r4,2
   1b510:	211a5a04 	addi	r4,r4,26984
   1b514:	002201c0 	call	2201c <alt_up_ps2_init>
   1b518:	010000b4 	movhi	r4,2
   1b51c:	211a5a04 	addi	r4,r4,26984
   1b520:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1b524:	010000b4 	movhi	r4,2
   1b528:	211a6804 	addi	r4,r4,27040
   1b52c:	002201c0 	call	2201c <alt_up_ps2_init>
   1b530:	010000b4 	movhi	r4,2
   1b534:	211a6804 	addi	r4,r4,27040
   1b538:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1b53c:	010000b4 	movhi	r4,2
   1b540:	211a7604 	addi	r4,r4,27096
   1b544:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1b548:	010000b4 	movhi	r4,2
   1b54c:	211a8104 	addi	r4,r4,27140
   1b550:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1b554:	008000b4 	movhi	r2,2
   1b558:	109a8e04 	addi	r2,r2,27192
   1b55c:	10800a17 	ldw	r2,40(r2)
   1b560:	10800017 	ldw	r2,0(r2)
   1b564:	1007883a 	mov	r3,r2
   1b568:	008000b4 	movhi	r2,2
   1b56c:	109a8e04 	addi	r2,r2,27192
   1b570:	10c00b15 	stw	r3,44(r2)
   1b574:	008000b4 	movhi	r2,2
   1b578:	109a8e04 	addi	r2,r2,27192
   1b57c:	10800a17 	ldw	r2,40(r2)
   1b580:	10800104 	addi	r2,r2,4
   1b584:	10800017 	ldw	r2,0(r2)
   1b588:	1007883a 	mov	r3,r2
   1b58c:	008000b4 	movhi	r2,2
   1b590:	109a8e04 	addi	r2,r2,27192
   1b594:	10c00c15 	stw	r3,48(r2)
   1b598:	008000b4 	movhi	r2,2
   1b59c:	109a8e04 	addi	r2,r2,27192
   1b5a0:	10800a17 	ldw	r2,40(r2)
   1b5a4:	10800204 	addi	r2,r2,8
   1b5a8:	10800017 	ldw	r2,0(r2)
   1b5ac:	10ffffcc 	andi	r3,r2,65535
   1b5b0:	008000b4 	movhi	r2,2
   1b5b4:	109a8e04 	addi	r2,r2,27192
   1b5b8:	10c01115 	stw	r3,68(r2)
   1b5bc:	008000b4 	movhi	r2,2
   1b5c0:	109a8e04 	addi	r2,r2,27192
   1b5c4:	10800a17 	ldw	r2,40(r2)
   1b5c8:	10800204 	addi	r2,r2,8
   1b5cc:	10800017 	ldw	r2,0(r2)
   1b5d0:	1006d43a 	srli	r3,r2,16
   1b5d4:	008000b4 	movhi	r2,2
   1b5d8:	109a8e04 	addi	r2,r2,27192
   1b5dc:	10c01215 	stw	r3,72(r2)
   1b5e0:	008000b4 	movhi	r2,2
   1b5e4:	109a8e04 	addi	r2,r2,27192
   1b5e8:	10800a17 	ldw	r2,40(r2)
   1b5ec:	10800304 	addi	r2,r2,12
   1b5f0:	10800017 	ldw	r2,0(r2)
   1b5f4:	1005d07a 	srai	r2,r2,1
   1b5f8:	10c0004c 	andi	r3,r2,1
   1b5fc:	008000b4 	movhi	r2,2
   1b600:	109a8e04 	addi	r2,r2,27192
   1b604:	10c00d15 	stw	r3,52(r2)
   1b608:	008000b4 	movhi	r2,2
   1b60c:	109a8e04 	addi	r2,r2,27192
   1b610:	10800a17 	ldw	r2,40(r2)
   1b614:	10800304 	addi	r2,r2,12
   1b618:	10800017 	ldw	r2,0(r2)
   1b61c:	1005d23a 	srai	r2,r2,8
   1b620:	108003cc 	andi	r2,r2,15
   1b624:	10800044 	addi	r2,r2,1
   1b628:	1007883a 	mov	r3,r2
   1b62c:	008000b4 	movhi	r2,2
   1b630:	109a8e04 	addi	r2,r2,27192
   1b634:	10c00e15 	stw	r3,56(r2)
   1b638:	008000b4 	movhi	r2,2
   1b63c:	109a8e04 	addi	r2,r2,27192
   1b640:	10800a17 	ldw	r2,40(r2)
   1b644:	10800304 	addi	r2,r2,12
   1b648:	10800017 	ldw	r2,0(r2)
   1b64c:	1005d1ba 	srai	r2,r2,6
   1b650:	108000cc 	andi	r2,r2,3
   1b654:	10800044 	addi	r2,r2,1
   1b658:	1007883a 	mov	r3,r2
   1b65c:	008000b4 	movhi	r2,2
   1b660:	109a8e04 	addi	r2,r2,27192
   1b664:	10c00f15 	stw	r3,60(r2)
   1b668:	008000b4 	movhi	r2,2
   1b66c:	109a8e04 	addi	r2,r2,27192
   1b670:	10800e17 	ldw	r2,56(r2)
   1b674:	1007883a 	mov	r3,r2
   1b678:	008000b4 	movhi	r2,2
   1b67c:	109a8e04 	addi	r2,r2,27192
   1b680:	10800f17 	ldw	r2,60(r2)
   1b684:	1885383a 	mul	r2,r3,r2
   1b688:	e0bffd05 	stb	r2,-12(fp)
   1b68c:	e0bffd03 	ldbu	r2,-12(fp)
   1b690:	10800268 	cmpgeui	r2,r2,9
   1b694:	1000051e 	bne	r2,zero,1b6ac <alt_sys_init+0x228>
   1b698:	008000b4 	movhi	r2,2
   1b69c:	109a8e04 	addi	r2,r2,27192
   1b6a0:	00c00044 	movi	r3,1
   1b6a4:	10c01015 	stw	r3,64(r2)
   1b6a8:	00000c06 	br	1b6dc <alt_sys_init+0x258>
   1b6ac:	e0bffd03 	ldbu	r2,-12(fp)
   1b6b0:	10800468 	cmpgeui	r2,r2,17
   1b6b4:	1000051e 	bne	r2,zero,1b6cc <alt_sys_init+0x248>
   1b6b8:	008000b4 	movhi	r2,2
   1b6bc:	109a8e04 	addi	r2,r2,27192
   1b6c0:	00c00084 	movi	r3,2
   1b6c4:	10c01015 	stw	r3,64(r2)
   1b6c8:	00000406 	br	1b6dc <alt_sys_init+0x258>
   1b6cc:	008000b4 	movhi	r2,2
   1b6d0:	109a8e04 	addi	r2,r2,27192
   1b6d4:	00c00104 	movi	r3,4
   1b6d8:	10c01015 	stw	r3,64(r2)
   1b6dc:	008000b4 	movhi	r2,2
   1b6e0:	109a8e04 	addi	r2,r2,27192
   1b6e4:	10800a17 	ldw	r2,40(r2)
   1b6e8:	10800304 	addi	r2,r2,12
   1b6ec:	10800017 	ldw	r2,0(r2)
   1b6f0:	1005d43a 	srai	r2,r2,16
   1b6f4:	e0bffd45 	stb	r2,-11(fp)
   1b6f8:	008000b4 	movhi	r2,2
   1b6fc:	109a8e04 	addi	r2,r2,27192
   1b700:	10800a17 	ldw	r2,40(r2)
   1b704:	10800304 	addi	r2,r2,12
   1b708:	10800017 	ldw	r2,0(r2)
   1b70c:	1004d63a 	srli	r2,r2,24
   1b710:	e0bffd85 	stb	r2,-10(fp)
   1b714:	008000b4 	movhi	r2,2
   1b718:	109a8e04 	addi	r2,r2,27192
   1b71c:	10801017 	ldw	r2,64(r2)
   1b720:	10800058 	cmpnei	r2,r2,1
   1b724:	1000041e 	bne	r2,zero,1b738 <alt_sys_init+0x2b4>
   1b728:	008000b4 	movhi	r2,2
   1b72c:	109a8e04 	addi	r2,r2,27192
   1b730:	10001315 	stw	zero,76(r2)
   1b734:	00000e06 	br	1b770 <alt_sys_init+0x2ec>
   1b738:	008000b4 	movhi	r2,2
   1b73c:	109a8e04 	addi	r2,r2,27192
   1b740:	10801017 	ldw	r2,64(r2)
   1b744:	10800098 	cmpnei	r2,r2,2
   1b748:	1000051e 	bne	r2,zero,1b760 <alt_sys_init+0x2dc>
   1b74c:	008000b4 	movhi	r2,2
   1b750:	109a8e04 	addi	r2,r2,27192
   1b754:	00c00044 	movi	r3,1
   1b758:	10c01315 	stw	r3,76(r2)
   1b75c:	00000406 	br	1b770 <alt_sys_init+0x2ec>
   1b760:	008000b4 	movhi	r2,2
   1b764:	109a8e04 	addi	r2,r2,27192
   1b768:	00c00084 	movi	r3,2
   1b76c:	10c01315 	stw	r3,76(r2)
   1b770:	e0bffd43 	ldbu	r2,-11(fp)
   1b774:	00c00804 	movi	r3,32
   1b778:	1885c83a 	sub	r2,r3,r2
   1b77c:	00ffffc4 	movi	r3,-1
   1b780:	1886d83a 	srl	r3,r3,r2
   1b784:	008000b4 	movhi	r2,2
   1b788:	109a8e04 	addi	r2,r2,27192
   1b78c:	10c01415 	stw	r3,80(r2)
   1b790:	e0fffd43 	ldbu	r3,-11(fp)
   1b794:	008000b4 	movhi	r2,2
   1b798:	109a8e04 	addi	r2,r2,27192
   1b79c:	10801317 	ldw	r2,76(r2)
   1b7a0:	1887883a 	add	r3,r3,r2
   1b7a4:	008000b4 	movhi	r2,2
   1b7a8:	109a8e04 	addi	r2,r2,27192
   1b7ac:	10c01515 	stw	r3,84(r2)
   1b7b0:	e0bffd83 	ldbu	r2,-10(fp)
   1b7b4:	00c00804 	movi	r3,32
   1b7b8:	1885c83a 	sub	r2,r3,r2
   1b7bc:	00ffffc4 	movi	r3,-1
   1b7c0:	1886d83a 	srl	r3,r3,r2
   1b7c4:	008000b4 	movhi	r2,2
   1b7c8:	109a8e04 	addi	r2,r2,27192
   1b7cc:	10c01615 	stw	r3,88(r2)
   1b7d0:	010000b4 	movhi	r4,2
   1b7d4:	211a8e04 	addi	r4,r4,27192
   1b7d8:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1b7dc:	008000b4 	movhi	r2,2
   1b7e0:	109aa504 	addi	r2,r2,27284
   1b7e4:	10800a17 	ldw	r2,40(r2)
   1b7e8:	10800017 	ldw	r2,0(r2)
   1b7ec:	1007883a 	mov	r3,r2
   1b7f0:	008000b4 	movhi	r2,2
   1b7f4:	109aa504 	addi	r2,r2,27284
   1b7f8:	10c00b15 	stw	r3,44(r2)
   1b7fc:	008000b4 	movhi	r2,2
   1b800:	109aa504 	addi	r2,r2,27284
   1b804:	10800a17 	ldw	r2,40(r2)
   1b808:	10800104 	addi	r2,r2,4
   1b80c:	10800017 	ldw	r2,0(r2)
   1b810:	1007883a 	mov	r3,r2
   1b814:	008000b4 	movhi	r2,2
   1b818:	109aa504 	addi	r2,r2,27284
   1b81c:	10c00c15 	stw	r3,48(r2)
   1b820:	008000b4 	movhi	r2,2
   1b824:	109aa504 	addi	r2,r2,27284
   1b828:	10800a17 	ldw	r2,40(r2)
   1b82c:	10800204 	addi	r2,r2,8
   1b830:	10800017 	ldw	r2,0(r2)
   1b834:	10ffffcc 	andi	r3,r2,65535
   1b838:	008000b4 	movhi	r2,2
   1b83c:	109aa504 	addi	r2,r2,27284
   1b840:	10c01115 	stw	r3,68(r2)
   1b844:	008000b4 	movhi	r2,2
   1b848:	109aa504 	addi	r2,r2,27284
   1b84c:	10800a17 	ldw	r2,40(r2)
   1b850:	10800204 	addi	r2,r2,8
   1b854:	10800017 	ldw	r2,0(r2)
   1b858:	1006d43a 	srli	r3,r2,16
   1b85c:	008000b4 	movhi	r2,2
   1b860:	109aa504 	addi	r2,r2,27284
   1b864:	10c01215 	stw	r3,72(r2)
   1b868:	008000b4 	movhi	r2,2
   1b86c:	109aa504 	addi	r2,r2,27284
   1b870:	10800a17 	ldw	r2,40(r2)
   1b874:	10800304 	addi	r2,r2,12
   1b878:	10800017 	ldw	r2,0(r2)
   1b87c:	1005d07a 	srai	r2,r2,1
   1b880:	10c0004c 	andi	r3,r2,1
   1b884:	008000b4 	movhi	r2,2
   1b888:	109aa504 	addi	r2,r2,27284
   1b88c:	10c00d15 	stw	r3,52(r2)
   1b890:	008000b4 	movhi	r2,2
   1b894:	109aa504 	addi	r2,r2,27284
   1b898:	10800a17 	ldw	r2,40(r2)
   1b89c:	10800304 	addi	r2,r2,12
   1b8a0:	10800017 	ldw	r2,0(r2)
   1b8a4:	1005d23a 	srai	r2,r2,8
   1b8a8:	108003cc 	andi	r2,r2,15
   1b8ac:	10800044 	addi	r2,r2,1
   1b8b0:	1007883a 	mov	r3,r2
   1b8b4:	008000b4 	movhi	r2,2
   1b8b8:	109aa504 	addi	r2,r2,27284
   1b8bc:	10c00e15 	stw	r3,56(r2)
   1b8c0:	008000b4 	movhi	r2,2
   1b8c4:	109aa504 	addi	r2,r2,27284
   1b8c8:	10800a17 	ldw	r2,40(r2)
   1b8cc:	10800304 	addi	r2,r2,12
   1b8d0:	10800017 	ldw	r2,0(r2)
   1b8d4:	1005d1ba 	srai	r2,r2,6
   1b8d8:	108000cc 	andi	r2,r2,3
   1b8dc:	10800044 	addi	r2,r2,1
   1b8e0:	1007883a 	mov	r3,r2
   1b8e4:	008000b4 	movhi	r2,2
   1b8e8:	109aa504 	addi	r2,r2,27284
   1b8ec:	10c00f15 	stw	r3,60(r2)
   1b8f0:	008000b4 	movhi	r2,2
   1b8f4:	109aa504 	addi	r2,r2,27284
   1b8f8:	10800e17 	ldw	r2,56(r2)
   1b8fc:	1007883a 	mov	r3,r2
   1b900:	008000b4 	movhi	r2,2
   1b904:	109aa504 	addi	r2,r2,27284
   1b908:	10800f17 	ldw	r2,60(r2)
   1b90c:	1885383a 	mul	r2,r3,r2
   1b910:	e0bffdc5 	stb	r2,-9(fp)
   1b914:	e0bffdc3 	ldbu	r2,-9(fp)
   1b918:	10800268 	cmpgeui	r2,r2,9
   1b91c:	1000051e 	bne	r2,zero,1b934 <alt_sys_init+0x4b0>
   1b920:	008000b4 	movhi	r2,2
   1b924:	109aa504 	addi	r2,r2,27284
   1b928:	00c00044 	movi	r3,1
   1b92c:	10c01015 	stw	r3,64(r2)
   1b930:	00000c06 	br	1b964 <alt_sys_init+0x4e0>
   1b934:	e0bffdc3 	ldbu	r2,-9(fp)
   1b938:	10800468 	cmpgeui	r2,r2,17
   1b93c:	1000051e 	bne	r2,zero,1b954 <alt_sys_init+0x4d0>
   1b940:	008000b4 	movhi	r2,2
   1b944:	109aa504 	addi	r2,r2,27284
   1b948:	00c00084 	movi	r3,2
   1b94c:	10c01015 	stw	r3,64(r2)
   1b950:	00000406 	br	1b964 <alt_sys_init+0x4e0>
   1b954:	008000b4 	movhi	r2,2
   1b958:	109aa504 	addi	r2,r2,27284
   1b95c:	00c00104 	movi	r3,4
   1b960:	10c01015 	stw	r3,64(r2)
   1b964:	008000b4 	movhi	r2,2
   1b968:	109aa504 	addi	r2,r2,27284
   1b96c:	10800a17 	ldw	r2,40(r2)
   1b970:	10800304 	addi	r2,r2,12
   1b974:	10800017 	ldw	r2,0(r2)
   1b978:	1005d43a 	srai	r2,r2,16
   1b97c:	e0bffe05 	stb	r2,-8(fp)
   1b980:	008000b4 	movhi	r2,2
   1b984:	109aa504 	addi	r2,r2,27284
   1b988:	10800a17 	ldw	r2,40(r2)
   1b98c:	10800304 	addi	r2,r2,12
   1b990:	10800017 	ldw	r2,0(r2)
   1b994:	1004d63a 	srli	r2,r2,24
   1b998:	e0bffe45 	stb	r2,-7(fp)
   1b99c:	008000b4 	movhi	r2,2
   1b9a0:	109aa504 	addi	r2,r2,27284
   1b9a4:	10801017 	ldw	r2,64(r2)
   1b9a8:	10800058 	cmpnei	r2,r2,1
   1b9ac:	1000041e 	bne	r2,zero,1b9c0 <alt_sys_init+0x53c>
   1b9b0:	008000b4 	movhi	r2,2
   1b9b4:	109aa504 	addi	r2,r2,27284
   1b9b8:	10001315 	stw	zero,76(r2)
   1b9bc:	00000e06 	br	1b9f8 <alt_sys_init+0x574>
   1b9c0:	008000b4 	movhi	r2,2
   1b9c4:	109aa504 	addi	r2,r2,27284
   1b9c8:	10801017 	ldw	r2,64(r2)
   1b9cc:	10800098 	cmpnei	r2,r2,2
   1b9d0:	1000051e 	bne	r2,zero,1b9e8 <alt_sys_init+0x564>
   1b9d4:	008000b4 	movhi	r2,2
   1b9d8:	109aa504 	addi	r2,r2,27284
   1b9dc:	00c00044 	movi	r3,1
   1b9e0:	10c01315 	stw	r3,76(r2)
   1b9e4:	00000406 	br	1b9f8 <alt_sys_init+0x574>
   1b9e8:	008000b4 	movhi	r2,2
   1b9ec:	109aa504 	addi	r2,r2,27284
   1b9f0:	00c00084 	movi	r3,2
   1b9f4:	10c01315 	stw	r3,76(r2)
   1b9f8:	e0bffe03 	ldbu	r2,-8(fp)
   1b9fc:	00c00804 	movi	r3,32
   1ba00:	1885c83a 	sub	r2,r3,r2
   1ba04:	00ffffc4 	movi	r3,-1
   1ba08:	1886d83a 	srl	r3,r3,r2
   1ba0c:	008000b4 	movhi	r2,2
   1ba10:	109aa504 	addi	r2,r2,27284
   1ba14:	10c01415 	stw	r3,80(r2)
   1ba18:	e0fffe03 	ldbu	r3,-8(fp)
   1ba1c:	008000b4 	movhi	r2,2
   1ba20:	109aa504 	addi	r2,r2,27284
   1ba24:	10801317 	ldw	r2,76(r2)
   1ba28:	1887883a 	add	r3,r3,r2
   1ba2c:	008000b4 	movhi	r2,2
   1ba30:	109aa504 	addi	r2,r2,27284
   1ba34:	10c01515 	stw	r3,84(r2)
   1ba38:	e0bffe43 	ldbu	r2,-7(fp)
   1ba3c:	00c00804 	movi	r3,32
   1ba40:	1885c83a 	sub	r2,r3,r2
   1ba44:	00ffffc4 	movi	r3,-1
   1ba48:	1886d83a 	srl	r3,r3,r2
   1ba4c:	008000b4 	movhi	r2,2
   1ba50:	109aa504 	addi	r2,r2,27284
   1ba54:	10c01615 	stw	r3,88(r2)
   1ba58:	010000b4 	movhi	r4,2
   1ba5c:	211aa504 	addi	r4,r4,27284
   1ba60:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1ba64:	008000b4 	movhi	r2,2
   1ba68:	109abc04 	addi	r2,r2,27376
   1ba6c:	10800a17 	ldw	r2,40(r2)
   1ba70:	10800017 	ldw	r2,0(r2)
   1ba74:	1007883a 	mov	r3,r2
   1ba78:	008000b4 	movhi	r2,2
   1ba7c:	109abc04 	addi	r2,r2,27376
   1ba80:	10c00b15 	stw	r3,44(r2)
   1ba84:	008000b4 	movhi	r2,2
   1ba88:	109abc04 	addi	r2,r2,27376
   1ba8c:	10800a17 	ldw	r2,40(r2)
   1ba90:	10800104 	addi	r2,r2,4
   1ba94:	10800017 	ldw	r2,0(r2)
   1ba98:	1007883a 	mov	r3,r2
   1ba9c:	008000b4 	movhi	r2,2
   1baa0:	109abc04 	addi	r2,r2,27376
   1baa4:	10c00c15 	stw	r3,48(r2)
   1baa8:	008000b4 	movhi	r2,2
   1baac:	109abc04 	addi	r2,r2,27376
   1bab0:	10800a17 	ldw	r2,40(r2)
   1bab4:	10800204 	addi	r2,r2,8
   1bab8:	10800017 	ldw	r2,0(r2)
   1babc:	10ffffcc 	andi	r3,r2,65535
   1bac0:	008000b4 	movhi	r2,2
   1bac4:	109abc04 	addi	r2,r2,27376
   1bac8:	10c01115 	stw	r3,68(r2)
   1bacc:	008000b4 	movhi	r2,2
   1bad0:	109abc04 	addi	r2,r2,27376
   1bad4:	10800a17 	ldw	r2,40(r2)
   1bad8:	10800204 	addi	r2,r2,8
   1badc:	10800017 	ldw	r2,0(r2)
   1bae0:	1006d43a 	srli	r3,r2,16
   1bae4:	008000b4 	movhi	r2,2
   1bae8:	109abc04 	addi	r2,r2,27376
   1baec:	10c01215 	stw	r3,72(r2)
   1baf0:	008000b4 	movhi	r2,2
   1baf4:	109abc04 	addi	r2,r2,27376
   1baf8:	10800a17 	ldw	r2,40(r2)
   1bafc:	10800304 	addi	r2,r2,12
   1bb00:	10800017 	ldw	r2,0(r2)
   1bb04:	1005d07a 	srai	r2,r2,1
   1bb08:	10c0004c 	andi	r3,r2,1
   1bb0c:	008000b4 	movhi	r2,2
   1bb10:	109abc04 	addi	r2,r2,27376
   1bb14:	10c00d15 	stw	r3,52(r2)
   1bb18:	008000b4 	movhi	r2,2
   1bb1c:	109abc04 	addi	r2,r2,27376
   1bb20:	10800a17 	ldw	r2,40(r2)
   1bb24:	10800304 	addi	r2,r2,12
   1bb28:	10800017 	ldw	r2,0(r2)
   1bb2c:	1005d23a 	srai	r2,r2,8
   1bb30:	108003cc 	andi	r2,r2,15
   1bb34:	10800044 	addi	r2,r2,1
   1bb38:	1007883a 	mov	r3,r2
   1bb3c:	008000b4 	movhi	r2,2
   1bb40:	109abc04 	addi	r2,r2,27376
   1bb44:	10c00e15 	stw	r3,56(r2)
   1bb48:	008000b4 	movhi	r2,2
   1bb4c:	109abc04 	addi	r2,r2,27376
   1bb50:	10800a17 	ldw	r2,40(r2)
   1bb54:	10800304 	addi	r2,r2,12
   1bb58:	10800017 	ldw	r2,0(r2)
   1bb5c:	1005d1ba 	srai	r2,r2,6
   1bb60:	108000cc 	andi	r2,r2,3
   1bb64:	10800044 	addi	r2,r2,1
   1bb68:	1007883a 	mov	r3,r2
   1bb6c:	008000b4 	movhi	r2,2
   1bb70:	109abc04 	addi	r2,r2,27376
   1bb74:	10c00f15 	stw	r3,60(r2)
   1bb78:	008000b4 	movhi	r2,2
   1bb7c:	109abc04 	addi	r2,r2,27376
   1bb80:	10800e17 	ldw	r2,56(r2)
   1bb84:	1007883a 	mov	r3,r2
   1bb88:	008000b4 	movhi	r2,2
   1bb8c:	109abc04 	addi	r2,r2,27376
   1bb90:	10800f17 	ldw	r2,60(r2)
   1bb94:	1885383a 	mul	r2,r3,r2
   1bb98:	e0bffe85 	stb	r2,-6(fp)
   1bb9c:	e0bffe83 	ldbu	r2,-6(fp)
   1bba0:	10800268 	cmpgeui	r2,r2,9
   1bba4:	1000051e 	bne	r2,zero,1bbbc <alt_sys_init+0x738>
   1bba8:	008000b4 	movhi	r2,2
   1bbac:	109abc04 	addi	r2,r2,27376
   1bbb0:	00c00044 	movi	r3,1
   1bbb4:	10c01015 	stw	r3,64(r2)
   1bbb8:	00000c06 	br	1bbec <alt_sys_init+0x768>
   1bbbc:	e0bffe83 	ldbu	r2,-6(fp)
   1bbc0:	10800468 	cmpgeui	r2,r2,17
   1bbc4:	1000051e 	bne	r2,zero,1bbdc <alt_sys_init+0x758>
   1bbc8:	008000b4 	movhi	r2,2
   1bbcc:	109abc04 	addi	r2,r2,27376
   1bbd0:	00c00084 	movi	r3,2
   1bbd4:	10c01015 	stw	r3,64(r2)
   1bbd8:	00000406 	br	1bbec <alt_sys_init+0x768>
   1bbdc:	008000b4 	movhi	r2,2
   1bbe0:	109abc04 	addi	r2,r2,27376
   1bbe4:	00c00104 	movi	r3,4
   1bbe8:	10c01015 	stw	r3,64(r2)
   1bbec:	008000b4 	movhi	r2,2
   1bbf0:	109abc04 	addi	r2,r2,27376
   1bbf4:	10800a17 	ldw	r2,40(r2)
   1bbf8:	10800304 	addi	r2,r2,12
   1bbfc:	10800017 	ldw	r2,0(r2)
   1bc00:	1005d43a 	srai	r2,r2,16
   1bc04:	e0bffec5 	stb	r2,-5(fp)
   1bc08:	008000b4 	movhi	r2,2
   1bc0c:	109abc04 	addi	r2,r2,27376
   1bc10:	10800a17 	ldw	r2,40(r2)
   1bc14:	10800304 	addi	r2,r2,12
   1bc18:	10800017 	ldw	r2,0(r2)
   1bc1c:	1004d63a 	srli	r2,r2,24
   1bc20:	e0bfff05 	stb	r2,-4(fp)
   1bc24:	008000b4 	movhi	r2,2
   1bc28:	109abc04 	addi	r2,r2,27376
   1bc2c:	10801017 	ldw	r2,64(r2)
   1bc30:	10800058 	cmpnei	r2,r2,1
   1bc34:	1000041e 	bne	r2,zero,1bc48 <alt_sys_init+0x7c4>
   1bc38:	008000b4 	movhi	r2,2
   1bc3c:	109abc04 	addi	r2,r2,27376
   1bc40:	10001315 	stw	zero,76(r2)
   1bc44:	00000e06 	br	1bc80 <alt_sys_init+0x7fc>
   1bc48:	008000b4 	movhi	r2,2
   1bc4c:	109abc04 	addi	r2,r2,27376
   1bc50:	10801017 	ldw	r2,64(r2)
   1bc54:	10800098 	cmpnei	r2,r2,2
   1bc58:	1000051e 	bne	r2,zero,1bc70 <alt_sys_init+0x7ec>
   1bc5c:	008000b4 	movhi	r2,2
   1bc60:	109abc04 	addi	r2,r2,27376
   1bc64:	00c00044 	movi	r3,1
   1bc68:	10c01315 	stw	r3,76(r2)
   1bc6c:	00000406 	br	1bc80 <alt_sys_init+0x7fc>
   1bc70:	008000b4 	movhi	r2,2
   1bc74:	109abc04 	addi	r2,r2,27376
   1bc78:	00c00084 	movi	r3,2
   1bc7c:	10c01315 	stw	r3,76(r2)
   1bc80:	e0bffec3 	ldbu	r2,-5(fp)
   1bc84:	00c00804 	movi	r3,32
   1bc88:	1885c83a 	sub	r2,r3,r2
   1bc8c:	00ffffc4 	movi	r3,-1
   1bc90:	1886d83a 	srl	r3,r3,r2
   1bc94:	008000b4 	movhi	r2,2
   1bc98:	109abc04 	addi	r2,r2,27376
   1bc9c:	10c01415 	stw	r3,80(r2)
   1bca0:	e0fffec3 	ldbu	r3,-5(fp)
   1bca4:	008000b4 	movhi	r2,2
   1bca8:	109abc04 	addi	r2,r2,27376
   1bcac:	10801317 	ldw	r2,76(r2)
   1bcb0:	1887883a 	add	r3,r3,r2
   1bcb4:	008000b4 	movhi	r2,2
   1bcb8:	109abc04 	addi	r2,r2,27376
   1bcbc:	10c01515 	stw	r3,84(r2)
   1bcc0:	e0bfff03 	ldbu	r2,-4(fp)
   1bcc4:	00c00804 	movi	r3,32
   1bcc8:	1885c83a 	sub	r2,r3,r2
   1bccc:	00ffffc4 	movi	r3,-1
   1bcd0:	1886d83a 	srl	r3,r3,r2
   1bcd4:	008000b4 	movhi	r2,2
   1bcd8:	109abc04 	addi	r2,r2,27376
   1bcdc:	10c01615 	stw	r3,88(r2)
   1bce0:	010000b4 	movhi	r4,2
   1bce4:	211abc04 	addi	r4,r4,27376
   1bce8:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   1bcec:	008000b4 	movhi	r2,2
   1bcf0:	109ad304 	addi	r2,r2,27468
   1bcf4:	10800a17 	ldw	r2,40(r2)
   1bcf8:	10800017 	ldw	r2,0(r2)
   1bcfc:	10c003cc 	andi	r3,r2,15
   1bd00:	008000b4 	movhi	r2,2
   1bd04:	109ad304 	addi	r2,r2,27468
   1bd08:	10c00b15 	stw	r3,44(r2)
   1bd0c:	008000b4 	movhi	r2,2
   1bd10:	109ad304 	addi	r2,r2,27468
   1bd14:	10800a17 	ldw	r2,40(r2)
   1bd18:	10800017 	ldw	r2,0(r2)
   1bd1c:	1005d13a 	srai	r2,r2,4
   1bd20:	10c0004c 	andi	r3,r2,1
   1bd24:	008000b4 	movhi	r2,2
   1bd28:	109ad304 	addi	r2,r2,27468
   1bd2c:	10c00c15 	stw	r3,48(r2)
   1bd30:	008000b4 	movhi	r2,2
   1bd34:	109ad304 	addi	r2,r2,27468
   1bd38:	10800a17 	ldw	r2,40(r2)
   1bd3c:	10800017 	ldw	r2,0(r2)
   1bd40:	1005d17a 	srai	r2,r2,5
   1bd44:	10c0004c 	andi	r3,r2,1
   1bd48:	008000b4 	movhi	r2,2
   1bd4c:	109ad304 	addi	r2,r2,27468
   1bd50:	10c00d15 	stw	r3,52(r2)
   1bd54:	008000b4 	movhi	r2,2
   1bd58:	109ad304 	addi	r2,r2,27468
   1bd5c:	10800a17 	ldw	r2,40(r2)
   1bd60:	10800017 	ldw	r2,0(r2)
   1bd64:	1005d43a 	srai	r2,r2,16
   1bd68:	10c003cc 	andi	r3,r2,15
   1bd6c:	008000b4 	movhi	r2,2
   1bd70:	109ad304 	addi	r2,r2,27468
   1bd74:	10c00e15 	stw	r3,56(r2)
   1bd78:	008000b4 	movhi	r2,2
   1bd7c:	109ad304 	addi	r2,r2,27468
   1bd80:	10800a17 	ldw	r2,40(r2)
   1bd84:	10800017 	ldw	r2,0(r2)
   1bd88:	1005d53a 	srai	r2,r2,20
   1bd8c:	10c0004c 	andi	r3,r2,1
   1bd90:	008000b4 	movhi	r2,2
   1bd94:	109ad304 	addi	r2,r2,27468
   1bd98:	10c00f15 	stw	r3,60(r2)
   1bd9c:	008000b4 	movhi	r2,2
   1bda0:	109ad304 	addi	r2,r2,27468
   1bda4:	10800a17 	ldw	r2,40(r2)
   1bda8:	10800017 	ldw	r2,0(r2)
   1bdac:	1005d57a 	srai	r2,r2,21
   1bdb0:	10c0004c 	andi	r3,r2,1
   1bdb4:	008000b4 	movhi	r2,2
   1bdb8:	109ad304 	addi	r2,r2,27468
   1bdbc:	10c01015 	stw	r3,64(r2)
   1bdc0:	010000b4 	movhi	r4,2
   1bdc4:	211ad304 	addi	r4,r4,27468
   1bdc8:	001b4180 	call	1b418 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1bdcc:	010000b4 	movhi	r4,2
   1bdd0:	211ae404 	addi	r4,r4,27536
   1bdd4:	001b4180 	call	1b418 <alt_dev_reg>
}
   1bdd8:	0001883a 	nop
   1bddc:	e037883a 	mov	sp,fp
   1bde0:	dfc00117 	ldw	ra,4(sp)
   1bde4:	df000017 	ldw	fp,0(sp)
   1bde8:	dec00204 	addi	sp,sp,8
   1bdec:	f800283a 	ret

0001bdf0 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   1bdf0:	defffa04 	addi	sp,sp,-24
   1bdf4:	dfc00515 	stw	ra,20(sp)
   1bdf8:	df000415 	stw	fp,16(sp)
   1bdfc:	df000404 	addi	fp,sp,16
   1be00:	e13ffe15 	stw	r4,-8(fp)
   1be04:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1be08:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   1be0c:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1be10:	10001e26 	beq	r2,zero,1be8c <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   1be14:	00803fc4 	movi	r2,255
   1be18:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1be1c:	d0a8e697 	ldw	r2,-23654(gp)
   1be20:	e13ffe17 	ldw	r4,-8(fp)
   1be24:	e0ffff17 	ldw	r3,-4(fp)
   1be28:	20c7883a 	add	r3,r4,r3
   1be2c:	1806927a 	slli	r3,r3,9
   1be30:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   1be34:	d0a8e597 	ldw	r2,-23658(gp)
   1be38:	00c00604 	movi	r3,24
   1be3c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1be40:	d0a8e297 	ldw	r2,-23670(gp)
   1be44:	1080002b 	ldhuio	r2,0(r2)
   1be48:	10bfffcc 	andi	r2,r2,65535
   1be4c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   1be50:	e0bffd0b 	ldhu	r2,-12(fp)
   1be54:	10bfffcc 	andi	r2,r2,65535
   1be58:	1080010c 	andi	r2,r2,4
   1be5c:	103ff81e 	bne	r2,zero,1be40 <Write_Sector_Data+0x50>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   1be60:	e0bffd0b 	ldhu	r2,-12(fp)
   1be64:	10bfffcc 	andi	r2,r2,65535
   1be68:	1080040c 	andi	r2,r2,16
   1be6c:	1000071e 	bne	r2,zero,1be8c <Write_Sector_Data+0x9c>
        {
            result = true;
   1be70:	00800044 	movi	r2,1
   1be74:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1be78:	d028eb95 	stw	zero,-23634(gp)
            current_sector_index = sector_index+partition_offset;
   1be7c:	e0fffe17 	ldw	r3,-8(fp)
   1be80:	e0bfff17 	ldw	r2,-4(fp)
   1be84:	1885883a 	add	r2,r3,r2
   1be88:	d0a8ec95 	stw	r2,-23630(gp)
        }
    }
    return result;
   1be8c:	e0bffc17 	ldw	r2,-16(fp)
}
   1be90:	e037883a 	mov	sp,fp
   1be94:	dfc00117 	ldw	ra,4(sp)
   1be98:	df000017 	ldw	fp,0(sp)
   1be9c:	dec00204 	addi	sp,sp,8
   1bea0:	f800283a 	ret

0001bea4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   1bea4:	defffd04 	addi	sp,sp,-12
   1bea8:	dfc00215 	stw	ra,8(sp)
   1beac:	df000115 	stw	fp,4(sp)
   1beb0:	df000104 	addi	fp,sp,4
    bool result = true;
   1beb4:	00800044 	movi	r2,1
   1beb8:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1bebc:	d0a8eb97 	ldw	r2,-23634(gp)
   1bec0:	10000526 	beq	r2,zero,1bed8 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   1bec4:	d0a8ec97 	ldw	r2,-23630(gp)
   1bec8:	000b883a 	mov	r5,zero
   1becc:	1009883a 	mov	r4,r2
   1bed0:	001bdf00 	call	1bdf0 <Write_Sector_Data>
   1bed4:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1bed8:	e0bfff17 	ldw	r2,-4(fp)
}
   1bedc:	e037883a 	mov	sp,fp
   1bee0:	dfc00117 	ldw	ra,4(sp)
   1bee4:	df000017 	ldw	fp,0(sp)
   1bee8:	dec00204 	addi	sp,sp,8
   1beec:	f800283a 	ret

0001bef0 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   1bef0:	defffa04 	addi	sp,sp,-24
   1bef4:	dfc00515 	stw	ra,20(sp)
   1bef8:	df000415 	stw	fp,16(sp)
   1befc:	df000404 	addi	fp,sp,16
   1bf00:	e13ffe15 	stw	r4,-8(fp)
   1bf04:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   1bf08:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   1bf0c:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1bf10:	10002726 	beq	r2,zero,1bfb0 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   1bf14:	00803fc4 	movi	r2,255
   1bf18:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1bf1c:	d0a8eb97 	ldw	r2,-23634(gp)
   1bf20:	10000726 	beq	r2,zero,1bf40 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   1bf24:	d0a8ec97 	ldw	r2,-23630(gp)
   1bf28:	000b883a 	mov	r5,zero
   1bf2c:	1009883a 	mov	r4,r2
   1bf30:	001bdf00 	call	1bdf0 <Write_Sector_Data>
   1bf34:	1000021e 	bne	r2,zero,1bf40 <Read_Sector_Data+0x50>
            {
                return false;
   1bf38:	0005883a 	mov	r2,zero
   1bf3c:	00001d06 	br	1bfb4 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1bf40:	d0a8e697 	ldw	r2,-23654(gp)
   1bf44:	e13ffe17 	ldw	r4,-8(fp)
   1bf48:	e0ffff17 	ldw	r3,-4(fp)
   1bf4c:	20c7883a 	add	r3,r4,r3
   1bf50:	1806927a 	slli	r3,r3,9
   1bf54:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   1bf58:	d0a8e597 	ldw	r2,-23658(gp)
   1bf5c:	00c00444 	movi	r3,17
   1bf60:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1bf64:	d0a8e297 	ldw	r2,-23670(gp)
   1bf68:	1080002b 	ldhuio	r2,0(r2)
   1bf6c:	10bfffcc 	andi	r2,r2,65535
   1bf70:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   1bf74:	e0bffd0b 	ldhu	r2,-12(fp)
   1bf78:	10bfffcc 	andi	r2,r2,65535
   1bf7c:	1080010c 	andi	r2,r2,4
   1bf80:	103ff81e 	bne	r2,zero,1bf64 <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   1bf84:	e0bffd0b 	ldhu	r2,-12(fp)
   1bf88:	10bfffcc 	andi	r2,r2,65535
   1bf8c:	1080040c 	andi	r2,r2,16
   1bf90:	1000071e 	bne	r2,zero,1bfb0 <Read_Sector_Data+0xc0>
		{
			result = true;
   1bf94:	00800044 	movi	r2,1
   1bf98:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1bf9c:	d028eb95 	stw	zero,-23634(gp)
            current_sector_index = sector_index+partition_offset;
   1bfa0:	e0fffe17 	ldw	r3,-8(fp)
   1bfa4:	e0bfff17 	ldw	r2,-4(fp)
   1bfa8:	1885883a 	add	r2,r3,r2
   1bfac:	d0a8ec95 	stw	r2,-23630(gp)
		}
	}
	return result;
   1bfb0:	e0bffc17 	ldw	r2,-16(fp)
}
   1bfb4:	e037883a 	mov	sp,fp
   1bfb8:	dfc00117 	ldw	ra,4(sp)
   1bfbc:	df000017 	ldw	fp,0(sp)
   1bfc0:	dec00204 	addi	sp,sp,8
   1bfc4:	f800283a 	ret

0001bfc8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   1bfc8:	defffb04 	addi	sp,sp,-20
   1bfcc:	dfc00415 	stw	ra,16(sp)
   1bfd0:	df000315 	stw	fp,12(sp)
   1bfd4:	df000304 	addi	fp,sp,12
   1bfd8:	e13ffe15 	stw	r4,-8(fp)
   1bfdc:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   1bfe0:	e0bffe17 	ldw	r2,-8(fp)
   1bfe4:	1004d23a 	srli	r2,r2,8
   1bfe8:	d0e8e897 	ldw	r3,-23646(gp)
   1bfec:	10c5883a 	add	r2,r2,r3
   1bff0:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1bff4:	00800274 	movhi	r2,9
   1bff8:	109fd104 	addi	r2,r2,32580
   1bffc:	10801117 	ldw	r2,68(r2)
   1c000:	e0fffd17 	ldw	r3,-12(fp)
   1c004:	1885883a 	add	r2,r3,r2
   1c008:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   1c00c:	d0a8ec97 	ldw	r2,-23630(gp)
   1c010:	e0fffd17 	ldw	r3,-12(fp)
   1c014:	18800726 	beq	r3,r2,1c034 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1c018:	e0bffd17 	ldw	r2,-12(fp)
   1c01c:	000b883a 	mov	r5,zero
   1c020:	1009883a 	mov	r4,r2
   1c024:	001bef00 	call	1bef0 <Read_Sector_Data>
   1c028:	1000021e 	bne	r2,zero,1c034 <get_cluster_flag+0x6c>
        {
            return false;
   1c02c:	0005883a 	mov	r2,zero
   1c030:	00000d06 	br	1c068 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   1c034:	e0bffe17 	ldw	r2,-8(fp)
   1c038:	10803fcc 	andi	r2,r2,255
   1c03c:	1085883a 	add	r2,r2,r2
   1c040:	1007883a 	mov	r3,r2
   1c044:	d0a8ea97 	ldw	r2,-23638(gp)
   1c048:	10800a17 	ldw	r2,40(r2)
   1c04c:	1885883a 	add	r2,r3,r2
   1c050:	1080002b 	ldhuio	r2,0(r2)
   1c054:	10bfffcc 	andi	r2,r2,65535
   1c058:	1007883a 	mov	r3,r2
   1c05c:	e0bfff17 	ldw	r2,-4(fp)
   1c060:	10c0000d 	sth	r3,0(r2)
    return true;
   1c064:	00800044 	movi	r2,1
}
   1c068:	e037883a 	mov	sp,fp
   1c06c:	dfc00117 	ldw	ra,4(sp)
   1c070:	df000017 	ldw	fp,0(sp)
   1c074:	dec00204 	addi	sp,sp,8
   1c078:	f800283a 	ret

0001c07c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   1c07c:	defffa04 	addi	sp,sp,-24
   1c080:	dfc00515 	stw	ra,20(sp)
   1c084:	df000415 	stw	fp,16(sp)
   1c088:	df000404 	addi	fp,sp,16
   1c08c:	e13ffd15 	stw	r4,-12(fp)
   1c090:	2805883a 	mov	r2,r5
   1c094:	e1bfff15 	stw	r6,-4(fp)
   1c098:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1c09c:	e0bffd17 	ldw	r2,-12(fp)
   1c0a0:	1004d23a 	srli	r2,r2,8
   1c0a4:	d0e8e897 	ldw	r3,-23646(gp)
   1c0a8:	10c5883a 	add	r2,r2,r3
   1c0ac:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   1c0b0:	e0bfff17 	ldw	r2,-4(fp)
   1c0b4:	10000726 	beq	r2,zero,1c0d4 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1c0b8:	00800274 	movhi	r2,9
   1c0bc:	109fd104 	addi	r2,r2,32580
   1c0c0:	10801117 	ldw	r2,68(r2)
   1c0c4:	e0fffc17 	ldw	r3,-16(fp)
   1c0c8:	1885883a 	add	r2,r3,r2
   1c0cc:	e0bffc15 	stw	r2,-16(fp)
   1c0d0:	00000606 	br	1c0ec <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   1c0d4:	00800274 	movhi	r2,9
   1c0d8:	109fd104 	addi	r2,r2,32580
   1c0dc:	10801217 	ldw	r2,72(r2)
   1c0e0:	e0fffc17 	ldw	r3,-16(fp)
   1c0e4:	1885883a 	add	r2,r3,r2
   1c0e8:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   1c0ec:	d0a8ec97 	ldw	r2,-23630(gp)
   1c0f0:	e0fffc17 	ldw	r3,-16(fp)
   1c0f4:	18800726 	beq	r3,r2,1c114 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1c0f8:	e0bffc17 	ldw	r2,-16(fp)
   1c0fc:	000b883a 	mov	r5,zero
   1c100:	1009883a 	mov	r4,r2
   1c104:	001bef00 	call	1bef0 <Read_Sector_Data>
   1c108:	1000021e 	bne	r2,zero,1c114 <mark_cluster+0x98>
        {
            return false;
   1c10c:	0005883a 	mov	r2,zero
   1c110:	00000d06 	br	1c148 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   1c114:	e0bffd17 	ldw	r2,-12(fp)
   1c118:	10803fcc 	andi	r2,r2,255
   1c11c:	1085883a 	add	r2,r2,r2
   1c120:	1007883a 	mov	r3,r2
   1c124:	d0a8ea97 	ldw	r2,-23638(gp)
   1c128:	10800a17 	ldw	r2,40(r2)
   1c12c:	1885883a 	add	r2,r3,r2
   1c130:	1007883a 	mov	r3,r2
   1c134:	e0bffe0f 	ldh	r2,-8(fp)
   1c138:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   1c13c:	00800044 	movi	r2,1
   1c140:	d0a8eb95 	stw	r2,-23634(gp)
    return true;
   1c144:	00800044 	movi	r2,1
}
   1c148:	e037883a 	mov	sp,fp
   1c14c:	dfc00117 	ldw	ra,4(sp)
   1c150:	df000017 	ldw	fp,0(sp)
   1c154:	dec00204 	addi	sp,sp,8
   1c158:	f800283a 	ret

0001c15c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   1c15c:	defff704 	addi	sp,sp,-36
   1c160:	dfc00815 	stw	ra,32(sp)
   1c164:	df000715 	stw	fp,28(sp)
   1c168:	df000704 	addi	fp,sp,28
	bool result = false;
   1c16c:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   1c170:	000b883a 	mov	r5,zero
   1c174:	0009883a 	mov	r4,zero
   1c178:	001bef00 	call	1bef0 <Read_Sector_Data>
   1c17c:	10005a26 	beq	r2,zero,1c2e8 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   1c180:	d0a8ea97 	ldw	r2,-23638(gp)
   1c184:	10800a17 	ldw	r2,40(r2)
   1c188:	10807f84 	addi	r2,r2,510
   1c18c:	1080002b 	ldhuio	r2,0(r2)
   1c190:	10bfffcc 	andi	r2,r2,65535
   1c194:	10bfffcc 	andi	r2,r2,65535
   1c198:	10a0001c 	xori	r2,r2,32768
   1c19c:	10a00004 	addi	r2,r2,-32768
   1c1a0:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   1c1a4:	e0bffb17 	ldw	r2,-20(fp)
   1c1a8:	10ffffcc 	andi	r3,r2,65535
   1c1ac:	00aa9554 	movui	r2,43605
   1c1b0:	18804d1e 	bne	r3,r2,1c2e8 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1c1b4:	e03ffa15 	stw	zero,-24(fp)
   1c1b8:	00004806 	br	1c2dc <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1c1bc:	e0bffa17 	ldw	r2,-24(fp)
   1c1c0:	1004913a 	slli	r2,r2,4
   1c1c4:	10806f84 	addi	r2,r2,446
   1c1c8:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1c1cc:	d0a8ea97 	ldw	r2,-23638(gp)
   1c1d0:	10c00a17 	ldw	r3,40(r2)
   1c1d4:	e0bffc17 	ldw	r2,-16(fp)
   1c1d8:	1885883a 	add	r2,r3,r2
   1c1dc:	10800104 	addi	r2,r2,4
   1c1e0:	10800023 	ldbuio	r2,0(r2)
   1c1e4:	10803fcc 	andi	r2,r2,255
   1c1e8:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1c1ec:	e0bffd07 	ldb	r2,-12(fp)
   1c1f0:	10800060 	cmpeqi	r2,r2,1
   1c1f4:	1000091e 	bne	r2,zero,1c21c <Check_for_Master_Boot_Record+0xc0>
   1c1f8:	e0bffd07 	ldb	r2,-12(fp)
   1c1fc:	10800120 	cmpeqi	r2,r2,4
   1c200:	1000061e 	bne	r2,zero,1c21c <Check_for_Master_Boot_Record+0xc0>
   1c204:	e0bffd07 	ldb	r2,-12(fp)
   1c208:	108001a0 	cmpeqi	r2,r2,6
   1c20c:	1000031e 	bne	r2,zero,1c21c <Check_for_Master_Boot_Record+0xc0>
   1c210:	e0bffd07 	ldb	r2,-12(fp)
   1c214:	10800398 	cmpnei	r2,r2,14
   1c218:	10002d1e 	bne	r2,zero,1c2d0 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1c21c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c220:	10c00a17 	ldw	r3,40(r2)
   1c224:	e0bffc17 	ldw	r2,-16(fp)
   1c228:	1885883a 	add	r2,r3,r2
   1c22c:	10800284 	addi	r2,r2,10
   1c230:	1080002b 	ldhuio	r2,0(r2)
   1c234:	10bfffcc 	andi	r2,r2,65535
   1c238:	1006943a 	slli	r3,r2,16
   1c23c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c240:	11000a17 	ldw	r4,40(r2)
   1c244:	e0bffc17 	ldw	r2,-16(fp)
   1c248:	2085883a 	add	r2,r4,r2
   1c24c:	10800204 	addi	r2,r2,8
   1c250:	1080002b 	ldhuio	r2,0(r2)
   1c254:	10bfffcc 	andi	r2,r2,65535
   1c258:	10bfffcc 	andi	r2,r2,65535
   1c25c:	1884b03a 	or	r2,r3,r2
   1c260:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   1c264:	d0a8ea97 	ldw	r2,-23638(gp)
   1c268:	10c00a17 	ldw	r3,40(r2)
   1c26c:	e0bffc17 	ldw	r2,-16(fp)
   1c270:	1885883a 	add	r2,r3,r2
   1c274:	10800384 	addi	r2,r2,14
   1c278:	1080002b 	ldhuio	r2,0(r2)
   1c27c:	10bfffcc 	andi	r2,r2,65535
   1c280:	1006943a 	slli	r3,r2,16
   1c284:	d0a8ea97 	ldw	r2,-23638(gp)
   1c288:	11000a17 	ldw	r4,40(r2)
   1c28c:	e0bffc17 	ldw	r2,-16(fp)
   1c290:	2085883a 	add	r2,r4,r2
   1c294:	10800304 	addi	r2,r2,12
   1c298:	1080002b 	ldhuio	r2,0(r2)
   1c29c:	10bfffcc 	andi	r2,r2,65535
   1c2a0:	10bfffcc 	andi	r2,r2,65535
   1c2a4:	1884b03a 	or	r2,r3,r2
   1c2a8:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   1c2ac:	e0bfff17 	ldw	r2,-4(fp)
   1c2b0:	0080070e 	bge	zero,r2,1c2d0 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
   1c2b4:	00800044 	movi	r2,1
   1c2b8:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   1c2bc:	e0bfff17 	ldw	r2,-4(fp)
   1c2c0:	d0a8e995 	stw	r2,-23642(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1c2c4:	e0bffe17 	ldw	r2,-8(fp)
   1c2c8:	d0a8e895 	stw	r2,-23646(gp)
						break;
   1c2cc:	00000606 	br	1c2e8 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1c2d0:	e0bffa17 	ldw	r2,-24(fp)
   1c2d4:	10800044 	addi	r2,r2,1
   1c2d8:	e0bffa15 	stw	r2,-24(fp)
   1c2dc:	e0bffa17 	ldw	r2,-24(fp)
   1c2e0:	10800110 	cmplti	r2,r2,4
   1c2e4:	103fb51e 	bne	r2,zero,1c1bc <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
   1c2e8:	e0bff917 	ldw	r2,-28(fp)
}
   1c2ec:	e037883a 	mov	sp,fp
   1c2f0:	dfc00117 	ldw	ra,4(sp)
   1c2f4:	df000017 	ldw	fp,0(sp)
   1c2f8:	dec00204 	addi	sp,sp,8
   1c2fc:	f800283a 	ret

0001c300 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   1c300:	defff804 	addi	sp,sp,-32
   1c304:	dfc00715 	stw	ra,28(sp)
   1c308:	df000615 	stw	fp,24(sp)
   1c30c:	df000604 	addi	fp,sp,24
   1c310:	e13ffc15 	stw	r4,-16(fp)
   1c314:	e17ffd15 	stw	r5,-12(fp)
   1c318:	e1bffe15 	stw	r6,-8(fp)
   1c31c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   1c320:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1c324:	e0bffc17 	ldw	r2,-16(fp)
   1c328:	108007cc 	andi	r2,r2,31
   1c32c:	10008d1e 	bne	r2,zero,1c564 <Read_File_Record_At_Offset+0x264>
   1c330:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1c334:	10008b26 	beq	r2,zero,1c564 <Read_File_Record_At_Offset+0x264>
   1c338:	d0a8e197 	ldw	r2,-23674(gp)
   1c33c:	10008926 	beq	r2,zero,1c564 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1c340:	e03ffb15 	stw	zero,-20(fp)
   1c344:	00001106 	br	1c38c <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   1c348:	e0fffc17 	ldw	r3,-16(fp)
   1c34c:	e0bffb17 	ldw	r2,-20(fp)
   1c350:	1885883a 	add	r2,r3,r2
   1c354:	1007883a 	mov	r3,r2
   1c358:	d0a8ea97 	ldw	r2,-23638(gp)
   1c35c:	10800a17 	ldw	r2,40(r2)
   1c360:	1885883a 	add	r2,r3,r2
   1c364:	10800023 	ldbuio	r2,0(r2)
   1c368:	10803fcc 	andi	r2,r2,255
   1c36c:	1009883a 	mov	r4,r2
   1c370:	e0fffd17 	ldw	r3,-12(fp)
   1c374:	e0bffb17 	ldw	r2,-20(fp)
   1c378:	1885883a 	add	r2,r3,r2
   1c37c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1c380:	e0bffb17 	ldw	r2,-20(fp)
   1c384:	10800044 	addi	r2,r2,1
   1c388:	e0bffb15 	stw	r2,-20(fp)
   1c38c:	e0bffb17 	ldw	r2,-20(fp)
   1c390:	10800210 	cmplti	r2,r2,8
   1c394:	103fec1e 	bne	r2,zero,1c348 <Read_File_Record_At_Offset+0x48>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1c398:	e03ffb15 	stw	zero,-20(fp)
   1c39c:	00001306 	br	1c3ec <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   1c3a0:	e0fffc17 	ldw	r3,-16(fp)
   1c3a4:	e0bffb17 	ldw	r2,-20(fp)
   1c3a8:	1885883a 	add	r2,r3,r2
   1c3ac:	1007883a 	mov	r3,r2
   1c3b0:	d0a8ea97 	ldw	r2,-23638(gp)
   1c3b4:	10800a17 	ldw	r2,40(r2)
   1c3b8:	1885883a 	add	r2,r3,r2
   1c3bc:	10800204 	addi	r2,r2,8
   1c3c0:	10800023 	ldbuio	r2,0(r2)
   1c3c4:	10803fcc 	andi	r2,r2,255
   1c3c8:	1009883a 	mov	r4,r2
   1c3cc:	e0fffd17 	ldw	r3,-12(fp)
   1c3d0:	e0bffb17 	ldw	r2,-20(fp)
   1c3d4:	1885883a 	add	r2,r3,r2
   1c3d8:	10800204 	addi	r2,r2,8
   1c3dc:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1c3e0:	e0bffb17 	ldw	r2,-20(fp)
   1c3e4:	10800044 	addi	r2,r2,1
   1c3e8:	e0bffb15 	stw	r2,-20(fp)
   1c3ec:	e0bffb17 	ldw	r2,-20(fp)
   1c3f0:	108000d0 	cmplti	r2,r2,3
   1c3f4:	103fea1e 	bne	r2,zero,1c3a0 <Read_File_Record_At_Offset+0xa0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   1c3f8:	d0a8ea97 	ldw	r2,-23638(gp)
   1c3fc:	10c00a17 	ldw	r3,40(r2)
   1c400:	e0bffc17 	ldw	r2,-16(fp)
   1c404:	1885883a 	add	r2,r3,r2
   1c408:	108002c4 	addi	r2,r2,11
   1c40c:	10800023 	ldbuio	r2,0(r2)
   1c410:	10803fcc 	andi	r2,r2,255
   1c414:	1007883a 	mov	r3,r2
   1c418:	e0bffd17 	ldw	r2,-12(fp)
   1c41c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   1c420:	d0a8ea97 	ldw	r2,-23638(gp)
   1c424:	10c00a17 	ldw	r3,40(r2)
   1c428:	e0bffc17 	ldw	r2,-16(fp)
   1c42c:	1885883a 	add	r2,r3,r2
   1c430:	10800384 	addi	r2,r2,14
   1c434:	1080002b 	ldhuio	r2,0(r2)
   1c438:	10bfffcc 	andi	r2,r2,65535
   1c43c:	1007883a 	mov	r3,r2
   1c440:	e0bffd17 	ldw	r2,-12(fp)
   1c444:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   1c448:	d0a8ea97 	ldw	r2,-23638(gp)
   1c44c:	10c00a17 	ldw	r3,40(r2)
   1c450:	e0bffc17 	ldw	r2,-16(fp)
   1c454:	1885883a 	add	r2,r3,r2
   1c458:	10800404 	addi	r2,r2,16
   1c45c:	1080002b 	ldhuio	r2,0(r2)
   1c460:	10bfffcc 	andi	r2,r2,65535
   1c464:	1007883a 	mov	r3,r2
   1c468:	e0bffd17 	ldw	r2,-12(fp)
   1c46c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   1c470:	d0a8ea97 	ldw	r2,-23638(gp)
   1c474:	10c00a17 	ldw	r3,40(r2)
   1c478:	e0bffc17 	ldw	r2,-16(fp)
   1c47c:	1885883a 	add	r2,r3,r2
   1c480:	10800484 	addi	r2,r2,18
   1c484:	1080002b 	ldhuio	r2,0(r2)
   1c488:	10bfffcc 	andi	r2,r2,65535
   1c48c:	1007883a 	mov	r3,r2
   1c490:	e0bffd17 	ldw	r2,-12(fp)
   1c494:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   1c498:	d0a8ea97 	ldw	r2,-23638(gp)
   1c49c:	10c00a17 	ldw	r3,40(r2)
   1c4a0:	e0bffc17 	ldw	r2,-16(fp)
   1c4a4:	1885883a 	add	r2,r3,r2
   1c4a8:	10800584 	addi	r2,r2,22
   1c4ac:	1080002b 	ldhuio	r2,0(r2)
   1c4b0:	10bfffcc 	andi	r2,r2,65535
   1c4b4:	1007883a 	mov	r3,r2
   1c4b8:	e0bffd17 	ldw	r2,-12(fp)
   1c4bc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   1c4c0:	d0a8ea97 	ldw	r2,-23638(gp)
   1c4c4:	10c00a17 	ldw	r3,40(r2)
   1c4c8:	e0bffc17 	ldw	r2,-16(fp)
   1c4cc:	1885883a 	add	r2,r3,r2
   1c4d0:	10800604 	addi	r2,r2,24
   1c4d4:	1080002b 	ldhuio	r2,0(r2)
   1c4d8:	10bfffcc 	andi	r2,r2,65535
   1c4dc:	1007883a 	mov	r3,r2
   1c4e0:	e0bffd17 	ldw	r2,-12(fp)
   1c4e4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   1c4e8:	d0a8ea97 	ldw	r2,-23638(gp)
   1c4ec:	10c00a17 	ldw	r3,40(r2)
   1c4f0:	e0bffc17 	ldw	r2,-16(fp)
   1c4f4:	1885883a 	add	r2,r3,r2
   1c4f8:	10800684 	addi	r2,r2,26
   1c4fc:	1080002b 	ldhuio	r2,0(r2)
   1c500:	10bfffcc 	andi	r2,r2,65535
   1c504:	1007883a 	mov	r3,r2
   1c508:	e0bffd17 	ldw	r2,-12(fp)
   1c50c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   1c510:	d0a8ea97 	ldw	r2,-23638(gp)
   1c514:	10c00a17 	ldw	r3,40(r2)
   1c518:	e0bffc17 	ldw	r2,-16(fp)
   1c51c:	1885883a 	add	r2,r3,r2
   1c520:	10800704 	addi	r2,r2,28
   1c524:	10800037 	ldwio	r2,0(r2)
   1c528:	1007883a 	mov	r3,r2
   1c52c:	e0bffd17 	ldw	r2,-12(fp)
   1c530:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   1c534:	e0bffd17 	ldw	r2,-12(fp)
   1c538:	e0fffe17 	ldw	r3,-8(fp)
   1c53c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   1c540:	e0bffd17 	ldw	r2,-12(fp)
   1c544:	e0ffff17 	ldw	r3,-4(fp)
   1c548:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1c54c:	e0bffc17 	ldw	r2,-16(fp)
   1c550:	1007883a 	mov	r3,r2
   1c554:	e0bffd17 	ldw	r2,-12(fp)
   1c558:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1c55c:	00800044 	movi	r2,1
   1c560:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   1c564:	e0bffa17 	ldw	r2,-24(fp)
}
   1c568:	e037883a 	mov	sp,fp
   1c56c:	dfc00117 	ldw	ra,4(sp)
   1c570:	df000017 	ldw	fp,0(sp)
   1c574:	dec00204 	addi	sp,sp,8
   1c578:	f800283a 	ret

0001c57c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1c57c:	defff904 	addi	sp,sp,-28
   1c580:	dfc00615 	stw	ra,24(sp)
   1c584:	df000515 	stw	fp,20(sp)
   1c588:	df000504 	addi	fp,sp,20
   1c58c:	e13ffe15 	stw	r4,-8(fp)
   1c590:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1c594:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1c598:	e0bffe17 	ldw	r2,-8(fp)
   1c59c:	108007cc 	andi	r2,r2,31
   1c5a0:	1000931e 	bne	r2,zero,1c7f0 <Write_File_Record_At_Offset+0x274>
   1c5a4:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1c5a8:	10009126 	beq	r2,zero,1c7f0 <Write_File_Record_At_Offset+0x274>
   1c5ac:	d0a8e197 	ldw	r2,-23674(gp)
   1c5b0:	10008f26 	beq	r2,zero,1c7f0 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1c5b4:	e03ffc15 	stw	zero,-16(fp)
   1c5b8:	00001f06 	br	1c638 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   1c5bc:	e0bffc17 	ldw	r2,-16(fp)
   1c5c0:	10800044 	addi	r2,r2,1
   1c5c4:	e0ffff17 	ldw	r3,-4(fp)
   1c5c8:	1885883a 	add	r2,r3,r2
   1c5cc:	10800003 	ldbu	r2,0(r2)
   1c5d0:	10803fcc 	andi	r2,r2,255
   1c5d4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   1c5d8:	e0bffd0f 	ldh	r2,-12(fp)
   1c5dc:	1004923a 	slli	r2,r2,8
   1c5e0:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   1c5e4:	e0ffff17 	ldw	r3,-4(fp)
   1c5e8:	e0bffc17 	ldw	r2,-16(fp)
   1c5ec:	1885883a 	add	r2,r3,r2
   1c5f0:	10800003 	ldbu	r2,0(r2)
   1c5f4:	10c03fcc 	andi	r3,r2,255
   1c5f8:	e0bffd0b 	ldhu	r2,-12(fp)
   1c5fc:	1884b03a 	or	r2,r3,r2
   1c600:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1c604:	e0fffe17 	ldw	r3,-8(fp)
   1c608:	e0bffc17 	ldw	r2,-16(fp)
   1c60c:	1885883a 	add	r2,r3,r2
   1c610:	1007883a 	mov	r3,r2
   1c614:	d0a8ea97 	ldw	r2,-23638(gp)
   1c618:	10800a17 	ldw	r2,40(r2)
   1c61c:	1885883a 	add	r2,r3,r2
   1c620:	1007883a 	mov	r3,r2
   1c624:	e0bffd0f 	ldh	r2,-12(fp)
   1c628:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1c62c:	e0bffc17 	ldw	r2,-16(fp)
   1c630:	10800084 	addi	r2,r2,2
   1c634:	e0bffc15 	stw	r2,-16(fp)
   1c638:	e0bffc17 	ldw	r2,-16(fp)
   1c63c:	10800210 	cmplti	r2,r2,8
   1c640:	103fde1e 	bne	r2,zero,1c5bc <Write_File_Record_At_Offset+0x40>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1c644:	e03ffc15 	stw	zero,-16(fp)
   1c648:	00001306 	br	1c698 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1c64c:	e0fffe17 	ldw	r3,-8(fp)
   1c650:	e0bffc17 	ldw	r2,-16(fp)
   1c654:	1885883a 	add	r2,r3,r2
   1c658:	1007883a 	mov	r3,r2
   1c65c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c660:	10800a17 	ldw	r2,40(r2)
   1c664:	1885883a 	add	r2,r3,r2
   1c668:	10800204 	addi	r2,r2,8
   1c66c:	1009883a 	mov	r4,r2
   1c670:	e0ffff17 	ldw	r3,-4(fp)
   1c674:	e0bffc17 	ldw	r2,-16(fp)
   1c678:	1885883a 	add	r2,r3,r2
   1c67c:	10800204 	addi	r2,r2,8
   1c680:	10800003 	ldbu	r2,0(r2)
   1c684:	10803fcc 	andi	r2,r2,255
   1c688:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1c68c:	e0bffc17 	ldw	r2,-16(fp)
   1c690:	10800044 	addi	r2,r2,1
   1c694:	e0bffc15 	stw	r2,-16(fp)
   1c698:	e0bffc17 	ldw	r2,-16(fp)
   1c69c:	108000d0 	cmplti	r2,r2,3
   1c6a0:	103fea1e 	bne	r2,zero,1c64c <Write_File_Record_At_Offset+0xd0>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1c6a4:	d0a8ea97 	ldw	r2,-23638(gp)
   1c6a8:	10c00a17 	ldw	r3,40(r2)
   1c6ac:	e0bffe17 	ldw	r2,-8(fp)
   1c6b0:	1885883a 	add	r2,r3,r2
   1c6b4:	108002c4 	addi	r2,r2,11
   1c6b8:	1007883a 	mov	r3,r2
   1c6bc:	e0bfff17 	ldw	r2,-4(fp)
   1c6c0:	108002c3 	ldbu	r2,11(r2)
   1c6c4:	10803fcc 	andi	r2,r2,255
   1c6c8:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   1c6cc:	d0a8ea97 	ldw	r2,-23638(gp)
   1c6d0:	10c00a17 	ldw	r3,40(r2)
   1c6d4:	e0bffe17 	ldw	r2,-8(fp)
   1c6d8:	1885883a 	add	r2,r3,r2
   1c6dc:	10800384 	addi	r2,r2,14
   1c6e0:	1007883a 	mov	r3,r2
   1c6e4:	e0bfff17 	ldw	r2,-4(fp)
   1c6e8:	1080030b 	ldhu	r2,12(r2)
   1c6ec:	10bfffcc 	andi	r2,r2,65535
   1c6f0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1c6f4:	d0a8ea97 	ldw	r2,-23638(gp)
   1c6f8:	10c00a17 	ldw	r3,40(r2)
   1c6fc:	e0bffe17 	ldw	r2,-8(fp)
   1c700:	1885883a 	add	r2,r3,r2
   1c704:	10800404 	addi	r2,r2,16
   1c708:	1007883a 	mov	r3,r2
   1c70c:	e0bfff17 	ldw	r2,-4(fp)
   1c710:	1080038b 	ldhu	r2,14(r2)
   1c714:	10bfffcc 	andi	r2,r2,65535
   1c718:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1c71c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c720:	10c00a17 	ldw	r3,40(r2)
   1c724:	e0bffe17 	ldw	r2,-8(fp)
   1c728:	1885883a 	add	r2,r3,r2
   1c72c:	10800484 	addi	r2,r2,18
   1c730:	1007883a 	mov	r3,r2
   1c734:	e0bfff17 	ldw	r2,-4(fp)
   1c738:	1080040b 	ldhu	r2,16(r2)
   1c73c:	10bfffcc 	andi	r2,r2,65535
   1c740:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   1c744:	d0a8ea97 	ldw	r2,-23638(gp)
   1c748:	10c00a17 	ldw	r3,40(r2)
   1c74c:	e0bffe17 	ldw	r2,-8(fp)
   1c750:	1885883a 	add	r2,r3,r2
   1c754:	10800584 	addi	r2,r2,22
   1c758:	1007883a 	mov	r3,r2
   1c75c:	e0bfff17 	ldw	r2,-4(fp)
   1c760:	1080048b 	ldhu	r2,18(r2)
   1c764:	10bfffcc 	andi	r2,r2,65535
   1c768:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1c76c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c770:	10c00a17 	ldw	r3,40(r2)
   1c774:	e0bffe17 	ldw	r2,-8(fp)
   1c778:	1885883a 	add	r2,r3,r2
   1c77c:	10800604 	addi	r2,r2,24
   1c780:	1007883a 	mov	r3,r2
   1c784:	e0bfff17 	ldw	r2,-4(fp)
   1c788:	1080050b 	ldhu	r2,20(r2)
   1c78c:	10bfffcc 	andi	r2,r2,65535
   1c790:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   1c794:	d0a8ea97 	ldw	r2,-23638(gp)
   1c798:	10c00a17 	ldw	r3,40(r2)
   1c79c:	e0bffe17 	ldw	r2,-8(fp)
   1c7a0:	1885883a 	add	r2,r3,r2
   1c7a4:	10800684 	addi	r2,r2,26
   1c7a8:	1007883a 	mov	r3,r2
   1c7ac:	e0bfff17 	ldw	r2,-4(fp)
   1c7b0:	1080058b 	ldhu	r2,22(r2)
   1c7b4:	10bfffcc 	andi	r2,r2,65535
   1c7b8:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   1c7bc:	d0a8ea97 	ldw	r2,-23638(gp)
   1c7c0:	10c00a17 	ldw	r3,40(r2)
   1c7c4:	e0bffe17 	ldw	r2,-8(fp)
   1c7c8:	1885883a 	add	r2,r3,r2
   1c7cc:	10800704 	addi	r2,r2,28
   1c7d0:	1007883a 	mov	r3,r2
   1c7d4:	e0bfff17 	ldw	r2,-4(fp)
   1c7d8:	10800617 	ldw	r2,24(r2)
   1c7dc:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   1c7e0:	00800044 	movi	r2,1
   1c7e4:	d0a8eb95 	stw	r2,-23634(gp)
        result = true;
   1c7e8:	00800044 	movi	r2,1
   1c7ec:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   1c7f0:	e0bffb17 	ldw	r2,-20(fp)
}
   1c7f4:	e037883a 	mov	sp,fp
   1c7f8:	dfc00117 	ldw	ra,4(sp)
   1c7fc:	df000017 	ldw	fp,0(sp)
   1c800:	dec00204 	addi	sp,sp,8
   1c804:	f800283a 	ret

0001c808 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   1c808:	defff904 	addi	sp,sp,-28
   1c80c:	dfc00615 	stw	ra,24(sp)
   1c810:	df000515 	stw	fp,20(sp)
   1c814:	df000504 	addi	fp,sp,20
   1c818:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   1c81c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
   1c820:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   1c824:	e17fff17 	ldw	r5,-4(fp)
   1c828:	0009883a 	mov	r4,zero
   1c82c:	001bef00 	call	1bef0 <Read_Sector_Data>
   1c830:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   1c834:	d0a8ea97 	ldw	r2,-23638(gp)
   1c838:	10800a17 	ldw	r2,40(r2)
   1c83c:	10807f84 	addi	r2,r2,510
   1c840:	1080002b 	ldhuio	r2,0(r2)
   1c844:	10bfffcc 	andi	r2,r2,65535
   1c848:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1c84c:	e0bffe0f 	ldh	r2,-8(fp)
   1c850:	10ffffcc 	andi	r3,r2,65535
   1c854:	00aa9554 	movui	r2,43605
   1c858:	1881841e 	bne	r3,r2,1ce6c <Check_for_DOS_FAT+0x664>
   1c85c:	e0bffb17 	ldw	r2,-20(fp)
   1c860:	10018226 	beq	r2,zero,1ce6c <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
   1c864:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   1c868:	d0a8ea97 	ldw	r2,-23638(gp)
   1c86c:	10800a17 	ldw	r2,40(r2)
   1c870:	10800023 	ldbuio	r2,0(r2)
   1c874:	10803fcc 	andi	r2,r2,255
   1c878:	1007883a 	mov	r3,r2
   1c87c:	00800274 	movhi	r2,9
   1c880:	109fd104 	addi	r2,r2,32580
   1c884:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   1c888:	d0a8ea97 	ldw	r2,-23638(gp)
   1c88c:	10800a17 	ldw	r2,40(r2)
   1c890:	10800044 	addi	r2,r2,1
   1c894:	10800023 	ldbuio	r2,0(r2)
   1c898:	10803fcc 	andi	r2,r2,255
   1c89c:	1007883a 	mov	r3,r2
   1c8a0:	00800274 	movhi	r2,9
   1c8a4:	109fd104 	addi	r2,r2,32580
   1c8a8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   1c8ac:	d0a8ea97 	ldw	r2,-23638(gp)
   1c8b0:	10800a17 	ldw	r2,40(r2)
   1c8b4:	10800084 	addi	r2,r2,2
   1c8b8:	10800023 	ldbuio	r2,0(r2)
   1c8bc:	10803fcc 	andi	r2,r2,255
   1c8c0:	1007883a 	mov	r3,r2
   1c8c4:	00800274 	movhi	r2,9
   1c8c8:	109fd104 	addi	r2,r2,32580
   1c8cc:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   1c8d0:	e03ffc15 	stw	zero,-16(fp)
   1c8d4:	00001106 	br	1c91c <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   1c8d8:	d0a8ea97 	ldw	r2,-23638(gp)
   1c8dc:	10c00a17 	ldw	r3,40(r2)
   1c8e0:	e0bffc17 	ldw	r2,-16(fp)
   1c8e4:	1885883a 	add	r2,r3,r2
   1c8e8:	108000c4 	addi	r2,r2,3
   1c8ec:	10800023 	ldbuio	r2,0(r2)
   1c8f0:	10803fcc 	andi	r2,r2,255
   1c8f4:	1009883a 	mov	r4,r2
   1c8f8:	00800274 	movhi	r2,9
   1c8fc:	109fd104 	addi	r2,r2,32580
   1c900:	e0fffc17 	ldw	r3,-16(fp)
   1c904:	10c5883a 	add	r2,r2,r3
   1c908:	108000c4 	addi	r2,r2,3
   1c90c:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   1c910:	e0bffc17 	ldw	r2,-16(fp)
   1c914:	10800044 	addi	r2,r2,1
   1c918:	e0bffc15 	stw	r2,-16(fp)
   1c91c:	e0bffc17 	ldw	r2,-16(fp)
   1c920:	10800210 	cmplti	r2,r2,8
   1c924:	103fec1e 	bne	r2,zero,1c8d8 <Check_for_DOS_FAT+0xd0>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   1c928:	d0a8ea97 	ldw	r2,-23638(gp)
   1c92c:	10800a17 	ldw	r2,40(r2)
   1c930:	10800304 	addi	r2,r2,12
   1c934:	10800023 	ldbuio	r2,0(r2)
   1c938:	10803fcc 	andi	r2,r2,255
   1c93c:	1004923a 	slli	r2,r2,8
   1c940:	1007883a 	mov	r3,r2
   1c944:	d0a8ea97 	ldw	r2,-23638(gp)
   1c948:	10800a17 	ldw	r2,40(r2)
   1c94c:	108002c4 	addi	r2,r2,11
   1c950:	10800023 	ldbuio	r2,0(r2)
   1c954:	10803fcc 	andi	r2,r2,255
   1c958:	10803fcc 	andi	r2,r2,255
   1c95c:	1080201c 	xori	r2,r2,128
   1c960:	10bfe004 	addi	r2,r2,-128
   1c964:	1884b03a 	or	r2,r3,r2
   1c968:	1007883a 	mov	r3,r2
   1c96c:	00800274 	movhi	r2,9
   1c970:	109fd104 	addi	r2,r2,32580
   1c974:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   1c978:	d0a8ea97 	ldw	r2,-23638(gp)
   1c97c:	10800a17 	ldw	r2,40(r2)
   1c980:	10800344 	addi	r2,r2,13
   1c984:	10800023 	ldbuio	r2,0(r2)
   1c988:	10803fcc 	andi	r2,r2,255
   1c98c:	1007883a 	mov	r3,r2
   1c990:	00800274 	movhi	r2,9
   1c994:	109fd104 	addi	r2,r2,32580
   1c998:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   1c99c:	d0a8ea97 	ldw	r2,-23638(gp)
   1c9a0:	10800a17 	ldw	r2,40(r2)
   1c9a4:	10800384 	addi	r2,r2,14
   1c9a8:	1080002b 	ldhuio	r2,0(r2)
   1c9ac:	10bfffcc 	andi	r2,r2,65535
   1c9b0:	1007883a 	mov	r3,r2
   1c9b4:	00800274 	movhi	r2,9
   1c9b8:	109fd104 	addi	r2,r2,32580
   1c9bc:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   1c9c0:	d0a8ea97 	ldw	r2,-23638(gp)
   1c9c4:	10800a17 	ldw	r2,40(r2)
   1c9c8:	10800404 	addi	r2,r2,16
   1c9cc:	10800023 	ldbuio	r2,0(r2)
   1c9d0:	10803fcc 	andi	r2,r2,255
   1c9d4:	1007883a 	mov	r3,r2
   1c9d8:	00800274 	movhi	r2,9
   1c9dc:	109fd104 	addi	r2,r2,32580
   1c9e0:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   1c9e4:	d0a8ea97 	ldw	r2,-23638(gp)
   1c9e8:	10800a17 	ldw	r2,40(r2)
   1c9ec:	10800484 	addi	r2,r2,18
   1c9f0:	10800023 	ldbuio	r2,0(r2)
   1c9f4:	10803fcc 	andi	r2,r2,255
   1c9f8:	1004923a 	slli	r2,r2,8
   1c9fc:	1007883a 	mov	r3,r2
   1ca00:	d0a8ea97 	ldw	r2,-23638(gp)
   1ca04:	10800a17 	ldw	r2,40(r2)
   1ca08:	10800444 	addi	r2,r2,17
   1ca0c:	10800023 	ldbuio	r2,0(r2)
   1ca10:	10803fcc 	andi	r2,r2,255
   1ca14:	10803fcc 	andi	r2,r2,255
   1ca18:	1884b03a 	or	r2,r3,r2
   1ca1c:	1007883a 	mov	r3,r2
   1ca20:	00800274 	movhi	r2,9
   1ca24:	109fd104 	addi	r2,r2,32580
   1ca28:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   1ca2c:	d0a8ea97 	ldw	r2,-23638(gp)
   1ca30:	10800a17 	ldw	r2,40(r2)
   1ca34:	10800504 	addi	r2,r2,20
   1ca38:	10800023 	ldbuio	r2,0(r2)
   1ca3c:	10803fcc 	andi	r2,r2,255
   1ca40:	1004923a 	slli	r2,r2,8
   1ca44:	1007883a 	mov	r3,r2
   1ca48:	d0a8ea97 	ldw	r2,-23638(gp)
   1ca4c:	10800a17 	ldw	r2,40(r2)
   1ca50:	108004c4 	addi	r2,r2,19
   1ca54:	10800023 	ldbuio	r2,0(r2)
   1ca58:	10803fcc 	andi	r2,r2,255
   1ca5c:	10803fcc 	andi	r2,r2,255
   1ca60:	1884b03a 	or	r2,r3,r2
   1ca64:	1007883a 	mov	r3,r2
   1ca68:	00800274 	movhi	r2,9
   1ca6c:	109fd104 	addi	r2,r2,32580
   1ca70:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1ca74:	d0a8ea97 	ldw	r2,-23638(gp)
   1ca78:	10800a17 	ldw	r2,40(r2)
   1ca7c:	10800544 	addi	r2,r2,21
   1ca80:	10800023 	ldbuio	r2,0(r2)
   1ca84:	10803fcc 	andi	r2,r2,255
   1ca88:	1007883a 	mov	r3,r2
   1ca8c:	00800274 	movhi	r2,9
   1ca90:	109fd104 	addi	r2,r2,32580
   1ca94:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   1ca98:	d0a8ea97 	ldw	r2,-23638(gp)
   1ca9c:	10800a17 	ldw	r2,40(r2)
   1caa0:	10800584 	addi	r2,r2,22
   1caa4:	1080002b 	ldhuio	r2,0(r2)
   1caa8:	10bfffcc 	andi	r2,r2,65535
   1caac:	1007883a 	mov	r3,r2
   1cab0:	00800274 	movhi	r2,9
   1cab4:	109fd104 	addi	r2,r2,32580
   1cab8:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   1cabc:	d0a8ea97 	ldw	r2,-23638(gp)
   1cac0:	10800a17 	ldw	r2,40(r2)
   1cac4:	10800604 	addi	r2,r2,24
   1cac8:	1080002b 	ldhuio	r2,0(r2)
   1cacc:	10bfffcc 	andi	r2,r2,65535
   1cad0:	1007883a 	mov	r3,r2
   1cad4:	00800274 	movhi	r2,9
   1cad8:	109fd104 	addi	r2,r2,32580
   1cadc:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   1cae0:	d0a8ea97 	ldw	r2,-23638(gp)
   1cae4:	10800a17 	ldw	r2,40(r2)
   1cae8:	10800684 	addi	r2,r2,26
   1caec:	1080002b 	ldhuio	r2,0(r2)
   1caf0:	10bfffcc 	andi	r2,r2,65535
   1caf4:	1007883a 	mov	r3,r2
   1caf8:	00800274 	movhi	r2,9
   1cafc:	109fd104 	addi	r2,r2,32580
   1cb00:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1cb04:	d0a8ea97 	ldw	r2,-23638(gp)
   1cb08:	10800a17 	ldw	r2,40(r2)
   1cb0c:	10800704 	addi	r2,r2,28
   1cb10:	10800037 	ldwio	r2,0(r2)
   1cb14:	1007883a 	mov	r3,r2
   1cb18:	00800274 	movhi	r2,9
   1cb1c:	109fd104 	addi	r2,r2,32580
   1cb20:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1cb24:	d0a8ea97 	ldw	r2,-23638(gp)
   1cb28:	10800a17 	ldw	r2,40(r2)
   1cb2c:	10800804 	addi	r2,r2,32
   1cb30:	10800037 	ldwio	r2,0(r2)
   1cb34:	1007883a 	mov	r3,r2
   1cb38:	00800274 	movhi	r2,9
   1cb3c:	109fd104 	addi	r2,r2,32580
   1cb40:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1cb44:	d0a8ea97 	ldw	r2,-23638(gp)
   1cb48:	10800a17 	ldw	r2,40(r2)
   1cb4c:	10800904 	addi	r2,r2,36
   1cb50:	10800023 	ldbuio	r2,0(r2)
   1cb54:	10803fcc 	andi	r2,r2,255
   1cb58:	1007883a 	mov	r3,r2
   1cb5c:	00800274 	movhi	r2,9
   1cb60:	109fd104 	addi	r2,r2,32580
   1cb64:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   1cb68:	d0a8ea97 	ldw	r2,-23638(gp)
   1cb6c:	10800a17 	ldw	r2,40(r2)
   1cb70:	10800944 	addi	r2,r2,37
   1cb74:	10800023 	ldbuio	r2,0(r2)
   1cb78:	10803fcc 	andi	r2,r2,255
   1cb7c:	1007883a 	mov	r3,r2
   1cb80:	00800274 	movhi	r2,9
   1cb84:	109fd104 	addi	r2,r2,32580
   1cb88:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   1cb8c:	d0a8ea97 	ldw	r2,-23638(gp)
   1cb90:	10800a17 	ldw	r2,40(r2)
   1cb94:	10800984 	addi	r2,r2,38
   1cb98:	10800023 	ldbuio	r2,0(r2)
   1cb9c:	10803fcc 	andi	r2,r2,255
   1cba0:	1007883a 	mov	r3,r2
   1cba4:	00800274 	movhi	r2,9
   1cba8:	109fd104 	addi	r2,r2,32580
   1cbac:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   1cbb0:	00800274 	movhi	r2,9
   1cbb4:	109fd104 	addi	r2,r2,32580
   1cbb8:	1080040b 	ldhu	r2,16(r2)
   1cbbc:	10ffffcc 	andi	r3,r2,65535
   1cbc0:	00800274 	movhi	r2,9
   1cbc4:	109fd104 	addi	r2,r2,32580
   1cbc8:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   1cbcc:	00800274 	movhi	r2,9
   1cbd0:	109fd104 	addi	r2,r2,32580
   1cbd4:	10c01117 	ldw	r3,68(r2)
   1cbd8:	00800274 	movhi	r2,9
   1cbdc:	109fd104 	addi	r2,r2,32580
   1cbe0:	1080068b 	ldhu	r2,26(r2)
   1cbe4:	10bfffcc 	andi	r2,r2,65535
   1cbe8:	1887883a 	add	r3,r3,r2
   1cbec:	00800274 	movhi	r2,9
   1cbf0:	109fd104 	addi	r2,r2,32580
   1cbf4:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   1cbf8:	00800274 	movhi	r2,9
   1cbfc:	109fd104 	addi	r2,r2,32580
   1cc00:	10c01217 	ldw	r3,72(r2)
   1cc04:	00800274 	movhi	r2,9
   1cc08:	109fd104 	addi	r2,r2,32580
   1cc0c:	1080068b 	ldhu	r2,26(r2)
   1cc10:	10bfffcc 	andi	r2,r2,65535
   1cc14:	1887883a 	add	r3,r3,r2
   1cc18:	00800274 	movhi	r2,9
   1cc1c:	109fd104 	addi	r2,r2,32580
   1cc20:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   1cc24:	00800274 	movhi	r2,9
   1cc28:	109fd104 	addi	r2,r2,32580
   1cc2c:	10c01317 	ldw	r3,76(r2)
   1cc30:	00800274 	movhi	r2,9
   1cc34:	109fd104 	addi	r2,r2,32580
   1cc38:	1080050b 	ldhu	r2,20(r2)
   1cc3c:	10bfffcc 	andi	r2,r2,65535
   1cc40:	1008917a 	slli	r4,r2,5
   1cc44:	00800274 	movhi	r2,9
   1cc48:	109fd104 	addi	r2,r2,32580
   1cc4c:	1080030b 	ldhu	r2,12(r2)
   1cc50:	10bfffcc 	andi	r2,r2,65535
   1cc54:	2085283a 	div	r2,r4,r2
   1cc58:	1887883a 	add	r3,r3,r2
   1cc5c:	00800274 	movhi	r2,9
   1cc60:	109fd104 	addi	r2,r2,32580
   1cc64:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   1cc68:	00800274 	movhi	r2,9
   1cc6c:	109fd104 	addi	r2,r2,32580
   1cc70:	1080058b 	ldhu	r2,22(r2)
   1cc74:	10bfffcc 	andi	r2,r2,65535
   1cc78:	10000b26 	beq	r2,zero,1cca8 <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   1cc7c:	00800274 	movhi	r2,9
   1cc80:	109fd104 	addi	r2,r2,32580
   1cc84:	1080058b 	ldhu	r2,22(r2)
   1cc88:	10ffffcc 	andi	r3,r2,65535
   1cc8c:	00800274 	movhi	r2,9
   1cc90:	109fd104 	addi	r2,r2,32580
   1cc94:	10800383 	ldbu	r2,14(r2)
   1cc98:	10803fcc 	andi	r2,r2,255
   1cc9c:	1885283a 	div	r2,r3,r2
   1cca0:	e0bffd15 	stw	r2,-12(fp)
   1cca4:	00000906 	br	1cccc <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   1cca8:	00800274 	movhi	r2,9
   1ccac:	109fd104 	addi	r2,r2,32580
   1ccb0:	10c00917 	ldw	r3,36(r2)
   1ccb4:	00800274 	movhi	r2,9
   1ccb8:	109fd104 	addi	r2,r2,32580
   1ccbc:	10800383 	ldbu	r2,14(r2)
   1ccc0:	10803fcc 	andi	r2,r2,255
   1ccc4:	1885203a 	divu	r2,r3,r2
   1ccc8:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   1cccc:	e0bffd17 	ldw	r2,-12(fp)
   1ccd0:	1083fdc8 	cmpgei	r2,r2,4087
   1ccd4:	1000051e 	bne	r2,zero,1ccec <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   1ccd8:	00800274 	movhi	r2,9
   1ccdc:	109fd104 	addi	r2,r2,32580
   1cce0:	00c00304 	movi	r3,12
   1cce4:	10c01085 	stb	r3,66(r2)
   1cce8:	00000c06 	br	1cd1c <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
   1ccec:	e0bffd17 	ldw	r2,-12(fp)
   1ccf0:	00fffb54 	movui	r3,65517
   1ccf4:	18800516 	blt	r3,r2,1cd0c <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   1ccf8:	00800274 	movhi	r2,9
   1ccfc:	109fd104 	addi	r2,r2,32580
   1cd00:	00c00404 	movi	r3,16
   1cd04:	10c01085 	stb	r3,66(r2)
   1cd08:	00000406 	br	1cd1c <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   1cd0c:	00800274 	movhi	r2,9
   1cd10:	109fd104 	addi	r2,r2,32580
   1cd14:	00c00804 	movi	r3,32
   1cd18:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   1cd1c:	e03ffc15 	stw	zero,-16(fp)
   1cd20:	00001106 	br	1cd68 <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   1cd24:	d0a8ea97 	ldw	r2,-23638(gp)
   1cd28:	10c00a17 	ldw	r3,40(r2)
   1cd2c:	e0bffc17 	ldw	r2,-16(fp)
   1cd30:	1885883a 	add	r2,r3,r2
   1cd34:	108009c4 	addi	r2,r2,39
   1cd38:	10800023 	ldbuio	r2,0(r2)
   1cd3c:	10803fcc 	andi	r2,r2,255
   1cd40:	1009883a 	mov	r4,r2
   1cd44:	00800274 	movhi	r2,9
   1cd48:	109fd104 	addi	r2,r2,32580
   1cd4c:	e0fffc17 	ldw	r3,-16(fp)
   1cd50:	10c5883a 	add	r2,r2,r3
   1cd54:	10800ac4 	addi	r2,r2,43
   1cd58:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   1cd5c:	e0bffc17 	ldw	r2,-16(fp)
   1cd60:	10800044 	addi	r2,r2,1
   1cd64:	e0bffc15 	stw	r2,-16(fp)
   1cd68:	e0bffc17 	ldw	r2,-16(fp)
   1cd6c:	10800110 	cmplti	r2,r2,4
   1cd70:	103fec1e 	bne	r2,zero,1cd24 <Check_for_DOS_FAT+0x51c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1cd74:	e03ffc15 	stw	zero,-16(fp)
   1cd78:	00001106 	br	1cdc0 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1cd7c:	d0a8ea97 	ldw	r2,-23638(gp)
   1cd80:	10c00a17 	ldw	r3,40(r2)
   1cd84:	e0bffc17 	ldw	r2,-16(fp)
   1cd88:	1885883a 	add	r2,r3,r2
   1cd8c:	10800ac4 	addi	r2,r2,43
   1cd90:	10800023 	ldbuio	r2,0(r2)
   1cd94:	10803fcc 	andi	r2,r2,255
   1cd98:	1009883a 	mov	r4,r2
   1cd9c:	00800274 	movhi	r2,9
   1cda0:	109fd104 	addi	r2,r2,32580
   1cda4:	e0fffc17 	ldw	r3,-16(fp)
   1cda8:	10c5883a 	add	r2,r2,r3
   1cdac:	10800bc4 	addi	r2,r2,47
   1cdb0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1cdb4:	e0bffc17 	ldw	r2,-16(fp)
   1cdb8:	10800044 	addi	r2,r2,1
   1cdbc:	e0bffc15 	stw	r2,-16(fp)
   1cdc0:	e0bffc17 	ldw	r2,-16(fp)
   1cdc4:	108002d0 	cmplti	r2,r2,11
   1cdc8:	103fec1e 	bne	r2,zero,1cd7c <Check_for_DOS_FAT+0x574>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1cdcc:	e03ffc15 	stw	zero,-16(fp)
   1cdd0:	00001106 	br	1ce18 <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1cdd4:	d0a8ea97 	ldw	r2,-23638(gp)
   1cdd8:	10c00a17 	ldw	r3,40(r2)
   1cddc:	e0bffc17 	ldw	r2,-16(fp)
   1cde0:	1885883a 	add	r2,r3,r2
   1cde4:	10800d84 	addi	r2,r2,54
   1cde8:	10800023 	ldbuio	r2,0(r2)
   1cdec:	10803fcc 	andi	r2,r2,255
   1cdf0:	1009883a 	mov	r4,r2
   1cdf4:	00800274 	movhi	r2,9
   1cdf8:	109fd104 	addi	r2,r2,32580
   1cdfc:	e0fffc17 	ldw	r3,-16(fp)
   1ce00:	10c5883a 	add	r2,r2,r3
   1ce04:	10800e84 	addi	r2,r2,58
   1ce08:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1ce0c:	e0bffc17 	ldw	r2,-16(fp)
   1ce10:	10800044 	addi	r2,r2,1
   1ce14:	e0bffc15 	stw	r2,-16(fp)
   1ce18:	e0bffc17 	ldw	r2,-16(fp)
   1ce1c:	10800210 	cmplti	r2,r2,8
   1ce20:	103fec1e 	bne	r2,zero,1cdd4 <Check_for_DOS_FAT+0x5cc>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1ce24:	e03ffc15 	stw	zero,-16(fp)
   1ce28:	00000a06 	br	1ce54 <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
   1ce2c:	00800274 	movhi	r2,9
   1ce30:	109fe604 	addi	r2,r2,32664
   1ce34:	e0fffc17 	ldw	r3,-16(fp)
   1ce38:	180691ba 	slli	r3,r3,6
   1ce3c:	10c5883a 	add	r2,r2,r3
   1ce40:	10800f04 	addi	r2,r2,60
   1ce44:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1ce48:	e0bffc17 	ldw	r2,-16(fp)
   1ce4c:	10800044 	addi	r2,r2,1
   1ce50:	e0bffc15 	stw	r2,-16(fp)
   1ce54:	e0bffc17 	ldw	r2,-16(fp)
   1ce58:	10800510 	cmplti	r2,r2,20
   1ce5c:	103ff31e 	bne	r2,zero,1ce2c <Check_for_DOS_FAT+0x624>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   1ce60:	00800044 	movi	r2,1
   1ce64:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   1ce68:	00000106 	br	1ce70 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
   1ce6c:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
   1ce70:	e0bffb17 	ldw	r2,-20(fp)
}
   1ce74:	e037883a 	mov	sp,fp
   1ce78:	dfc00117 	ldw	ra,4(sp)
   1ce7c:	df000017 	ldw	fp,0(sp)
   1ce80:	dec00204 	addi	sp,sp,8
   1ce84:	f800283a 	ret

0001ce88 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1ce88:	defffc04 	addi	sp,sp,-16
   1ce8c:	dfc00315 	stw	ra,12(sp)
   1ce90:	df000215 	stw	fp,8(sp)
   1ce94:	df000204 	addi	fp,sp,8
	bool result = false;
   1ce98:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   1ce9c:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1cea0:	10002e26 	beq	r2,zero,1cf5c <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   1cea4:	d0a8e497 	ldw	r2,-23662(gp)
   1cea8:	1080000b 	ldhu	r2,0(r2)
   1ceac:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1ceb0:	d028e895 	stw	zero,-23646(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1ceb4:	d028e995 	stw	zero,-23642(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1ceb8:	e0bfff0f 	ldh	r2,-4(fp)
   1cebc:	10002716 	blt	r2,zero,1cf5c <Look_for_FAT16+0xd4>
   1cec0:	e0bfff0b 	ldhu	r2,-4(fp)
   1cec4:	10bfffcc 	andi	r2,r2,65535
   1cec8:	1083000c 	andi	r2,r2,3072
   1cecc:	10830020 	cmpeqi	r2,r2,3072
   1ced0:	1000221e 	bne	r2,zero,1cf5c <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1ced4:	e0bfff0b 	ldhu	r2,-4(fp)
   1ced8:	10bfffcc 	andi	r2,r2,65535
   1cedc:	1083000c 	andi	r2,r2,3072
   1cee0:	10810018 	cmpnei	r2,r2,1024
   1cee4:	1000031e 	bne	r2,zero,1cef4 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1cee8:	0009883a 	mov	r4,zero
   1ceec:	001c8080 	call	1c808 <Check_for_DOS_FAT>
   1cef0:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1cef4:	e0bfff0b 	ldhu	r2,-4(fp)
   1cef8:	10bfffcc 	andi	r2,r2,65535
   1cefc:	1083000c 	andi	r2,r2,3072
   1cf00:	1000061e 	bne	r2,zero,1cf1c <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1cf04:	001c15c0 	call	1c15c <Check_for_Master_Boot_Record>
   1cf08:	10000426 	beq	r2,zero,1cf1c <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1cf0c:	d0a8e897 	ldw	r2,-23646(gp)
   1cf10:	1009883a 	mov	r4,r2
   1cf14:	001c8080 	call	1c808 <Check_for_DOS_FAT>
   1cf18:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   1cf1c:	e0bffe17 	ldw	r2,-8(fp)
   1cf20:	10800058 	cmpnei	r2,r2,1
   1cf24:	10000d1e 	bne	r2,zero,1cf5c <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1cf28:	00800274 	movhi	r2,9
   1cf2c:	109fd104 	addi	r2,r2,32580
   1cf30:	10801083 	ldbu	r2,66(r2)
   1cf34:	10803fcc 	andi	r2,r2,255
   1cf38:	10800420 	cmpeqi	r2,r2,16
   1cf3c:	1000021e 	bne	r2,zero,1cf48 <Look_for_FAT16+0xc0>
				{
					result = false;
   1cf40:	e03ffe15 	stw	zero,-8(fp)
   1cf44:	00000506 	br	1cf5c <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1cf48:	00800274 	movhi	r2,9
   1cf4c:	109fd104 	addi	r2,r2,32580
   1cf50:	1080058b 	ldhu	r2,22(r2)
   1cf54:	10bfffcc 	andi	r2,r2,65535
   1cf58:	d0a8e995 	stw	r2,-23642(gp)
				}
			}
		}
	}
	return result;
   1cf5c:	e0bffe17 	ldw	r2,-8(fp)
}
   1cf60:	e037883a 	mov	sp,fp
   1cf64:	dfc00117 	ldw	ra,4(sp)
   1cf68:	df000017 	ldw	fp,0(sp)
   1cf6c:	dec00204 	addi	sp,sp,8
   1cf70:	f800283a 	ret

0001cf74 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1cf74:	defffb04 	addi	sp,sp,-20
   1cf78:	dfc00415 	stw	ra,16(sp)
   1cf7c:	df000315 	stw	fp,12(sp)
   1cf80:	df000304 	addi	fp,sp,12
   1cf84:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   1cf88:	e13fff17 	ldw	r4,-4(fp)
   1cf8c:	0002fc00 	call	2fc0 <strlen>
   1cf90:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1cf94:	e03ffd15 	stw	zero,-12(fp)
   1cf98:	00001e06 	br	1d014 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1cf9c:	e0bffd17 	ldw	r2,-12(fp)
   1cfa0:	e0ffff17 	ldw	r3,-4(fp)
   1cfa4:	1885883a 	add	r2,r3,r2
   1cfa8:	10800003 	ldbu	r2,0(r2)
   1cfac:	10803fcc 	andi	r2,r2,255
   1cfb0:	1080201c 	xori	r2,r2,128
   1cfb4:	10bfe004 	addi	r2,r2,-128
   1cfb8:	10801850 	cmplti	r2,r2,97
   1cfbc:	1000121e 	bne	r2,zero,1d008 <filename_to_upper_case+0x94>
   1cfc0:	e0bffd17 	ldw	r2,-12(fp)
   1cfc4:	e0ffff17 	ldw	r3,-4(fp)
   1cfc8:	1885883a 	add	r2,r3,r2
   1cfcc:	10800003 	ldbu	r2,0(r2)
   1cfd0:	10803fcc 	andi	r2,r2,255
   1cfd4:	1080201c 	xori	r2,r2,128
   1cfd8:	10bfe004 	addi	r2,r2,-128
   1cfdc:	10801ec8 	cmpgei	r2,r2,123
   1cfe0:	1000091e 	bne	r2,zero,1d008 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1cfe4:	e0bffd17 	ldw	r2,-12(fp)
   1cfe8:	e0ffff17 	ldw	r3,-4(fp)
   1cfec:	1885883a 	add	r2,r3,r2
   1cff0:	e0fffd17 	ldw	r3,-12(fp)
   1cff4:	e13fff17 	ldw	r4,-4(fp)
   1cff8:	20c7883a 	add	r3,r4,r3
   1cffc:	18c00003 	ldbu	r3,0(r3)
   1d000:	18fff804 	addi	r3,r3,-32
   1d004:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   1d008:	e0bffd17 	ldw	r2,-12(fp)
   1d00c:	10800044 	addi	r2,r2,1
   1d010:	e0bffd15 	stw	r2,-12(fp)
   1d014:	e0fffd17 	ldw	r3,-12(fp)
   1d018:	e0bffe17 	ldw	r2,-8(fp)
   1d01c:	18bfdf16 	blt	r3,r2,1cf9c <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   1d020:	0001883a 	nop
   1d024:	e037883a 	mov	sp,fp
   1d028:	dfc00117 	ldw	ra,4(sp)
   1d02c:	df000017 	ldw	fp,0(sp)
   1d030:	dec00204 	addi	sp,sp,8
   1d034:	f800283a 	ret

0001d038 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1d038:	defff804 	addi	sp,sp,-32
   1d03c:	dfc00715 	stw	ra,28(sp)
   1d040:	df000615 	stw	fp,24(sp)
   1d044:	df000604 	addi	fp,sp,24
   1d048:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   1d04c:	e13fff17 	ldw	r4,-4(fp)
   1d050:	0002fc00 	call	2fc0 <strlen>
   1d054:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   1d058:	00bfffc4 	movi	r2,-1
   1d05c:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   1d060:	00bfffc4 	movi	r2,-1
   1d064:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   1d068:	00800044 	movi	r2,1
   1d06c:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   1d070:	e03ffa15 	stw	zero,-24(fp)
   1d074:	00006d06 	br	1d22c <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1d078:	e0bffa17 	ldw	r2,-24(fp)
   1d07c:	e0ffff17 	ldw	r3,-4(fp)
   1d080:	1885883a 	add	r2,r3,r2
   1d084:	10800003 	ldbu	r2,0(r2)
   1d088:	10803fcc 	andi	r2,r2,255
   1d08c:	1080201c 	xori	r2,r2,128
   1d090:	10bfe004 	addi	r2,r2,-128
   1d094:	10800820 	cmpeqi	r2,r2,32
   1d098:	10003e1e 	bne	r2,zero,1d194 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1d09c:	e0bffa17 	ldw	r2,-24(fp)
   1d0a0:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   1d0a4:	e0bffb17 	ldw	r2,-20(fp)
   1d0a8:	1880121e 	bne	r3,r2,1d0f4 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1d0ac:	e0bffa17 	ldw	r2,-24(fp)
   1d0b0:	e0ffff17 	ldw	r3,-4(fp)
   1d0b4:	1885883a 	add	r2,r3,r2
   1d0b8:	10800003 	ldbu	r2,0(r2)
   1d0bc:	10803fcc 	andi	r2,r2,255
   1d0c0:	1080201c 	xori	r2,r2,128
   1d0c4:	10bfe004 	addi	r2,r2,-128
   1d0c8:	10801720 	cmpeqi	r2,r2,92
   1d0cc:	1000311e 	bne	r2,zero,1d194 <check_file_name_for_FAT16_compliance+0x15c>
   1d0d0:	e0bffa17 	ldw	r2,-24(fp)
   1d0d4:	e0ffff17 	ldw	r3,-4(fp)
   1d0d8:	1885883a 	add	r2,r3,r2
   1d0dc:	10800003 	ldbu	r2,0(r2)
   1d0e0:	10803fcc 	andi	r2,r2,255
   1d0e4:	1080201c 	xori	r2,r2,128
   1d0e8:	10bfe004 	addi	r2,r2,-128
   1d0ec:	10800be0 	cmpeqi	r2,r2,47
   1d0f0:	1000281e 	bne	r2,zero,1d194 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1d0f4:	e0fffa17 	ldw	r3,-24(fp)
   1d0f8:	e0bffc17 	ldw	r2,-16(fp)
   1d0fc:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1d100:	10800258 	cmpnei	r2,r2,9
   1d104:	1000091e 	bne	r2,zero,1d12c <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1d108:	e0bffa17 	ldw	r2,-24(fp)
   1d10c:	e0ffff17 	ldw	r3,-4(fp)
   1d110:	1885883a 	add	r2,r3,r2
   1d114:	10800003 	ldbu	r2,0(r2)
   1d118:	10803fcc 	andi	r2,r2,255
   1d11c:	1080201c 	xori	r2,r2,128
   1d120:	10bfe004 	addi	r2,r2,-128
   1d124:	10800b98 	cmpnei	r2,r2,46
   1d128:	10001a1e 	bne	r2,zero,1d194 <check_file_name_for_FAT16_compliance+0x15c>
   1d12c:	e0fffb17 	ldw	r3,-20(fp)
   1d130:	e0bffc17 	ldw	r2,-16(fp)
   1d134:	18801926 	beq	r3,r2,1d19c <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1d138:	e0fffa17 	ldw	r3,-24(fp)
   1d13c:	e0bffc17 	ldw	r2,-16(fp)
   1d140:	1885c83a 	sub	r2,r3,r2
   1d144:	10800110 	cmplti	r2,r2,4
   1d148:	1000141e 	bne	r2,zero,1d19c <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1d14c:	e0bffa17 	ldw	r2,-24(fp)
   1d150:	e0ffff17 	ldw	r3,-4(fp)
   1d154:	1885883a 	add	r2,r3,r2
   1d158:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1d15c:	10803fcc 	andi	r2,r2,255
   1d160:	1080201c 	xori	r2,r2,128
   1d164:	10bfe004 	addi	r2,r2,-128
   1d168:	10801720 	cmpeqi	r2,r2,92
   1d16c:	10000b1e 	bne	r2,zero,1d19c <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1d170:	e0bffa17 	ldw	r2,-24(fp)
   1d174:	e0ffff17 	ldw	r3,-4(fp)
   1d178:	1885883a 	add	r2,r3,r2
   1d17c:	10800003 	ldbu	r2,0(r2)
   1d180:	10803fcc 	andi	r2,r2,255
   1d184:	1080201c 	xori	r2,r2,128
   1d188:	10bfe004 	addi	r2,r2,-128
   1d18c:	10800be0 	cmpeqi	r2,r2,47
   1d190:	1000021e 	bne	r2,zero,1d19c <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1d194:	e03ffd15 	stw	zero,-12(fp)
            break;
   1d198:	00002706 	br	1d238 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1d19c:	e0bffa17 	ldw	r2,-24(fp)
   1d1a0:	e0ffff17 	ldw	r3,-4(fp)
   1d1a4:	1885883a 	add	r2,r3,r2
   1d1a8:	10800003 	ldbu	r2,0(r2)
   1d1ac:	10803fcc 	andi	r2,r2,255
   1d1b0:	1080201c 	xori	r2,r2,128
   1d1b4:	10bfe004 	addi	r2,r2,-128
   1d1b8:	10801720 	cmpeqi	r2,r2,92
   1d1bc:	1000091e 	bne	r2,zero,1d1e4 <check_file_name_for_FAT16_compliance+0x1ac>
   1d1c0:	e0bffa17 	ldw	r2,-24(fp)
   1d1c4:	e0ffff17 	ldw	r3,-4(fp)
   1d1c8:	1885883a 	add	r2,r3,r2
   1d1cc:	10800003 	ldbu	r2,0(r2)
   1d1d0:	10803fcc 	andi	r2,r2,255
   1d1d4:	1080201c 	xori	r2,r2,128
   1d1d8:	10bfe004 	addi	r2,r2,-128
   1d1dc:	10800bd8 	cmpnei	r2,r2,47
   1d1e0:	1000041e 	bne	r2,zero,1d1f4 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1d1e4:	e0bffa17 	ldw	r2,-24(fp)
   1d1e8:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1d1ec:	e0bffa17 	ldw	r2,-24(fp)
   1d1f0:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   1d1f4:	e0bffa17 	ldw	r2,-24(fp)
   1d1f8:	e0ffff17 	ldw	r3,-4(fp)
   1d1fc:	1885883a 	add	r2,r3,r2
   1d200:	10800003 	ldbu	r2,0(r2)
   1d204:	10803fcc 	andi	r2,r2,255
   1d208:	1080201c 	xori	r2,r2,128
   1d20c:	10bfe004 	addi	r2,r2,-128
   1d210:	10800b98 	cmpnei	r2,r2,46
   1d214:	1000021e 	bne	r2,zero,1d220 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1d218:	e0bffa17 	ldw	r2,-24(fp)
   1d21c:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   1d220:	e0bffa17 	ldw	r2,-24(fp)
   1d224:	10800044 	addi	r2,r2,1
   1d228:	e0bffa15 	stw	r2,-24(fp)
   1d22c:	e0fffa17 	ldw	r3,-24(fp)
   1d230:	e0bffe17 	ldw	r2,-8(fp)
   1d234:	18bf9016 	blt	r3,r2,1d078 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1d238:	e0bffe17 	ldw	r2,-8(fp)
   1d23c:	10bfffc4 	addi	r2,r2,-1
   1d240:	e0ffff17 	ldw	r3,-4(fp)
   1d244:	1885883a 	add	r2,r3,r2
   1d248:	10800003 	ldbu	r2,0(r2)
   1d24c:	10803fcc 	andi	r2,r2,255
   1d250:	1080201c 	xori	r2,r2,128
   1d254:	10bfe004 	addi	r2,r2,-128
   1d258:	10801720 	cmpeqi	r2,r2,92
   1d25c:	10000a1e 	bne	r2,zero,1d288 <check_file_name_for_FAT16_compliance+0x250>
   1d260:	e0bffe17 	ldw	r2,-8(fp)
   1d264:	10bfffc4 	addi	r2,r2,-1
   1d268:	e0ffff17 	ldw	r3,-4(fp)
   1d26c:	1885883a 	add	r2,r3,r2
   1d270:	10800003 	ldbu	r2,0(r2)
   1d274:	10803fcc 	andi	r2,r2,255
   1d278:	1080201c 	xori	r2,r2,128
   1d27c:	10bfe004 	addi	r2,r2,-128
   1d280:	10800bd8 	cmpnei	r2,r2,47
   1d284:	1000011e 	bne	r2,zero,1d28c <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1d288:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   1d28c:	e0bffd17 	ldw	r2,-12(fp)
}
   1d290:	e037883a 	mov	sp,fp
   1d294:	dfc00117 	ldw	ra,4(sp)
   1d298:	df000017 	ldw	fp,0(sp)
   1d29c:	dec00204 	addi	sp,sp,8
   1d2a0:	f800283a 	ret

0001d2a4 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1d2a4:	defffb04 	addi	sp,sp,-20
   1d2a8:	dfc00415 	stw	ra,16(sp)
   1d2ac:	df000315 	stw	fp,12(sp)
   1d2b0:	df000304 	addi	fp,sp,12
   1d2b4:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   1d2b8:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1d2bc:	e13fff17 	ldw	r4,-4(fp)
   1d2c0:	0002fc00 	call	2fc0 <strlen>
   1d2c4:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1d2c8:	e03ffd15 	stw	zero,-12(fp)
   1d2cc:	00001506 	br	1d324 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1d2d0:	e0bffd17 	ldw	r2,-12(fp)
   1d2d4:	e0ffff17 	ldw	r3,-4(fp)
   1d2d8:	1885883a 	add	r2,r3,r2
   1d2dc:	10800003 	ldbu	r2,0(r2)
   1d2e0:	10803fcc 	andi	r2,r2,255
   1d2e4:	1080201c 	xori	r2,r2,128
   1d2e8:	10bfe004 	addi	r2,r2,-128
   1d2ec:	10801720 	cmpeqi	r2,r2,92
   1d2f0:	10000f1e 	bne	r2,zero,1d330 <get_dir_divider_location+0x8c>
   1d2f4:	e0bffd17 	ldw	r2,-12(fp)
   1d2f8:	e0ffff17 	ldw	r3,-4(fp)
   1d2fc:	1885883a 	add	r2,r3,r2
   1d300:	10800003 	ldbu	r2,0(r2)
   1d304:	10803fcc 	andi	r2,r2,255
   1d308:	1080201c 	xori	r2,r2,128
   1d30c:	10bfe004 	addi	r2,r2,-128
   1d310:	10800be0 	cmpeqi	r2,r2,47
   1d314:	1000061e 	bne	r2,zero,1d330 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   1d318:	e0bffd17 	ldw	r2,-12(fp)
   1d31c:	10800044 	addi	r2,r2,1
   1d320:	e0bffd15 	stw	r2,-12(fp)
   1d324:	e0fffd17 	ldw	r3,-12(fp)
   1d328:	e0bffe17 	ldw	r2,-8(fp)
   1d32c:	18bfe816 	blt	r3,r2,1d2d0 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
   1d330:	e0fffd17 	ldw	r3,-12(fp)
   1d334:	e0bffe17 	ldw	r2,-8(fp)
   1d338:	1880021e 	bne	r3,r2,1d344 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1d33c:	00bfffc4 	movi	r2,-1
   1d340:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   1d344:	e0bffd17 	ldw	r2,-12(fp)
}
   1d348:	e037883a 	mov	sp,fp
   1d34c:	dfc00117 	ldw	ra,4(sp)
   1d350:	df000017 	ldw	fp,0(sp)
   1d354:	dec00204 	addi	sp,sp,8
   1d358:	f800283a 	ret

0001d35c <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1d35c:	defffa04 	addi	sp,sp,-24
   1d360:	df000515 	stw	fp,20(sp)
   1d364:	df000504 	addi	fp,sp,20
   1d368:	e13ffd15 	stw	r4,-12(fp)
   1d36c:	e17ffe15 	stw	r5,-8(fp)
   1d370:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   1d374:	00800044 	movi	r2,1
   1d378:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   1d37c:	e03ffc15 	stw	zero,-16(fp)
   1d380:	00004606 	br	1d49c <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1d384:	e0fffd17 	ldw	r3,-12(fp)
   1d388:	e0bffc17 	ldw	r2,-16(fp)
   1d38c:	1885883a 	add	r2,r3,r2
   1d390:	10800003 	ldbu	r2,0(r2)
   1d394:	10803fcc 	andi	r2,r2,255
   1d398:	10801870 	cmpltui	r2,r2,97
   1d39c:	1000101e 	bne	r2,zero,1d3e0 <match_file_record_to_name_ext+0x84>
   1d3a0:	e0fffd17 	ldw	r3,-12(fp)
   1d3a4:	e0bffc17 	ldw	r2,-16(fp)
   1d3a8:	1885883a 	add	r2,r3,r2
   1d3ac:	10800003 	ldbu	r2,0(r2)
   1d3b0:	10803fcc 	andi	r2,r2,255
   1d3b4:	10801ee8 	cmpgeui	r2,r2,123
   1d3b8:	1000091e 	bne	r2,zero,1d3e0 <match_file_record_to_name_ext+0x84>
   1d3bc:	e0fffd17 	ldw	r3,-12(fp)
   1d3c0:	e0bffc17 	ldw	r2,-16(fp)
   1d3c4:	1885883a 	add	r2,r3,r2
   1d3c8:	10800003 	ldbu	r2,0(r2)
   1d3cc:	10bff804 	addi	r2,r2,-32
   1d3d0:	10c03fcc 	andi	r3,r2,255
   1d3d4:	18c0201c 	xori	r3,r3,128
   1d3d8:	18ffe004 	addi	r3,r3,-128
   1d3dc:	00000706 	br	1d3fc <match_file_record_to_name_ext+0xa0>
   1d3e0:	e0fffd17 	ldw	r3,-12(fp)
   1d3e4:	e0bffc17 	ldw	r2,-16(fp)
   1d3e8:	1885883a 	add	r2,r3,r2
   1d3ec:	10800003 	ldbu	r2,0(r2)
   1d3f0:	10c03fcc 	andi	r3,r2,255
   1d3f4:	18c0201c 	xori	r3,r3,128
   1d3f8:	18ffe004 	addi	r3,r3,-128
   1d3fc:	e0bffc17 	ldw	r2,-16(fp)
   1d400:	e13ffe17 	ldw	r4,-8(fp)
   1d404:	2085883a 	add	r2,r4,r2
   1d408:	10800003 	ldbu	r2,0(r2)
   1d40c:	10803fcc 	andi	r2,r2,255
   1d410:	1080201c 	xori	r2,r2,128
   1d414:	10bfe004 	addi	r2,r2,-128
   1d418:	10801850 	cmplti	r2,r2,97
   1d41c:	1000121e 	bne	r2,zero,1d468 <match_file_record_to_name_ext+0x10c>
   1d420:	e0bffc17 	ldw	r2,-16(fp)
   1d424:	e13ffe17 	ldw	r4,-8(fp)
   1d428:	2085883a 	add	r2,r4,r2
   1d42c:	10800003 	ldbu	r2,0(r2)
   1d430:	10803fcc 	andi	r2,r2,255
   1d434:	1080201c 	xori	r2,r2,128
   1d438:	10bfe004 	addi	r2,r2,-128
   1d43c:	10801ec8 	cmpgei	r2,r2,123
   1d440:	1000091e 	bne	r2,zero,1d468 <match_file_record_to_name_ext+0x10c>
   1d444:	e0bffc17 	ldw	r2,-16(fp)
   1d448:	e13ffe17 	ldw	r4,-8(fp)
   1d44c:	2085883a 	add	r2,r4,r2
   1d450:	10800003 	ldbu	r2,0(r2)
   1d454:	10bff804 	addi	r2,r2,-32
   1d458:	10803fcc 	andi	r2,r2,255
   1d45c:	1080201c 	xori	r2,r2,128
   1d460:	10bfe004 	addi	r2,r2,-128
   1d464:	00000706 	br	1d484 <match_file_record_to_name_ext+0x128>
   1d468:	e0bffc17 	ldw	r2,-16(fp)
   1d46c:	e13ffe17 	ldw	r4,-8(fp)
   1d470:	2085883a 	add	r2,r4,r2
   1d474:	10800003 	ldbu	r2,0(r2)
   1d478:	10803fcc 	andi	r2,r2,255
   1d47c:	1080201c 	xori	r2,r2,128
   1d480:	10bfe004 	addi	r2,r2,-128
   1d484:	18800226 	beq	r3,r2,1d490 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1d488:	e03ffb15 	stw	zero,-20(fp)
			break;
   1d48c:	00000606 	br	1d4a8 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   1d490:	e0bffc17 	ldw	r2,-16(fp)
   1d494:	10800044 	addi	r2,r2,1
   1d498:	e0bffc15 	stw	r2,-16(fp)
   1d49c:	e0bffc17 	ldw	r2,-16(fp)
   1d4a0:	10800210 	cmplti	r2,r2,8
   1d4a4:	103fb71e 	bne	r2,zero,1d384 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1d4a8:	e03ffc15 	stw	zero,-16(fp)
   1d4ac:	00004a06 	br	1d5d8 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1d4b0:	e0fffd17 	ldw	r3,-12(fp)
   1d4b4:	e0bffc17 	ldw	r2,-16(fp)
   1d4b8:	1885883a 	add	r2,r3,r2
   1d4bc:	10800204 	addi	r2,r2,8
   1d4c0:	10800003 	ldbu	r2,0(r2)
   1d4c4:	10803fcc 	andi	r2,r2,255
   1d4c8:	10801870 	cmpltui	r2,r2,97
   1d4cc:	1000121e 	bne	r2,zero,1d518 <match_file_record_to_name_ext+0x1bc>
   1d4d0:	e0fffd17 	ldw	r3,-12(fp)
   1d4d4:	e0bffc17 	ldw	r2,-16(fp)
   1d4d8:	1885883a 	add	r2,r3,r2
   1d4dc:	10800204 	addi	r2,r2,8
   1d4e0:	10800003 	ldbu	r2,0(r2)
   1d4e4:	10803fcc 	andi	r2,r2,255
   1d4e8:	10801ee8 	cmpgeui	r2,r2,123
   1d4ec:	10000a1e 	bne	r2,zero,1d518 <match_file_record_to_name_ext+0x1bc>
   1d4f0:	e0fffd17 	ldw	r3,-12(fp)
   1d4f4:	e0bffc17 	ldw	r2,-16(fp)
   1d4f8:	1885883a 	add	r2,r3,r2
   1d4fc:	10800204 	addi	r2,r2,8
   1d500:	10800003 	ldbu	r2,0(r2)
   1d504:	10bff804 	addi	r2,r2,-32
   1d508:	10c03fcc 	andi	r3,r2,255
   1d50c:	18c0201c 	xori	r3,r3,128
   1d510:	18ffe004 	addi	r3,r3,-128
   1d514:	00000806 	br	1d538 <match_file_record_to_name_ext+0x1dc>
   1d518:	e0fffd17 	ldw	r3,-12(fp)
   1d51c:	e0bffc17 	ldw	r2,-16(fp)
   1d520:	1885883a 	add	r2,r3,r2
   1d524:	10800204 	addi	r2,r2,8
   1d528:	10800003 	ldbu	r2,0(r2)
   1d52c:	10c03fcc 	andi	r3,r2,255
   1d530:	18c0201c 	xori	r3,r3,128
   1d534:	18ffe004 	addi	r3,r3,-128
   1d538:	e0bffc17 	ldw	r2,-16(fp)
   1d53c:	e13fff17 	ldw	r4,-4(fp)
   1d540:	2085883a 	add	r2,r4,r2
   1d544:	10800003 	ldbu	r2,0(r2)
   1d548:	10803fcc 	andi	r2,r2,255
   1d54c:	1080201c 	xori	r2,r2,128
   1d550:	10bfe004 	addi	r2,r2,-128
   1d554:	10801850 	cmplti	r2,r2,97
   1d558:	1000121e 	bne	r2,zero,1d5a4 <match_file_record_to_name_ext+0x248>
   1d55c:	e0bffc17 	ldw	r2,-16(fp)
   1d560:	e13fff17 	ldw	r4,-4(fp)
   1d564:	2085883a 	add	r2,r4,r2
   1d568:	10800003 	ldbu	r2,0(r2)
   1d56c:	10803fcc 	andi	r2,r2,255
   1d570:	1080201c 	xori	r2,r2,128
   1d574:	10bfe004 	addi	r2,r2,-128
   1d578:	10801ec8 	cmpgei	r2,r2,123
   1d57c:	1000091e 	bne	r2,zero,1d5a4 <match_file_record_to_name_ext+0x248>
   1d580:	e0bffc17 	ldw	r2,-16(fp)
   1d584:	e13fff17 	ldw	r4,-4(fp)
   1d588:	2085883a 	add	r2,r4,r2
   1d58c:	10800003 	ldbu	r2,0(r2)
   1d590:	10bff804 	addi	r2,r2,-32
   1d594:	10803fcc 	andi	r2,r2,255
   1d598:	1080201c 	xori	r2,r2,128
   1d59c:	10bfe004 	addi	r2,r2,-128
   1d5a0:	00000706 	br	1d5c0 <match_file_record_to_name_ext+0x264>
   1d5a4:	e0bffc17 	ldw	r2,-16(fp)
   1d5a8:	e13fff17 	ldw	r4,-4(fp)
   1d5ac:	2085883a 	add	r2,r4,r2
   1d5b0:	10800003 	ldbu	r2,0(r2)
   1d5b4:	10803fcc 	andi	r2,r2,255
   1d5b8:	1080201c 	xori	r2,r2,128
   1d5bc:	10bfe004 	addi	r2,r2,-128
   1d5c0:	18800226 	beq	r3,r2,1d5cc <match_file_record_to_name_ext+0x270>
        {
            match = false;
   1d5c4:	e03ffb15 	stw	zero,-20(fp)
			break;
   1d5c8:	00000606 	br	1d5e4 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1d5cc:	e0bffc17 	ldw	r2,-16(fp)
   1d5d0:	10800044 	addi	r2,r2,1
   1d5d4:	e0bffc15 	stw	r2,-16(fp)
   1d5d8:	e0bffc17 	ldw	r2,-16(fp)
   1d5dc:	108000d0 	cmplti	r2,r2,3
   1d5e0:	103fb31e 	bne	r2,zero,1d4b0 <match_file_record_to_name_ext+0x154>
        {
            match = false;
			break;
        }
    }
	return match;
   1d5e4:	e0bffb17 	ldw	r2,-20(fp)
}
   1d5e8:	e037883a 	mov	sp,fp
   1d5ec:	df000017 	ldw	fp,0(sp)
   1d5f0:	dec00104 	addi	sp,sp,4
   1d5f4:	f800283a 	ret

0001d5f8 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1d5f8:	deffe704 	addi	sp,sp,-100
   1d5fc:	dfc01815 	stw	ra,96(sp)
   1d600:	df001715 	stw	fp,92(sp)
   1d604:	df001704 	addi	fp,sp,92
   1d608:	e13ffd15 	stw	r4,-12(fp)
   1d60c:	e17ffe15 	stw	r5,-8(fp)
   1d610:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   1d614:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   1d618:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1d61c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1d620:	e13ffd17 	ldw	r4,-12(fp)
   1d624:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1d628:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1d62c:	00012f06 	br	1daec <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1d630:	00800804 	movi	r2,32
   1d634:	e0bff905 	stb	r2,-28(fp)
   1d638:	00800804 	movi	r2,32
   1d63c:	e0bff945 	stb	r2,-27(fp)
   1d640:	00800804 	movi	r2,32
   1d644:	e0bff985 	stb	r2,-26(fp)
   1d648:	00800804 	movi	r2,32
   1d64c:	e0bff9c5 	stb	r2,-25(fp)
   1d650:	00800804 	movi	r2,32
   1d654:	e0bffa05 	stb	r2,-24(fp)
   1d658:	00800804 	movi	r2,32
   1d65c:	e0bffa45 	stb	r2,-23(fp)
   1d660:	00800804 	movi	r2,32
   1d664:	e0bffa85 	stb	r2,-22(fp)
   1d668:	00800804 	movi	r2,32
   1d66c:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1d670:	00800804 	movi	r2,32
   1d674:	e0bffb05 	stb	r2,-20(fp)
   1d678:	00800804 	movi	r2,32
   1d67c:	e0bffb45 	stb	r2,-19(fp)
   1d680:	00800804 	movi	r2,32
   1d684:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   1d688:	00bfffc4 	movi	r2,-1
   1d68c:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   1d690:	e0bfea17 	ldw	r2,-88(fp)
   1d694:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1d698:	e03fec15 	stw	zero,-80(fp)
   1d69c:	00002d06 	br	1d754 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   1d6a0:	e0ffec17 	ldw	r3,-80(fp)
   1d6a4:	e0bfed17 	ldw	r2,-76(fp)
   1d6a8:	1885883a 	add	r2,r3,r2
   1d6ac:	1007883a 	mov	r3,r2
   1d6b0:	e0bffd17 	ldw	r2,-12(fp)
   1d6b4:	10c5883a 	add	r2,r2,r3
   1d6b8:	10800003 	ldbu	r2,0(r2)
   1d6bc:	10803fcc 	andi	r2,r2,255
   1d6c0:	1080201c 	xori	r2,r2,128
   1d6c4:	10bfe004 	addi	r2,r2,-128
   1d6c8:	10800b98 	cmpnei	r2,r2,46
   1d6cc:	1000031e 	bne	r2,zero,1d6dc <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   1d6d0:	e0bfec17 	ldw	r2,-80(fp)
   1d6d4:	e0bfee15 	stw	r2,-72(fp)
   1d6d8:	00001b06 	br	1d748 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1d6dc:	e0bfee17 	ldw	r2,-72(fp)
   1d6e0:	10000c0e 	bge	r2,zero,1d714 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   1d6e4:	e0ffec17 	ldw	r3,-80(fp)
   1d6e8:	e0bfed17 	ldw	r2,-76(fp)
   1d6ec:	1885883a 	add	r2,r3,r2
   1d6f0:	1007883a 	mov	r3,r2
   1d6f4:	e0bffd17 	ldw	r2,-12(fp)
   1d6f8:	10c5883a 	add	r2,r2,r3
   1d6fc:	10c00003 	ldbu	r3,0(r2)
   1d700:	e13ff904 	addi	r4,fp,-28
   1d704:	e0bfec17 	ldw	r2,-80(fp)
   1d708:	2085883a 	add	r2,r4,r2
   1d70c:	10c00005 	stb	r3,0(r2)
   1d710:	00000d06 	br	1d748 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1d714:	e0ffec17 	ldw	r3,-80(fp)
   1d718:	e0bfee17 	ldw	r2,-72(fp)
   1d71c:	1885c83a 	sub	r2,r3,r2
   1d720:	e13fec17 	ldw	r4,-80(fp)
   1d724:	e0ffed17 	ldw	r3,-76(fp)
   1d728:	20c7883a 	add	r3,r4,r3
   1d72c:	1809883a 	mov	r4,r3
   1d730:	e0fffd17 	ldw	r3,-12(fp)
   1d734:	1907883a 	add	r3,r3,r4
   1d738:	18c00003 	ldbu	r3,0(r3)
   1d73c:	e13ffb04 	addi	r4,fp,-20
   1d740:	2085883a 	add	r2,r4,r2
   1d744:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1d748:	e0bfec17 	ldw	r2,-80(fp)
   1d74c:	10800044 	addi	r2,r2,1
   1d750:	e0bfec15 	stw	r2,-80(fp)
   1d754:	e0ffec17 	ldw	r3,-80(fp)
   1d758:	e0bfeb17 	ldw	r2,-84(fp)
   1d75c:	18bfd016 	blt	r3,r2,1d6a0 <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   1d760:	e0bfea17 	ldw	r2,-88(fp)
   1d764:	10005c1e 	bne	r2,zero,1d8d8 <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1d768:	00800274 	movhi	r2,9
   1d76c:	109fd104 	addi	r2,r2,32580
   1d770:	1080050b 	ldhu	r2,20(r2)
   1d774:	10bfffcc 	andi	r2,r2,65535
   1d778:	1006917a 	slli	r3,r2,5
   1d77c:	00800274 	movhi	r2,9
   1d780:	109fd104 	addi	r2,r2,32580
   1d784:	1080030b 	ldhu	r2,12(r2)
   1d788:	10bfffcc 	andi	r2,r2,65535
   1d78c:	1885283a 	div	r2,r3,r2
   1d790:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1d794:	e03ff015 	stw	zero,-64(fp)
   1d798:	00003b06 	br	1d888 <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1d79c:	00800274 	movhi	r2,9
   1d7a0:	109fd104 	addi	r2,r2,32580
   1d7a4:	10c01317 	ldw	r3,76(r2)
   1d7a8:	e0bff017 	ldw	r2,-64(fp)
   1d7ac:	1885883a 	add	r2,r3,r2
   1d7b0:	1007883a 	mov	r3,r2
   1d7b4:	d0a8e897 	ldw	r2,-23646(gp)
   1d7b8:	100b883a 	mov	r5,r2
   1d7bc:	1809883a 	mov	r4,r3
   1d7c0:	001bef00 	call	1bef0 <Read_Sector_Data>
   1d7c4:	10003426 	beq	r2,zero,1d898 <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1d7c8:	e03ff115 	stw	zero,-60(fp)
   1d7cc:	00002506 	br	1d864 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1d7d0:	e0bff117 	ldw	r2,-60(fp)
   1d7d4:	1004917a 	slli	r2,r2,5
   1d7d8:	e0fff017 	ldw	r3,-64(fp)
   1d7dc:	180f883a 	mov	r7,r3
   1d7e0:	000d883a 	mov	r6,zero
   1d7e4:	e17fff17 	ldw	r5,-4(fp)
   1d7e8:	1009883a 	mov	r4,r2
   1d7ec:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1d7f0:	e0bfff17 	ldw	r2,-4(fp)
   1d7f4:	10800003 	ldbu	r2,0(r2)
   1d7f8:	10803fcc 	andi	r2,r2,255
   1d7fc:	10803960 	cmpeqi	r2,r2,229
   1d800:	1000151e 	bne	r2,zero,1d858 <get_home_directory_cluster_for_file+0x260>
   1d804:	e0bfff17 	ldw	r2,-4(fp)
   1d808:	10800003 	ldbu	r2,0(r2)
   1d80c:	10803fcc 	andi	r2,r2,255
   1d810:	10001126 	beq	r2,zero,1d858 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1d814:	e0fffb04 	addi	r3,fp,-20
   1d818:	e0bff904 	addi	r2,fp,-28
   1d81c:	180d883a 	mov	r6,r3
   1d820:	100b883a 	mov	r5,r2
   1d824:	e13fff17 	ldw	r4,-4(fp)
   1d828:	001d35c0 	call	1d35c <match_file_record_to_name_ext>
   1d82c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   1d830:	e0bff817 	ldw	r2,-32(fp)
   1d834:	10000826 	beq	r2,zero,1d858 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   1d838:	e0bfff17 	ldw	r2,-4(fp)
   1d83c:	1080058b 	ldhu	r2,22(r2)
   1d840:	10bfffcc 	andi	r2,r2,65535
   1d844:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1d848:	e0bfff17 	ldw	r2,-4(fp)
   1d84c:	00c00044 	movi	r3,1
   1d850:	10c00a15 	stw	r3,40(r2)
                                break;
   1d854:	00000606 	br	1d870 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1d858:	e0bff117 	ldw	r2,-60(fp)
   1d85c:	10800044 	addi	r2,r2,1
   1d860:	e0bff115 	stw	r2,-60(fp)
   1d864:	e0bff117 	ldw	r2,-60(fp)
   1d868:	10800410 	cmplti	r2,r2,16
   1d86c:	103fd81e 	bne	r2,zero,1d7d0 <get_home_directory_cluster_for_file+0x1d8>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1d870:	e0ffef17 	ldw	r3,-68(fp)
   1d874:	e0bfea17 	ldw	r2,-88(fp)
   1d878:	1880091e 	bne	r3,r2,1d8a0 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1d87c:	e0bff017 	ldw	r2,-64(fp)
   1d880:	10800044 	addi	r2,r2,1
   1d884:	e0bff015 	stw	r2,-64(fp)
   1d888:	e0fff017 	ldw	r3,-64(fp)
   1d88c:	e0bff717 	ldw	r2,-36(fp)
   1d890:	18bfc216 	blt	r3,r2,1d79c <get_home_directory_cluster_for_file+0x1a4>
   1d894:	00000306 	br	1d8a4 <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
   1d898:	0001883a 	nop
   1d89c:	00000106 	br	1d8a4 <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   1d8a0:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
   1d8a4:	e0ffef17 	ldw	r3,-68(fp)
   1d8a8:	e0bfea17 	ldw	r2,-88(fp)
   1d8ac:	18800826 	beq	r3,r2,1d8d0 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1d8b0:	e0bfef17 	ldw	r2,-68(fp)
   1d8b4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1d8b8:	e0ffed17 	ldw	r3,-76(fp)
   1d8bc:	e0bfeb17 	ldw	r2,-84(fp)
   1d8c0:	1885883a 	add	r2,r3,r2
   1d8c4:	10800044 	addi	r2,r2,1
   1d8c8:	e0bfed15 	stw	r2,-76(fp)
   1d8cc:	00007d06 	br	1dac4 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1d8d0:	0005883a 	mov	r2,zero
   1d8d4:	00009106 	br	1db1c <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1d8d8:	e0bfea17 	ldw	r2,-88(fp)
   1d8dc:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1d8e0:	e0bff417 	ldw	r2,-48(fp)
   1d8e4:	10ffff84 	addi	r3,r2,-2
   1d8e8:	00800274 	movhi	r2,9
   1d8ec:	109fd104 	addi	r2,r2,32580
   1d8f0:	10800383 	ldbu	r2,14(r2)
   1d8f4:	10803fcc 	andi	r2,r2,255
   1d8f8:	1885383a 	mul	r2,r3,r2
   1d8fc:	1007883a 	mov	r3,r2
   1d900:	00800274 	movhi	r2,9
   1d904:	109fd104 	addi	r2,r2,32580
   1d908:	10801417 	ldw	r2,80(r2)
   1d90c:	1885883a 	add	r2,r3,r2
   1d910:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1d914:	e03ff215 	stw	zero,-56(fp)
   1d918:	00003606 	br	1d9f4 <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1d91c:	e0fff217 	ldw	r3,-56(fp)
   1d920:	e0bff517 	ldw	r2,-44(fp)
   1d924:	1885883a 	add	r2,r3,r2
   1d928:	d0e8e897 	ldw	r3,-23646(gp)
   1d92c:	180b883a 	mov	r5,r3
   1d930:	1009883a 	mov	r4,r2
   1d934:	001bef00 	call	1bef0 <Read_Sector_Data>
   1d938:	10003526 	beq	r2,zero,1da10 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1d93c:	e03ff315 	stw	zero,-52(fp)
   1d940:	00002306 	br	1d9d0 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1d944:	e0bff317 	ldw	r2,-52(fp)
   1d948:	1004917a 	slli	r2,r2,5
   1d94c:	e0fff417 	ldw	r3,-48(fp)
   1d950:	e13ff217 	ldw	r4,-56(fp)
   1d954:	200f883a 	mov	r7,r4
   1d958:	180d883a 	mov	r6,r3
   1d95c:	e17fff17 	ldw	r5,-4(fp)
   1d960:	1009883a 	mov	r4,r2
   1d964:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1d968:	e0bfff17 	ldw	r2,-4(fp)
   1d96c:	10800003 	ldbu	r2,0(r2)
   1d970:	10803fcc 	andi	r2,r2,255
   1d974:	10803960 	cmpeqi	r2,r2,229
   1d978:	1000121e 	bne	r2,zero,1d9c4 <get_home_directory_cluster_for_file+0x3cc>
   1d97c:	e0bfff17 	ldw	r2,-4(fp)
   1d980:	10800003 	ldbu	r2,0(r2)
   1d984:	10803fcc 	andi	r2,r2,255
   1d988:	10000e26 	beq	r2,zero,1d9c4 <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1d98c:	e0fffb04 	addi	r3,fp,-20
   1d990:	e0bff904 	addi	r2,fp,-28
   1d994:	180d883a 	mov	r6,r3
   1d998:	100b883a 	mov	r5,r2
   1d99c:	e13fff17 	ldw	r4,-4(fp)
   1d9a0:	001d35c0 	call	1d35c <match_file_record_to_name_ext>
   1d9a4:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   1d9a8:	e0bff617 	ldw	r2,-40(fp)
   1d9ac:	10000526 	beq	r2,zero,1d9c4 <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1d9b0:	e0bfff17 	ldw	r2,-4(fp)
   1d9b4:	1080058b 	ldhu	r2,22(r2)
   1d9b8:	10bfffcc 	andi	r2,r2,65535
   1d9bc:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   1d9c0:	00000606 	br	1d9dc <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1d9c4:	e0bff317 	ldw	r2,-52(fp)
   1d9c8:	10800044 	addi	r2,r2,1
   1d9cc:	e0bff315 	stw	r2,-52(fp)
   1d9d0:	e0bff317 	ldw	r2,-52(fp)
   1d9d4:	10800410 	cmplti	r2,r2,16
   1d9d8:	103fda1e 	bne	r2,zero,1d944 <get_home_directory_cluster_for_file+0x34c>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1d9dc:	e0ffef17 	ldw	r3,-68(fp)
   1d9e0:	e0bfea17 	ldw	r2,-88(fp)
   1d9e4:	18800c1e 	bne	r3,r2,1da18 <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1d9e8:	e0bff217 	ldw	r2,-56(fp)
   1d9ec:	10800044 	addi	r2,r2,1
   1d9f0:	e0bff215 	stw	r2,-56(fp)
   1d9f4:	00800274 	movhi	r2,9
   1d9f8:	109fd104 	addi	r2,r2,32580
   1d9fc:	10800383 	ldbu	r2,14(r2)
   1da00:	10803fcc 	andi	r2,r2,255
   1da04:	e0fff217 	ldw	r3,-56(fp)
   1da08:	18bfc416 	blt	r3,r2,1d91c <get_home_directory_cluster_for_file+0x324>
   1da0c:	00000306 	br	1da1c <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
   1da10:	0001883a 	nop
   1da14:	00000106 	br	1da1c <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   1da18:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1da1c:	e0ffef17 	ldw	r3,-68(fp)
   1da20:	e0bfea17 	ldw	r2,-88(fp)
   1da24:	1880141e 	bne	r3,r2,1da78 <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1da28:	e0bfef17 	ldw	r2,-68(fp)
   1da2c:	e0fffc04 	addi	r3,fp,-16
   1da30:	180b883a 	mov	r5,r3
   1da34:	1009883a 	mov	r4,r2
   1da38:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1da3c:	10000c26 	beq	r2,zero,1da70 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1da40:	e0bffc0b 	ldhu	r2,-16(fp)
   1da44:	10bfffcc 	andi	r2,r2,65535
   1da48:	10fffe0c 	andi	r3,r2,65528
   1da4c:	00bffe14 	movui	r2,65528
   1da50:	1880021e 	bne	r3,r2,1da5c <get_home_directory_cluster_for_file+0x464>
						{
							return false;
   1da54:	0005883a 	mov	r2,zero
   1da58:	00003006 	br	1db1c <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1da5c:	e0bffc0b 	ldhu	r2,-16(fp)
   1da60:	10bfffcc 	andi	r2,r2,65535
   1da64:	10bffe0c 	andi	r2,r2,65528
   1da68:	e0bfef15 	stw	r2,-68(fp)
   1da6c:	00000206 	br	1da78 <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1da70:	0005883a 	mov	r2,zero
   1da74:	00002906 	br	1db1c <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1da78:	e0bff417 	ldw	r2,-48(fp)
   1da7c:	00fffdd4 	movui	r3,65527
   1da80:	18800316 	blt	r3,r2,1da90 <get_home_directory_cluster_for_file+0x498>
   1da84:	e0ffef17 	ldw	r3,-68(fp)
   1da88:	e0bfea17 	ldw	r2,-88(fp)
   1da8c:	18bf9426 	beq	r3,r2,1d8e0 <get_home_directory_cluster_for_file+0x2e8>
            if (new_cluster != home_dir_cluster)
   1da90:	e0ffef17 	ldw	r3,-68(fp)
   1da94:	e0bfea17 	ldw	r2,-88(fp)
   1da98:	18800826 	beq	r3,r2,1dabc <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1da9c:	e0bfef17 	ldw	r2,-68(fp)
   1daa0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1daa4:	e0ffed17 	ldw	r3,-76(fp)
   1daa8:	e0bfeb17 	ldw	r2,-84(fp)
   1daac:	1885883a 	add	r2,r3,r2
   1dab0:	10800044 	addi	r2,r2,1
   1dab4:	e0bfed15 	stw	r2,-76(fp)
   1dab8:	00000206 	br	1dac4 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1dabc:	0005883a 	mov	r2,zero
   1dac0:	00001606 	br	1db1c <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1dac4:	e0bfed17 	ldw	r2,-76(fp)
   1dac8:	e0fffd17 	ldw	r3,-12(fp)
   1dacc:	1885883a 	add	r2,r3,r2
   1dad0:	1009883a 	mov	r4,r2
   1dad4:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1dad8:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   1dadc:	e0bfeb17 	ldw	r2,-84(fp)
   1dae0:	1000020e 	bge	r2,zero,1daec <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
   1dae4:	00800044 	movi	r2,1
   1dae8:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   1daec:	e0bfeb17 	ldw	r2,-84(fp)
   1daf0:	00becf16 	blt	zero,r2,1d630 <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1daf4:	e0bffe17 	ldw	r2,-8(fp)
   1daf8:	e0ffea17 	ldw	r3,-88(fp)
   1dafc:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1db00:	e0bfea17 	ldw	r2,-88(fp)
   1db04:	1000041e 	bne	r2,zero,1db18 <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1db08:	e0bfff17 	ldw	r2,-4(fp)
   1db0c:	10000a15 	stw	zero,40(r2)
		result = true;
   1db10:	00800044 	movi	r2,1
   1db14:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   1db18:	e0bfe917 	ldw	r2,-92(fp)
}
   1db1c:	e037883a 	mov	sp,fp
   1db20:	dfc00117 	ldw	ra,4(sp)
   1db24:	df000017 	ldw	fp,0(sp)
   1db28:	dec00204 	addi	sp,sp,8
   1db2c:	f800283a 	ret

0001db30 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1db30:	deffe804 	addi	sp,sp,-96
   1db34:	dfc01715 	stw	ra,92(sp)
   1db38:	df001615 	stw	fp,88(sp)
   1db3c:	df001604 	addi	fp,sp,88
   1db40:	e13ffd15 	stw	r4,-12(fp)
   1db44:	e17ffe15 	stw	r5,-8(fp)
   1db48:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   1db4c:	e13ffe17 	ldw	r4,-8(fp)
   1db50:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1db54:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   1db58:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1db5c:	00800804 	movi	r2,32
   1db60:	e0bff905 	stb	r2,-28(fp)
   1db64:	00800804 	movi	r2,32
   1db68:	e0bff945 	stb	r2,-27(fp)
   1db6c:	00800804 	movi	r2,32
   1db70:	e0bff985 	stb	r2,-26(fp)
   1db74:	00800804 	movi	r2,32
   1db78:	e0bff9c5 	stb	r2,-25(fp)
   1db7c:	00800804 	movi	r2,32
   1db80:	e0bffa05 	stb	r2,-24(fp)
   1db84:	00800804 	movi	r2,32
   1db88:	e0bffa45 	stb	r2,-23(fp)
   1db8c:	00800804 	movi	r2,32
   1db90:	e0bffa85 	stb	r2,-22(fp)
   1db94:	00800804 	movi	r2,32
   1db98:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1db9c:	00800804 	movi	r2,32
   1dba0:	e0bffb05 	stb	r2,-20(fp)
   1dba4:	00800804 	movi	r2,32
   1dba8:	e0bffb45 	stb	r2,-19(fp)
   1dbac:	00800804 	movi	r2,32
   1dbb0:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   1dbb4:	00bfffc4 	movi	r2,-1
   1dbb8:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   1dbbc:	e0bffd17 	ldw	r2,-12(fp)
   1dbc0:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   1dbc4:	e13ffe17 	ldw	r4,-8(fp)
   1dbc8:	0002fc00 	call	2fc0 <strlen>
   1dbcc:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   1dbd0:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1dbd4:	00000b06 	br	1dc04 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   1dbd8:	e0ffeb17 	ldw	r3,-84(fp)
   1dbdc:	e0bfea17 	ldw	r2,-88(fp)
   1dbe0:	1885883a 	add	r2,r3,r2
   1dbe4:	10800044 	addi	r2,r2,1
   1dbe8:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1dbec:	e0bfeb17 	ldw	r2,-84(fp)
   1dbf0:	e0fffe17 	ldw	r3,-8(fp)
   1dbf4:	1885883a 	add	r2,r3,r2
   1dbf8:	1009883a 	mov	r4,r2
   1dbfc:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1dc00:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   1dc04:	e0bfea17 	ldw	r2,-88(fp)
   1dc08:	00bff316 	blt	zero,r2,1dbd8 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1dc0c:	e0bfeb17 	ldw	r2,-84(fp)
   1dc10:	e0bfee15 	stw	r2,-72(fp)
   1dc14:	00002706 	br	1dcb4 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   1dc18:	e0bfee17 	ldw	r2,-72(fp)
   1dc1c:	e0fffe17 	ldw	r3,-8(fp)
   1dc20:	1885883a 	add	r2,r3,r2
   1dc24:	10800003 	ldbu	r2,0(r2)
   1dc28:	10803fcc 	andi	r2,r2,255
   1dc2c:	1080201c 	xori	r2,r2,128
   1dc30:	10bfe004 	addi	r2,r2,-128
   1dc34:	10800b98 	cmpnei	r2,r2,46
   1dc38:	1000031e 	bne	r2,zero,1dc48 <find_file_in_directory+0x118>
        {
            ext_index = index;
   1dc3c:	e0bfee17 	ldw	r2,-72(fp)
   1dc40:	e0bfec15 	stw	r2,-80(fp)
   1dc44:	00001806 	br	1dca8 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   1dc48:	e0bfec17 	ldw	r2,-80(fp)
   1dc4c:	10000b0e 	bge	r2,zero,1dc7c <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   1dc50:	e0ffee17 	ldw	r3,-72(fp)
   1dc54:	e0bfeb17 	ldw	r2,-84(fp)
   1dc58:	1885c83a 	sub	r2,r3,r2
   1dc5c:	e0ffee17 	ldw	r3,-72(fp)
   1dc60:	e13ffe17 	ldw	r4,-8(fp)
   1dc64:	20c7883a 	add	r3,r4,r3
   1dc68:	18c00003 	ldbu	r3,0(r3)
   1dc6c:	e13ff904 	addi	r4,fp,-28
   1dc70:	2085883a 	add	r2,r4,r2
   1dc74:	10c00005 	stb	r3,0(r2)
   1dc78:	00000b06 	br	1dca8 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1dc7c:	e0ffee17 	ldw	r3,-72(fp)
   1dc80:	e0bfec17 	ldw	r2,-80(fp)
   1dc84:	1885c83a 	sub	r2,r3,r2
   1dc88:	10bfffc4 	addi	r2,r2,-1
   1dc8c:	e0ffee17 	ldw	r3,-72(fp)
   1dc90:	e13ffe17 	ldw	r4,-8(fp)
   1dc94:	20c7883a 	add	r3,r4,r3
   1dc98:	18c00003 	ldbu	r3,0(r3)
   1dc9c:	e13ffb04 	addi	r4,fp,-20
   1dca0:	2085883a 	add	r2,r4,r2
   1dca4:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1dca8:	e0bfee17 	ldw	r2,-72(fp)
   1dcac:	10800044 	addi	r2,r2,1
   1dcb0:	e0bfee15 	stw	r2,-72(fp)
   1dcb4:	e0ffee17 	ldw	r3,-72(fp)
   1dcb8:	e0bff417 	ldw	r2,-48(fp)
   1dcbc:	18bfd616 	blt	r3,r2,1dc18 <find_file_in_directory+0xe8>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1dcc0:	e0bffd17 	ldw	r2,-12(fp)
   1dcc4:	1000461e 	bne	r2,zero,1dde0 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1dcc8:	00800274 	movhi	r2,9
   1dccc:	109fd104 	addi	r2,r2,32580
   1dcd0:	1080050b 	ldhu	r2,20(r2)
   1dcd4:	10bfffcc 	andi	r2,r2,65535
   1dcd8:	1006917a 	slli	r3,r2,5
   1dcdc:	00800274 	movhi	r2,9
   1dce0:	109fd104 	addi	r2,r2,32580
   1dce4:	1080030b 	ldhu	r2,12(r2)
   1dce8:	10bfffcc 	andi	r2,r2,65535
   1dcec:	1885283a 	div	r2,r3,r2
   1dcf0:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1dcf4:	e03ff015 	stw	zero,-64(fp)
   1dcf8:	00003506 	br	1ddd0 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1dcfc:	00800274 	movhi	r2,9
   1dd00:	109fd104 	addi	r2,r2,32580
   1dd04:	10c01317 	ldw	r3,76(r2)
   1dd08:	e0bff017 	ldw	r2,-64(fp)
   1dd0c:	1885883a 	add	r2,r3,r2
   1dd10:	1007883a 	mov	r3,r2
   1dd14:	d0a8e897 	ldw	r2,-23646(gp)
   1dd18:	100b883a 	mov	r5,r2
   1dd1c:	1809883a 	mov	r4,r3
   1dd20:	001bef00 	call	1bef0 <Read_Sector_Data>
   1dd24:	10009626 	beq	r2,zero,1df80 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1dd28:	e03ff115 	stw	zero,-60(fp)
   1dd2c:	00002006 	br	1ddb0 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1dd30:	e0bff117 	ldw	r2,-60(fp)
   1dd34:	1004917a 	slli	r2,r2,5
   1dd38:	e0fff017 	ldw	r3,-64(fp)
   1dd3c:	180f883a 	mov	r7,r3
   1dd40:	000d883a 	mov	r6,zero
   1dd44:	e17fff17 	ldw	r5,-4(fp)
   1dd48:	1009883a 	mov	r4,r2
   1dd4c:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1dd50:	e0bfff17 	ldw	r2,-4(fp)
   1dd54:	10800003 	ldbu	r2,0(r2)
   1dd58:	10803fcc 	andi	r2,r2,255
   1dd5c:	10803960 	cmpeqi	r2,r2,229
   1dd60:	1000101e 	bne	r2,zero,1dda4 <find_file_in_directory+0x274>
   1dd64:	e0bfff17 	ldw	r2,-4(fp)
   1dd68:	10800003 	ldbu	r2,0(r2)
   1dd6c:	10803fcc 	andi	r2,r2,255
   1dd70:	10000c26 	beq	r2,zero,1dda4 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1dd74:	e0fffb04 	addi	r3,fp,-20
   1dd78:	e0bff904 	addi	r2,fp,-28
   1dd7c:	180d883a 	mov	r6,r3
   1dd80:	100b883a 	mov	r5,r2
   1dd84:	e13fff17 	ldw	r4,-4(fp)
   1dd88:	001d35c0 	call	1d35c <match_file_record_to_name_ext>
   1dd8c:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   1dd90:	e0bff817 	ldw	r2,-32(fp)
   1dd94:	10000326 	beq	r2,zero,1dda4 <find_file_in_directory+0x274>
                        {
                            result = true;
   1dd98:	00800044 	movi	r2,1
   1dd9c:	e0bfef15 	stw	r2,-68(fp)
                            break;
   1dda0:	00000606 	br	1ddbc <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1dda4:	e0bff117 	ldw	r2,-60(fp)
   1dda8:	10800044 	addi	r2,r2,1
   1ddac:	e0bff115 	stw	r2,-60(fp)
   1ddb0:	e0bff117 	ldw	r2,-60(fp)
   1ddb4:	10800410 	cmplti	r2,r2,16
   1ddb8:	103fdd1e 	bne	r2,zero,1dd30 <find_file_in_directory+0x200>
            }
            else
            {
                break;
            }
            if (result)
   1ddbc:	e0bfef17 	ldw	r2,-68(fp)
   1ddc0:	1000711e 	bne	r2,zero,1df88 <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1ddc4:	e0bff017 	ldw	r2,-64(fp)
   1ddc8:	10800044 	addi	r2,r2,1
   1ddcc:	e0bff015 	stw	r2,-64(fp)
   1ddd0:	e0fff017 	ldw	r3,-64(fp)
   1ddd4:	e0bff717 	ldw	r2,-36(fp)
   1ddd8:	18bfc816 	blt	r3,r2,1dcfc <find_file_in_directory+0x1cc>
   1dddc:	00006b06 	br	1df8c <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1dde0:	e0bfed17 	ldw	r2,-76(fp)
   1dde4:	10ffff84 	addi	r3,r2,-2
   1dde8:	00800274 	movhi	r2,9
   1ddec:	109fd104 	addi	r2,r2,32580
   1ddf0:	10800383 	ldbu	r2,14(r2)
   1ddf4:	10803fcc 	andi	r2,r2,255
   1ddf8:	1885383a 	mul	r2,r3,r2
   1ddfc:	1007883a 	mov	r3,r2
   1de00:	00800274 	movhi	r2,9
   1de04:	109fd104 	addi	r2,r2,32580
   1de08:	10801417 	ldw	r2,80(r2)
   1de0c:	1885883a 	add	r2,r3,r2
   1de10:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1de14:	e03ff215 	stw	zero,-56(fp)
   1de18:	00003306 	br	1dee8 <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1de1c:	e0fff217 	ldw	r3,-56(fp)
   1de20:	e0bff517 	ldw	r2,-44(fp)
   1de24:	1885883a 	add	r2,r3,r2
   1de28:	d0e8e897 	ldw	r3,-23646(gp)
   1de2c:	180b883a 	mov	r5,r3
   1de30:	1009883a 	mov	r4,r2
   1de34:	001bef00 	call	1bef0 <Read_Sector_Data>
   1de38:	10003226 	beq	r2,zero,1df04 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1de3c:	e03ff315 	stw	zero,-52(fp)
   1de40:	00002106 	br	1dec8 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1de44:	e0bff317 	ldw	r2,-52(fp)
   1de48:	1004917a 	slli	r2,r2,5
   1de4c:	e0ffed17 	ldw	r3,-76(fp)
   1de50:	e13ff217 	ldw	r4,-56(fp)
   1de54:	200f883a 	mov	r7,r4
   1de58:	180d883a 	mov	r6,r3
   1de5c:	e17fff17 	ldw	r5,-4(fp)
   1de60:	1009883a 	mov	r4,r2
   1de64:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1de68:	e0bfff17 	ldw	r2,-4(fp)
   1de6c:	10800003 	ldbu	r2,0(r2)
   1de70:	10803fcc 	andi	r2,r2,255
   1de74:	10803960 	cmpeqi	r2,r2,229
   1de78:	1000101e 	bne	r2,zero,1debc <find_file_in_directory+0x38c>
   1de7c:	e0bfff17 	ldw	r2,-4(fp)
   1de80:	10800003 	ldbu	r2,0(r2)
   1de84:	10803fcc 	andi	r2,r2,255
   1de88:	10000c26 	beq	r2,zero,1debc <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1de8c:	e0fffb04 	addi	r3,fp,-20
   1de90:	e0bff904 	addi	r2,fp,-28
   1de94:	180d883a 	mov	r6,r3
   1de98:	100b883a 	mov	r5,r2
   1de9c:	e13fff17 	ldw	r4,-4(fp)
   1dea0:	001d35c0 	call	1d35c <match_file_record_to_name_ext>
   1dea4:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   1dea8:	e0bff617 	ldw	r2,-40(fp)
   1deac:	10000326 	beq	r2,zero,1debc <find_file_in_directory+0x38c>
                            {                               
                                result = true;
   1deb0:	00800044 	movi	r2,1
   1deb4:	e0bfef15 	stw	r2,-68(fp)
                                break;
   1deb8:	00000606 	br	1ded4 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1debc:	e0bff317 	ldw	r2,-52(fp)
   1dec0:	10800044 	addi	r2,r2,1
   1dec4:	e0bff315 	stw	r2,-52(fp)
   1dec8:	e0bff317 	ldw	r2,-52(fp)
   1decc:	10800410 	cmplti	r2,r2,16
   1ded0:	103fdc1e 	bne	r2,zero,1de44 <find_file_in_directory+0x314>
                }
                else
                {
                    break;
                }
                if (result)
   1ded4:	e0bfef17 	ldw	r2,-68(fp)
   1ded8:	10000c1e 	bne	r2,zero,1df0c <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1dedc:	e0bff217 	ldw	r2,-56(fp)
   1dee0:	10800044 	addi	r2,r2,1
   1dee4:	e0bff215 	stw	r2,-56(fp)
   1dee8:	00800274 	movhi	r2,9
   1deec:	109fd104 	addi	r2,r2,32580
   1def0:	10800383 	ldbu	r2,14(r2)
   1def4:	10803fcc 	andi	r2,r2,255
   1def8:	e0fff217 	ldw	r3,-56(fp)
   1defc:	18bfc716 	blt	r3,r2,1de1c <find_file_in_directory+0x2ec>
   1df00:	00000306 	br	1df10 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
   1df04:	0001883a 	nop
   1df08:	00000106 	br	1df10 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
   1df0c:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1df10:	e0bfef17 	ldw	r2,-68(fp)
   1df14:	1000141e 	bne	r2,zero,1df68 <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1df18:	e0bfed17 	ldw	r2,-76(fp)
   1df1c:	e0fffc04 	addi	r3,fp,-16
   1df20:	180b883a 	mov	r5,r3
   1df24:	1009883a 	mov	r4,r2
   1df28:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1df2c:	10000c26 	beq	r2,zero,1df60 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1df30:	e0bffc0b 	ldhu	r2,-16(fp)
   1df34:	10bfffcc 	andi	r2,r2,65535
   1df38:	10fffe0c 	andi	r3,r2,65528
   1df3c:	00bffe14 	movui	r2,65528
   1df40:	1880021e 	bne	r3,r2,1df4c <find_file_in_directory+0x41c>
					{
						return false;
   1df44:	0005883a 	mov	r2,zero
   1df48:	00001106 	br	1df90 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
   1df4c:	e0bffc0b 	ldhu	r2,-16(fp)
   1df50:	10bfffcc 	andi	r2,r2,65535
   1df54:	10bffe0c 	andi	r2,r2,65528
   1df58:	e0bfed15 	stw	r2,-76(fp)
   1df5c:	00000206 	br	1df68 <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1df60:	0005883a 	mov	r2,zero
   1df64:	00000a06 	br	1df90 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1df68:	e0bfed17 	ldw	r2,-76(fp)
   1df6c:	00fffdd4 	movui	r3,65527
   1df70:	18800616 	blt	r3,r2,1df8c <find_file_in_directory+0x45c>
   1df74:	e0bfef17 	ldw	r2,-68(fp)
   1df78:	103f9926 	beq	r2,zero,1dde0 <find_file_in_directory+0x2b0>
   1df7c:	00000306 	br	1df8c <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
   1df80:	0001883a 	nop
   1df84:	00000106 	br	1df8c <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
   1df88:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
   1df8c:	e0bfef17 	ldw	r2,-68(fp)
}
   1df90:	e037883a 	mov	sp,fp
   1df94:	dfc00117 	ldw	ra,4(sp)
   1df98:	df000017 	ldw	fp,0(sp)
   1df9c:	dec00204 	addi	sp,sp,8
   1dfa0:	f800283a 	ret

0001dfa4 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1dfa4:	defff504 	addi	sp,sp,-44
   1dfa8:	dfc00a15 	stw	ra,40(sp)
   1dfac:	df000915 	stw	fp,36(sp)
   1dfb0:	df000904 	addi	fp,sp,36
   1dfb4:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1dfb8:	00800274 	movhi	r2,9
   1dfbc:	109fd104 	addi	r2,r2,32580
   1dfc0:	10801117 	ldw	r2,68(r2)
   1dfc4:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   1dfc8:	00800084 	movi	r2,2
   1dfcc:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   1dfd0:	00bfffc4 	movi	r2,-1
   1dfd4:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   1dfd8:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1dfdc:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1dfe0:	00800274 	movhi	r2,9
   1dfe4:	109fd104 	addi	r2,r2,32580
   1dfe8:	10801417 	ldw	r2,80(r2)
   1dfec:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1dff0:	00800274 	movhi	r2,9
   1dff4:	109fd104 	addi	r2,r2,32580
   1dff8:	1080058b 	ldhu	r2,22(r2)
   1dffc:	10bfffcc 	andi	r2,r2,65535
   1e000:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1e004:	00800274 	movhi	r2,9
   1e008:	109fd104 	addi	r2,r2,32580
   1e00c:	10800917 	ldw	r2,36(r2)
   1e010:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   1e014:	e0bffd17 	ldw	r2,-12(fp)
   1e018:	e0fffe17 	ldw	r3,-8(fp)
   1e01c:	18800b2e 	bgeu	r3,r2,1e04c <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1e020:	e0fffd17 	ldw	r3,-12(fp)
   1e024:	e0bffc17 	ldw	r2,-16(fp)
   1e028:	1887c83a 	sub	r3,r3,r2
   1e02c:	00800274 	movhi	r2,9
   1e030:	109fd104 	addi	r2,r2,32580
   1e034:	10800383 	ldbu	r2,14(r2)
   1e038:	10803fcc 	andi	r2,r2,255
   1e03c:	1885203a 	divu	r2,r3,r2
   1e040:	10800044 	addi	r2,r2,1
   1e044:	e0bffb15 	stw	r2,-20(fp)
   1e048:	00002a06 	br	1e0f4 <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1e04c:	e0fffe17 	ldw	r3,-8(fp)
   1e050:	e0bffc17 	ldw	r2,-16(fp)
   1e054:	1887c83a 	sub	r3,r3,r2
   1e058:	00800274 	movhi	r2,9
   1e05c:	109fd104 	addi	r2,r2,32580
   1e060:	10800383 	ldbu	r2,14(r2)
   1e064:	10803fcc 	andi	r2,r2,255
   1e068:	1885203a 	divu	r2,r3,r2
   1e06c:	10800044 	addi	r2,r2,1
   1e070:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1e074:	00001f06 	br	1e0f4 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1e078:	e0bff717 	ldw	r2,-36(fp)
   1e07c:	d0e8e897 	ldw	r3,-23646(gp)
   1e080:	180b883a 	mov	r5,r3
   1e084:	1009883a 	mov	r4,r2
   1e088:	001bef00 	call	1bef0 <Read_Sector_Data>
   1e08c:	10001426 	beq	r2,zero,1e0e0 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1e090:	e0bff817 	ldw	r2,-32(fp)
   1e094:	10803fcc 	andi	r2,r2,255
   1e098:	1085883a 	add	r2,r2,r2
   1e09c:	1007883a 	mov	r3,r2
   1e0a0:	d0a8ea97 	ldw	r2,-23638(gp)
   1e0a4:	10800a17 	ldw	r2,40(r2)
   1e0a8:	1885883a 	add	r2,r3,r2
   1e0ac:	1080002b 	ldhuio	r2,0(r2)
   1e0b0:	10bfffcc 	andi	r2,r2,65535
   1e0b4:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   1e0b8:	e0bff90f 	ldh	r2,-28(fp)
   1e0bc:	10000726 	beq	r2,zero,1e0dc <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   1e0c0:	e0bff817 	ldw	r2,-32(fp)
   1e0c4:	10800044 	addi	r2,r2,1
   1e0c8:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1e0cc:	e0bff817 	ldw	r2,-32(fp)
   1e0d0:	10803fcc 	andi	r2,r2,255
   1e0d4:	103fee1e 	bne	r2,zero,1e090 <find_first_empty_cluster+0xec>
   1e0d8:	00000106 	br	1e0e0 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
   1e0dc:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
   1e0e0:	e0bff90f 	ldh	r2,-28(fp)
   1e0e4:	10000926 	beq	r2,zero,1e10c <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
   1e0e8:	e0bff717 	ldw	r2,-36(fp)
   1e0ec:	10800044 	addi	r2,r2,1
   1e0f0:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1e0f4:	00800274 	movhi	r2,9
   1e0f8:	109fd104 	addi	r2,r2,32580
   1e0fc:	10c01217 	ldw	r3,72(r2)
   1e100:	e0bff717 	ldw	r2,-36(fp)
   1e104:	18bfdc1e 	bne	r3,r2,1e078 <find_first_empty_cluster+0xd4>
   1e108:	00000106 	br	1e110 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
   1e10c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1e110:	e0bff90f 	ldh	r2,-28(fp)
   1e114:	1000081e 	bne	r2,zero,1e138 <find_first_empty_cluster+0x194>
   1e118:	e0bff90f 	ldh	r2,-28(fp)
   1e11c:	e0fffb17 	ldw	r3,-20(fp)
   1e120:	18800536 	bltu	r3,r2,1e138 <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
   1e124:	e0bfff17 	ldw	r2,-4(fp)
   1e128:	e0fff817 	ldw	r3,-32(fp)
   1e12c:	10c00015 	stw	r3,0(r2)
		result = true;
   1e130:	00800044 	movi	r2,1
   1e134:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   1e138:	e0bffa17 	ldw	r2,-24(fp)
}
   1e13c:	e037883a 	mov	sp,fp
   1e140:	dfc00117 	ldw	ra,4(sp)
   1e144:	df000017 	ldw	fp,0(sp)
   1e148:	dec00204 	addi	sp,sp,8
   1e14c:	f800283a 	ret

0001e150 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1e150:	defff604 	addi	sp,sp,-40
   1e154:	dfc00915 	stw	ra,36(sp)
   1e158:	df000815 	stw	fp,32(sp)
   1e15c:	df000804 	addi	fp,sp,32
   1e160:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   1e164:	00bfffc4 	movi	r2,-1
   1e168:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   1e16c:	e0bfff17 	ldw	r2,-4(fp)
   1e170:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1e174:	e0bff917 	ldw	r2,-28(fp)
   1e178:	10ffff84 	addi	r3,r2,-2
   1e17c:	00800274 	movhi	r2,9
   1e180:	109fd104 	addi	r2,r2,32580
   1e184:	10800383 	ldbu	r2,14(r2)
   1e188:	10803fcc 	andi	r2,r2,255
   1e18c:	1885383a 	mul	r2,r3,r2
   1e190:	1007883a 	mov	r3,r2
   1e194:	00800274 	movhi	r2,9
   1e198:	109fd104 	addi	r2,r2,32580
   1e19c:	10801417 	ldw	r2,80(r2)
   1e1a0:	1885883a 	add	r2,r3,r2
   1e1a4:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1e1a8:	e03ffa15 	stw	zero,-24(fp)
   1e1ac:	00002c06 	br	1e260 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1e1b0:	e0fffa17 	ldw	r3,-24(fp)
   1e1b4:	e0bffc17 	ldw	r2,-16(fp)
   1e1b8:	1885883a 	add	r2,r3,r2
   1e1bc:	d0e8e897 	ldw	r3,-23646(gp)
   1e1c0:	180b883a 	mov	r5,r3
   1e1c4:	1009883a 	mov	r4,r2
   1e1c8:	001bef00 	call	1bef0 <Read_Sector_Data>
   1e1cc:	10002b26 	beq	r2,zero,1e27c <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1e1d0:	e03ffb15 	stw	zero,-20(fp)
   1e1d4:	00001c06 	br	1e248 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1e1d8:	e0bffb17 	ldw	r2,-20(fp)
   1e1dc:	1004917a 	slli	r2,r2,5
   1e1e0:	1007883a 	mov	r3,r2
   1e1e4:	d0a8ea97 	ldw	r2,-23638(gp)
   1e1e8:	10800a17 	ldw	r2,40(r2)
   1e1ec:	1885883a 	add	r2,r3,r2
   1e1f0:	10800023 	ldbuio	r2,0(r2)
   1e1f4:	10803fcc 	andi	r2,r2,255
   1e1f8:	10803fcc 	andi	r2,r2,255
   1e1fc:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1e200:	e0bffd0b 	ldhu	r2,-12(fp)
   1e204:	10803960 	cmpeqi	r2,r2,229
   1e208:	1000021e 	bne	r2,zero,1e214 <find_first_empty_record_in_a_subdirectory+0xc4>
   1e20c:	e0bffd0b 	ldhu	r2,-12(fp)
   1e210:	10000a1e 	bne	r2,zero,1e23c <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1e214:	e0bffa17 	ldw	r2,-24(fp)
   1e218:	1006913a 	slli	r3,r2,4
   1e21c:	e0bffb17 	ldw	r2,-20(fp)
   1e220:	1885883a 	add	r2,r3,r2
   1e224:	1006943a 	slli	r3,r2,16
   1e228:	e0bff917 	ldw	r2,-28(fp)
   1e22c:	1884b03a 	or	r2,r3,r2
   1e230:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1e234:	e0bff817 	ldw	r2,-32(fp)
   1e238:	00005306 	br	1e388 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1e23c:	e0bffb17 	ldw	r2,-20(fp)
   1e240:	10800044 	addi	r2,r2,1
   1e244:	e0bffb15 	stw	r2,-20(fp)
   1e248:	e0bffb17 	ldw	r2,-20(fp)
   1e24c:	10800410 	cmplti	r2,r2,16
   1e250:	103fe11e 	bne	r2,zero,1e1d8 <find_first_empty_record_in_a_subdirectory+0x88>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1e254:	e0bffa17 	ldw	r2,-24(fp)
   1e258:	10800044 	addi	r2,r2,1
   1e25c:	e0bffa15 	stw	r2,-24(fp)
   1e260:	00800274 	movhi	r2,9
   1e264:	109fd104 	addi	r2,r2,32580
   1e268:	10800383 	ldbu	r2,14(r2)
   1e26c:	10803fcc 	andi	r2,r2,255
   1e270:	e0fffa17 	ldw	r3,-24(fp)
   1e274:	18bfce16 	blt	r3,r2,1e1b0 <find_first_empty_record_in_a_subdirectory+0x60>
   1e278:	00000106 	br	1e280 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
   1e27c:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1e280:	e0bff817 	ldw	r2,-32(fp)
   1e284:	1000390e 	bge	r2,zero,1e36c <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1e288:	e0bff917 	ldw	r2,-28(fp)
   1e28c:	e0fffd84 	addi	r3,fp,-10
   1e290:	180b883a 	mov	r5,r3
   1e294:	1009883a 	mov	r4,r2
   1e298:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1e29c:	10003126 	beq	r2,zero,1e364 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1e2a0:	e0bffd8b 	ldhu	r2,-10(fp)
   1e2a4:	10bfffcc 	andi	r2,r2,65535
   1e2a8:	10fffe0c 	andi	r3,r2,65528
   1e2ac:	00bffe14 	movui	r2,65528
   1e2b0:	18802e1e 	bne	r3,r2,1e36c <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1e2b4:	e0bffe04 	addi	r2,fp,-8
   1e2b8:	1009883a 	mov	r4,r2
   1e2bc:	001dfa40 	call	1dfa4 <find_first_empty_cluster>
   1e2c0:	10002326 	beq	r2,zero,1e350 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1e2c4:	e0bff917 	ldw	r2,-28(fp)
   1e2c8:	e0fffe17 	ldw	r3,-8(fp)
   1e2cc:	18ffffcc 	andi	r3,r3,65535
   1e2d0:	18e0001c 	xori	r3,r3,32768
   1e2d4:	18e00004 	addi	r3,r3,-32768
   1e2d8:	01800044 	movi	r6,1
   1e2dc:	180b883a 	mov	r5,r3
   1e2e0:	1009883a 	mov	r4,r2
   1e2e4:	001c07c0 	call	1c07c <mark_cluster>
   1e2e8:	10001926 	beq	r2,zero,1e350 <find_first_empty_record_in_a_subdirectory+0x200>
   1e2ec:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1e2f0:	01800044 	movi	r6,1
   1e2f4:	017fffc4 	movi	r5,-1
   1e2f8:	1009883a 	mov	r4,r2
   1e2fc:	001c07c0 	call	1c07c <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1e300:	10001326 	beq	r2,zero,1e350 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1e304:	e0bff917 	ldw	r2,-28(fp)
   1e308:	e0fffe17 	ldw	r3,-8(fp)
   1e30c:	18ffffcc 	andi	r3,r3,65535
   1e310:	18e0001c 	xori	r3,r3,32768
   1e314:	18e00004 	addi	r3,r3,-32768
   1e318:	000d883a 	mov	r6,zero
   1e31c:	180b883a 	mov	r5,r3
   1e320:	1009883a 	mov	r4,r2
   1e324:	001c07c0 	call	1c07c <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1e328:	10000926 	beq	r2,zero,1e350 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1e32c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1e330:	000d883a 	mov	r6,zero
   1e334:	017fffc4 	movi	r5,-1
   1e338:	1009883a 	mov	r4,r2
   1e33c:	001c07c0 	call	1c07c <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1e340:	10000326 	beq	r2,zero,1e350 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   1e344:	001bea40 	call	1bea4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1e348:	e0bffe17 	ldw	r2,-8(fp)
   1e34c:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1e350:	e0bffd8b 	ldhu	r2,-10(fp)
   1e354:	10bfffcc 	andi	r2,r2,65535
   1e358:	10bffe0c 	andi	r2,r2,65528
   1e35c:	e0bff915 	stw	r2,-28(fp)
   1e360:	00000206 	br	1e36c <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1e364:	00bfffc4 	movi	r2,-1
   1e368:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1e36c:	e0bff917 	ldw	r2,-28(fp)
   1e370:	00fffdd4 	movui	r3,65527
   1e374:	18800316 	blt	r3,r2,1e384 <find_first_empty_record_in_a_subdirectory+0x234>
   1e378:	e0bff817 	ldw	r2,-32(fp)
   1e37c:	10bfffe0 	cmpeqi	r2,r2,-1
   1e380:	103f7c1e 	bne	r2,zero,1e174 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
   1e384:	e0bff817 	ldw	r2,-32(fp)
}
   1e388:	e037883a 	mov	sp,fp
   1e38c:	dfc00117 	ldw	ra,4(sp)
   1e390:	df000017 	ldw	fp,0(sp)
   1e394:	dec00204 	addi	sp,sp,8
   1e398:	f800283a 	ret

0001e39c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1e39c:	defff904 	addi	sp,sp,-28
   1e3a0:	dfc00615 	stw	ra,24(sp)
   1e3a4:	df000515 	stw	fp,20(sp)
   1e3a8:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1e3ac:	00800274 	movhi	r2,9
   1e3b0:	109fd104 	addi	r2,r2,32580
   1e3b4:	1080050b 	ldhu	r2,20(r2)
   1e3b8:	10bfffcc 	andi	r2,r2,65535
   1e3bc:	1006917a 	slli	r3,r2,5
   1e3c0:	00800274 	movhi	r2,9
   1e3c4:	109fd104 	addi	r2,r2,32580
   1e3c8:	1080030b 	ldhu	r2,12(r2)
   1e3cc:	10bfffcc 	andi	r2,r2,65535
   1e3d0:	1885283a 	div	r2,r3,r2
   1e3d4:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1e3d8:	00bfffc4 	movi	r2,-1
   1e3dc:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1e3e0:	e03ffb15 	stw	zero,-20(fp)
   1e3e4:	00002d06 	br	1e49c <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1e3e8:	00800274 	movhi	r2,9
   1e3ec:	109fd104 	addi	r2,r2,32580
   1e3f0:	10c01317 	ldw	r3,76(r2)
   1e3f4:	e0bffb17 	ldw	r2,-20(fp)
   1e3f8:	1885883a 	add	r2,r3,r2
   1e3fc:	1007883a 	mov	r3,r2
   1e400:	d0a8e897 	ldw	r2,-23646(gp)
   1e404:	100b883a 	mov	r5,r2
   1e408:	1809883a 	mov	r4,r3
   1e40c:	001bef00 	call	1bef0 <Read_Sector_Data>
   1e410:	10002626 	beq	r2,zero,1e4ac <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1e414:	e03ffc15 	stw	zero,-16(fp)
   1e418:	00001a06 	br	1e484 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1e41c:	e0bffc17 	ldw	r2,-16(fp)
   1e420:	1004917a 	slli	r2,r2,5
   1e424:	1007883a 	mov	r3,r2
   1e428:	d0a8ea97 	ldw	r2,-23638(gp)
   1e42c:	10800a17 	ldw	r2,40(r2)
   1e430:	1885883a 	add	r2,r3,r2
   1e434:	10800023 	ldbuio	r2,0(r2)
   1e438:	10803fcc 	andi	r2,r2,255
   1e43c:	10803fcc 	andi	r2,r2,255
   1e440:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1e444:	e0bfff0b 	ldhu	r2,-4(fp)
   1e448:	10803960 	cmpeqi	r2,r2,229
   1e44c:	1000021e 	bne	r2,zero,1e458 <find_first_empty_record_in_root_directory+0xbc>
   1e450:	e0bfff0b 	ldhu	r2,-4(fp)
   1e454:	1000081e 	bne	r2,zero,1e478 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1e458:	e0bffb17 	ldw	r2,-20(fp)
   1e45c:	1006913a 	slli	r3,r2,4
   1e460:	e0bffc17 	ldw	r2,-16(fp)
   1e464:	1885883a 	add	r2,r3,r2
   1e468:	1004943a 	slli	r2,r2,16
   1e46c:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   1e470:	e0bffe17 	ldw	r2,-8(fp)
   1e474:	00000f06 	br	1e4b4 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1e478:	e0bffc17 	ldw	r2,-16(fp)
   1e47c:	10800044 	addi	r2,r2,1
   1e480:	e0bffc15 	stw	r2,-16(fp)
   1e484:	e0bffc17 	ldw	r2,-16(fp)
   1e488:	10800410 	cmplti	r2,r2,16
   1e48c:	103fe31e 	bne	r2,zero,1e41c <find_first_empty_record_in_root_directory+0x80>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1e490:	e0bffb17 	ldw	r2,-20(fp)
   1e494:	10800044 	addi	r2,r2,1
   1e498:	e0bffb15 	stw	r2,-20(fp)
   1e49c:	e0fffb17 	ldw	r3,-20(fp)
   1e4a0:	e0bffd17 	ldw	r2,-12(fp)
   1e4a4:	18bfd016 	blt	r3,r2,1e3e8 <find_first_empty_record_in_root_directory+0x4c>
   1e4a8:	00000106 	br	1e4b0 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
   1e4ac:	0001883a 	nop
        }
    }
    return result;
   1e4b0:	e0bffe17 	ldw	r2,-8(fp)
}
   1e4b4:	e037883a 	mov	sp,fp
   1e4b8:	dfc00117 	ldw	ra,4(sp)
   1e4bc:	df000017 	ldw	fp,0(sp)
   1e4c0:	dec00204 	addi	sp,sp,8
   1e4c4:	f800283a 	ret

0001e4c8 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1e4c8:	defffa04 	addi	sp,sp,-24
   1e4cc:	df000515 	stw	fp,20(sp)
   1e4d0:	df000504 	addi	fp,sp,20
   1e4d4:	e13ffd15 	stw	r4,-12(fp)
   1e4d8:	e17ffe15 	stw	r5,-8(fp)
   1e4dc:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   1e4e0:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1e4e4:	e03ffb15 	stw	zero,-20(fp)
   1e4e8:	00002506 	br	1e580 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1e4ec:	e0bffc17 	ldw	r2,-16(fp)
   1e4f0:	e0fffd17 	ldw	r3,-12(fp)
   1e4f4:	1885883a 	add	r2,r3,r2
   1e4f8:	10800003 	ldbu	r2,0(r2)
   1e4fc:	10803fcc 	andi	r2,r2,255
   1e500:	1080201c 	xori	r2,r2,128
   1e504:	10bfe004 	addi	r2,r2,-128
   1e508:	10800ba0 	cmpeqi	r2,r2,46
   1e50c:	1000141e 	bne	r2,zero,1e560 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1e510:	e0bffb17 	ldw	r2,-20(fp)
   1e514:	e0fffe17 	ldw	r3,-8(fp)
   1e518:	1885883a 	add	r2,r3,r2
   1e51c:	e0fffc17 	ldw	r3,-16(fp)
   1e520:	e13ffd17 	ldw	r4,-12(fp)
   1e524:	20c7883a 	add	r3,r4,r3
   1e528:	18c00003 	ldbu	r3,0(r3)
   1e52c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1e530:	e0bffc17 	ldw	r2,-16(fp)
   1e534:	e0fffd17 	ldw	r3,-12(fp)
   1e538:	1885883a 	add	r2,r3,r2
   1e53c:	10800003 	ldbu	r2,0(r2)
   1e540:	10803fcc 	andi	r2,r2,255
   1e544:	1080201c 	xori	r2,r2,128
   1e548:	10bfe004 	addi	r2,r2,-128
   1e54c:	10000926 	beq	r2,zero,1e574 <convert_filename_to_name_extension+0xac>
   1e550:	e0bffc17 	ldw	r2,-16(fp)
   1e554:	10800044 	addi	r2,r2,1
   1e558:	e0bffc15 	stw	r2,-16(fp)
   1e55c:	00000506 	br	1e574 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1e560:	e0bffb17 	ldw	r2,-20(fp)
   1e564:	e0fffe17 	ldw	r3,-8(fp)
   1e568:	1885883a 	add	r2,r3,r2
   1e56c:	00c00804 	movi	r3,32
   1e570:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1e574:	e0bffb17 	ldw	r2,-20(fp)
   1e578:	10800044 	addi	r2,r2,1
   1e57c:	e0bffb15 	stw	r2,-20(fp)
   1e580:	e0bffb17 	ldw	r2,-20(fp)
   1e584:	10800210 	cmplti	r2,r2,8
   1e588:	103fd81e 	bne	r2,zero,1e4ec <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   1e58c:	e0bffc17 	ldw	r2,-16(fp)
   1e590:	e0fffd17 	ldw	r3,-12(fp)
   1e594:	1885883a 	add	r2,r3,r2
   1e598:	10800003 	ldbu	r2,0(r2)
   1e59c:	10803fcc 	andi	r2,r2,255
   1e5a0:	1080201c 	xori	r2,r2,128
   1e5a4:	10bfe004 	addi	r2,r2,-128
   1e5a8:	10800b98 	cmpnei	r2,r2,46
   1e5ac:	1000031e 	bne	r2,zero,1e5bc <convert_filename_to_name_extension+0xf4>
   1e5b0:	e0bffc17 	ldw	r2,-16(fp)
   1e5b4:	10800044 	addi	r2,r2,1
   1e5b8:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1e5bc:	e03ffb15 	stw	zero,-20(fp)
   1e5c0:	00001c06 	br	1e634 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1e5c4:	e0bffc17 	ldw	r2,-16(fp)
   1e5c8:	e0fffd17 	ldw	r3,-12(fp)
   1e5cc:	1885883a 	add	r2,r3,r2
   1e5d0:	10800003 	ldbu	r2,0(r2)
   1e5d4:	10803fcc 	andi	r2,r2,255
   1e5d8:	1080201c 	xori	r2,r2,128
   1e5dc:	10bfe004 	addi	r2,r2,-128
   1e5e0:	10000c26 	beq	r2,zero,1e614 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1e5e4:	e0bffb17 	ldw	r2,-20(fp)
   1e5e8:	e0ffff17 	ldw	r3,-4(fp)
   1e5ec:	1885883a 	add	r2,r3,r2
   1e5f0:	e0fffc17 	ldw	r3,-16(fp)
   1e5f4:	e13ffd17 	ldw	r4,-12(fp)
   1e5f8:	20c7883a 	add	r3,r4,r3
   1e5fc:	18c00003 	ldbu	r3,0(r3)
   1e600:	10c00005 	stb	r3,0(r2)
            local++;
   1e604:	e0bffc17 	ldw	r2,-16(fp)
   1e608:	10800044 	addi	r2,r2,1
   1e60c:	e0bffc15 	stw	r2,-16(fp)
   1e610:	00000506 	br	1e628 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1e614:	e0bffb17 	ldw	r2,-20(fp)
   1e618:	e0ffff17 	ldw	r3,-4(fp)
   1e61c:	1885883a 	add	r2,r3,r2
   1e620:	00c00804 	movi	r3,32
   1e624:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   1e628:	e0bffb17 	ldw	r2,-20(fp)
   1e62c:	10800044 	addi	r2,r2,1
   1e630:	e0bffb15 	stw	r2,-20(fp)
   1e634:	e0bffb17 	ldw	r2,-20(fp)
   1e638:	108000d0 	cmplti	r2,r2,3
   1e63c:	103fe11e 	bne	r2,zero,1e5c4 <convert_filename_to_name_extension+0xfc>
        {
            extension[counter] = ' ';
        }
    }

}
   1e640:	0001883a 	nop
   1e644:	e037883a 	mov	sp,fp
   1e648:	df000017 	ldw	fp,0(sp)
   1e64c:	dec00104 	addi	sp,sp,4
   1e650:	f800283a 	ret

0001e654 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1e654:	defff504 	addi	sp,sp,-44
   1e658:	dfc00a15 	stw	ra,40(sp)
   1e65c:	df000915 	stw	fp,36(sp)
   1e660:	df000904 	addi	fp,sp,36
   1e664:	e13ffd15 	stw	r4,-12(fp)
   1e668:	e17ffe15 	stw	r5,-8(fp)
   1e66c:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   1e670:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1e674:	e0bffc04 	addi	r2,fp,-16
   1e678:	1009883a 	mov	r4,r2
   1e67c:	001dfa40 	call	1dfa4 <find_first_empty_cluster>
   1e680:	1000a026 	beq	r2,zero,1e904 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1e684:	e0bfff17 	ldw	r2,-4(fp)
   1e688:	10800a17 	ldw	r2,40(r2)
   1e68c:	1000031e 	bne	r2,zero,1e69c <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1e690:	001e39c0 	call	1e39c <find_first_empty_record_in_root_directory>
   1e694:	e0bff815 	stw	r2,-32(fp)
   1e698:	00000606 	br	1e6b4 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1e69c:	e0bfff17 	ldw	r2,-4(fp)
   1e6a0:	1080058b 	ldhu	r2,22(r2)
   1e6a4:	10bfffcc 	andi	r2,r2,65535
   1e6a8:	1009883a 	mov	r4,r2
   1e6ac:	001e1500 	call	1e150 <find_first_empty_record_in_a_subdirectory>
   1e6b0:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1e6b4:	e0bff817 	ldw	r2,-32(fp)
   1e6b8:	10009216 	blt	r2,zero,1e904 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1e6bc:	e13ffd17 	ldw	r4,-12(fp)
   1e6c0:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1e6c4:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   1e6c8:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1e6cc:	00000b06 	br	1e6fc <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1e6d0:	e0fffa17 	ldw	r3,-24(fp)
   1e6d4:	e0bff917 	ldw	r2,-28(fp)
   1e6d8:	1885883a 	add	r2,r3,r2
   1e6dc:	10800044 	addi	r2,r2,1
   1e6e0:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1e6e4:	e0bffa17 	ldw	r2,-24(fp)
   1e6e8:	e0fffd17 	ldw	r3,-12(fp)
   1e6ec:	1885883a 	add	r2,r3,r2
   1e6f0:	1009883a 	mov	r4,r2
   1e6f4:	001d2a40 	call	1d2a4 <get_dir_divider_location>
   1e6f8:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1e6fc:	e0bff917 	ldw	r2,-28(fp)
   1e700:	00bff316 	blt	zero,r2,1e6d0 <create_file+0x7c>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1e704:	e0bffa17 	ldw	r2,-24(fp)
   1e708:	e0fffd17 	ldw	r3,-12(fp)
   1e70c:	1887883a 	add	r3,r3,r2
   1e710:	e13ffe17 	ldw	r4,-8(fp)
   1e714:	e0bffe17 	ldw	r2,-8(fp)
   1e718:	10800204 	addi	r2,r2,8
   1e71c:	100d883a 	mov	r6,r2
   1e720:	200b883a 	mov	r5,r4
   1e724:	1809883a 	mov	r4,r3
   1e728:	001e4c80 	call	1e4c8 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1e72c:	e0bffe17 	ldw	r2,-8(fp)
   1e730:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1e734:	e0bffe17 	ldw	r2,-8(fp)
   1e738:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1e73c:	e0bffe17 	ldw	r2,-8(fp)
   1e740:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1e744:	e0bffe17 	ldw	r2,-8(fp)
   1e748:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1e74c:	e0bffe17 	ldw	r2,-8(fp)
   1e750:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1e754:	e0bffe17 	ldw	r2,-8(fp)
   1e758:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1e75c:	e0bffc17 	ldw	r2,-16(fp)
   1e760:	1007883a 	mov	r3,r2
   1e764:	e0bffe17 	ldw	r2,-8(fp)
   1e768:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1e76c:	e0bffe17 	ldw	r2,-8(fp)
   1e770:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1e774:	e0fffc17 	ldw	r3,-16(fp)
   1e778:	e0bffe17 	ldw	r2,-8(fp)
   1e77c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1e780:	e0bffe17 	ldw	r2,-8(fp)
   1e784:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1e788:	e0bffe17 	ldw	r2,-8(fp)
   1e78c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1e790:	e0bff817 	ldw	r2,-32(fp)
   1e794:	10ffffcc 	andi	r3,r2,65535
   1e798:	e0bffe17 	ldw	r2,-8(fp)
   1e79c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1e7a0:	e0bff817 	ldw	r2,-32(fp)
   1e7a4:	1004d43a 	srli	r2,r2,16
   1e7a8:	1000010e 	bge	r2,zero,1e7b0 <create_file+0x15c>
   1e7ac:	108003c4 	addi	r2,r2,15
   1e7b0:	1005d13a 	srai	r2,r2,4
   1e7b4:	1007883a 	mov	r3,r2
   1e7b8:	e0bffe17 	ldw	r2,-8(fp)
   1e7bc:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1e7c0:	e0bff817 	ldw	r2,-32(fp)
   1e7c4:	1004d43a 	srli	r2,r2,16
   1e7c8:	1007883a 	mov	r3,r2
   1e7cc:	00a00034 	movhi	r2,32768
   1e7d0:	108003c4 	addi	r2,r2,15
   1e7d4:	1884703a 	and	r2,r3,r2
   1e7d8:	1000040e 	bge	r2,zero,1e7ec <create_file+0x198>
   1e7dc:	10bfffc4 	addi	r2,r2,-1
   1e7e0:	00fffc04 	movi	r3,-16
   1e7e4:	10c4b03a 	or	r2,r2,r3
   1e7e8:	10800044 	addi	r2,r2,1
   1e7ec:	1004917a 	slli	r2,r2,5
   1e7f0:	1007883a 	mov	r3,r2
   1e7f4:	e0bffe17 	ldw	r2,-8(fp)
   1e7f8:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1e7fc:	e0bfff17 	ldw	r2,-4(fp)
   1e800:	1080058b 	ldhu	r2,22(r2)
   1e804:	10ffffcc 	andi	r3,r2,65535
   1e808:	e0bffe17 	ldw	r2,-8(fp)
   1e80c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1e810:	e0bffe17 	ldw	r2,-8(fp)
   1e814:	00c00044 	movi	r3,1
   1e818:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1e81c:	e0bffe17 	ldw	r2,-8(fp)
   1e820:	00c00044 	movi	r3,1
   1e824:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1e828:	e0bffe17 	ldw	r2,-8(fp)
   1e82c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1e830:	1000071e 	bne	r2,zero,1e850 <create_file+0x1fc>
   1e834:	00800274 	movhi	r2,9
   1e838:	109fd104 	addi	r2,r2,32580
   1e83c:	10c01317 	ldw	r3,76(r2)
   1e840:	e0bffe17 	ldw	r2,-8(fp)
   1e844:	10800b17 	ldw	r2,44(r2)
   1e848:	1885883a 	add	r2,r3,r2
   1e84c:	00000f06 	br	1e88c <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1e850:	00800274 	movhi	r2,9
   1e854:	109fd104 	addi	r2,r2,32580
   1e858:	10c01417 	ldw	r3,80(r2)
   1e85c:	e0bffe17 	ldw	r2,-8(fp)
   1e860:	10800a17 	ldw	r2,40(r2)
   1e864:	113fff84 	addi	r4,r2,-2
   1e868:	00800274 	movhi	r2,9
   1e86c:	109fd104 	addi	r2,r2,32580
   1e870:	10800383 	ldbu	r2,14(r2)
   1e874:	10803fcc 	andi	r2,r2,255
   1e878:	2085383a 	mul	r2,r4,r2
   1e87c:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1e880:	e0bffe17 	ldw	r2,-8(fp)
   1e884:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1e888:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1e88c:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1e890:	e0bffb17 	ldw	r2,-20(fp)
   1e894:	d0e8e897 	ldw	r3,-23646(gp)
   1e898:	180b883a 	mov	r5,r3
   1e89c:	1009883a 	mov	r4,r2
   1e8a0:	001bef00 	call	1bef0 <Read_Sector_Data>
   1e8a4:	10001726 	beq	r2,zero,1e904 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1e8a8:	e0bffe17 	ldw	r2,-8(fp)
   1e8ac:	10800c0b 	ldhu	r2,48(r2)
   1e8b0:	10bfffcc 	andi	r2,r2,65535
   1e8b4:	10a0001c 	xori	r2,r2,32768
   1e8b8:	10a00004 	addi	r2,r2,-32768
   1e8bc:	e17ffe17 	ldw	r5,-8(fp)
   1e8c0:	1009883a 	mov	r4,r2
   1e8c4:	001c57c0 	call	1c57c <Write_File_Record_At_Offset>
   1e8c8:	10000e26 	beq	r2,zero,1e904 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
   1e8cc:	001bea40 	call	1bea4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1e8d0:	e0bffc17 	ldw	r2,-16(fp)
   1e8d4:	01800044 	movi	r6,1
   1e8d8:	017fffc4 	movi	r5,-1
   1e8dc:	1009883a 	mov	r4,r2
   1e8e0:	001c07c0 	call	1c07c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1e8e4:	e0bffc17 	ldw	r2,-16(fp)
   1e8e8:	000d883a 	mov	r6,zero
   1e8ec:	017fffc4 	movi	r5,-1
   1e8f0:	1009883a 	mov	r4,r2
   1e8f4:	001c07c0 	call	1c07c <mark_cluster>
   1e8f8:	10000226 	beq	r2,zero,1e904 <create_file+0x2b0>
                    {
                        result = true;
   1e8fc:	00800044 	movi	r2,1
   1e900:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   1e904:	e0bff717 	ldw	r2,-36(fp)
}
   1e908:	e037883a 	mov	sp,fp
   1e90c:	dfc00117 	ldw	ra,4(sp)
   1e910:	df000017 	ldw	fp,0(sp)
   1e914:	dec00204 	addi	sp,sp,8
   1e918:	f800283a 	ret

0001e91c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1e91c:	defffb04 	addi	sp,sp,-20
   1e920:	df000415 	stw	fp,16(sp)
   1e924:	df000404 	addi	fp,sp,16
   1e928:	e13ffe15 	stw	r4,-8(fp)
   1e92c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   1e930:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1e934:	e03ffc15 	stw	zero,-16(fp)
   1e938:	00001506 	br	1e990 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   1e93c:	e0fffe17 	ldw	r3,-8(fp)
   1e940:	e0bffc17 	ldw	r2,-16(fp)
   1e944:	1885883a 	add	r2,r3,r2
   1e948:	10800003 	ldbu	r2,0(r2)
   1e94c:	10803fcc 	andi	r2,r2,255
   1e950:	10800820 	cmpeqi	r2,r2,32
   1e954:	10000b1e 	bne	r2,zero,1e984 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   1e958:	e0bffd17 	ldw	r2,-12(fp)
   1e95c:	e0ffff17 	ldw	r3,-4(fp)
   1e960:	1885883a 	add	r2,r3,r2
   1e964:	e13ffe17 	ldw	r4,-8(fp)
   1e968:	e0fffc17 	ldw	r3,-16(fp)
   1e96c:	20c7883a 	add	r3,r4,r3
   1e970:	18c00003 	ldbu	r3,0(r3)
   1e974:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   1e978:	e0bffd17 	ldw	r2,-12(fp)
   1e97c:	10800044 	addi	r2,r2,1
   1e980:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1e984:	e0bffc17 	ldw	r2,-16(fp)
   1e988:	10800044 	addi	r2,r2,1
   1e98c:	e0bffc15 	stw	r2,-16(fp)
   1e990:	e0bffc17 	ldw	r2,-16(fp)
   1e994:	10800210 	cmplti	r2,r2,8
   1e998:	103fe81e 	bne	r2,zero,1e93c <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   1e99c:	e0bffe17 	ldw	r2,-8(fp)
   1e9a0:	10800203 	ldbu	r2,8(r2)
   1e9a4:	10803fcc 	andi	r2,r2,255
   1e9a8:	10800820 	cmpeqi	r2,r2,32
   1e9ac:	1000241e 	bne	r2,zero,1ea40 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   1e9b0:	e0bffd17 	ldw	r2,-12(fp)
   1e9b4:	e0ffff17 	ldw	r3,-4(fp)
   1e9b8:	1885883a 	add	r2,r3,r2
   1e9bc:	00c00b84 	movi	r3,46
   1e9c0:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1e9c4:	e0bffd17 	ldw	r2,-12(fp)
   1e9c8:	10800044 	addi	r2,r2,1
   1e9cc:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   1e9d0:	e03ffc15 	stw	zero,-16(fp)
   1e9d4:	00001706 	br	1ea34 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   1e9d8:	e0fffe17 	ldw	r3,-8(fp)
   1e9dc:	e0bffc17 	ldw	r2,-16(fp)
   1e9e0:	1885883a 	add	r2,r3,r2
   1e9e4:	10800204 	addi	r2,r2,8
   1e9e8:	10800003 	ldbu	r2,0(r2)
   1e9ec:	10803fcc 	andi	r2,r2,255
   1e9f0:	10800820 	cmpeqi	r2,r2,32
   1e9f4:	10000c1e 	bne	r2,zero,1ea28 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   1e9f8:	e0bffd17 	ldw	r2,-12(fp)
   1e9fc:	e0ffff17 	ldw	r3,-4(fp)
   1ea00:	1885883a 	add	r2,r3,r2
   1ea04:	e13ffe17 	ldw	r4,-8(fp)
   1ea08:	e0fffc17 	ldw	r3,-16(fp)
   1ea0c:	20c7883a 	add	r3,r4,r3
   1ea10:	18c00204 	addi	r3,r3,8
   1ea14:	18c00003 	ldbu	r3,0(r3)
   1ea18:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   1ea1c:	e0bffd17 	ldw	r2,-12(fp)
   1ea20:	10800044 	addi	r2,r2,1
   1ea24:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   1ea28:	e0bffc17 	ldw	r2,-16(fp)
   1ea2c:	10800044 	addi	r2,r2,1
   1ea30:	e0bffc15 	stw	r2,-16(fp)
   1ea34:	e0bffc17 	ldw	r2,-16(fp)
   1ea38:	108000d0 	cmplti	r2,r2,3
   1ea3c:	103fe61e 	bne	r2,zero,1e9d8 <copy_file_record_name_to_string+0xbc>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   1ea40:	e0bffd17 	ldw	r2,-12(fp)
   1ea44:	e0ffff17 	ldw	r3,-4(fp)
   1ea48:	1885883a 	add	r2,r3,r2
   1ea4c:	10000005 	stb	zero,0(r2)
}
   1ea50:	0001883a 	nop
   1ea54:	e037883a 	mov	sp,fp
   1ea58:	df000017 	ldw	fp,0(sp)
   1ea5c:	dec00104 	addi	sp,sp,4
   1ea60:	f800283a 	ret

0001ea64 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1ea64:	defffc04 	addi	sp,sp,-16
   1ea68:	dfc00315 	stw	ra,12(sp)
   1ea6c:	df000215 	stw	fp,8(sp)
   1ea70:	df000204 	addi	fp,sp,8
   1ea74:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   1ea78:	d1601b84 	addi	r5,gp,-32658
   1ea7c:	e13fff17 	ldw	r4,-4(fp)
   1ea80:	00231fc0 	call	231fc <alt_find_dev>
   1ea84:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   1ea88:	e0bffe17 	ldw	r2,-8(fp)
   1ea8c:	10001e26 	beq	r2,zero,1eb08 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   1ea90:	e0bffe17 	ldw	r2,-8(fp)
   1ea94:	10800a17 	ldw	r2,40(r2)
   1ea98:	10808d04 	addi	r2,r2,564
   1ea9c:	d0a8e295 	stw	r2,-23670(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   1eaa0:	e0bffe17 	ldw	r2,-8(fp)
   1eaa4:	10800a17 	ldw	r2,40(r2)
   1eaa8:	10808904 	addi	r2,r2,548
   1eaac:	d0a8e395 	stw	r2,-23666(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   1eab0:	e0bffe17 	ldw	r2,-8(fp)
   1eab4:	10800a17 	ldw	r2,40(r2)
   1eab8:	10808404 	addi	r2,r2,528
   1eabc:	d0a8e495 	stw	r2,-23662(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   1eac0:	e0bffe17 	ldw	r2,-8(fp)
   1eac4:	10800a17 	ldw	r2,40(r2)
   1eac8:	10808c04 	addi	r2,r2,560
   1eacc:	d0a8e595 	stw	r2,-23658(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   1ead0:	e0bffe17 	ldw	r2,-8(fp)
   1ead4:	10800a17 	ldw	r2,40(r2)
   1ead8:	10808b04 	addi	r2,r2,556
   1eadc:	d0a8e695 	stw	r2,-23654(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   1eae0:	e0bffe17 	ldw	r2,-8(fp)
   1eae4:	10800a17 	ldw	r2,40(r2)
   1eae8:	d0a8e795 	stw	r2,-23650(gp)
		device_pointer = dev;
   1eaec:	e0bffe17 	ldw	r2,-8(fp)
   1eaf0:	d0a8ea95 	stw	r2,-23638(gp)
		initialized = false;
   1eaf4:	d028e095 	stw	zero,-23678(gp)
		is_sd_card_formated_as_FAT16 = false;
   1eaf8:	d028e195 	stw	zero,-23674(gp)
		search_data.valid = false;
   1eafc:	00800274 	movhi	r2,9
   1eb00:	109fcc04 	addi	r2,r2,32560
   1eb04:	10000415 	stw	zero,16(r2)
	}
	return dev;
   1eb08:	e0bffe17 	ldw	r2,-8(fp)
}
   1eb0c:	e037883a 	mov	sp,fp
   1eb10:	dfc00117 	ldw	ra,4(sp)
   1eb14:	df000017 	ldw	fp,0(sp)
   1eb18:	dec00204 	addi	sp,sp,8
   1eb1c:	f800283a 	ret

0001eb20 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   1eb20:	defffd04 	addi	sp,sp,-12
   1eb24:	df000215 	stw	fp,8(sp)
   1eb28:	df000204 	addi	fp,sp,8
    bool result = false;
   1eb2c:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   1eb30:	d0a8ea97 	ldw	r2,-23638(gp)
   1eb34:	10000826 	beq	r2,zero,1eb58 <alt_up_sd_card_is_Present+0x38>
   1eb38:	d0a8e297 	ldw	r2,-23670(gp)
   1eb3c:	1080002b 	ldhuio	r2,0(r2)
   1eb40:	10bfffcc 	andi	r2,r2,65535
   1eb44:	1080008c 	andi	r2,r2,2
   1eb48:	10000326 	beq	r2,zero,1eb58 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   1eb4c:	00800044 	movi	r2,1
   1eb50:	e0bffe15 	stw	r2,-8(fp)
   1eb54:	00001e06 	br	1ebd0 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   1eb58:	d0a8e097 	ldw	r2,-23678(gp)
   1eb5c:	10800058 	cmpnei	r2,r2,1
   1eb60:	10001b1e 	bne	r2,zero,1ebd0 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   1eb64:	d028e095 	stw	zero,-23678(gp)
		search_data.valid = false;
   1eb68:	00800274 	movhi	r2,9
   1eb6c:	109fcc04 	addi	r2,r2,32560
   1eb70:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   1eb74:	d028e195 	stw	zero,-23674(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1eb78:	e03fff15 	stw	zero,-4(fp)
   1eb7c:	00001106 	br	1ebc4 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   1eb80:	00800274 	movhi	r2,9
   1eb84:	109fe604 	addi	r2,r2,32664
   1eb88:	e0ffff17 	ldw	r3,-4(fp)
   1eb8c:	180691ba 	slli	r3,r3,6
   1eb90:	10c5883a 	add	r2,r2,r3
   1eb94:	10800f04 	addi	r2,r2,60
   1eb98:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   1eb9c:	00800274 	movhi	r2,9
   1eba0:	109fe604 	addi	r2,r2,32664
   1eba4:	e0ffff17 	ldw	r3,-4(fp)
   1eba8:	180691ba 	slli	r3,r3,6
   1ebac:	10c5883a 	add	r2,r2,r3
   1ebb0:	10800e04 	addi	r2,r2,56
   1ebb4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1ebb8:	e0bfff17 	ldw	r2,-4(fp)
   1ebbc:	10800044 	addi	r2,r2,1
   1ebc0:	e0bfff15 	stw	r2,-4(fp)
   1ebc4:	e0bfff17 	ldw	r2,-4(fp)
   1ebc8:	10800510 	cmplti	r2,r2,20
   1ebcc:	103fec1e 	bne	r2,zero,1eb80 <alt_up_sd_card_is_Present+0x60>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   1ebd0:	e0bffe17 	ldw	r2,-8(fp)
}
   1ebd4:	e037883a 	mov	sp,fp
   1ebd8:	df000017 	ldw	fp,0(sp)
   1ebdc:	dec00104 	addi	sp,sp,4
   1ebe0:	f800283a 	ret

0001ebe4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1ebe4:	defffd04 	addi	sp,sp,-12
   1ebe8:	dfc00215 	stw	ra,8(sp)
   1ebec:	df000115 	stw	fp,4(sp)
   1ebf0:	df000104 	addi	fp,sp,4
	bool result = false;
   1ebf4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1ebf8:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1ebfc:	10000c26 	beq	r2,zero,1ec30 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   1ec00:	d0a8e097 	ldw	r2,-23678(gp)
   1ec04:	1000071e 	bne	r2,zero,1ec24 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   1ec08:	001ce880 	call	1ce88 <Look_for_FAT16>
   1ec0c:	d0a8e195 	stw	r2,-23674(gp)
			initialized = is_sd_card_formated_as_FAT16;
   1ec10:	d0a8e197 	ldw	r2,-23674(gp)
   1ec14:	d0a8e095 	stw	r2,-23678(gp)
			search_data.valid = false;
   1ec18:	00800274 	movhi	r2,9
   1ec1c:	109fcc04 	addi	r2,r2,32560
   1ec20:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   1ec24:	d0a8e197 	ldw	r2,-23674(gp)
   1ec28:	e0bfff15 	stw	r2,-4(fp)
   1ec2c:	00000206 	br	1ec38 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   1ec30:	d028e095 	stw	zero,-23678(gp)
		is_sd_card_formated_as_FAT16 = false;
   1ec34:	d028e195 	stw	zero,-23674(gp)
	}

	return result;
   1ec38:	e0bfff17 	ldw	r2,-4(fp)
}
   1ec3c:	e037883a 	mov	sp,fp
   1ec40:	dfc00117 	ldw	ra,4(sp)
   1ec44:	df000017 	ldw	fp,0(sp)
   1ec48:	dec00204 	addi	sp,sp,8
   1ec4c:	f800283a 	ret

0001ec50 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   1ec50:	deffea04 	addi	sp,sp,-88
   1ec54:	dfc01515 	stw	ra,84(sp)
   1ec58:	df001415 	stw	fp,80(sp)
   1ec5c:	df001404 	addi	fp,sp,80
   1ec60:	e13ffe15 	stw	r4,-8(fp)
   1ec64:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   1ec68:	00800084 	movi	r2,2
   1ec6c:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1ec70:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1ec74:	10002426 	beq	r2,zero,1ed08 <alt_up_sd_card_find_first+0xb8>
   1ec78:	d0a8e197 	ldw	r2,-23674(gp)
   1ec7c:	10002226 	beq	r2,zero,1ed08 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   1ec80:	e0ffee04 	addi	r3,fp,-72
   1ec84:	e0bfed04 	addi	r2,fp,-76
   1ec88:	180d883a 	mov	r6,r3
   1ec8c:	100b883a 	mov	r5,r2
   1ec90:	e13ffe17 	ldw	r4,-8(fp)
   1ec94:	001d5f80 	call	1d5f8 <get_home_directory_cluster_for_file>
   1ec98:	10001926 	beq	r2,zero,1ed00 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   1ec9c:	e0bfed17 	ldw	r2,-76(fp)
   1eca0:	1007883a 	mov	r3,r2
   1eca4:	00800274 	movhi	r2,9
   1eca8:	109fcc04 	addi	r2,r2,32560
   1ecac:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   1ecb0:	e0bfed17 	ldw	r2,-76(fp)
   1ecb4:	1007883a 	mov	r3,r2
   1ecb8:	00800274 	movhi	r2,9
   1ecbc:	109fcc04 	addi	r2,r2,32560
   1ecc0:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   1ecc4:	00800274 	movhi	r2,9
   1ecc8:	109fcc04 	addi	r2,r2,32560
   1eccc:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   1ecd0:	00800274 	movhi	r2,9
   1ecd4:	109fcc04 	addi	r2,r2,32560
   1ecd8:	00ffffc4 	movi	r3,-1
   1ecdc:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   1ece0:	00800274 	movhi	r2,9
   1ece4:	109fcc04 	addi	r2,r2,32560
   1ece8:	00c00044 	movi	r3,1
   1ecec:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   1ecf0:	e13fff17 	ldw	r4,-4(fp)
   1ecf4:	001ed200 	call	1ed20 <alt_up_sd_card_find_next>
   1ecf8:	e0bfec0d 	sth	r2,-80(fp)
   1ecfc:	00000206 	br	1ed08 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   1ed00:	00800044 	movi	r2,1
   1ed04:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   1ed08:	e0bfec0b 	ldhu	r2,-80(fp)
}
   1ed0c:	e037883a 	mov	sp,fp
   1ed10:	dfc00117 	ldw	ra,4(sp)
   1ed14:	df000017 	ldw	fp,0(sp)
   1ed18:	dec00204 	addi	sp,sp,8
   1ed1c:	f800283a 	ret

0001ed20 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   1ed20:	deffe404 	addi	sp,sp,-112
   1ed24:	dfc01b15 	stw	ra,108(sp)
   1ed28:	df001a15 	stw	fp,104(sp)
   1ed2c:	df001a04 	addi	fp,sp,104
   1ed30:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   1ed34:	00800084 	movi	r2,2
   1ed38:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1ed3c:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1ed40:	1000df26 	beq	r2,zero,1f0c0 <alt_up_sd_card_find_next+0x3a0>
   1ed44:	d0a8e197 	ldw	r2,-23674(gp)
   1ed48:	1000dd26 	beq	r2,zero,1f0c0 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
   1ed4c:	00800274 	movhi	r2,9
   1ed50:	109fcc04 	addi	r2,r2,32560
   1ed54:	10800417 	ldw	r2,16(r2)
   1ed58:	1000d726 	beq	r2,zero,1f0b8 <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   1ed5c:	00800274 	movhi	r2,9
   1ed60:	109fcc04 	addi	r2,r2,32560
   1ed64:	10800117 	ldw	r2,4(r2)
   1ed68:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   1ed6c:	e0bfe717 	ldw	r2,-100(fp)
   1ed70:	1000561e 	bne	r2,zero,1eecc <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1ed74:	00800274 	movhi	r2,9
   1ed78:	109fd104 	addi	r2,r2,32580
   1ed7c:	1080050b 	ldhu	r2,20(r2)
   1ed80:	10bfffcc 	andi	r2,r2,65535
   1ed84:	1006917a 	slli	r3,r2,5
   1ed88:	00800274 	movhi	r2,9
   1ed8c:	109fd104 	addi	r2,r2,32580
   1ed90:	1080030b 	ldhu	r2,12(r2)
   1ed94:	10bfffcc 	andi	r2,r2,65535
   1ed98:	1885283a 	div	r2,r3,r2
   1ed9c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   1eda0:	00800274 	movhi	r2,9
   1eda4:	109fcc04 	addi	r2,r2,32560
   1eda8:	10800217 	ldw	r2,8(r2)
   1edac:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   1edb0:	00800274 	movhi	r2,9
   1edb4:	109fcc04 	addi	r2,r2,32560
   1edb8:	1080030b 	ldhu	r2,12(r2)
   1edbc:	10bfffcc 	andi	r2,r2,65535
   1edc0:	10a0001c 	xori	r2,r2,32768
   1edc4:	10a00004 	addi	r2,r2,-32768
   1edc8:	10800044 	addi	r2,r2,1
   1edcc:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1edd0:	00003606 	br	1eeac <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1edd4:	00800274 	movhi	r2,9
   1edd8:	109fd104 	addi	r2,r2,32580
   1eddc:	10c01317 	ldw	r3,76(r2)
   1ede0:	e0bfe817 	ldw	r2,-96(fp)
   1ede4:	1885883a 	add	r2,r3,r2
   1ede8:	1007883a 	mov	r3,r2
   1edec:	d0a8e897 	ldw	r2,-23646(gp)
   1edf0:	100b883a 	mov	r5,r2
   1edf4:	1809883a 	mov	r4,r3
   1edf8:	001bef00 	call	1bef0 <Read_Sector_Data>
   1edfc:	10002f26 	beq	r2,zero,1eebc <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1ee00:	00002306 	br	1ee90 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   1ee04:	e0bfe917 	ldw	r2,-92(fp)
   1ee08:	1004917a 	slli	r2,r2,5
   1ee0c:	e13fe817 	ldw	r4,-96(fp)
   1ee10:	e0ffef04 	addi	r3,fp,-68
   1ee14:	200f883a 	mov	r7,r4
   1ee18:	000d883a 	mov	r6,zero
   1ee1c:	180b883a 	mov	r5,r3
   1ee20:	1009883a 	mov	r4,r2
   1ee24:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
   1ee28:	10001626 	beq	r2,zero,1ee84 <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1ee2c:	e0bfef03 	ldbu	r2,-68(fp)
   1ee30:	10803fcc 	andi	r2,r2,255
   1ee34:	10001326 	beq	r2,zero,1ee84 <alt_up_sd_card_find_next+0x164>
   1ee38:	e0bfef03 	ldbu	r2,-68(fp)
   1ee3c:	10803fcc 	andi	r2,r2,255
   1ee40:	10803960 	cmpeqi	r2,r2,229
   1ee44:	10000f1e 	bne	r2,zero,1ee84 <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   1ee48:	e0bfe917 	ldw	r2,-92(fp)
   1ee4c:	1007883a 	mov	r3,r2
   1ee50:	00800274 	movhi	r2,9
   1ee54:	109fcc04 	addi	r2,r2,32560
   1ee58:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   1ee5c:	e0ffe817 	ldw	r3,-96(fp)
   1ee60:	00800274 	movhi	r2,9
   1ee64:	109fcc04 	addi	r2,r2,32560
   1ee68:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   1ee6c:	e0bfef04 	addi	r2,fp,-68
   1ee70:	e17fff17 	ldw	r5,-4(fp)
   1ee74:	1009883a 	mov	r4,r2
   1ee78:	001e91c0 	call	1e91c <copy_file_record_name_to_string>
									return 0;
   1ee7c:	0005883a 	mov	r2,zero
   1ee80:	00009006 	br	1f0c4 <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1ee84:	e0bfe917 	ldw	r2,-92(fp)
   1ee88:	10800044 	addi	r2,r2,1
   1ee8c:	e0bfe915 	stw	r2,-92(fp)
   1ee90:	e0bfe917 	ldw	r2,-92(fp)
   1ee94:	10800410 	cmplti	r2,r2,16
   1ee98:	103fda1e 	bne	r2,zero,1ee04 <alt_up_sd_card_find_next+0xe4>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   1ee9c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1eea0:	e0bfe817 	ldw	r2,-96(fp)
   1eea4:	10800044 	addi	r2,r2,1
   1eea8:	e0bfe815 	stw	r2,-96(fp)
   1eeac:	e0ffe817 	ldw	r3,-96(fp)
   1eeb0:	e0bfec17 	ldw	r2,-80(fp)
   1eeb4:	18bfc716 	blt	r3,r2,1edd4 <alt_up_sd_card_find_next+0xb4>
   1eeb8:	00000106 	br	1eec0 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
   1eebc:	0001883a 	nop
					}
				}
				result = -1;
   1eec0:	00bfffc4 	movi	r2,-1
   1eec4:	e0bfe60d 	sth	r2,-104(fp)
   1eec8:	00007d06 	br	1f0c0 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   1eecc:	00800274 	movhi	r2,9
   1eed0:	109fcc04 	addi	r2,r2,32560
   1eed4:	1080030b 	ldhu	r2,12(r2)
   1eed8:	10bfffcc 	andi	r2,r2,65535
   1eedc:	10a0001c 	xori	r2,r2,32768
   1eee0:	10a00004 	addi	r2,r2,-32768
   1eee4:	10800044 	addi	r2,r2,1
   1eee8:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1eeec:	e0bfe717 	ldw	r2,-100(fp)
   1eef0:	10ffff84 	addi	r3,r2,-2
   1eef4:	00800274 	movhi	r2,9
   1eef8:	109fd104 	addi	r2,r2,32580
   1eefc:	10800383 	ldbu	r2,14(r2)
   1ef00:	10803fcc 	andi	r2,r2,255
   1ef04:	1885383a 	mul	r2,r3,r2
   1ef08:	1007883a 	mov	r3,r2
   1ef0c:	00800274 	movhi	r2,9
   1ef10:	109fd104 	addi	r2,r2,32580
   1ef14:	10801417 	ldw	r2,80(r2)
   1ef18:	1885883a 	add	r2,r3,r2
   1ef1c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   1ef20:	00800274 	movhi	r2,9
   1ef24:	109fcc04 	addi	r2,r2,32560
   1ef28:	10800217 	ldw	r2,8(r2)
   1ef2c:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1ef30:	00003806 	br	1f014 <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1ef34:	e0ffeb17 	ldw	r3,-84(fp)
   1ef38:	e0bfed17 	ldw	r2,-76(fp)
   1ef3c:	1885883a 	add	r2,r3,r2
   1ef40:	d0e8e897 	ldw	r3,-23646(gp)
   1ef44:	180b883a 	mov	r5,r3
   1ef48:	1009883a 	mov	r4,r2
   1ef4c:	001bef00 	call	1bef0 <Read_Sector_Data>
   1ef50:	10003726 	beq	r2,zero,1f030 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
   1ef54:	00002806 	br	1eff8 <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   1ef58:	e0bfea17 	ldw	r2,-88(fp)
   1ef5c:	1004917a 	slli	r2,r2,5
   1ef60:	e13fe717 	ldw	r4,-100(fp)
   1ef64:	e17feb17 	ldw	r5,-84(fp)
   1ef68:	e0ffef04 	addi	r3,fp,-68
   1ef6c:	280f883a 	mov	r7,r5
   1ef70:	200d883a 	mov	r6,r4
   1ef74:	180b883a 	mov	r5,r3
   1ef78:	1009883a 	mov	r4,r2
   1ef7c:	001c3000 	call	1c300 <Read_File_Record_At_Offset>
   1ef80:	10001a26 	beq	r2,zero,1efec <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1ef84:	e0bfef03 	ldbu	r2,-68(fp)
   1ef88:	10803fcc 	andi	r2,r2,255
   1ef8c:	10001726 	beq	r2,zero,1efec <alt_up_sd_card_find_next+0x2cc>
   1ef90:	e0bfef03 	ldbu	r2,-68(fp)
   1ef94:	10803fcc 	andi	r2,r2,255
   1ef98:	10803960 	cmpeqi	r2,r2,229
   1ef9c:	1000131e 	bne	r2,zero,1efec <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   1efa0:	e0ffe717 	ldw	r3,-100(fp)
   1efa4:	00800274 	movhi	r2,9
   1efa8:	109fcc04 	addi	r2,r2,32560
   1efac:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   1efb0:	e0bfea17 	ldw	r2,-88(fp)
   1efb4:	1007883a 	mov	r3,r2
   1efb8:	00800274 	movhi	r2,9
   1efbc:	109fcc04 	addi	r2,r2,32560
   1efc0:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   1efc4:	e0ffeb17 	ldw	r3,-84(fp)
   1efc8:	00800274 	movhi	r2,9
   1efcc:	109fcc04 	addi	r2,r2,32560
   1efd0:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   1efd4:	e0bfef04 	addi	r2,fp,-68
   1efd8:	e17fff17 	ldw	r5,-4(fp)
   1efdc:	1009883a 	mov	r4,r2
   1efe0:	001e91c0 	call	1e91c <copy_file_record_name_to_string>
										return 0;
   1efe4:	0005883a 	mov	r2,zero
   1efe8:	00003606 	br	1f0c4 <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   1efec:	e0bfea17 	ldw	r2,-88(fp)
   1eff0:	10800044 	addi	r2,r2,1
   1eff4:	e0bfea15 	stw	r2,-88(fp)
   1eff8:	e0bfea17 	ldw	r2,-88(fp)
   1effc:	10800410 	cmplti	r2,r2,16
   1f000:	103fd51e 	bne	r2,zero,1ef58 <alt_up_sd_card_find_next+0x238>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   1f004:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f008:	e0bfeb17 	ldw	r2,-84(fp)
   1f00c:	10800044 	addi	r2,r2,1
   1f010:	e0bfeb15 	stw	r2,-84(fp)
   1f014:	00800274 	movhi	r2,9
   1f018:	109fd104 	addi	r2,r2,32580
   1f01c:	10800383 	ldbu	r2,14(r2)
   1f020:	10803fcc 	andi	r2,r2,255
   1f024:	e0ffeb17 	ldw	r3,-84(fp)
   1f028:	18bfc216 	blt	r3,r2,1ef34 <alt_up_sd_card_find_next+0x214>
   1f02c:	00000106 	br	1f034 <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
   1f030:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   1f034:	00800274 	movhi	r2,9
   1f038:	109fd104 	addi	r2,r2,32580
   1f03c:	10800383 	ldbu	r2,14(r2)
   1f040:	10803fcc 	andi	r2,r2,255
   1f044:	e0ffeb17 	ldw	r3,-84(fp)
   1f048:	18801716 	blt	r3,r2,1f0a8 <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   1f04c:	e0bfe717 	ldw	r2,-100(fp)
   1f050:	e0ffee04 	addi	r3,fp,-72
   1f054:	180b883a 	mov	r5,r3
   1f058:	1009883a 	mov	r4,r2
   1f05c:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1f060:	10000f26 	beq	r2,zero,1f0a0 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1f064:	e0bfee0b 	ldhu	r2,-72(fp)
   1f068:	10bfffcc 	andi	r2,r2,65535
   1f06c:	10fffe0c 	andi	r3,r2,65528
   1f070:	00bffe14 	movui	r2,65528
   1f074:	1880051e 	bne	r3,r2,1f08c <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
   1f078:	00bfffc4 	movi	r2,-1
   1f07c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   1f080:	00800274 	movhi	r2,9
   1f084:	109fcc04 	addi	r2,r2,32560
   1f088:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1f08c:	e0bfee0b 	ldhu	r2,-72(fp)
   1f090:	10bfffcc 	andi	r2,r2,65535
   1f094:	10bffe0c 	andi	r2,r2,65528
   1f098:	e0bfe715 	stw	r2,-100(fp)
   1f09c:	00000206 	br	1f0a8 <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   1f0a0:	00bfffc4 	movi	r2,-1
   1f0a4:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   1f0a8:	e0bfe717 	ldw	r2,-100(fp)
   1f0ac:	00fffdd4 	movui	r3,65527
   1f0b0:	18bf8e0e 	bge	r3,r2,1eeec <alt_up_sd_card_find_next+0x1cc>
   1f0b4:	00000206 	br	1f0c0 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   1f0b8:	008000c4 	movi	r2,3
   1f0bc:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   1f0c0:	e0bfe60b 	ldhu	r2,-104(fp)
}
   1f0c4:	e037883a 	mov	sp,fp
   1f0c8:	dfc00117 	ldw	ra,4(sp)
   1f0cc:	df000017 	ldw	fp,0(sp)
   1f0d0:	dec00204 	addi	sp,sp,8
   1f0d4:	f800283a 	ret

0001f0d8 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   1f0d8:	deffe904 	addi	sp,sp,-92
   1f0dc:	dfc01615 	stw	ra,88(sp)
   1f0e0:	df001515 	stw	fp,84(sp)
   1f0e4:	df001504 	addi	fp,sp,84
   1f0e8:	e13ffe15 	stw	r4,-8(fp)
   1f0ec:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   1f0f0:	00bfffc4 	movi	r2,-1
   1f0f4:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1f0f8:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1f0fc:	1000cf26 	beq	r2,zero,1f43c <alt_up_sd_card_fopen+0x364>
   1f100:	d0a8e197 	ldw	r2,-23674(gp)
   1f104:	1000cd26 	beq	r2,zero,1f43c <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
   1f108:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1f10c:	e13ffe17 	ldw	r4,-8(fp)
   1f110:	001cf740 	call	1cf74 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   1f114:	e13ffe17 	ldw	r4,-8(fp)
   1f118:	001d0380 	call	1d038 <check_file_name_for_FAT16_compliance>
   1f11c:	1000c726 	beq	r2,zero,1f43c <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   1f120:	e0ffee04 	addi	r3,fp,-72
   1f124:	e0bfed04 	addi	r2,fp,-76
   1f128:	180d883a 	mov	r6,r3
   1f12c:	100b883a 	mov	r5,r2
   1f130:	e13ffe17 	ldw	r4,-8(fp)
   1f134:	001d5f80 	call	1d5f8 <get_home_directory_cluster_for_file>
   1f138:	1000021e 	bne	r2,zero,1f144 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   1f13c:	e0bfeb0b 	ldhu	r2,-84(fp)
   1f140:	0000bf06 	br	1f440 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1f144:	e03fec15 	stw	zero,-80(fp)
   1f148:	00000e06 	br	1f184 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   1f14c:	00800274 	movhi	r2,9
   1f150:	109fe604 	addi	r2,r2,32664
   1f154:	e0ffec17 	ldw	r3,-80(fp)
   1f158:	180691ba 	slli	r3,r3,6
   1f15c:	10c5883a 	add	r2,r2,r3
   1f160:	10800f04 	addi	r2,r2,60
   1f164:	10800017 	ldw	r2,0(r2)
   1f168:	1000031e 	bne	r2,zero,1f178 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   1f16c:	e0bfec17 	ldw	r2,-80(fp)
   1f170:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   1f174:	00000606 	br	1f190 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1f178:	e0bfec17 	ldw	r2,-80(fp)
   1f17c:	10800044 	addi	r2,r2,1
   1f180:	e0bfec15 	stw	r2,-80(fp)
   1f184:	e0bfec17 	ldw	r2,-80(fp)
   1f188:	10800510 	cmplti	r2,r2,20
   1f18c:	103fef1e 	bne	r2,zero,1f14c <alt_up_sd_card_fopen+0x74>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   1f190:	e0bfeb0f 	ldh	r2,-84(fp)
   1f194:	1000a916 	blt	r2,zero,1f43c <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   1f198:	e0bfed17 	ldw	r2,-76(fp)
   1f19c:	1009883a 	mov	r4,r2
   1f1a0:	e0bfeb0f 	ldh	r2,-84(fp)
   1f1a4:	100691ba 	slli	r3,r2,6
   1f1a8:	00800274 	movhi	r2,9
   1f1ac:	109fe604 	addi	r2,r2,32664
   1f1b0:	1885883a 	add	r2,r3,r2
   1f1b4:	100d883a 	mov	r6,r2
   1f1b8:	e17ffe17 	ldw	r5,-8(fp)
   1f1bc:	001db300 	call	1db30 <find_file_in_directory>
   1f1c0:	10007b26 	beq	r2,zero,1f3b0 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
   1f1c4:	e0bfff17 	ldw	r2,-4(fp)
   1f1c8:	10000226 	beq	r2,zero,1f1d4 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1f1cc:	00bfffc4 	movi	r2,-1
   1f1d0:	00009b06 	br	1f440 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   1f1d4:	e13feb0f 	ldh	r4,-84(fp)
   1f1d8:	e0ffeb0f 	ldh	r3,-84(fp)
   1f1dc:	00800274 	movhi	r2,9
   1f1e0:	109fe604 	addi	r2,r2,32664
   1f1e4:	180691ba 	slli	r3,r3,6
   1f1e8:	10c5883a 	add	r2,r2,r3
   1f1ec:	10800584 	addi	r2,r2,22
   1f1f0:	1080000b 	ldhu	r2,0(r2)
   1f1f4:	10ffffcc 	andi	r3,r2,65535
   1f1f8:	00800274 	movhi	r2,9
   1f1fc:	109fe604 	addi	r2,r2,32664
   1f200:	200891ba 	slli	r4,r4,6
   1f204:	1105883a 	add	r2,r2,r4
   1f208:	10800704 	addi	r2,r2,28
   1f20c:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   1f210:	e0ffeb0f 	ldh	r3,-84(fp)
   1f214:	00800274 	movhi	r2,9
   1f218:	109fe604 	addi	r2,r2,32664
   1f21c:	180691ba 	slli	r3,r3,6
   1f220:	10c5883a 	add	r2,r2,r3
   1f224:	10800804 	addi	r2,r2,32
   1f228:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1f22c:	e0ffeb0f 	ldh	r3,-84(fp)
   1f230:	00800274 	movhi	r2,9
   1f234:	109fe604 	addi	r2,r2,32664
   1f238:	180691ba 	slli	r3,r3,6
   1f23c:	10c5883a 	add	r2,r2,r3
   1f240:	10800904 	addi	r2,r2,36
   1f244:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   1f248:	e0ffeb0f 	ldh	r3,-84(fp)
   1f24c:	00800274 	movhi	r2,9
   1f250:	109fe604 	addi	r2,r2,32664
   1f254:	180691ba 	slli	r3,r3,6
   1f258:	10c5883a 	add	r2,r2,r3
   1f25c:	10800f04 	addi	r2,r2,60
   1f260:	00c00044 	movi	r3,1
   1f264:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   1f268:	e0ffeb0f 	ldh	r3,-84(fp)
   1f26c:	00800274 	movhi	r2,9
   1f270:	109fe604 	addi	r2,r2,32664
   1f274:	180691ba 	slli	r3,r3,6
   1f278:	10c5883a 	add	r2,r2,r3
   1f27c:	10800e04 	addi	r2,r2,56
   1f280:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1f284:	e03fec15 	stw	zero,-80(fp)
   1f288:	00004506 	br	1f3a0 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1f28c:	e0ffeb0f 	ldh	r3,-84(fp)
   1f290:	e0bfec17 	ldw	r2,-80(fp)
   1f294:	18803f26 	beq	r3,r2,1f394 <alt_up_sd_card_fopen+0x2bc>
   1f298:	00800274 	movhi	r2,9
   1f29c:	109fe604 	addi	r2,r2,32664
   1f2a0:	e0ffec17 	ldw	r3,-80(fp)
   1f2a4:	180691ba 	slli	r3,r3,6
   1f2a8:	10c5883a 	add	r2,r2,r3
   1f2ac:	10800f04 	addi	r2,r2,60
   1f2b0:	10800017 	ldw	r2,0(r2)
   1f2b4:	10800058 	cmpnei	r2,r2,1
   1f2b8:	1000361e 	bne	r2,zero,1f394 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1f2bc:	e0ffeb0f 	ldh	r3,-84(fp)
   1f2c0:	00800274 	movhi	r2,9
   1f2c4:	109fe604 	addi	r2,r2,32664
   1f2c8:	180691ba 	slli	r3,r3,6
   1f2cc:	10c5883a 	add	r2,r2,r3
   1f2d0:	10800a04 	addi	r2,r2,40
   1f2d4:	10c00017 	ldw	r3,0(r2)
   1f2d8:	00800274 	movhi	r2,9
   1f2dc:	109fe604 	addi	r2,r2,32664
   1f2e0:	e13fec17 	ldw	r4,-80(fp)
   1f2e4:	200891ba 	slli	r4,r4,6
   1f2e8:	1105883a 	add	r2,r2,r4
   1f2ec:	10800a04 	addi	r2,r2,40
   1f2f0:	10800017 	ldw	r2,0(r2)
   1f2f4:	1880271e 	bne	r3,r2,1f394 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1f2f8:	e0ffeb0f 	ldh	r3,-84(fp)
   1f2fc:	00800274 	movhi	r2,9
   1f300:	109fe604 	addi	r2,r2,32664
   1f304:	180691ba 	slli	r3,r3,6
   1f308:	10c5883a 	add	r2,r2,r3
   1f30c:	10800b04 	addi	r2,r2,44
   1f310:	10c00017 	ldw	r3,0(r2)
   1f314:	00800274 	movhi	r2,9
   1f318:	109fe604 	addi	r2,r2,32664
   1f31c:	e13fec17 	ldw	r4,-80(fp)
   1f320:	200891ba 	slli	r4,r4,6
   1f324:	1105883a 	add	r2,r2,r4
   1f328:	10800b04 	addi	r2,r2,44
   1f32c:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1f330:	1880181e 	bne	r3,r2,1f394 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   1f334:	e0ffeb0f 	ldh	r3,-84(fp)
   1f338:	00800274 	movhi	r2,9
   1f33c:	109fe604 	addi	r2,r2,32664
   1f340:	180691ba 	slli	r3,r3,6
   1f344:	10c5883a 	add	r2,r2,r3
   1f348:	10800c04 	addi	r2,r2,48
   1f34c:	1100000b 	ldhu	r4,0(r2)
   1f350:	00800274 	movhi	r2,9
   1f354:	109fe604 	addi	r2,r2,32664
   1f358:	e0ffec17 	ldw	r3,-80(fp)
   1f35c:	180691ba 	slli	r3,r3,6
   1f360:	10c5883a 	add	r2,r2,r3
   1f364:	10800c04 	addi	r2,r2,48
   1f368:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1f36c:	20ffffcc 	andi	r3,r4,65535
   1f370:	18e0001c 	xori	r3,r3,32768
   1f374:	18e00004 	addi	r3,r3,-32768
   1f378:	10bfffcc 	andi	r2,r2,65535
   1f37c:	10a0001c 	xori	r2,r2,32768
   1f380:	10a00004 	addi	r2,r2,-32768
   1f384:	1880031e 	bne	r3,r2,1f394 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   1f388:	00bfff84 	movi	r2,-2
   1f38c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   1f390:	00002a06 	br	1f43c <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1f394:	e0bfec17 	ldw	r2,-80(fp)
   1f398:	10800044 	addi	r2,r2,1
   1f39c:	e0bfec15 	stw	r2,-80(fp)
   1f3a0:	e0bfec17 	ldw	r2,-80(fp)
   1f3a4:	10800510 	cmplti	r2,r2,20
   1f3a8:	103fb81e 	bne	r2,zero,1f28c <alt_up_sd_card_fopen+0x1b4>
   1f3ac:	00002306 	br	1f43c <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
   1f3b0:	e0bfff17 	ldw	r2,-4(fp)
   1f3b4:	10001f26 	beq	r2,zero,1f434 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   1f3b8:	e0bfeb0f 	ldh	r2,-84(fp)
   1f3bc:	100691ba 	slli	r3,r2,6
   1f3c0:	00800274 	movhi	r2,9
   1f3c4:	109fe604 	addi	r2,r2,32664
   1f3c8:	1885883a 	add	r2,r3,r2
   1f3cc:	e0ffee04 	addi	r3,fp,-72
   1f3d0:	180d883a 	mov	r6,r3
   1f3d4:	100b883a 	mov	r5,r2
   1f3d8:	e13ffe17 	ldw	r4,-8(fp)
   1f3dc:	001e6540 	call	1e654 <create_file>
   1f3e0:	10001126 	beq	r2,zero,1f428 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
   1f3e4:	e0ffeb0f 	ldh	r3,-84(fp)
   1f3e8:	00800274 	movhi	r2,9
   1f3ec:	109fe604 	addi	r2,r2,32664
   1f3f0:	180691ba 	slli	r3,r3,6
   1f3f4:	10c5883a 	add	r2,r2,r3
   1f3f8:	10800f04 	addi	r2,r2,60
   1f3fc:	00c00044 	movi	r3,1
   1f400:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   1f404:	e0ffeb0f 	ldh	r3,-84(fp)
   1f408:	00800274 	movhi	r2,9
   1f40c:	109fe604 	addi	r2,r2,32664
   1f410:	180691ba 	slli	r3,r3,6
   1f414:	10c5883a 	add	r2,r2,r3
   1f418:	10800e04 	addi	r2,r2,56
   1f41c:	00c00044 	movi	r3,1
   1f420:	10c00015 	stw	r3,0(r2)
   1f424:	00000506 	br	1f43c <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   1f428:	00bfffc4 	movi	r2,-1
   1f42c:	e0bfeb0d 	sth	r2,-84(fp)
   1f430:	00000206 	br	1f43c <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   1f434:	00bfffc4 	movi	r2,-1
   1f438:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   1f43c:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   1f440:	e037883a 	mov	sp,fp
   1f444:	dfc00117 	ldw	ra,4(sp)
   1f448:	df000017 	ldw	fp,0(sp)
   1f44c:	dec00204 	addi	sp,sp,8
   1f450:	f800283a 	ret

0001f454 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1f454:	defffd04 	addi	sp,sp,-12
   1f458:	df000215 	stw	fp,8(sp)
   1f45c:	df000204 	addi	fp,sp,8
   1f460:	2007883a 	mov	r3,r4
   1f464:	2805883a 	mov	r2,r5
   1f468:	e0fffe0d 	sth	r3,-8(fp)
   1f46c:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1f470:	e0bffe0f 	ldh	r2,-8(fp)
   1f474:	10001416 	blt	r2,zero,1f4c8 <alt_up_sd_card_set_attributes+0x74>
   1f478:	e0bffe0f 	ldh	r2,-8(fp)
   1f47c:	10800508 	cmpgei	r2,r2,20
   1f480:	1000111e 	bne	r2,zero,1f4c8 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1f484:	e0fffe0f 	ldh	r3,-8(fp)
   1f488:	00800274 	movhi	r2,9
   1f48c:	109fe604 	addi	r2,r2,32664
   1f490:	180691ba 	slli	r3,r3,6
   1f494:	10c5883a 	add	r2,r2,r3
   1f498:	10800f04 	addi	r2,r2,60
   1f49c:	10800017 	ldw	r2,0(r2)
   1f4a0:	10000926 	beq	r2,zero,1f4c8 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1f4a4:	e0fffe0f 	ldh	r3,-8(fp)
   1f4a8:	e0bfff0b 	ldhu	r2,-4(fp)
   1f4ac:	1009883a 	mov	r4,r2
   1f4b0:	00800274 	movhi	r2,9
   1f4b4:	109fe604 	addi	r2,r2,32664
   1f4b8:	180691ba 	slli	r3,r3,6
   1f4bc:	10c5883a 	add	r2,r2,r3
   1f4c0:	108002c4 	addi	r2,r2,11
   1f4c4:	11000005 	stb	r4,0(r2)
        }
    }
}
   1f4c8:	0001883a 	nop
   1f4cc:	e037883a 	mov	sp,fp
   1f4d0:	df000017 	ldw	fp,0(sp)
   1f4d4:	dec00104 	addi	sp,sp,4
   1f4d8:	f800283a 	ret

0001f4dc <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1f4dc:	defffd04 	addi	sp,sp,-12
   1f4e0:	df000215 	stw	fp,8(sp)
   1f4e4:	df000204 	addi	fp,sp,8
   1f4e8:	2005883a 	mov	r2,r4
   1f4ec:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   1f4f0:	00bfffc4 	movi	r2,-1
   1f4f4:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1f4f8:	e0bfff0f 	ldh	r2,-4(fp)
   1f4fc:	10001416 	blt	r2,zero,1f550 <alt_up_sd_card_get_attributes+0x74>
   1f500:	e0bfff0f 	ldh	r2,-4(fp)
   1f504:	10800508 	cmpgei	r2,r2,20
   1f508:	1000111e 	bne	r2,zero,1f550 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1f50c:	e0ffff0f 	ldh	r3,-4(fp)
   1f510:	00800274 	movhi	r2,9
   1f514:	109fe604 	addi	r2,r2,32664
   1f518:	180691ba 	slli	r3,r3,6
   1f51c:	10c5883a 	add	r2,r2,r3
   1f520:	10800f04 	addi	r2,r2,60
   1f524:	10800017 	ldw	r2,0(r2)
   1f528:	10000926 	beq	r2,zero,1f550 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1f52c:	e0ffff0f 	ldh	r3,-4(fp)
   1f530:	00800274 	movhi	r2,9
   1f534:	109fe604 	addi	r2,r2,32664
   1f538:	180691ba 	slli	r3,r3,6
   1f53c:	10c5883a 	add	r2,r2,r3
   1f540:	108002c4 	addi	r2,r2,11
   1f544:	10800003 	ldbu	r2,0(r2)
   1f548:	10803fcc 	andi	r2,r2,255
   1f54c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   1f550:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1f554:	e037883a 	mov	sp,fp
   1f558:	df000017 	ldw	fp,0(sp)
   1f55c:	dec00104 	addi	sp,sp,4
   1f560:	f800283a 	ret

0001f564 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1f564:	defffa04 	addi	sp,sp,-24
   1f568:	dfc00515 	stw	ra,20(sp)
   1f56c:	df000415 	stw	fp,16(sp)
   1f570:	df000404 	addi	fp,sp,16
   1f574:	2005883a 	mov	r2,r4
   1f578:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   1f57c:	00bfffc4 	movi	r2,-1
   1f580:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1f584:	e0bfff0f 	ldh	r2,-4(fp)
   1f588:	1000ce16 	blt	r2,zero,1f8c4 <alt_up_sd_card_read+0x360>
   1f58c:	e0bfff0f 	ldh	r2,-4(fp)
   1f590:	10800508 	cmpgei	r2,r2,20
   1f594:	1000cb1e 	bne	r2,zero,1f8c4 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   1f598:	e0ffff0f 	ldh	r3,-4(fp)
   1f59c:	00800274 	movhi	r2,9
   1f5a0:	109fe604 	addi	r2,r2,32664
   1f5a4:	180691ba 	slli	r3,r3,6
   1f5a8:	10c5883a 	add	r2,r2,r3
   1f5ac:	10800f04 	addi	r2,r2,60
   1f5b0:	10800017 	ldw	r2,0(r2)
   1f5b4:	1000c326 	beq	r2,zero,1f8c4 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1f5b8:	e0ffff0f 	ldh	r3,-4(fp)
   1f5bc:	00800274 	movhi	r2,9
   1f5c0:	109fe604 	addi	r2,r2,32664
   1f5c4:	180691ba 	slli	r3,r3,6
   1f5c8:	10c5883a 	add	r2,r2,r3
   1f5cc:	10800904 	addi	r2,r2,36
   1f5d0:	10c00017 	ldw	r3,0(r2)
   1f5d4:	e13fff0f 	ldh	r4,-4(fp)
   1f5d8:	00800274 	movhi	r2,9
   1f5dc:	109fe604 	addi	r2,r2,32664
   1f5e0:	200891ba 	slli	r4,r4,6
   1f5e4:	1105883a 	add	r2,r2,r4
   1f5e8:	10800604 	addi	r2,r2,24
   1f5ec:	10800017 	ldw	r2,0(r2)
   1f5f0:	1880b42e 	bgeu	r3,r2,1f8c4 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f5f4:	00800274 	movhi	r2,9
   1f5f8:	109fd104 	addi	r2,r2,32580
   1f5fc:	10c01417 	ldw	r3,80(r2)
   1f600:	e13fff0f 	ldh	r4,-4(fp)
   1f604:	00800274 	movhi	r2,9
   1f608:	109fe604 	addi	r2,r2,32664
   1f60c:	200891ba 	slli	r4,r4,6
   1f610:	1105883a 	add	r2,r2,r4
   1f614:	10800704 	addi	r2,r2,28
   1f618:	10800017 	ldw	r2,0(r2)
   1f61c:	113fff84 	addi	r4,r2,-2
   1f620:	00800274 	movhi	r2,9
   1f624:	109fd104 	addi	r2,r2,32580
   1f628:	10800383 	ldbu	r2,14(r2)
   1f62c:	10803fcc 	andi	r2,r2,255
   1f630:	2085383a 	mul	r2,r4,r2
   1f634:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   1f638:	e13fff0f 	ldh	r4,-4(fp)
   1f63c:	00800274 	movhi	r2,9
   1f640:	109fe604 	addi	r2,r2,32664
   1f644:	200891ba 	slli	r4,r4,6
   1f648:	1105883a 	add	r2,r2,r4
   1f64c:	10800804 	addi	r2,r2,32
   1f650:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f654:	1885883a 	add	r2,r3,r2
   1f658:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   1f65c:	e0ffff0f 	ldh	r3,-4(fp)
   1f660:	00800274 	movhi	r2,9
   1f664:	109fe604 	addi	r2,r2,32664
   1f668:	180691ba 	slli	r3,r3,6
   1f66c:	10c5883a 	add	r2,r2,r3
   1f670:	10800904 	addi	r2,r2,36
   1f674:	10800017 	ldw	r2,0(r2)
   1f678:	10006826 	beq	r2,zero,1f81c <alt_up_sd_card_read+0x2b8>
   1f67c:	e0ffff0f 	ldh	r3,-4(fp)
   1f680:	00800274 	movhi	r2,9
   1f684:	109fe604 	addi	r2,r2,32664
   1f688:	180691ba 	slli	r3,r3,6
   1f68c:	10c5883a 	add	r2,r2,r3
   1f690:	10800904 	addi	r2,r2,36
   1f694:	10800017 	ldw	r2,0(r2)
   1f698:	10807fcc 	andi	r2,r2,511
   1f69c:	10005f1e 	bne	r2,zero,1f81c <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1f6a0:	e0ffff0f 	ldh	r3,-4(fp)
   1f6a4:	00800274 	movhi	r2,9
   1f6a8:	109fe604 	addi	r2,r2,32664
   1f6ac:	180691ba 	slli	r3,r3,6
   1f6b0:	10c5883a 	add	r2,r2,r3
   1f6b4:	10800804 	addi	r2,r2,32
   1f6b8:	10c00017 	ldw	r3,0(r2)
   1f6bc:	00800274 	movhi	r2,9
   1f6c0:	109fd104 	addi	r2,r2,32580
   1f6c4:	10800383 	ldbu	r2,14(r2)
   1f6c8:	10803fcc 	andi	r2,r2,255
   1f6cc:	10bfffc4 	addi	r2,r2,-1
   1f6d0:	1880401e 	bne	r3,r2,1f7d4 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1f6d4:	e0ffff0f 	ldh	r3,-4(fp)
   1f6d8:	00800274 	movhi	r2,9
   1f6dc:	109fe604 	addi	r2,r2,32664
   1f6e0:	180691ba 	slli	r3,r3,6
   1f6e4:	10c5883a 	add	r2,r2,r3
   1f6e8:	10800704 	addi	r2,r2,28
   1f6ec:	10800017 	ldw	r2,0(r2)
   1f6f0:	e0fffe04 	addi	r3,fp,-8
   1f6f4:	180b883a 	mov	r5,r3
   1f6f8:	1009883a 	mov	r4,r2
   1f6fc:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1f700:	10003226 	beq	r2,zero,1f7cc <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1f704:	e0bffe0b 	ldhu	r2,-8(fp)
   1f708:	10bfffcc 	andi	r2,r2,65535
   1f70c:	10fffe0c 	andi	r3,r2,65528
   1f710:	00bffe14 	movui	r2,65528
   1f714:	1880021e 	bne	r3,r2,1f720 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   1f718:	00bfffc4 	movi	r2,-1
   1f71c:	00006a06 	br	1f8c8 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1f720:	e13fff0f 	ldh	r4,-4(fp)
   1f724:	e0bffe0b 	ldhu	r2,-8(fp)
   1f728:	10ffffcc 	andi	r3,r2,65535
   1f72c:	00800274 	movhi	r2,9
   1f730:	109fe604 	addi	r2,r2,32664
   1f734:	200891ba 	slli	r4,r4,6
   1f738:	1105883a 	add	r2,r2,r4
   1f73c:	10800704 	addi	r2,r2,28
   1f740:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1f744:	e0ffff0f 	ldh	r3,-4(fp)
   1f748:	00800274 	movhi	r2,9
   1f74c:	109fe604 	addi	r2,r2,32664
   1f750:	180691ba 	slli	r3,r3,6
   1f754:	10c5883a 	add	r2,r2,r3
   1f758:	10800804 	addi	r2,r2,32
   1f75c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f760:	00800274 	movhi	r2,9
   1f764:	109fd104 	addi	r2,r2,32580
   1f768:	10c01417 	ldw	r3,80(r2)
   1f76c:	e13fff0f 	ldh	r4,-4(fp)
   1f770:	00800274 	movhi	r2,9
   1f774:	109fe604 	addi	r2,r2,32664
   1f778:	200891ba 	slli	r4,r4,6
   1f77c:	1105883a 	add	r2,r2,r4
   1f780:	10800704 	addi	r2,r2,28
   1f784:	10800017 	ldw	r2,0(r2)
   1f788:	113fff84 	addi	r4,r2,-2
   1f78c:	00800274 	movhi	r2,9
   1f790:	109fd104 	addi	r2,r2,32580
   1f794:	10800383 	ldbu	r2,14(r2)
   1f798:	10803fcc 	andi	r2,r2,255
   1f79c:	2085383a 	mul	r2,r4,r2
   1f7a0:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1f7a4:	e13fff0f 	ldh	r4,-4(fp)
   1f7a8:	00800274 	movhi	r2,9
   1f7ac:	109fe604 	addi	r2,r2,32664
   1f7b0:	200891ba 	slli	r4,r4,6
   1f7b4:	1105883a 	add	r2,r2,r4
   1f7b8:	10800804 	addi	r2,r2,32
   1f7bc:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f7c0:	1885883a 	add	r2,r3,r2
   1f7c4:	e0bffd15 	stw	r2,-12(fp)
   1f7c8:	00001406 	br	1f81c <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   1f7cc:	00bfff84 	movi	r2,-2
   1f7d0:	00003d06 	br	1f8c8 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1f7d4:	e13fff0f 	ldh	r4,-4(fp)
   1f7d8:	e0ffff0f 	ldh	r3,-4(fp)
   1f7dc:	00800274 	movhi	r2,9
   1f7e0:	109fe604 	addi	r2,r2,32664
   1f7e4:	180691ba 	slli	r3,r3,6
   1f7e8:	10c5883a 	add	r2,r2,r3
   1f7ec:	10800804 	addi	r2,r2,32
   1f7f0:	10800017 	ldw	r2,0(r2)
   1f7f4:	10c00044 	addi	r3,r2,1
   1f7f8:	00800274 	movhi	r2,9
   1f7fc:	109fe604 	addi	r2,r2,32664
   1f800:	200891ba 	slli	r4,r4,6
   1f804:	1105883a 	add	r2,r2,r4
   1f808:	10800804 	addi	r2,r2,32
   1f80c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1f810:	e0bffd17 	ldw	r2,-12(fp)
   1f814:	10800044 	addi	r2,r2,1
   1f818:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1f81c:	d0e8e897 	ldw	r3,-23646(gp)
   1f820:	e0bffd17 	ldw	r2,-12(fp)
   1f824:	1885883a 	add	r2,r3,r2
   1f828:	1007883a 	mov	r3,r2
   1f82c:	d0a8ec97 	ldw	r2,-23630(gp)
   1f830:	18800726 	beq	r3,r2,1f850 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1f834:	d0a8e897 	ldw	r2,-23646(gp)
   1f838:	100b883a 	mov	r5,r2
   1f83c:	e13ffd17 	ldw	r4,-12(fp)
   1f840:	001bef00 	call	1bef0 <Read_Sector_Data>
   1f844:	1000021e 	bne	r2,zero,1f850 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   1f848:	00bfff84 	movi	r2,-2
   1f84c:	00001e06 	br	1f8c8 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   1f850:	d0e8e797 	ldw	r3,-23650(gp)
   1f854:	e13fff0f 	ldh	r4,-4(fp)
   1f858:	00800274 	movhi	r2,9
   1f85c:	109fe604 	addi	r2,r2,32664
   1f860:	200891ba 	slli	r4,r4,6
   1f864:	1105883a 	add	r2,r2,r4
   1f868:	10800904 	addi	r2,r2,36
   1f86c:	10800017 	ldw	r2,0(r2)
   1f870:	10807fcc 	andi	r2,r2,511
   1f874:	1885883a 	add	r2,r3,r2
   1f878:	10800023 	ldbuio	r2,0(r2)
   1f87c:	10803fcc 	andi	r2,r2,255
   1f880:	10803fcc 	andi	r2,r2,255
   1f884:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1f888:	e13fff0f 	ldh	r4,-4(fp)
   1f88c:	e0ffff0f 	ldh	r3,-4(fp)
   1f890:	00800274 	movhi	r2,9
   1f894:	109fe604 	addi	r2,r2,32664
   1f898:	180691ba 	slli	r3,r3,6
   1f89c:	10c5883a 	add	r2,r2,r3
   1f8a0:	10800904 	addi	r2,r2,36
   1f8a4:	10800017 	ldw	r2,0(r2)
   1f8a8:	10c00044 	addi	r3,r2,1
   1f8ac:	00800274 	movhi	r2,9
   1f8b0:	109fe604 	addi	r2,r2,32664
   1f8b4:	200891ba 	slli	r4,r4,6
   1f8b8:	1105883a 	add	r2,r2,r4
   1f8bc:	10800904 	addi	r2,r2,36
   1f8c0:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   1f8c4:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1f8c8:	e037883a 	mov	sp,fp
   1f8cc:	dfc00117 	ldw	ra,4(sp)
   1f8d0:	df000017 	ldw	fp,0(sp)
   1f8d4:	dec00204 	addi	sp,sp,8
   1f8d8:	f800283a 	ret

0001f8dc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1f8dc:	defff804 	addi	sp,sp,-32
   1f8e0:	dfc00715 	stw	ra,28(sp)
   1f8e4:	df000615 	stw	fp,24(sp)
   1f8e8:	df000604 	addi	fp,sp,24
   1f8ec:	2007883a 	mov	r3,r4
   1f8f0:	2805883a 	mov	r2,r5
   1f8f4:	e0fffe0d 	sth	r3,-8(fp)
   1f8f8:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   1f8fc:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1f900:	e0bffe0f 	ldh	r2,-8(fp)
   1f904:	10017716 	blt	r2,zero,1fee4 <alt_up_sd_card_write+0x608>
   1f908:	e0bffe0f 	ldh	r2,-8(fp)
   1f90c:	10800508 	cmpgei	r2,r2,20
   1f910:	1001741e 	bne	r2,zero,1fee4 <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
   1f914:	e0fffe0f 	ldh	r3,-8(fp)
   1f918:	00800274 	movhi	r2,9
   1f91c:	109fe604 	addi	r2,r2,32664
   1f920:	180691ba 	slli	r3,r3,6
   1f924:	10c5883a 	add	r2,r2,r3
   1f928:	10800f04 	addi	r2,r2,60
   1f92c:	10800017 	ldw	r2,0(r2)
   1f930:	10016c26 	beq	r2,zero,1fee4 <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f934:	00800274 	movhi	r2,9
   1f938:	109fd104 	addi	r2,r2,32580
   1f93c:	10c01417 	ldw	r3,80(r2)
   1f940:	e13ffe0f 	ldh	r4,-8(fp)
   1f944:	00800274 	movhi	r2,9
   1f948:	109fe604 	addi	r2,r2,32664
   1f94c:	200891ba 	slli	r4,r4,6
   1f950:	1105883a 	add	r2,r2,r4
   1f954:	10800704 	addi	r2,r2,28
   1f958:	10800017 	ldw	r2,0(r2)
   1f95c:	113fff84 	addi	r4,r2,-2
   1f960:	00800274 	movhi	r2,9
   1f964:	109fd104 	addi	r2,r2,32580
   1f968:	10800383 	ldbu	r2,14(r2)
   1f96c:	10803fcc 	andi	r2,r2,255
   1f970:	2085383a 	mul	r2,r4,r2
   1f974:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   1f978:	e13ffe0f 	ldh	r4,-8(fp)
   1f97c:	00800274 	movhi	r2,9
   1f980:	109fe604 	addi	r2,r2,32664
   1f984:	200891ba 	slli	r4,r4,6
   1f988:	1105883a 	add	r2,r2,r4
   1f98c:	10800804 	addi	r2,r2,32
   1f990:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1f994:	1885883a 	add	r2,r3,r2
   1f998:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   1f99c:	e0fffe0f 	ldh	r3,-8(fp)
   1f9a0:	00800274 	movhi	r2,9
   1f9a4:	109fe604 	addi	r2,r2,32664
   1f9a8:	180691ba 	slli	r3,r3,6
   1f9ac:	10c5883a 	add	r2,r2,r3
   1f9b0:	10800904 	addi	r2,r2,36
   1f9b4:	10c00017 	ldw	r3,0(r2)
   1f9b8:	00800274 	movhi	r2,9
   1f9bc:	109fd104 	addi	r2,r2,32580
   1f9c0:	1080030b 	ldhu	r2,12(r2)
   1f9c4:	10bfffcc 	andi	r2,r2,65535
   1f9c8:	1889203a 	divu	r4,r3,r2
   1f9cc:	2085383a 	mul	r2,r4,r2
   1f9d0:	1885c83a 	sub	r2,r3,r2
   1f9d4:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1f9d8:	e0fffe0f 	ldh	r3,-8(fp)
   1f9dc:	00800274 	movhi	r2,9
   1f9e0:	109fe604 	addi	r2,r2,32664
   1f9e4:	180691ba 	slli	r3,r3,6
   1f9e8:	10c5883a 	add	r2,r2,r3
   1f9ec:	10800904 	addi	r2,r2,36
   1f9f0:	10c00017 	ldw	r3,0(r2)
   1f9f4:	e13ffe0f 	ldh	r4,-8(fp)
   1f9f8:	00800274 	movhi	r2,9
   1f9fc:	109fe604 	addi	r2,r2,32664
   1fa00:	200891ba 	slli	r4,r4,6
   1fa04:	1105883a 	add	r2,r2,r4
   1fa08:	10800604 	addi	r2,r2,24
   1fa0c:	10800017 	ldw	r2,0(r2)
   1fa10:	1880672e 	bgeu	r3,r2,1fbb0 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1fa14:	e0fffe0f 	ldh	r3,-8(fp)
   1fa18:	00800274 	movhi	r2,9
   1fa1c:	109fe604 	addi	r2,r2,32664
   1fa20:	180691ba 	slli	r3,r3,6
   1fa24:	10c5883a 	add	r2,r2,r3
   1fa28:	10800904 	addi	r2,r2,36
   1fa2c:	10800017 	ldw	r2,0(r2)
   1fa30:	1000e126 	beq	r2,zero,1fdb8 <alt_up_sd_card_write+0x4dc>
   1fa34:	e0bffc0f 	ldh	r2,-16(fp)
   1fa38:	1000df1e 	bne	r2,zero,1fdb8 <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1fa3c:	e0fffe0f 	ldh	r3,-8(fp)
   1fa40:	00800274 	movhi	r2,9
   1fa44:	109fe604 	addi	r2,r2,32664
   1fa48:	180691ba 	slli	r3,r3,6
   1fa4c:	10c5883a 	add	r2,r2,r3
   1fa50:	10800804 	addi	r2,r2,32
   1fa54:	10c00017 	ldw	r3,0(r2)
   1fa58:	00800274 	movhi	r2,9
   1fa5c:	109fd104 	addi	r2,r2,32580
   1fa60:	10800383 	ldbu	r2,14(r2)
   1fa64:	10803fcc 	andi	r2,r2,255
   1fa68:	10bfffc4 	addi	r2,r2,-1
   1fa6c:	18803d1e 	bne	r3,r2,1fb64 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1fa70:	e0fffe0f 	ldh	r3,-8(fp)
   1fa74:	00800274 	movhi	r2,9
   1fa78:	109fe604 	addi	r2,r2,32664
   1fa7c:	180691ba 	slli	r3,r3,6
   1fa80:	10c5883a 	add	r2,r2,r3
   1fa84:	10800704 	addi	r2,r2,28
   1fa88:	10800017 	ldw	r2,0(r2)
   1fa8c:	e0fffc84 	addi	r3,fp,-14
   1fa90:	180b883a 	mov	r5,r3
   1fa94:	1009883a 	mov	r4,r2
   1fa98:	001bfc80 	call	1bfc8 <get_cluster_flag>
   1fa9c:	10002f26 	beq	r2,zero,1fb5c <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
   1faa0:	e0bffc8b 	ldhu	r2,-14(fp)
   1faa4:	10bfffcc 	andi	r2,r2,65535
   1faa8:	10bffe28 	cmpgeui	r2,r2,65528
   1faac:	1000c21e 	bne	r2,zero,1fdb8 <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1fab0:	e13ffe0f 	ldh	r4,-8(fp)
   1fab4:	e0bffc8b 	ldhu	r2,-14(fp)
   1fab8:	10ffffcc 	andi	r3,r2,65535
   1fabc:	00800274 	movhi	r2,9
   1fac0:	109fe604 	addi	r2,r2,32664
   1fac4:	200891ba 	slli	r4,r4,6
   1fac8:	1105883a 	add	r2,r2,r4
   1facc:	10800704 	addi	r2,r2,28
   1fad0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1fad4:	e0fffe0f 	ldh	r3,-8(fp)
   1fad8:	00800274 	movhi	r2,9
   1fadc:	109fe604 	addi	r2,r2,32664
   1fae0:	180691ba 	slli	r3,r3,6
   1fae4:	10c5883a 	add	r2,r2,r3
   1fae8:	10800804 	addi	r2,r2,32
   1faec:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1faf0:	00800274 	movhi	r2,9
   1faf4:	109fd104 	addi	r2,r2,32580
   1faf8:	10c01417 	ldw	r3,80(r2)
   1fafc:	e13ffe0f 	ldh	r4,-8(fp)
   1fb00:	00800274 	movhi	r2,9
   1fb04:	109fe604 	addi	r2,r2,32664
   1fb08:	200891ba 	slli	r4,r4,6
   1fb0c:	1105883a 	add	r2,r2,r4
   1fb10:	10800704 	addi	r2,r2,28
   1fb14:	10800017 	ldw	r2,0(r2)
   1fb18:	113fff84 	addi	r4,r2,-2
   1fb1c:	00800274 	movhi	r2,9
   1fb20:	109fd104 	addi	r2,r2,32580
   1fb24:	10800383 	ldbu	r2,14(r2)
   1fb28:	10803fcc 	andi	r2,r2,255
   1fb2c:	2085383a 	mul	r2,r4,r2
   1fb30:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1fb34:	e13ffe0f 	ldh	r4,-8(fp)
   1fb38:	00800274 	movhi	r2,9
   1fb3c:	109fe604 	addi	r2,r2,32664
   1fb40:	200891ba 	slli	r4,r4,6
   1fb44:	1105883a 	add	r2,r2,r4
   1fb48:	10800804 	addi	r2,r2,32
   1fb4c:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1fb50:	1885883a 	add	r2,r3,r2
   1fb54:	e0bffb15 	stw	r2,-20(fp)
   1fb58:	00009706 	br	1fdb8 <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   1fb5c:	0005883a 	mov	r2,zero
   1fb60:	0000e106 	br	1fee8 <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1fb64:	e13ffe0f 	ldh	r4,-8(fp)
   1fb68:	e0fffe0f 	ldh	r3,-8(fp)
   1fb6c:	00800274 	movhi	r2,9
   1fb70:	109fe604 	addi	r2,r2,32664
   1fb74:	180691ba 	slli	r3,r3,6
   1fb78:	10c5883a 	add	r2,r2,r3
   1fb7c:	10800804 	addi	r2,r2,32
   1fb80:	10800017 	ldw	r2,0(r2)
   1fb84:	10c00044 	addi	r3,r2,1
   1fb88:	00800274 	movhi	r2,9
   1fb8c:	109fe604 	addi	r2,r2,32664
   1fb90:	200891ba 	slli	r4,r4,6
   1fb94:	1105883a 	add	r2,r2,r4
   1fb98:	10800804 	addi	r2,r2,32
   1fb9c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1fba0:	e0bffb17 	ldw	r2,-20(fp)
   1fba4:	10800044 	addi	r2,r2,1
   1fba8:	e0bffb15 	stw	r2,-20(fp)
   1fbac:	00008206 	br	1fdb8 <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1fbb0:	e0fffe0f 	ldh	r3,-8(fp)
   1fbb4:	00800274 	movhi	r2,9
   1fbb8:	109fe604 	addi	r2,r2,32664
   1fbbc:	180691ba 	slli	r3,r3,6
   1fbc0:	10c5883a 	add	r2,r2,r3
   1fbc4:	10800904 	addi	r2,r2,36
   1fbc8:	10800017 	ldw	r2,0(r2)
   1fbcc:	10007a26 	beq	r2,zero,1fdb8 <alt_up_sd_card_write+0x4dc>
   1fbd0:	e0bffc0f 	ldh	r2,-16(fp)
   1fbd4:	1000781e 	bne	r2,zero,1fdb8 <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1fbd8:	e0fffe0f 	ldh	r3,-8(fp)
   1fbdc:	00800274 	movhi	r2,9
   1fbe0:	109fe604 	addi	r2,r2,32664
   1fbe4:	180691ba 	slli	r3,r3,6
   1fbe8:	10c5883a 	add	r2,r2,r3
   1fbec:	10800804 	addi	r2,r2,32
   1fbf0:	10c00017 	ldw	r3,0(r2)
   1fbf4:	00800274 	movhi	r2,9
   1fbf8:	109fd104 	addi	r2,r2,32580
   1fbfc:	10800383 	ldbu	r2,14(r2)
   1fc00:	10803fcc 	andi	r2,r2,255
   1fc04:	10bfffc4 	addi	r2,r2,-1
   1fc08:	18803e1e 	bne	r3,r2,1fd04 <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   1fc0c:	e0bffd04 	addi	r2,fp,-12
   1fc10:	1009883a 	mov	r4,r2
   1fc14:	001dfa40 	call	1dfa4 <find_first_empty_cluster>
   1fc18:	10003826 	beq	r2,zero,1fcfc <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   1fc1c:	e0fffe0f 	ldh	r3,-8(fp)
   1fc20:	00800274 	movhi	r2,9
   1fc24:	109fe604 	addi	r2,r2,32664
   1fc28:	180691ba 	slli	r3,r3,6
   1fc2c:	10c5883a 	add	r2,r2,r3
   1fc30:	10800704 	addi	r2,r2,28
   1fc34:	10800017 	ldw	r2,0(r2)
   1fc38:	e0fffd17 	ldw	r3,-12(fp)
   1fc3c:	18ffffcc 	andi	r3,r3,65535
   1fc40:	18e0001c 	xori	r3,r3,32768
   1fc44:	18e00004 	addi	r3,r3,-32768
   1fc48:	01800044 	movi	r6,1
   1fc4c:	180b883a 	mov	r5,r3
   1fc50:	1009883a 	mov	r4,r2
   1fc54:	001c07c0 	call	1c07c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   1fc58:	e0bffd17 	ldw	r2,-12(fp)
   1fc5c:	01800044 	movi	r6,1
   1fc60:	017fffc4 	movi	r5,-1
   1fc64:	1009883a 	mov	r4,r2
   1fc68:	001c07c0 	call	1c07c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   1fc6c:	e0fffe0f 	ldh	r3,-8(fp)
   1fc70:	00800274 	movhi	r2,9
   1fc74:	109fe604 	addi	r2,r2,32664
   1fc78:	180691ba 	slli	r3,r3,6
   1fc7c:	10c5883a 	add	r2,r2,r3
   1fc80:	10800704 	addi	r2,r2,28
   1fc84:	10800017 	ldw	r2,0(r2)
   1fc88:	e0fffd17 	ldw	r3,-12(fp)
   1fc8c:	18ffffcc 	andi	r3,r3,65535
   1fc90:	18e0001c 	xori	r3,r3,32768
   1fc94:	18e00004 	addi	r3,r3,-32768
   1fc98:	000d883a 	mov	r6,zero
   1fc9c:	180b883a 	mov	r5,r3
   1fca0:	1009883a 	mov	r4,r2
   1fca4:	001c07c0 	call	1c07c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   1fca8:	e0bffd17 	ldw	r2,-12(fp)
   1fcac:	000d883a 	mov	r6,zero
   1fcb0:	017fffc4 	movi	r5,-1
   1fcb4:	1009883a 	mov	r4,r2
   1fcb8:	001c07c0 	call	1c07c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   1fcbc:	e13ffe0f 	ldh	r4,-8(fp)
   1fcc0:	e0fffd17 	ldw	r3,-12(fp)
   1fcc4:	00800274 	movhi	r2,9
   1fcc8:	109fe604 	addi	r2,r2,32664
   1fccc:	200891ba 	slli	r4,r4,6
   1fcd0:	1105883a 	add	r2,r2,r4
   1fcd4:	10800704 	addi	r2,r2,28
   1fcd8:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1fcdc:	e0fffe0f 	ldh	r3,-8(fp)
   1fce0:	00800274 	movhi	r2,9
   1fce4:	109fe604 	addi	r2,r2,32664
   1fce8:	180691ba 	slli	r3,r3,6
   1fcec:	10c5883a 	add	r2,r2,r3
   1fcf0:	10800804 	addi	r2,r2,32
   1fcf4:	10000015 	stw	zero,0(r2)
   1fcf8:	00001506 	br	1fd50 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
   1fcfc:	0005883a 	mov	r2,zero
   1fd00:	00007906 	br	1fee8 <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   1fd04:	e13ffe0f 	ldh	r4,-8(fp)
   1fd08:	e0fffe0f 	ldh	r3,-8(fp)
   1fd0c:	00800274 	movhi	r2,9
   1fd10:	109fe604 	addi	r2,r2,32664
   1fd14:	180691ba 	slli	r3,r3,6
   1fd18:	10c5883a 	add	r2,r2,r3
   1fd1c:	10800904 	addi	r2,r2,36
   1fd20:	10c00017 	ldw	r3,0(r2)
   1fd24:	00800274 	movhi	r2,9
   1fd28:	109fd104 	addi	r2,r2,32580
   1fd2c:	1080030b 	ldhu	r2,12(r2)
   1fd30:	10bfffcc 	andi	r2,r2,65535
   1fd34:	1887203a 	divu	r3,r3,r2
   1fd38:	00800274 	movhi	r2,9
   1fd3c:	109fe604 	addi	r2,r2,32664
   1fd40:	200891ba 	slli	r4,r4,6
   1fd44:	1105883a 	add	r2,r2,r4
   1fd48:	10800804 	addi	r2,r2,32
   1fd4c:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1fd50:	00800274 	movhi	r2,9
   1fd54:	109fd104 	addi	r2,r2,32580
   1fd58:	10c01417 	ldw	r3,80(r2)
   1fd5c:	e13ffe0f 	ldh	r4,-8(fp)
   1fd60:	00800274 	movhi	r2,9
   1fd64:	109fe604 	addi	r2,r2,32664
   1fd68:	200891ba 	slli	r4,r4,6
   1fd6c:	1105883a 	add	r2,r2,r4
   1fd70:	10800704 	addi	r2,r2,28
   1fd74:	10800017 	ldw	r2,0(r2)
   1fd78:	113fff84 	addi	r4,r2,-2
   1fd7c:	00800274 	movhi	r2,9
   1fd80:	109fd104 	addi	r2,r2,32580
   1fd84:	10800383 	ldbu	r2,14(r2)
   1fd88:	10803fcc 	andi	r2,r2,255
   1fd8c:	2085383a 	mul	r2,r4,r2
   1fd90:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   1fd94:	e13ffe0f 	ldh	r4,-8(fp)
   1fd98:	00800274 	movhi	r2,9
   1fd9c:	109fe604 	addi	r2,r2,32664
   1fda0:	200891ba 	slli	r4,r4,6
   1fda4:	1105883a 	add	r2,r2,r4
   1fda8:	10800804 	addi	r2,r2,32
   1fdac:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1fdb0:	1885883a 	add	r2,r3,r2
   1fdb4:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   1fdb8:	d0e8e897 	ldw	r3,-23646(gp)
   1fdbc:	e0bffb17 	ldw	r2,-20(fp)
   1fdc0:	1885883a 	add	r2,r3,r2
   1fdc4:	1007883a 	mov	r3,r2
   1fdc8:	d0a8ec97 	ldw	r2,-23630(gp)
   1fdcc:	18800726 	beq	r3,r2,1fdec <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1fdd0:	d0a8e897 	ldw	r2,-23646(gp)
   1fdd4:	100b883a 	mov	r5,r2
   1fdd8:	e13ffb17 	ldw	r4,-20(fp)
   1fddc:	001bef00 	call	1bef0 <Read_Sector_Data>
   1fde0:	1000021e 	bne	r2,zero,1fdec <alt_up_sd_card_write+0x510>
                {
					return false;
   1fde4:	0005883a 	mov	r2,zero
   1fde8:	00003f06 	br	1fee8 <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   1fdec:	d0e8e797 	ldw	r3,-23650(gp)
   1fdf0:	e0bffc0f 	ldh	r2,-16(fp)
   1fdf4:	1885883a 	add	r2,r3,r2
   1fdf8:	e0ffff07 	ldb	r3,-4(fp)
   1fdfc:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1fe00:	e13ffe0f 	ldh	r4,-8(fp)
   1fe04:	e0fffe0f 	ldh	r3,-8(fp)
   1fe08:	00800274 	movhi	r2,9
   1fe0c:	109fe604 	addi	r2,r2,32664
   1fe10:	180691ba 	slli	r3,r3,6
   1fe14:	10c5883a 	add	r2,r2,r3
   1fe18:	10800904 	addi	r2,r2,36
   1fe1c:	10800017 	ldw	r2,0(r2)
   1fe20:	10c00044 	addi	r3,r2,1
   1fe24:	00800274 	movhi	r2,9
   1fe28:	109fe604 	addi	r2,r2,32664
   1fe2c:	200891ba 	slli	r4,r4,6
   1fe30:	1105883a 	add	r2,r2,r4
   1fe34:	10800904 	addi	r2,r2,36
   1fe38:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   1fe3c:	e0fffe0f 	ldh	r3,-8(fp)
   1fe40:	00800274 	movhi	r2,9
   1fe44:	109fe604 	addi	r2,r2,32664
   1fe48:	180691ba 	slli	r3,r3,6
   1fe4c:	10c5883a 	add	r2,r2,r3
   1fe50:	10800904 	addi	r2,r2,36
   1fe54:	10c00017 	ldw	r3,0(r2)
   1fe58:	e13ffe0f 	ldh	r4,-8(fp)
   1fe5c:	00800274 	movhi	r2,9
   1fe60:	109fe604 	addi	r2,r2,32664
   1fe64:	200891ba 	slli	r4,r4,6
   1fe68:	1105883a 	add	r2,r2,r4
   1fe6c:	10800604 	addi	r2,r2,24
   1fe70:	10800017 	ldw	r2,0(r2)
   1fe74:	18801736 	bltu	r3,r2,1fed4 <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   1fe78:	e13ffe0f 	ldh	r4,-8(fp)
   1fe7c:	e0fffe0f 	ldh	r3,-8(fp)
   1fe80:	00800274 	movhi	r2,9
   1fe84:	109fe604 	addi	r2,r2,32664
   1fe88:	180691ba 	slli	r3,r3,6
   1fe8c:	10c5883a 	add	r2,r2,r3
   1fe90:	10800604 	addi	r2,r2,24
   1fe94:	10800017 	ldw	r2,0(r2)
   1fe98:	10c00044 	addi	r3,r2,1
   1fe9c:	00800274 	movhi	r2,9
   1fea0:	109fe604 	addi	r2,r2,32664
   1fea4:	200891ba 	slli	r4,r4,6
   1fea8:	1105883a 	add	r2,r2,r4
   1feac:	10800604 	addi	r2,r2,24
   1feb0:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   1feb4:	e0fffe0f 	ldh	r3,-8(fp)
   1feb8:	00800274 	movhi	r2,9
   1febc:	109fe604 	addi	r2,r2,32664
   1fec0:	180691ba 	slli	r3,r3,6
   1fec4:	10c5883a 	add	r2,r2,r3
   1fec8:	10800e04 	addi	r2,r2,56
   1fecc:	00c00044 	movi	r3,1
   1fed0:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   1fed4:	00800044 	movi	r2,1
   1fed8:	d0a8eb95 	stw	r2,-23634(gp)
			result = true;
   1fedc:	00800044 	movi	r2,1
   1fee0:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   1fee4:	e0bffa17 	ldw	r2,-24(fp)
}
   1fee8:	e037883a 	mov	sp,fp
   1feec:	dfc00117 	ldw	ra,4(sp)
   1fef0:	df000017 	ldw	fp,0(sp)
   1fef4:	dec00204 	addi	sp,sp,8
   1fef8:	f800283a 	ret

0001fefc <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   1fefc:	defffb04 	addi	sp,sp,-20
   1ff00:	dfc00415 	stw	ra,16(sp)
   1ff04:	df000315 	stw	fp,12(sp)
   1ff08:	df000304 	addi	fp,sp,12
   1ff0c:	2005883a 	mov	r2,r4
   1ff10:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   1ff14:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1ff18:	001eb200 	call	1eb20 <alt_up_sd_card_is_Present>
   1ff1c:	10006026 	beq	r2,zero,200a0 <alt_up_sd_card_fclose+0x1a4>
   1ff20:	d0a8e197 	ldw	r2,-23674(gp)
   1ff24:	10005e26 	beq	r2,zero,200a0 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   1ff28:	e0ffff0f 	ldh	r3,-4(fp)
   1ff2c:	00800274 	movhi	r2,9
   1ff30:	109fe604 	addi	r2,r2,32664
   1ff34:	180691ba 	slli	r3,r3,6
   1ff38:	10c5883a 	add	r2,r2,r3
   1ff3c:	10800f04 	addi	r2,r2,60
   1ff40:	10800017 	ldw	r2,0(r2)
   1ff44:	10005626 	beq	r2,zero,200a0 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   1ff48:	e0ffff0f 	ldh	r3,-4(fp)
   1ff4c:	00800274 	movhi	r2,9
   1ff50:	109fe604 	addi	r2,r2,32664
   1ff54:	180691ba 	slli	r3,r3,6
   1ff58:	10c5883a 	add	r2,r2,r3
   1ff5c:	10800e04 	addi	r2,r2,56
   1ff60:	10800017 	ldw	r2,0(r2)
   1ff64:	10004526 	beq	r2,zero,2007c <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   1ff68:	e0ffff0f 	ldh	r3,-4(fp)
   1ff6c:	00800274 	movhi	r2,9
   1ff70:	109fe604 	addi	r2,r2,32664
   1ff74:	180691ba 	slli	r3,r3,6
   1ff78:	10c5883a 	add	r2,r2,r3
   1ff7c:	10800b04 	addi	r2,r2,44
   1ff80:	10800017 	ldw	r2,0(r2)
   1ff84:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   1ff88:	e0ffff0f 	ldh	r3,-4(fp)
   1ff8c:	00800274 	movhi	r2,9
   1ff90:	109fe604 	addi	r2,r2,32664
   1ff94:	180691ba 	slli	r3,r3,6
   1ff98:	10c5883a 	add	r2,r2,r3
   1ff9c:	10800a04 	addi	r2,r2,40
   1ffa0:	10800017 	ldw	r2,0(r2)
   1ffa4:	1000071e 	bne	r2,zero,1ffc4 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   1ffa8:	00800274 	movhi	r2,9
   1ffac:	109fd104 	addi	r2,r2,32580
   1ffb0:	10801317 	ldw	r2,76(r2)
   1ffb4:	e0fffe17 	ldw	r3,-8(fp)
   1ffb8:	1885883a 	add	r2,r3,r2
   1ffbc:	e0bffe15 	stw	r2,-8(fp)
   1ffc0:	00001406 	br	20014 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1ffc4:	00800274 	movhi	r2,9
   1ffc8:	109fd104 	addi	r2,r2,32580
   1ffcc:	10c01417 	ldw	r3,80(r2)
   1ffd0:	e0bffe17 	ldw	r2,-8(fp)
   1ffd4:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   1ffd8:	e13fff0f 	ldh	r4,-4(fp)
   1ffdc:	00800274 	movhi	r2,9
   1ffe0:	109fe604 	addi	r2,r2,32664
   1ffe4:	200891ba 	slli	r4,r4,6
   1ffe8:	1105883a 	add	r2,r2,r4
   1ffec:	10800a04 	addi	r2,r2,40
   1fff0:	10800017 	ldw	r2,0(r2)
   1fff4:	113fff84 	addi	r4,r2,-2
   1fff8:	00800274 	movhi	r2,9
   1fffc:	109fd104 	addi	r2,r2,32580
   20000:	10800383 	ldbu	r2,14(r2)
   20004:	10803fcc 	andi	r2,r2,255
   20008:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   2000c:	1885883a 	add	r2,r3,r2
   20010:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   20014:	e0bffe17 	ldw	r2,-8(fp)
   20018:	d0e8e897 	ldw	r3,-23646(gp)
   2001c:	180b883a 	mov	r5,r3
   20020:	1009883a 	mov	r4,r2
   20024:	001bef00 	call	1bef0 <Read_Sector_Data>
   20028:	10001426 	beq	r2,zero,2007c <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   2002c:	e0ffff0f 	ldh	r3,-4(fp)
   20030:	00800274 	movhi	r2,9
   20034:	109fe604 	addi	r2,r2,32664
   20038:	180691ba 	slli	r3,r3,6
   2003c:	10c5883a 	add	r2,r2,r3
   20040:	10800c04 	addi	r2,r2,48
   20044:	1080000b 	ldhu	r2,0(r2)
   20048:	113fffcc 	andi	r4,r2,65535
   2004c:	2120001c 	xori	r4,r4,32768
   20050:	21200004 	addi	r4,r4,-32768
   20054:	e0bfff0f 	ldh	r2,-4(fp)
   20058:	100691ba 	slli	r3,r2,6
   2005c:	00800274 	movhi	r2,9
   20060:	109fe604 	addi	r2,r2,32664
   20064:	1885883a 	add	r2,r3,r2
   20068:	100b883a 	mov	r5,r2
   2006c:	001c57c0 	call	1c57c <Write_File_Record_At_Offset>
   20070:	10000226 	beq	r2,zero,2007c <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   20074:	001bea40 	call	1bea4 <Save_Modified_Sector>
   20078:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   2007c:	e0ffff0f 	ldh	r3,-4(fp)
   20080:	00800274 	movhi	r2,9
   20084:	109fe604 	addi	r2,r2,32664
   20088:	180691ba 	slli	r3,r3,6
   2008c:	10c5883a 	add	r2,r2,r3
   20090:	10800f04 	addi	r2,r2,60
   20094:	10000015 	stw	zero,0(r2)
			result = true;
   20098:	00800044 	movi	r2,1
   2009c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   200a0:	e0bffd17 	ldw	r2,-12(fp)
}
   200a4:	e037883a 	mov	sp,fp
   200a8:	dfc00117 	ldw	ra,4(sp)
   200ac:	df000017 	ldw	fp,0(sp)
   200b0:	dec00204 	addi	sp,sp,8
   200b4:	f800283a 	ret

000200b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   200b8:	defffa04 	addi	sp,sp,-24
   200bc:	dfc00515 	stw	ra,20(sp)
   200c0:	df000415 	stw	fp,16(sp)
   200c4:	df000404 	addi	fp,sp,16
   200c8:	e13ffd15 	stw	r4,-12(fp)
   200cc:	e17ffe15 	stw	r5,-8(fp)
   200d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   200d4:	e0bffd17 	ldw	r2,-12(fp)
   200d8:	10800017 	ldw	r2,0(r2)
   200dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   200e0:	e0bffc17 	ldw	r2,-16(fp)
   200e4:	10c00a04 	addi	r3,r2,40
   200e8:	e0bffd17 	ldw	r2,-12(fp)
   200ec:	10800217 	ldw	r2,8(r2)
   200f0:	100f883a 	mov	r7,r2
   200f4:	e1bfff17 	ldw	r6,-4(fp)
   200f8:	e17ffe17 	ldw	r5,-8(fp)
   200fc:	1809883a 	mov	r4,r3
   20100:	002085c0 	call	2085c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20104:	e037883a 	mov	sp,fp
   20108:	dfc00117 	ldw	ra,4(sp)
   2010c:	df000017 	ldw	fp,0(sp)
   20110:	dec00204 	addi	sp,sp,8
   20114:	f800283a 	ret

00020118 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20118:	defffa04 	addi	sp,sp,-24
   2011c:	dfc00515 	stw	ra,20(sp)
   20120:	df000415 	stw	fp,16(sp)
   20124:	df000404 	addi	fp,sp,16
   20128:	e13ffd15 	stw	r4,-12(fp)
   2012c:	e17ffe15 	stw	r5,-8(fp)
   20130:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	10800017 	ldw	r2,0(r2)
   2013c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20140:	e0bffc17 	ldw	r2,-16(fp)
   20144:	10c00a04 	addi	r3,r2,40
   20148:	e0bffd17 	ldw	r2,-12(fp)
   2014c:	10800217 	ldw	r2,8(r2)
   20150:	100f883a 	mov	r7,r2
   20154:	e1bfff17 	ldw	r6,-4(fp)
   20158:	e17ffe17 	ldw	r5,-8(fp)
   2015c:	1809883a 	mov	r4,r3
   20160:	0020b180 	call	20b18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20164:	e037883a 	mov	sp,fp
   20168:	dfc00117 	ldw	ra,4(sp)
   2016c:	df000017 	ldw	fp,0(sp)
   20170:	dec00204 	addi	sp,sp,8
   20174:	f800283a 	ret

00020178 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   20178:	defffc04 	addi	sp,sp,-16
   2017c:	dfc00315 	stw	ra,12(sp)
   20180:	df000215 	stw	fp,8(sp)
   20184:	df000204 	addi	fp,sp,8
   20188:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2018c:	e0bfff17 	ldw	r2,-4(fp)
   20190:	10800017 	ldw	r2,0(r2)
   20194:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20198:	e0bffe17 	ldw	r2,-8(fp)
   2019c:	10c00a04 	addi	r3,r2,40
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	10800217 	ldw	r2,8(r2)
   201a8:	100b883a 	mov	r5,r2
   201ac:	1809883a 	mov	r4,r3
   201b0:	00207040 	call	20704 <altera_avalon_jtag_uart_close>
}
   201b4:	e037883a 	mov	sp,fp
   201b8:	dfc00117 	ldw	ra,4(sp)
   201bc:	df000017 	ldw	fp,0(sp)
   201c0:	dec00204 	addi	sp,sp,8
   201c4:	f800283a 	ret

000201c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   201c8:	defffa04 	addi	sp,sp,-24
   201cc:	dfc00515 	stw	ra,20(sp)
   201d0:	df000415 	stw	fp,16(sp)
   201d4:	df000404 	addi	fp,sp,16
   201d8:	e13ffd15 	stw	r4,-12(fp)
   201dc:	e17ffe15 	stw	r5,-8(fp)
   201e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   201e4:	e0bffd17 	ldw	r2,-12(fp)
   201e8:	10800017 	ldw	r2,0(r2)
   201ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   201f0:	e0bffc17 	ldw	r2,-16(fp)
   201f4:	10800a04 	addi	r2,r2,40
   201f8:	e1bfff17 	ldw	r6,-4(fp)
   201fc:	e17ffe17 	ldw	r5,-8(fp)
   20200:	1009883a 	mov	r4,r2
   20204:	002076c0 	call	2076c <altera_avalon_jtag_uart_ioctl>
}
   20208:	e037883a 	mov	sp,fp
   2020c:	dfc00117 	ldw	ra,4(sp)
   20210:	df000017 	ldw	fp,0(sp)
   20214:	dec00204 	addi	sp,sp,8
   20218:	f800283a 	ret

0002021c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2021c:	defff204 	addi	sp,sp,-56
   20220:	dfc00d15 	stw	ra,52(sp)
   20224:	df000c15 	stw	fp,48(sp)
   20228:	df000c04 	addi	fp,sp,48
   2022c:	e13ff915 	stw	r4,-28(fp)
   20230:	e17ffa15 	stw	r5,-24(fp)
   20234:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   20238:	e0bff917 	ldw	r2,-28(fp)
   2023c:	10800c04 	addi	r2,r2,48
   20240:	e0bff415 	stw	r2,-48(fp)
   20244:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   20248:	e0bff80b 	ldhu	r2,-32(fp)
   2024c:	e0fff884 	addi	r3,fp,-30
   20250:	180b883a 	mov	r5,r3
   20254:	1009883a 	mov	r4,r2
   20258:	001562c0 	call	1562c <OSFlagCreate>
   2025c:	1007883a 	mov	r3,r2
   20260:	e0bff417 	ldw	r2,-48(fp)
   20264:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   20268:	e0bff917 	ldw	r2,-28(fp)
   2026c:	10800a04 	addi	r2,r2,40
   20270:	e0bff515 	stw	r2,-44(fp)
   20274:	00800044 	movi	r2,1
   20278:	e0bff78d 	sth	r2,-34(fp)
   2027c:	e0bff78b 	ldhu	r2,-34(fp)
   20280:	1009883a 	mov	r4,r2
   20284:	0018e080 	call	18e08 <OSSemCreate>
   20288:	1007883a 	mov	r3,r2
   2028c:	e0bff517 	ldw	r2,-44(fp)
   20290:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   20294:	e0bff917 	ldw	r2,-28(fp)
   20298:	10800b04 	addi	r2,r2,44
   2029c:	e0bff615 	stw	r2,-40(fp)
   202a0:	00800044 	movi	r2,1
   202a4:	e0bff70d 	sth	r2,-36(fp)
   202a8:	e0bff70b 	ldhu	r2,-36(fp)
   202ac:	1009883a 	mov	r4,r2
   202b0:	0018e080 	call	18e08 <OSSemCreate>
   202b4:	1007883a 	mov	r3,r2
   202b8:	e0bff617 	ldw	r2,-40(fp)
   202bc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   202c0:	e0bff917 	ldw	r2,-28(fp)
   202c4:	00c00044 	movi	r3,1
   202c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   202cc:	e0bff917 	ldw	r2,-28(fp)
   202d0:	10800017 	ldw	r2,0(r2)
   202d4:	10800104 	addi	r2,r2,4
   202d8:	1007883a 	mov	r3,r2
   202dc:	e0bff917 	ldw	r2,-28(fp)
   202e0:	10800817 	ldw	r2,32(r2)
   202e4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   202e8:	e0bffb17 	ldw	r2,-20(fp)
   202ec:	018000b4 	movhi	r6,2
   202f0:	3180d604 	addi	r6,r6,856
   202f4:	e17ff917 	ldw	r5,-28(fp)
   202f8:	1009883a 	mov	r4,r2
   202fc:	00234000 	call	23400 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20300:	e0bff917 	ldw	r2,-28(fp)
   20304:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20308:	e0bff917 	ldw	r2,-28(fp)
   2030c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20310:	d0e8ef97 	ldw	r3,-23618(gp)
   20314:	e1fff917 	ldw	r7,-28(fp)
   20318:	018000b4 	movhi	r6,2
   2031c:	31818004 	addi	r6,r6,1536
   20320:	180b883a 	mov	r5,r3
   20324:	1009883a 	mov	r4,r2
   20328:	0022f100 	call	22f10 <alt_alarm_start>
   2032c:	1000040e 	bge	r2,zero,20340 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20330:	e0fff917 	ldw	r3,-28(fp)
   20334:	00a00034 	movhi	r2,32768
   20338:	10bfffc4 	addi	r2,r2,-1
   2033c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20340:	0001883a 	nop
   20344:	e037883a 	mov	sp,fp
   20348:	dfc00117 	ldw	ra,4(sp)
   2034c:	df000017 	ldw	fp,0(sp)
   20350:	dec00204 	addi	sp,sp,8
   20354:	f800283a 	ret

00020358 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20358:	defff104 	addi	sp,sp,-60
   2035c:	dfc00e15 	stw	ra,56(sp)
   20360:	df000d15 	stw	fp,52(sp)
   20364:	df000d04 	addi	fp,sp,52
   20368:	e13ffe15 	stw	r4,-8(fp)
   2036c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20370:	e0bffe17 	ldw	r2,-8(fp)
   20374:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   20378:	e0bff517 	ldw	r2,-44(fp)
   2037c:	10800017 	ldw	r2,0(r2)
   20380:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20384:	e0bff617 	ldw	r2,-40(fp)
   20388:	10800104 	addi	r2,r2,4
   2038c:	10800037 	ldwio	r2,0(r2)
   20390:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20394:	e0bff717 	ldw	r2,-36(fp)
   20398:	1080c00c 	andi	r2,r2,768
   2039c:	10009126 	beq	r2,zero,205e4 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   203a0:	e0bff717 	ldw	r2,-36(fp)
   203a4:	1080400c 	andi	r2,r2,256
   203a8:	10004726 	beq	r2,zero,204c8 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   203ac:	00800074 	movhi	r2,1
   203b0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   203b4:	e0bff517 	ldw	r2,-44(fp)
   203b8:	10800d17 	ldw	r2,52(r2)
   203bc:	10800044 	addi	r2,r2,1
   203c0:	1081ffcc 	andi	r2,r2,2047
   203c4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   203c8:	e0bff517 	ldw	r2,-44(fp)
   203cc:	10c00e17 	ldw	r3,56(r2)
   203d0:	e0bff817 	ldw	r2,-32(fp)
   203d4:	18802726 	beq	r3,r2,20474 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   203d8:	e0bff617 	ldw	r2,-40(fp)
   203dc:	10800037 	ldwio	r2,0(r2)
   203e0:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   203e4:	e0bff317 	ldw	r2,-52(fp)
   203e8:	10a0000c 	andi	r2,r2,32768
   203ec:	10002326 	beq	r2,zero,2047c <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   203f0:	e0bff517 	ldw	r2,-44(fp)
   203f4:	10800d17 	ldw	r2,52(r2)
   203f8:	e0fff317 	ldw	r3,-52(fp)
   203fc:	1809883a 	mov	r4,r3
   20400:	e0fff517 	ldw	r3,-44(fp)
   20404:	1885883a 	add	r2,r3,r2
   20408:	10801104 	addi	r2,r2,68
   2040c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20410:	e0bff517 	ldw	r2,-44(fp)
   20414:	10800d17 	ldw	r2,52(r2)
   20418:	10800044 	addi	r2,r2,1
   2041c:	10c1ffcc 	andi	r3,r2,2047
   20420:	e0bff517 	ldw	r2,-44(fp)
   20424:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   20428:	e0bff517 	ldw	r2,-44(fp)
   2042c:	10800c17 	ldw	r2,48(r2)
   20430:	e0bffa15 	stw	r2,-24(fp)
   20434:	00800044 	movi	r2,1
   20438:	e0bffb0d 	sth	r2,-20(fp)
   2043c:	00800044 	movi	r2,1
   20440:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   20444:	d0a8ccc3 	ldbu	r2,-23757(gp)
   20448:	10803fcc 	andi	r2,r2,255
   2044c:	103fd926 	beq	r2,zero,203b4 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   20450:	e0bffb0b 	ldhu	r2,-20(fp)
   20454:	e0fffb83 	ldbu	r3,-18(fp)
   20458:	e13ffcc4 	addi	r4,fp,-13
   2045c:	200f883a 	mov	r7,r4
   20460:	180d883a 	mov	r6,r3
   20464:	100b883a 	mov	r5,r2
   20468:	e13ffa17 	ldw	r4,-24(fp)
   2046c:	00162080 	call	16208 <OSFlagPost>
      }
   20470:	003fd006 	br	203b4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   20474:	0001883a 	nop
   20478:	00000106 	br	20480 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2047c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20480:	e0bff317 	ldw	r2,-52(fp)
   20484:	10bfffec 	andhi	r2,r2,65535
   20488:	10000f26 	beq	r2,zero,204c8 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2048c:	e0bff517 	ldw	r2,-44(fp)
   20490:	10c00817 	ldw	r3,32(r2)
   20494:	00bfff84 	movi	r2,-2
   20498:	1886703a 	and	r3,r3,r2
   2049c:	e0bff517 	ldw	r2,-44(fp)
   204a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   204a4:	e0bff617 	ldw	r2,-40(fp)
   204a8:	10800104 	addi	r2,r2,4
   204ac:	1007883a 	mov	r3,r2
   204b0:	e0bff517 	ldw	r2,-44(fp)
   204b4:	10800817 	ldw	r2,32(r2)
   204b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   204bc:	e0bff617 	ldw	r2,-40(fp)
   204c0:	10800104 	addi	r2,r2,4
   204c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   204c8:	e0bff717 	ldw	r2,-36(fp)
   204cc:	1080800c 	andi	r2,r2,512
   204d0:	103fac26 	beq	r2,zero,20384 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   204d4:	e0bff717 	ldw	r2,-36(fp)
   204d8:	1004d43a 	srli	r2,r2,16
   204dc:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   204e0:	00002606 	br	2057c <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   204e4:	e0bff617 	ldw	r2,-40(fp)
   204e8:	e0fff517 	ldw	r3,-44(fp)
   204ec:	18c01017 	ldw	r3,64(r3)
   204f0:	e13ff517 	ldw	r4,-44(fp)
   204f4:	20c7883a 	add	r3,r4,r3
   204f8:	18c21104 	addi	r3,r3,2116
   204fc:	18c00003 	ldbu	r3,0(r3)
   20500:	18c03fcc 	andi	r3,r3,255
   20504:	18c0201c 	xori	r3,r3,128
   20508:	18ffe004 	addi	r3,r3,-128
   2050c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20510:	e0bff517 	ldw	r2,-44(fp)
   20514:	10801017 	ldw	r2,64(r2)
   20518:	10800044 	addi	r2,r2,1
   2051c:	10c1ffcc 	andi	r3,r2,2047
   20520:	e0bff517 	ldw	r2,-44(fp)
   20524:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   20528:	e0bff517 	ldw	r2,-44(fp)
   2052c:	10800c17 	ldw	r2,48(r2)
   20530:	e0bff915 	stw	r2,-28(fp)
   20534:	00800084 	movi	r2,2
   20538:	e0bffc0d 	sth	r2,-16(fp)
   2053c:	00800044 	movi	r2,1
   20540:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   20544:	d0a8ccc3 	ldbu	r2,-23757(gp)
   20548:	10803fcc 	andi	r2,r2,255
   2054c:	10000826 	beq	r2,zero,20570 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   20550:	e0bffc0b 	ldhu	r2,-16(fp)
   20554:	e0fffc83 	ldbu	r3,-14(fp)
   20558:	e13ffd04 	addi	r4,fp,-12
   2055c:	200f883a 	mov	r7,r4
   20560:	180d883a 	mov	r6,r3
   20564:	100b883a 	mov	r5,r2
   20568:	e13ff917 	ldw	r4,-28(fp)
   2056c:	00162080 	call	16208 <OSFlagPost>

        space--;
   20570:	e0bff417 	ldw	r2,-48(fp)
   20574:	10bfffc4 	addi	r2,r2,-1
   20578:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2057c:	e0bff417 	ldw	r2,-48(fp)
   20580:	10000526 	beq	r2,zero,20598 <altera_avalon_jtag_uart_irq+0x240>
   20584:	e0bff517 	ldw	r2,-44(fp)
   20588:	10c01017 	ldw	r3,64(r2)
   2058c:	e0bff517 	ldw	r2,-44(fp)
   20590:	10800f17 	ldw	r2,60(r2)
   20594:	18bfd31e 	bne	r3,r2,204e4 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20598:	e0bff417 	ldw	r2,-48(fp)
   2059c:	103f7926 	beq	r2,zero,20384 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   205a0:	e0bff517 	ldw	r2,-44(fp)
   205a4:	10c00817 	ldw	r3,32(r2)
   205a8:	00bfff44 	movi	r2,-3
   205ac:	1886703a 	and	r3,r3,r2
   205b0:	e0bff517 	ldw	r2,-44(fp)
   205b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   205b8:	e0bff517 	ldw	r2,-44(fp)
   205bc:	10800017 	ldw	r2,0(r2)
   205c0:	10800104 	addi	r2,r2,4
   205c4:	1007883a 	mov	r3,r2
   205c8:	e0bff517 	ldw	r2,-44(fp)
   205cc:	10800817 	ldw	r2,32(r2)
   205d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   205d4:	e0bff617 	ldw	r2,-40(fp)
   205d8:	10800104 	addi	r2,r2,4
   205dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   205e0:	003f6806 	br	20384 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   205e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   205e8:	0001883a 	nop
   205ec:	e037883a 	mov	sp,fp
   205f0:	dfc00117 	ldw	ra,4(sp)
   205f4:	df000017 	ldw	fp,0(sp)
   205f8:	dec00204 	addi	sp,sp,8
   205fc:	f800283a 	ret

00020600 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20600:	defff904 	addi	sp,sp,-28
   20604:	dfc00615 	stw	ra,24(sp)
   20608:	df000515 	stw	fp,20(sp)
   2060c:	df000504 	addi	fp,sp,20
   20610:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20614:	e0bfff17 	ldw	r2,-4(fp)
   20618:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2061c:	e0bffb17 	ldw	r2,-20(fp)
   20620:	10800017 	ldw	r2,0(r2)
   20624:	10800104 	addi	r2,r2,4
   20628:	10800037 	ldwio	r2,0(r2)
   2062c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20630:	e0bffc17 	ldw	r2,-16(fp)
   20634:	1081000c 	andi	r2,r2,1024
   20638:	10000b26 	beq	r2,zero,20668 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2063c:	e0bffb17 	ldw	r2,-20(fp)
   20640:	10800017 	ldw	r2,0(r2)
   20644:	10800104 	addi	r2,r2,4
   20648:	1007883a 	mov	r3,r2
   2064c:	e0bffb17 	ldw	r2,-20(fp)
   20650:	10800817 	ldw	r2,32(r2)
   20654:	10810014 	ori	r2,r2,1024
   20658:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2065c:	e0bffb17 	ldw	r2,-20(fp)
   20660:	10000915 	stw	zero,36(r2)
   20664:	00002106 	br	206ec <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20668:	e0bffb17 	ldw	r2,-20(fp)
   2066c:	10c00917 	ldw	r3,36(r2)
   20670:	00a00034 	movhi	r2,32768
   20674:	10bfff04 	addi	r2,r2,-4
   20678:	10c01c36 	bltu	r2,r3,206ec <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   2067c:	e0bffb17 	ldw	r2,-20(fp)
   20680:	10800917 	ldw	r2,36(r2)
   20684:	10c00044 	addi	r3,r2,1
   20688:	e0bffb17 	ldw	r2,-20(fp)
   2068c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   20690:	e0bffb17 	ldw	r2,-20(fp)
   20694:	10c00917 	ldw	r3,36(r2)
   20698:	e0bffb17 	ldw	r2,-20(fp)
   2069c:	10800117 	ldw	r2,4(r2)
   206a0:	18801236 	bltu	r3,r2,206ec <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   206a4:	e0bffb17 	ldw	r2,-20(fp)
   206a8:	10800c17 	ldw	r2,48(r2)
   206ac:	e0bffd15 	stw	r2,-12(fp)
   206b0:	00800104 	movi	r2,4
   206b4:	e0bffe0d 	sth	r2,-8(fp)
   206b8:	00800044 	movi	r2,1
   206bc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   206c0:	d0a8ccc3 	ldbu	r2,-23757(gp)
   206c4:	10803fcc 	andi	r2,r2,255
   206c8:	10000826 	beq	r2,zero,206ec <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   206cc:	e0bffe0b 	ldhu	r2,-8(fp)
   206d0:	e0fffe83 	ldbu	r3,-6(fp)
   206d4:	e13ffec4 	addi	r4,fp,-5
   206d8:	200f883a 	mov	r7,r4
   206dc:	180d883a 	mov	r6,r3
   206e0:	100b883a 	mov	r5,r2
   206e4:	e13ffd17 	ldw	r4,-12(fp)
   206e8:	00162080 	call	16208 <OSFlagPost>
   206ec:	d0a8ef97 	ldw	r2,-23618(gp)
    }
  }

  return alt_ticks_per_second();
}
   206f0:	e037883a 	mov	sp,fp
   206f4:	dfc00117 	ldw	ra,4(sp)
   206f8:	df000017 	ldw	fp,0(sp)
   206fc:	dec00204 	addi	sp,sp,8
   20700:	f800283a 	ret

00020704 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20704:	defffd04 	addi	sp,sp,-12
   20708:	df000215 	stw	fp,8(sp)
   2070c:	df000204 	addi	fp,sp,8
   20710:	e13ffe15 	stw	r4,-8(fp)
   20714:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20718:	00000506 	br	20730 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2071c:	e0bfff17 	ldw	r2,-4(fp)
   20720:	1090000c 	andi	r2,r2,16384
   20724:	10000226 	beq	r2,zero,20730 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20728:	00bffd44 	movi	r2,-11
   2072c:	00000b06 	br	2075c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20730:	e0bffe17 	ldw	r2,-8(fp)
   20734:	10c01017 	ldw	r3,64(r2)
   20738:	e0bffe17 	ldw	r2,-8(fp)
   2073c:	10800f17 	ldw	r2,60(r2)
   20740:	18800526 	beq	r3,r2,20758 <altera_avalon_jtag_uart_close+0x54>
   20744:	e0bffe17 	ldw	r2,-8(fp)
   20748:	10c00917 	ldw	r3,36(r2)
   2074c:	e0bffe17 	ldw	r2,-8(fp)
   20750:	10800117 	ldw	r2,4(r2)
   20754:	18bff136 	bltu	r3,r2,2071c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20758:	0005883a 	mov	r2,zero
}
   2075c:	e037883a 	mov	sp,fp
   20760:	df000017 	ldw	fp,0(sp)
   20764:	dec00104 	addi	sp,sp,4
   20768:	f800283a 	ret

0002076c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2076c:	defffa04 	addi	sp,sp,-24
   20770:	df000515 	stw	fp,20(sp)
   20774:	df000504 	addi	fp,sp,20
   20778:	e13ffd15 	stw	r4,-12(fp)
   2077c:	e17ffe15 	stw	r5,-8(fp)
   20780:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20784:	00bff9c4 	movi	r2,-25
   20788:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2078c:	e0bffe17 	ldw	r2,-8(fp)
   20790:	10da8060 	cmpeqi	r3,r2,27137
   20794:	1800031e 	bne	r3,zero,207a4 <altera_avalon_jtag_uart_ioctl+0x38>
   20798:	109a80a0 	cmpeqi	r2,r2,27138
   2079c:	1000181e 	bne	r2,zero,20800 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   207a0:	00002906 	br	20848 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   207a4:	e0bffd17 	ldw	r2,-12(fp)
   207a8:	10c00117 	ldw	r3,4(r2)
   207ac:	00a00034 	movhi	r2,32768
   207b0:	10bfffc4 	addi	r2,r2,-1
   207b4:	18802126 	beq	r3,r2,2083c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   207b8:	e0bfff17 	ldw	r2,-4(fp)
   207bc:	10800017 	ldw	r2,0(r2)
   207c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   207c4:	e0bffc17 	ldw	r2,-16(fp)
   207c8:	10800090 	cmplti	r2,r2,2
   207cc:	1000061e 	bne	r2,zero,207e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   207d0:	e0fffc17 	ldw	r3,-16(fp)
   207d4:	00a00034 	movhi	r2,32768
   207d8:	10bfffc4 	addi	r2,r2,-1
   207dc:	18800226 	beq	r3,r2,207e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   207e0:	e0bffc17 	ldw	r2,-16(fp)
   207e4:	00000206 	br	207f0 <altera_avalon_jtag_uart_ioctl+0x84>
   207e8:	00a00034 	movhi	r2,32768
   207ec:	10bfff84 	addi	r2,r2,-2
   207f0:	e0fffd17 	ldw	r3,-12(fp)
   207f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   207f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   207fc:	00000f06 	br	2083c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20800:	e0bffd17 	ldw	r2,-12(fp)
   20804:	10c00117 	ldw	r3,4(r2)
   20808:	00a00034 	movhi	r2,32768
   2080c:	10bfffc4 	addi	r2,r2,-1
   20810:	18800c26 	beq	r3,r2,20844 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20814:	e0bffd17 	ldw	r2,-12(fp)
   20818:	10c00917 	ldw	r3,36(r2)
   2081c:	e0bffd17 	ldw	r2,-12(fp)
   20820:	10800117 	ldw	r2,4(r2)
   20824:	1885803a 	cmpltu	r2,r3,r2
   20828:	10c03fcc 	andi	r3,r2,255
   2082c:	e0bfff17 	ldw	r2,-4(fp)
   20830:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20834:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20838:	00000206 	br	20844 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2083c:	0001883a 	nop
   20840:	00000106 	br	20848 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20844:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20848:	e0bffb17 	ldw	r2,-20(fp)
}
   2084c:	e037883a 	mov	sp,fp
   20850:	df000017 	ldw	fp,0(sp)
   20854:	dec00104 	addi	sp,sp,4
   20858:	f800283a 	ret

0002085c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2085c:	deffed04 	addi	sp,sp,-76
   20860:	dfc01215 	stw	ra,72(sp)
   20864:	df001115 	stw	fp,68(sp)
   20868:	df001104 	addi	fp,sp,68
   2086c:	e13ffc15 	stw	r4,-16(fp)
   20870:	e17ffd15 	stw	r5,-12(fp)
   20874:	e1bffe15 	stw	r6,-8(fp)
   20878:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2087c:	e0bffd17 	ldw	r2,-12(fp)
   20880:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   20884:	e0bffc17 	ldw	r2,-16(fp)
   20888:	10800a17 	ldw	r2,40(r2)
   2088c:	e0bff815 	stw	r2,-32(fp)
   20890:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   20894:	e0bff90b 	ldhu	r2,-28(fp)
   20898:	e0fffb04 	addi	r3,fp,-20
   2089c:	180d883a 	mov	r6,r3
   208a0:	100b883a 	mov	r5,r2
   208a4:	e13ff817 	ldw	r4,-32(fp)
   208a8:	00191200 	call	19120 <OSSemPend>

  while (space > 0)
   208ac:	00006106 	br	20a34 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   208b0:	e0bffc17 	ldw	r2,-16(fp)
   208b4:	10800d17 	ldw	r2,52(r2)
   208b8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   208bc:	e0bffc17 	ldw	r2,-16(fp)
   208c0:	10800e17 	ldw	r2,56(r2)
   208c4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   208c8:	e0fff317 	ldw	r3,-52(fp)
   208cc:	e0bff417 	ldw	r2,-48(fp)
   208d0:	18800536 	bltu	r3,r2,208e8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   208d4:	e0fff317 	ldw	r3,-52(fp)
   208d8:	e0bff417 	ldw	r2,-48(fp)
   208dc:	1885c83a 	sub	r2,r3,r2
   208e0:	e0bff115 	stw	r2,-60(fp)
   208e4:	00000406 	br	208f8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   208e8:	00c20004 	movi	r3,2048
   208ec:	e0bff417 	ldw	r2,-48(fp)
   208f0:	1885c83a 	sub	r2,r3,r2
   208f4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   208f8:	e0bff117 	ldw	r2,-60(fp)
   208fc:	10001e26 	beq	r2,zero,20978 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   20900:	e0fffe17 	ldw	r3,-8(fp)
   20904:	e0bff117 	ldw	r2,-60(fp)
   20908:	1880022e 	bgeu	r3,r2,20914 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   2090c:	e0bffe17 	ldw	r2,-8(fp)
   20910:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20914:	e0bffc17 	ldw	r2,-16(fp)
   20918:	10c01104 	addi	r3,r2,68
   2091c:	e0bff417 	ldw	r2,-48(fp)
   20920:	1885883a 	add	r2,r3,r2
   20924:	e1bff117 	ldw	r6,-60(fp)
   20928:	100b883a 	mov	r5,r2
   2092c:	e13ff017 	ldw	r4,-64(fp)
   20930:	000a3180 	call	a318 <memcpy>
      ptr   += n;
   20934:	e0fff017 	ldw	r3,-64(fp)
   20938:	e0bff117 	ldw	r2,-60(fp)
   2093c:	1885883a 	add	r2,r3,r2
   20940:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   20944:	e0fffe17 	ldw	r3,-8(fp)
   20948:	e0bff117 	ldw	r2,-60(fp)
   2094c:	1885c83a 	sub	r2,r3,r2
   20950:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20954:	e0fff417 	ldw	r3,-48(fp)
   20958:	e0bff117 	ldw	r2,-60(fp)
   2095c:	1885883a 	add	r2,r3,r2
   20960:	10c1ffcc 	andi	r3,r2,2047
   20964:	e0bffc17 	ldw	r2,-16(fp)
   20968:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   2096c:	e0bffe17 	ldw	r2,-8(fp)
   20970:	00bfcf16 	blt	zero,r2,208b0 <altera_avalon_jtag_uart_read+0x54>
   20974:	00000106 	br	2097c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   20978:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2097c:	e0fff017 	ldw	r3,-64(fp)
   20980:	e0bffd17 	ldw	r2,-12(fp)
   20984:	18802e1e 	bne	r3,r2,20a40 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20988:	e0bfff17 	ldw	r2,-4(fp)
   2098c:	1090000c 	andi	r2,r2,16384
   20990:	10002d1e 	bne	r2,zero,20a48 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   20994:	d0a8ccc3 	ldbu	r2,-23757(gp)
   20998:	10803fcc 	andi	r2,r2,255
   2099c:	10800058 	cmpnei	r2,r2,1
   209a0:	1000161e 	bne	r2,zero,209fc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   209a4:	e0bffc17 	ldw	r2,-16(fp)
   209a8:	10800c17 	ldw	r2,48(r2)
   209ac:	e0bff215 	stw	r2,-56(fp)
   209b0:	00800144 	movi	r2,5
   209b4:	e0bff98d 	sth	r2,-26(fp)
   209b8:	00bfe0c4 	movi	r2,-125
   209bc:	e0bffa05 	stb	r2,-24(fp)
   209c0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   209c4:	d0a8ccc3 	ldbu	r2,-23757(gp)
   209c8:	10803fcc 	andi	r2,r2,255
   209cc:	10001526 	beq	r2,zero,20a24 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   209d0:	e0fff98b 	ldhu	r3,-26(fp)
   209d4:	e13ffa03 	ldbu	r4,-24(fp)
   209d8:	e17ffa8b 	ldhu	r5,-22(fp)
   209dc:	e0bffb44 	addi	r2,fp,-19
   209e0:	d8800015 	stw	r2,0(sp)
   209e4:	280f883a 	mov	r7,r5
   209e8:	200d883a 	mov	r6,r4
   209ec:	180b883a 	mov	r5,r3
   209f0:	e13ff217 	ldw	r4,-56(fp)
   209f4:	0015bf00 	call	15bf0 <OSFlagPend>
   209f8:	00000a06 	br	20a24 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   209fc:	0001883a 	nop
   20a00:	e0bffc17 	ldw	r2,-16(fp)
   20a04:	10c00d17 	ldw	r3,52(r2)
   20a08:	e0bff317 	ldw	r2,-52(fp)
   20a0c:	1880051e 	bne	r3,r2,20a24 <altera_avalon_jtag_uart_read+0x1c8>
   20a10:	e0bffc17 	ldw	r2,-16(fp)
   20a14:	10c00917 	ldw	r3,36(r2)
   20a18:	e0bffc17 	ldw	r2,-16(fp)
   20a1c:	10800117 	ldw	r2,4(r2)
   20a20:	18bff736 	bltu	r3,r2,20a00 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20a24:	e0bffc17 	ldw	r2,-16(fp)
   20a28:	10c00d17 	ldw	r3,52(r2)
   20a2c:	e0bff317 	ldw	r2,-52(fp)
   20a30:	18800726 	beq	r3,r2,20a50 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20a34:	e0bffe17 	ldw	r2,-8(fp)
   20a38:	00bf9d16 	blt	zero,r2,208b0 <altera_avalon_jtag_uart_read+0x54>
   20a3c:	00000506 	br	20a54 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   20a40:	0001883a 	nop
   20a44:	00000306 	br	20a54 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   20a48:	0001883a 	nop
   20a4c:	00000106 	br	20a54 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   20a50:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   20a54:	e0bffc17 	ldw	r2,-16(fp)
   20a58:	10800a17 	ldw	r2,40(r2)
   20a5c:	1009883a 	mov	r4,r2
   20a60:	00194980 	call	19498 <OSSemPost>

  if (ptr != buffer)
   20a64:	e0fff017 	ldw	r3,-64(fp)
   20a68:	e0bffd17 	ldw	r2,-12(fp)
   20a6c:	18801826 	beq	r3,r2,20ad0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20a70:	0005303a 	rdctl	r2,status
   20a74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20a78:	e0fff717 	ldw	r3,-36(fp)
   20a7c:	00bfff84 	movi	r2,-2
   20a80:	1884703a 	and	r2,r3,r2
   20a84:	1001703a 	wrctl	status,r2
  
  return context;
   20a88:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   20a8c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20a90:	e0bffc17 	ldw	r2,-16(fp)
   20a94:	10800817 	ldw	r2,32(r2)
   20a98:	10c00054 	ori	r3,r2,1
   20a9c:	e0bffc17 	ldw	r2,-16(fp)
   20aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20aa4:	e0bffc17 	ldw	r2,-16(fp)
   20aa8:	10800017 	ldw	r2,0(r2)
   20aac:	10800104 	addi	r2,r2,4
   20ab0:	1007883a 	mov	r3,r2
   20ab4:	e0bffc17 	ldw	r2,-16(fp)
   20ab8:	10800817 	ldw	r2,32(r2)
   20abc:	18800035 	stwio	r2,0(r3)
   20ac0:	e0bff617 	ldw	r2,-40(fp)
   20ac4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ac8:	e0bff517 	ldw	r2,-44(fp)
   20acc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   20ad0:	e0fff017 	ldw	r3,-64(fp)
   20ad4:	e0bffd17 	ldw	r2,-12(fp)
   20ad8:	18800426 	beq	r3,r2,20aec <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   20adc:	e0fff017 	ldw	r3,-64(fp)
   20ae0:	e0bffd17 	ldw	r2,-12(fp)
   20ae4:	1885c83a 	sub	r2,r3,r2
   20ae8:	00000606 	br	20b04 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   20aec:	e0bfff17 	ldw	r2,-4(fp)
   20af0:	1090000c 	andi	r2,r2,16384
   20af4:	10000226 	beq	r2,zero,20b00 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   20af8:	00bffd44 	movi	r2,-11
   20afc:	00000106 	br	20b04 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   20b00:	00bffec4 	movi	r2,-5
}
   20b04:	e037883a 	mov	sp,fp
   20b08:	dfc00117 	ldw	ra,4(sp)
   20b0c:	df000017 	ldw	fp,0(sp)
   20b10:	dec00204 	addi	sp,sp,8
   20b14:	f800283a 	ret

00020b18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20b18:	deffed04 	addi	sp,sp,-76
   20b1c:	dfc01215 	stw	ra,72(sp)
   20b20:	df001115 	stw	fp,68(sp)
   20b24:	df001104 	addi	fp,sp,68
   20b28:	e13ffc15 	stw	r4,-16(fp)
   20b2c:	e17ffd15 	stw	r5,-12(fp)
   20b30:	e1bffe15 	stw	r6,-8(fp)
   20b34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20b38:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20b3c:	e0bffd17 	ldw	r2,-12(fp)
   20b40:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   20b44:	e0bffc17 	ldw	r2,-16(fp)
   20b48:	10800b17 	ldw	r2,44(r2)
   20b4c:	e0bff815 	stw	r2,-32(fp)
   20b50:	e03ff90d 	sth	zero,-28(fp)
   20b54:	e0bff90b 	ldhu	r2,-28(fp)
   20b58:	e0fffb44 	addi	r3,fp,-19
   20b5c:	180d883a 	mov	r6,r3
   20b60:	100b883a 	mov	r5,r2
   20b64:	e13ff817 	ldw	r4,-32(fp)
   20b68:	00191200 	call	19120 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20b6c:	00003706 	br	20c4c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20b70:	e0bffc17 	ldw	r2,-16(fp)
   20b74:	10800f17 	ldw	r2,60(r2)
   20b78:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   20b7c:	e0bffc17 	ldw	r2,-16(fp)
   20b80:	10801017 	ldw	r2,64(r2)
   20b84:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   20b88:	e0fff417 	ldw	r3,-48(fp)
   20b8c:	e0bff017 	ldw	r2,-64(fp)
   20b90:	1880062e 	bgeu	r3,r2,20bac <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   20b94:	e0fff017 	ldw	r3,-64(fp)
   20b98:	e0bff417 	ldw	r2,-48(fp)
   20b9c:	1885c83a 	sub	r2,r3,r2
   20ba0:	10bfffc4 	addi	r2,r2,-1
   20ba4:	e0bff115 	stw	r2,-60(fp)
   20ba8:	00000b06 	br	20bd8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   20bac:	e0bff017 	ldw	r2,-64(fp)
   20bb0:	10000526 	beq	r2,zero,20bc8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   20bb4:	00c20004 	movi	r3,2048
   20bb8:	e0bff417 	ldw	r2,-48(fp)
   20bbc:	1885c83a 	sub	r2,r3,r2
   20bc0:	e0bff115 	stw	r2,-60(fp)
   20bc4:	00000406 	br	20bd8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   20bc8:	00c1ffc4 	movi	r3,2047
   20bcc:	e0bff417 	ldw	r2,-48(fp)
   20bd0:	1885c83a 	sub	r2,r3,r2
   20bd4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   20bd8:	e0bff117 	ldw	r2,-60(fp)
   20bdc:	10001e26 	beq	r2,zero,20c58 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   20be0:	e0fffe17 	ldw	r3,-8(fp)
   20be4:	e0bff117 	ldw	r2,-60(fp)
   20be8:	1880022e 	bgeu	r3,r2,20bf4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   20bec:	e0bffe17 	ldw	r2,-8(fp)
   20bf0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   20bf4:	e0bffc17 	ldw	r2,-16(fp)
   20bf8:	10c21104 	addi	r3,r2,2116
   20bfc:	e0bff417 	ldw	r2,-48(fp)
   20c00:	1885883a 	add	r2,r3,r2
   20c04:	e1bff117 	ldw	r6,-60(fp)
   20c08:	e17ffd17 	ldw	r5,-12(fp)
   20c0c:	1009883a 	mov	r4,r2
   20c10:	000a3180 	call	a318 <memcpy>
      ptr   += n;
   20c14:	e0fffd17 	ldw	r3,-12(fp)
   20c18:	e0bff117 	ldw	r2,-60(fp)
   20c1c:	1885883a 	add	r2,r3,r2
   20c20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   20c24:	e0fffe17 	ldw	r3,-8(fp)
   20c28:	e0bff117 	ldw	r2,-60(fp)
   20c2c:	1885c83a 	sub	r2,r3,r2
   20c30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20c34:	e0fff417 	ldw	r3,-48(fp)
   20c38:	e0bff117 	ldw	r2,-60(fp)
   20c3c:	1885883a 	add	r2,r3,r2
   20c40:	10c1ffcc 	andi	r3,r2,2047
   20c44:	e0bffc17 	ldw	r2,-16(fp)
   20c48:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20c4c:	e0bffe17 	ldw	r2,-8(fp)
   20c50:	00bfc716 	blt	zero,r2,20b70 <altera_avalon_jtag_uart_write+0x58>
   20c54:	00000106 	br	20c5c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   20c58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20c5c:	0005303a 	rdctl	r2,status
   20c60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20c64:	e0fff717 	ldw	r3,-36(fp)
   20c68:	00bfff84 	movi	r2,-2
   20c6c:	1884703a 	and	r2,r3,r2
   20c70:	1001703a 	wrctl	status,r2
  
  return context;
   20c74:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   20c78:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20c7c:	e0bffc17 	ldw	r2,-16(fp)
   20c80:	10800817 	ldw	r2,32(r2)
   20c84:	10c00094 	ori	r3,r2,2
   20c88:	e0bffc17 	ldw	r2,-16(fp)
   20c8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20c90:	e0bffc17 	ldw	r2,-16(fp)
   20c94:	10800017 	ldw	r2,0(r2)
   20c98:	10800104 	addi	r2,r2,4
   20c9c:	1007883a 	mov	r3,r2
   20ca0:	e0bffc17 	ldw	r2,-16(fp)
   20ca4:	10800817 	ldw	r2,32(r2)
   20ca8:	18800035 	stwio	r2,0(r3)
   20cac:	e0bff617 	ldw	r2,-40(fp)
   20cb0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20cb4:	e0bff317 	ldw	r2,-52(fp)
   20cb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   20cbc:	e0bffe17 	ldw	r2,-8(fp)
   20cc0:	00802a0e 	bge	zero,r2,20d6c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   20cc4:	e0bfff17 	ldw	r2,-4(fp)
   20cc8:	1090000c 	andi	r2,r2,16384
   20ccc:	10002a1e 	bne	r2,zero,20d78 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   20cd0:	d0a8ccc3 	ldbu	r2,-23757(gp)
   20cd4:	10803fcc 	andi	r2,r2,255
   20cd8:	10800058 	cmpnei	r2,r2,1
   20cdc:	1000161e 	bne	r2,zero,20d38 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   20ce0:	e0bffc17 	ldw	r2,-16(fp)
   20ce4:	10800c17 	ldw	r2,48(r2)
   20ce8:	e0bff515 	stw	r2,-44(fp)
   20cec:	00800184 	movi	r2,6
   20cf0:	e0bff98d 	sth	r2,-26(fp)
   20cf4:	00bfe0c4 	movi	r2,-125
   20cf8:	e0bffa05 	stb	r2,-24(fp)
   20cfc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   20d00:	d0a8ccc3 	ldbu	r2,-23757(gp)
   20d04:	10803fcc 	andi	r2,r2,255
   20d08:	10001526 	beq	r2,zero,20d60 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   20d0c:	e0fff98b 	ldhu	r3,-26(fp)
   20d10:	e13ffa03 	ldbu	r4,-24(fp)
   20d14:	e17ffa8b 	ldhu	r5,-22(fp)
   20d18:	e0bffb04 	addi	r2,fp,-20
   20d1c:	d8800015 	stw	r2,0(sp)
   20d20:	280f883a 	mov	r7,r5
   20d24:	200d883a 	mov	r6,r4
   20d28:	180b883a 	mov	r5,r3
   20d2c:	e13ff517 	ldw	r4,-44(fp)
   20d30:	0015bf00 	call	15bf0 <OSFlagPend>
   20d34:	00000a06 	br	20d60 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   20d38:	0001883a 	nop
   20d3c:	e0bffc17 	ldw	r2,-16(fp)
   20d40:	10c01017 	ldw	r3,64(r2)
   20d44:	e0bff017 	ldw	r2,-64(fp)
   20d48:	1880051e 	bne	r3,r2,20d60 <altera_avalon_jtag_uart_write+0x248>
   20d4c:	e0bffc17 	ldw	r2,-16(fp)
   20d50:	10c00917 	ldw	r3,36(r2)
   20d54:	e0bffc17 	ldw	r2,-16(fp)
   20d58:	10800117 	ldw	r2,4(r2)
   20d5c:	18bff736 	bltu	r3,r2,20d3c <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   20d60:	e0bffc17 	ldw	r2,-16(fp)
   20d64:	10800917 	ldw	r2,36(r2)
   20d68:	1000051e 	bne	r2,zero,20d80 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   20d6c:	e0bffe17 	ldw	r2,-8(fp)
   20d70:	00bfb616 	blt	zero,r2,20c4c <altera_avalon_jtag_uart_write+0x134>
   20d74:	00000306 	br	20d84 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   20d78:	0001883a 	nop
   20d7c:	00000106 	br	20d84 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   20d80:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   20d84:	e0bffc17 	ldw	r2,-16(fp)
   20d88:	10800b17 	ldw	r2,44(r2)
   20d8c:	1009883a 	mov	r4,r2
   20d90:	00194980 	call	19498 <OSSemPost>

  if (ptr != start)
   20d94:	e0fffd17 	ldw	r3,-12(fp)
   20d98:	e0bff217 	ldw	r2,-56(fp)
   20d9c:	18800426 	beq	r3,r2,20db0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   20da0:	e0fffd17 	ldw	r3,-12(fp)
   20da4:	e0bff217 	ldw	r2,-56(fp)
   20da8:	1885c83a 	sub	r2,r3,r2
   20dac:	00000606 	br	20dc8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   20db0:	e0bfff17 	ldw	r2,-4(fp)
   20db4:	1090000c 	andi	r2,r2,16384
   20db8:	10000226 	beq	r2,zero,20dc4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   20dbc:	00bffd44 	movi	r2,-11
   20dc0:	00000106 	br	20dc8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   20dc4:	00bffec4 	movi	r2,-5
}
   20dc8:	e037883a 	mov	sp,fp
   20dcc:	dfc00117 	ldw	ra,4(sp)
   20dd0:	df000017 	ldw	fp,0(sp)
   20dd4:	dec00204 	addi	sp,sp,8
   20dd8:	f800283a 	ret

00020ddc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   20ddc:	defff904 	addi	sp,sp,-28
   20de0:	dfc00615 	stw	ra,24(sp)
   20de4:	df000515 	stw	fp,20(sp)
   20de8:	df000504 	addi	fp,sp,20
   20dec:	e13ffe15 	stw	r4,-8(fp)
   20df0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   20df4:	0007883a 	mov	r3,zero
   20df8:	e0bffe17 	ldw	r2,-8(fp)
   20dfc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   20e00:	e0bffe17 	ldw	r2,-8(fp)
   20e04:	10800104 	addi	r2,r2,4
   20e08:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20e0c:	0005303a 	rdctl	r2,status
   20e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20e14:	e0fffc17 	ldw	r3,-16(fp)
   20e18:	00bfff84 	movi	r2,-2
   20e1c:	1884703a 	and	r2,r3,r2
   20e20:	1001703a 	wrctl	status,r2
  
  return context;
   20e24:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   20e28:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   20e2c:	00238700 	call	23870 <alt_tick>
   20e30:	e0bffb17 	ldw	r2,-20(fp)
   20e34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20e38:	e0bffd17 	ldw	r2,-12(fp)
   20e3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   20e40:	0001883a 	nop
   20e44:	e037883a 	mov	sp,fp
   20e48:	dfc00117 	ldw	ra,4(sp)
   20e4c:	df000017 	ldw	fp,0(sp)
   20e50:	dec00204 	addi	sp,sp,8
   20e54:	f800283a 	ret

00020e58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   20e58:	defff904 	addi	sp,sp,-28
   20e5c:	dfc00615 	stw	ra,24(sp)
   20e60:	df000515 	stw	fp,20(sp)
   20e64:	df000504 	addi	fp,sp,20
   20e68:	e13ffc15 	stw	r4,-16(fp)
   20e6c:	e17ffd15 	stw	r5,-12(fp)
   20e70:	e1bffe15 	stw	r6,-8(fp)
   20e74:	e1ffff15 	stw	r7,-4(fp)
   20e78:	e0bfff17 	ldw	r2,-4(fp)
   20e7c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   20e80:	d0a8ef97 	ldw	r2,-23618(gp)
   20e84:	1000021e 	bne	r2,zero,20e90 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   20e88:	e0bffb17 	ldw	r2,-20(fp)
   20e8c:	d0a8ef95 	stw	r2,-23618(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   20e90:	e0bffc17 	ldw	r2,-16(fp)
   20e94:	10800104 	addi	r2,r2,4
   20e98:	00c001c4 	movi	r3,7
   20e9c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   20ea0:	018000b4 	movhi	r6,2
   20ea4:	31837704 	addi	r6,r6,3548
   20ea8:	e17ffc17 	ldw	r5,-16(fp)
   20eac:	e13ffe17 	ldw	r4,-8(fp)
   20eb0:	00234000 	call	23400 <alt_irq_register>
#endif  
}
   20eb4:	0001883a 	nop
   20eb8:	e037883a 	mov	sp,fp
   20ebc:	dfc00117 	ldw	ra,4(sp)
   20ec0:	df000017 	ldw	fp,0(sp)
   20ec4:	dec00204 	addi	sp,sp,8
   20ec8:	f800283a 	ret

00020ecc <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   20ecc:	defffc04 	addi	sp,sp,-16
   20ed0:	dfc00315 	stw	ra,12(sp)
   20ed4:	df000215 	stw	fp,8(sp)
   20ed8:	df000204 	addi	fp,sp,8
   20edc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   20ee0:	d1601b84 	addi	r5,gp,-32658
   20ee4:	e13fff17 	ldw	r4,-4(fp)
   20ee8:	00231fc0 	call	231fc <alt_find_dev>
   20eec:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   20ef0:	e0bffe17 	ldw	r2,-8(fp)
}
   20ef4:	e037883a 	mov	sp,fp
   20ef8:	dfc00117 	ldw	ra,4(sp)
   20efc:	df000017 	ldw	fp,0(sp)
   20f00:	dec00204 	addi	sp,sp,8
   20f04:	f800283a 	ret

00020f08 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   20f08:	defffd04 	addi	sp,sp,-12
   20f0c:	df000215 	stw	fp,8(sp)
   20f10:	df000204 	addi	fp,sp,8
   20f14:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   20f18:	e0bfff17 	ldw	r2,-4(fp)
   20f1c:	10800a17 	ldw	r2,40(r2)
   20f20:	10800037 	ldwio	r2,0(r2)
   20f24:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   20f28:	e0bffe17 	ldw	r2,-8(fp)
   20f2c:	10800054 	ori	r2,r2,1
   20f30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   20f34:	e0bfff17 	ldw	r2,-4(fp)
   20f38:	10800a17 	ldw	r2,40(r2)
   20f3c:	1007883a 	mov	r3,r2
   20f40:	e0bffe17 	ldw	r2,-8(fp)
   20f44:	18800035 	stwio	r2,0(r3)
}
   20f48:	0001883a 	nop
   20f4c:	e037883a 	mov	sp,fp
   20f50:	df000017 	ldw	fp,0(sp)
   20f54:	dec00104 	addi	sp,sp,4
   20f58:	f800283a 	ret

00020f5c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   20f5c:	defffd04 	addi	sp,sp,-12
   20f60:	df000215 	stw	fp,8(sp)
   20f64:	df000204 	addi	fp,sp,8
   20f68:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   20f6c:	e0bfff17 	ldw	r2,-4(fp)
   20f70:	10800a17 	ldw	r2,40(r2)
   20f74:	10800037 	ldwio	r2,0(r2)
   20f78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   20f7c:	e0fffe17 	ldw	r3,-8(fp)
   20f80:	00bfff84 	movi	r2,-2
   20f84:	1884703a 	and	r2,r3,r2
   20f88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   20f8c:	e0bfff17 	ldw	r2,-4(fp)
   20f90:	10800a17 	ldw	r2,40(r2)
   20f94:	1007883a 	mov	r3,r2
   20f98:	e0bffe17 	ldw	r2,-8(fp)
   20f9c:	18800035 	stwio	r2,0(r3)
}
   20fa0:	0001883a 	nop
   20fa4:	e037883a 	mov	sp,fp
   20fa8:	df000017 	ldw	fp,0(sp)
   20fac:	dec00104 	addi	sp,sp,4
   20fb0:	f800283a 	ret

00020fb4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   20fb4:	defffd04 	addi	sp,sp,-12
   20fb8:	df000215 	stw	fp,8(sp)
   20fbc:	df000204 	addi	fp,sp,8
   20fc0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   20fc4:	e0bfff17 	ldw	r2,-4(fp)
   20fc8:	10800a17 	ldw	r2,40(r2)
   20fcc:	10800037 	ldwio	r2,0(r2)
   20fd0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   20fd4:	e0bffe17 	ldw	r2,-8(fp)
   20fd8:	10800094 	ori	r2,r2,2
   20fdc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   20fe0:	e0bfff17 	ldw	r2,-4(fp)
   20fe4:	10800a17 	ldw	r2,40(r2)
   20fe8:	1007883a 	mov	r3,r2
   20fec:	e0bffe17 	ldw	r2,-8(fp)
   20ff0:	18800035 	stwio	r2,0(r3)
}
   20ff4:	0001883a 	nop
   20ff8:	e037883a 	mov	sp,fp
   20ffc:	df000017 	ldw	fp,0(sp)
   21000:	dec00104 	addi	sp,sp,4
   21004:	f800283a 	ret

00021008 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   21008:	defffd04 	addi	sp,sp,-12
   2100c:	df000215 	stw	fp,8(sp)
   21010:	df000204 	addi	fp,sp,8
   21014:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   21018:	e0bfff17 	ldw	r2,-4(fp)
   2101c:	10800a17 	ldw	r2,40(r2)
   21020:	10800037 	ldwio	r2,0(r2)
   21024:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   21028:	e0fffe17 	ldw	r3,-8(fp)
   2102c:	00bfff44 	movi	r2,-3
   21030:	1884703a 	and	r2,r3,r2
   21034:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   21038:	e0bfff17 	ldw	r2,-4(fp)
   2103c:	10800a17 	ldw	r2,40(r2)
   21040:	1007883a 	mov	r3,r2
   21044:	e0bffe17 	ldw	r2,-8(fp)
   21048:	18800035 	stwio	r2,0(r3)
}
   2104c:	0001883a 	nop
   21050:	e037883a 	mov	sp,fp
   21054:	df000017 	ldw	fp,0(sp)
   21058:	dec00104 	addi	sp,sp,4
   2105c:	f800283a 	ret

00021060 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   21060:	defffd04 	addi	sp,sp,-12
   21064:	df000215 	stw	fp,8(sp)
   21068:	df000204 	addi	fp,sp,8
   2106c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   21070:	e0bfff17 	ldw	r2,-4(fp)
   21074:	10800a17 	ldw	r2,40(r2)
   21078:	10800037 	ldwio	r2,0(r2)
   2107c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   21080:	e0bffe17 	ldw	r2,-8(fp)
   21084:	1080400c 	andi	r2,r2,256
   21088:	1004c03a 	cmpne	r2,r2,zero
   2108c:	10803fcc 	andi	r2,r2,255
}
   21090:	e037883a 	mov	sp,fp
   21094:	df000017 	ldw	fp,0(sp)
   21098:	dec00104 	addi	sp,sp,4
   2109c:	f800283a 	ret

000210a0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   210a0:	defffd04 	addi	sp,sp,-12
   210a4:	df000215 	stw	fp,8(sp)
   210a8:	df000204 	addi	fp,sp,8
   210ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   210b0:	e0bfff17 	ldw	r2,-4(fp)
   210b4:	10800a17 	ldw	r2,40(r2)
   210b8:	10800037 	ldwio	r2,0(r2)
   210bc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   210c0:	e0bffe17 	ldw	r2,-8(fp)
   210c4:	1080800c 	andi	r2,r2,512
   210c8:	1004c03a 	cmpne	r2,r2,zero
   210cc:	10803fcc 	andi	r2,r2,255
}
   210d0:	e037883a 	mov	sp,fp
   210d4:	df000017 	ldw	fp,0(sp)
   210d8:	dec00104 	addi	sp,sp,4
   210dc:	f800283a 	ret

000210e0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   210e0:	defffd04 	addi	sp,sp,-12
   210e4:	df000215 	stw	fp,8(sp)
   210e8:	df000204 	addi	fp,sp,8
   210ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   210f0:	e0bfff17 	ldw	r2,-4(fp)
   210f4:	10800a17 	ldw	r2,40(r2)
   210f8:	10800037 	ldwio	r2,0(r2)
   210fc:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   21100:	e0bffe17 	ldw	r2,-8(fp)
   21104:	10800114 	ori	r2,r2,4
   21108:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   2110c:	e0bffe17 	ldw	r2,-8(fp)
   21110:	10800214 	ori	r2,r2,8
   21114:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   21118:	e0bfff17 	ldw	r2,-4(fp)
   2111c:	10800a17 	ldw	r2,40(r2)
   21120:	1007883a 	mov	r3,r2
   21124:	e0bffe17 	ldw	r2,-8(fp)
   21128:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   2112c:	e0fffe17 	ldw	r3,-8(fp)
   21130:	00bffec4 	movi	r2,-5
   21134:	1884703a 	and	r2,r3,r2
   21138:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   2113c:	e0fffe17 	ldw	r3,-8(fp)
   21140:	00bffdc4 	movi	r2,-9
   21144:	1884703a 	and	r2,r3,r2
   21148:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   2114c:	e0bfff17 	ldw	r2,-4(fp)
   21150:	10800a17 	ldw	r2,40(r2)
   21154:	1007883a 	mov	r3,r2
   21158:	e0bffe17 	ldw	r2,-8(fp)
   2115c:	18800035 	stwio	r2,0(r3)
}
   21160:	0001883a 	nop
   21164:	e037883a 	mov	sp,fp
   21168:	df000017 	ldw	fp,0(sp)
   2116c:	dec00104 	addi	sp,sp,4
   21170:	f800283a 	ret

00021174 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   21174:	defffc04 	addi	sp,sp,-16
   21178:	df000315 	stw	fp,12(sp)
   2117c:	df000304 	addi	fp,sp,12
   21180:	e13ffe15 	stw	r4,-8(fp)
   21184:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   21188:	e0bffe17 	ldw	r2,-8(fp)
   2118c:	10800a17 	ldw	r2,40(r2)
   21190:	10800104 	addi	r2,r2,4
   21194:	10800037 	ldwio	r2,0(r2)
   21198:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   2119c:	e0bfff17 	ldw	r2,-4(fp)
   211a0:	1000041e 	bne	r2,zero,211b4 <alt_up_audio_read_fifo_avail+0x40>
   211a4:	e0bffd17 	ldw	r2,-12(fp)
   211a8:	10bfc00c 	andi	r2,r2,65280
   211ac:	1004d23a 	srli	r2,r2,8
   211b0:	00000206 	br	211bc <alt_up_audio_read_fifo_avail+0x48>
   211b4:	e0bffd17 	ldw	r2,-12(fp)
   211b8:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   211bc:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   211c0:	e0bffd17 	ldw	r2,-12(fp)
}
   211c4:	e037883a 	mov	sp,fp
   211c8:	df000017 	ldw	fp,0(sp)
   211cc:	dec00104 	addi	sp,sp,4
   211d0:	f800283a 	ret

000211d4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   211d4:	defffa04 	addi	sp,sp,-24
   211d8:	dfc00515 	stw	ra,20(sp)
   211dc:	df000415 	stw	fp,16(sp)
   211e0:	df000404 	addi	fp,sp,16
   211e4:	e13ffd15 	stw	r4,-12(fp)
   211e8:	e17ffe15 	stw	r5,-8(fp)
   211ec:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   211f0:	01400044 	movi	r5,1
   211f4:	e13ffd17 	ldw	r4,-12(fp)
   211f8:	00211740 	call	21174 <alt_up_audio_read_fifo_avail>
   211fc:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   21200:	e0bffc17 	ldw	r2,-16(fp)
   21204:	10801868 	cmpgeui	r2,r2,97
   21208:	1000021e 	bne	r2,zero,21214 <alt_up_audio_record_r+0x40>
		return 0;
   2120c:	0005883a 	mov	r2,zero
   21210:	00000506 	br	21228 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   21214:	01c00044 	movi	r7,1
   21218:	e1bfff17 	ldw	r6,-4(fp)
   2121c:	e17ffe17 	ldw	r5,-8(fp)
   21220:	e13ffd17 	ldw	r4,-12(fp)
   21224:	00213d40 	call	213d4 <alt_up_audio_read_fifo>
}
   21228:	e037883a 	mov	sp,fp
   2122c:	dfc00117 	ldw	ra,4(sp)
   21230:	df000017 	ldw	fp,0(sp)
   21234:	dec00204 	addi	sp,sp,8
   21238:	f800283a 	ret

0002123c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   2123c:	defffa04 	addi	sp,sp,-24
   21240:	dfc00515 	stw	ra,20(sp)
   21244:	df000415 	stw	fp,16(sp)
   21248:	df000404 	addi	fp,sp,16
   2124c:	e13ffd15 	stw	r4,-12(fp)
   21250:	e17ffe15 	stw	r5,-8(fp)
   21254:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   21258:	000b883a 	mov	r5,zero
   2125c:	e13ffd17 	ldw	r4,-12(fp)
   21260:	00211740 	call	21174 <alt_up_audio_read_fifo_avail>
   21264:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   21268:	e0bffc17 	ldw	r2,-16(fp)
   2126c:	10801868 	cmpgeui	r2,r2,97
   21270:	1000021e 	bne	r2,zero,2127c <alt_up_audio_record_l+0x40>
		return 0;
   21274:	0005883a 	mov	r2,zero
   21278:	00000506 	br	21290 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   2127c:	000f883a 	mov	r7,zero
   21280:	e1bfff17 	ldw	r6,-4(fp)
   21284:	e17ffe17 	ldw	r5,-8(fp)
   21288:	e13ffd17 	ldw	r4,-12(fp)
   2128c:	00213d40 	call	213d4 <alt_up_audio_read_fifo>
}
   21290:	e037883a 	mov	sp,fp
   21294:	dfc00117 	ldw	ra,4(sp)
   21298:	df000017 	ldw	fp,0(sp)
   2129c:	dec00204 	addi	sp,sp,8
   212a0:	f800283a 	ret

000212a4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   212a4:	defffc04 	addi	sp,sp,-16
   212a8:	df000315 	stw	fp,12(sp)
   212ac:	df000304 	addi	fp,sp,12
   212b0:	e13ffe15 	stw	r4,-8(fp)
   212b4:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   212b8:	e0bffe17 	ldw	r2,-8(fp)
   212bc:	10800a17 	ldw	r2,40(r2)
   212c0:	10800104 	addi	r2,r2,4
   212c4:	10800037 	ldwio	r2,0(r2)
   212c8:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   212cc:	e0bfff17 	ldw	r2,-4(fp)
   212d0:	1000031e 	bne	r2,zero,212e0 <alt_up_audio_write_fifo_space+0x3c>
   212d4:	e0bffd17 	ldw	r2,-12(fp)
   212d8:	1004d63a 	srli	r2,r2,24
   212dc:	00000306 	br	212ec <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   212e0:	e0bffd17 	ldw	r2,-12(fp)
   212e4:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   212e8:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   212ec:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   212f0:	e0bffd17 	ldw	r2,-12(fp)
}
   212f4:	e037883a 	mov	sp,fp
   212f8:	df000017 	ldw	fp,0(sp)
   212fc:	dec00104 	addi	sp,sp,4
   21300:	f800283a 	ret

00021304 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   21304:	defffa04 	addi	sp,sp,-24
   21308:	dfc00515 	stw	ra,20(sp)
   2130c:	df000415 	stw	fp,16(sp)
   21310:	df000404 	addi	fp,sp,16
   21314:	e13ffd15 	stw	r4,-12(fp)
   21318:	e17ffe15 	stw	r5,-8(fp)
   2131c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   21320:	01400044 	movi	r5,1
   21324:	e13ffd17 	ldw	r4,-12(fp)
   21328:	00212a40 	call	212a4 <alt_up_audio_write_fifo_space>
   2132c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   21330:	e0bffc17 	ldw	r2,-16(fp)
   21334:	10801868 	cmpgeui	r2,r2,97
   21338:	1000021e 	bne	r2,zero,21344 <alt_up_audio_play_r+0x40>
		return 0;
   2133c:	0005883a 	mov	r2,zero
   21340:	00000506 	br	21358 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   21344:	01c00044 	movi	r7,1
   21348:	e1bfff17 	ldw	r6,-4(fp)
   2134c:	e17ffe17 	ldw	r5,-8(fp)
   21350:	e13ffd17 	ldw	r4,-12(fp)
   21354:	00214b40 	call	214b4 <alt_up_audio_write_fifo>
}
   21358:	e037883a 	mov	sp,fp
   2135c:	dfc00117 	ldw	ra,4(sp)
   21360:	df000017 	ldw	fp,0(sp)
   21364:	dec00204 	addi	sp,sp,8
   21368:	f800283a 	ret

0002136c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   2136c:	defffa04 	addi	sp,sp,-24
   21370:	dfc00515 	stw	ra,20(sp)
   21374:	df000415 	stw	fp,16(sp)
   21378:	df000404 	addi	fp,sp,16
   2137c:	e13ffd15 	stw	r4,-12(fp)
   21380:	e17ffe15 	stw	r5,-8(fp)
   21384:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   21388:	000b883a 	mov	r5,zero
   2138c:	e13ffd17 	ldw	r4,-12(fp)
   21390:	00212a40 	call	212a4 <alt_up_audio_write_fifo_space>
   21394:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   21398:	e0bffc17 	ldw	r2,-16(fp)
   2139c:	10801868 	cmpgeui	r2,r2,97
   213a0:	1000021e 	bne	r2,zero,213ac <alt_up_audio_play_l+0x40>
		return 0;
   213a4:	0005883a 	mov	r2,zero
   213a8:	00000506 	br	213c0 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   213ac:	000f883a 	mov	r7,zero
   213b0:	e1bfff17 	ldw	r6,-4(fp)
   213b4:	e17ffe17 	ldw	r5,-8(fp)
   213b8:	e13ffd17 	ldw	r4,-12(fp)
   213bc:	00214b40 	call	214b4 <alt_up_audio_write_fifo>
}
   213c0:	e037883a 	mov	sp,fp
   213c4:	dfc00117 	ldw	ra,4(sp)
   213c8:	df000017 	ldw	fp,0(sp)
   213cc:	dec00204 	addi	sp,sp,8
   213d0:	f800283a 	ret

000213d4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   213d4:	defff904 	addi	sp,sp,-28
   213d8:	df000615 	stw	fp,24(sp)
   213dc:	df000604 	addi	fp,sp,24
   213e0:	e13ffc15 	stw	r4,-16(fp)
   213e4:	e17ffd15 	stw	r5,-12(fp)
   213e8:	e1bffe15 	stw	r6,-8(fp)
   213ec:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   213f0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   213f4:	00002506 	br	2148c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   213f8:	e0bffc17 	ldw	r2,-16(fp)
   213fc:	10800a17 	ldw	r2,40(r2)
   21400:	10800104 	addi	r2,r2,4
   21404:	10800037 	ldwio	r2,0(r2)
   21408:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   2140c:	e0bfff17 	ldw	r2,-4(fp)
   21410:	1000041e 	bne	r2,zero,21424 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   21414:	e0bffb17 	ldw	r2,-20(fp)
   21418:	10bfc00c 	andi	r2,r2,65280
			:
   2141c:	1004d23a 	srli	r2,r2,8
   21420:	00000206 	br	2142c <alt_up_audio_read_fifo+0x58>
   21424:	e0bffb17 	ldw	r2,-20(fp)
   21428:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   2142c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   21430:	e0bffb17 	ldw	r2,-20(fp)
   21434:	10001926 	beq	r2,zero,2149c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   21438:	e0bffa17 	ldw	r2,-24(fp)
   2143c:	1085883a 	add	r2,r2,r2
   21440:	1085883a 	add	r2,r2,r2
   21444:	1007883a 	mov	r3,r2
   21448:	e0bffd17 	ldw	r2,-12(fp)
   2144c:	10c5883a 	add	r2,r2,r3
   21450:	e0ffff17 	ldw	r3,-4(fp)
   21454:	1800051e 	bne	r3,zero,2146c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   21458:	e0fffc17 	ldw	r3,-16(fp)
   2145c:	18c00a17 	ldw	r3,40(r3)
   21460:	18c00204 	addi	r3,r3,8
   21464:	18c00037 	ldwio	r3,0(r3)
   21468:	00000406 	br	2147c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   2146c:	e0fffc17 	ldw	r3,-16(fp)
   21470:	18c00a17 	ldw	r3,40(r3)
   21474:	18c00304 	addi	r3,r3,12
   21478:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   2147c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   21480:	e0bffa17 	ldw	r2,-24(fp)
   21484:	10800044 	addi	r2,r2,1
   21488:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   2148c:	e0fffa17 	ldw	r3,-24(fp)
   21490:	e0bffe17 	ldw	r2,-8(fp)
   21494:	18bfd816 	blt	r3,r2,213f8 <alt_up_audio_read_fifo+0x24>
   21498:	00000106 	br	214a0 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
   2149c:	0001883a 	nop
		}
	}
	return count;
   214a0:	e0bffa17 	ldw	r2,-24(fp)
}
   214a4:	e037883a 	mov	sp,fp
   214a8:	df000017 	ldw	fp,0(sp)
   214ac:	dec00104 	addi	sp,sp,4
   214b0:	f800283a 	ret

000214b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   214b4:	defff904 	addi	sp,sp,-28
   214b8:	df000615 	stw	fp,24(sp)
   214bc:	df000604 	addi	fp,sp,24
   214c0:	e13ffc15 	stw	r4,-16(fp)
   214c4:	e17ffd15 	stw	r5,-12(fp)
   214c8:	e1bffe15 	stw	r6,-8(fp)
   214cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   214d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   214d4:	00002f06 	br	21594 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   214d8:	e0bffc17 	ldw	r2,-16(fp)
   214dc:	10800a17 	ldw	r2,40(r2)
   214e0:	10800104 	addi	r2,r2,4
   214e4:	10800037 	ldwio	r2,0(r2)
   214e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   214ec:	e0bfff17 	ldw	r2,-4(fp)
   214f0:	1000031e 	bne	r2,zero,21500 <alt_up_audio_write_fifo+0x4c>
   214f4:	e0bffb17 	ldw	r2,-20(fp)
   214f8:	1004d63a 	srli	r2,r2,24
   214fc:	00000306 	br	2150c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   21500:	e0bffb17 	ldw	r2,-20(fp)
   21504:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   21508:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   2150c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   21510:	e0bffb17 	ldw	r2,-20(fp)
   21514:	10002326 	beq	r2,zero,215a4 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   21518:	e0bfff17 	ldw	r2,-4(fp)
   2151c:	10000f1e 	bne	r2,zero,2155c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   21520:	e0bffc17 	ldw	r2,-16(fp)
   21524:	10800a17 	ldw	r2,40(r2)
   21528:	10800204 	addi	r2,r2,8
   2152c:	1009883a 	mov	r4,r2
   21530:	e0bffa17 	ldw	r2,-24(fp)
   21534:	10c00044 	addi	r3,r2,1
   21538:	e0fffa15 	stw	r3,-24(fp)
   2153c:	1085883a 	add	r2,r2,r2
   21540:	1085883a 	add	r2,r2,r2
   21544:	1007883a 	mov	r3,r2
   21548:	e0bffd17 	ldw	r2,-12(fp)
   2154c:	10c5883a 	add	r2,r2,r3
   21550:	10800017 	ldw	r2,0(r2)
   21554:	20800035 	stwio	r2,0(r4)
   21558:	00000e06 	br	21594 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   2155c:	e0bffc17 	ldw	r2,-16(fp)
   21560:	10800a17 	ldw	r2,40(r2)
   21564:	10800304 	addi	r2,r2,12
   21568:	1009883a 	mov	r4,r2
   2156c:	e0bffa17 	ldw	r2,-24(fp)
   21570:	10c00044 	addi	r3,r2,1
   21574:	e0fffa15 	stw	r3,-24(fp)
   21578:	1085883a 	add	r2,r2,r2
   2157c:	1085883a 	add	r2,r2,r2
   21580:	1007883a 	mov	r3,r2
   21584:	e0bffd17 	ldw	r2,-12(fp)
   21588:	10c5883a 	add	r2,r2,r3
   2158c:	10800017 	ldw	r2,0(r2)
   21590:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   21594:	e0fffa17 	ldw	r3,-24(fp)
   21598:	e0bffe17 	ldw	r2,-8(fp)
   2159c:	18bfce16 	blt	r3,r2,214d8 <alt_up_audio_write_fifo+0x24>
   215a0:	00000106 	br	215a8 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
   215a4:	0001883a 	nop
		}
	}
	return count;
   215a8:	e0bffa17 	ldw	r2,-24(fp)
}
   215ac:	e037883a 	mov	sp,fp
   215b0:	df000017 	ldw	fp,0(sp)
   215b4:	dec00104 	addi	sp,sp,4
   215b8:	f800283a 	ret

000215bc <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   215bc:	defffd04 	addi	sp,sp,-12
   215c0:	df000215 	stw	fp,8(sp)
   215c4:	df000204 	addi	fp,sp,8
   215c8:	e13ffe15 	stw	r4,-8(fp)
   215cc:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	1000051e 	bne	r2,zero,215ec <alt_up_audio_read_fifo_head+0x30>
   215d8:	e0bffe17 	ldw	r2,-8(fp)
   215dc:	10800a17 	ldw	r2,40(r2)
   215e0:	10800204 	addi	r2,r2,8
   215e4:	10800037 	ldwio	r2,0(r2)
   215e8:	00000406 	br	215fc <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   215ec:	e0bffe17 	ldw	r2,-8(fp)
   215f0:	10800a17 	ldw	r2,40(r2)
   215f4:	10800304 	addi	r2,r2,12
   215f8:	10800037 	ldwio	r2,0(r2)
}
   215fc:	e037883a 	mov	sp,fp
   21600:	df000017 	ldw	fp,0(sp)
   21604:	dec00104 	addi	sp,sp,4
   21608:	f800283a 	ret

0002160c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   2160c:	defffc04 	addi	sp,sp,-16
   21610:	df000315 	stw	fp,12(sp)
   21614:	df000304 	addi	fp,sp,12
   21618:	e13ffd15 	stw	r4,-12(fp)
   2161c:	e17ffe15 	stw	r5,-8(fp)
   21620:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   21624:	e0bfff17 	ldw	r2,-4(fp)
   21628:	1000071e 	bne	r2,zero,21648 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   2162c:	e0bffd17 	ldw	r2,-12(fp)
   21630:	10800a17 	ldw	r2,40(r2)
   21634:	10800204 	addi	r2,r2,8
   21638:	1007883a 	mov	r3,r2
   2163c:	e0bffe17 	ldw	r2,-8(fp)
   21640:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
   21644:	00000606 	br	21660 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   21648:	e0bffd17 	ldw	r2,-12(fp)
   2164c:	10800a17 	ldw	r2,40(r2)
   21650:	10800304 	addi	r2,r2,12
   21654:	1007883a 	mov	r3,r2
   21658:	e0bffe17 	ldw	r2,-8(fp)
   2165c:	18800035 	stwio	r2,0(r3)
}
   21660:	0001883a 	nop
   21664:	e037883a 	mov	sp,fp
   21668:	df000017 	ldw	fp,0(sp)
   2166c:	dec00104 	addi	sp,sp,4
   21670:	f800283a 	ret

00021674 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   21674:	defffc04 	addi	sp,sp,-16
   21678:	df000315 	stw	fp,12(sp)
   2167c:	df000304 	addi	fp,sp,12
   21680:	e13ffe15 	stw	r4,-8(fp)
   21684:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   21688:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   2168c:	e0bfff17 	ldw	r2,-4(fp)
   21690:	1000061e 	bne	r2,zero,216ac <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   21694:	e0bffe17 	ldw	r2,-8(fp)
   21698:	1007883a 	mov	r3,r2
   2169c:	e0bffd03 	ldbu	r2,-12(fp)
   216a0:	1884b03a 	or	r2,r3,r2
   216a4:	e0bffd05 	stb	r2,-12(fp)
   216a8:	00000806 	br	216cc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   216ac:	e0bffe17 	ldw	r2,-8(fp)
   216b0:	1007883a 	mov	r3,r2
   216b4:	e0bffd03 	ldbu	r2,-12(fp)
   216b8:	1884b03a 	or	r2,r3,r2
   216bc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   216c0:	e0bffd03 	ldbu	r2,-12(fp)
   216c4:	10801014 	ori	r2,r2,64
   216c8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   216cc:	e0fffd03 	ldbu	r3,-12(fp)
   216d0:	00bfe004 	movi	r2,-128
   216d4:	1884b03a 	or	r2,r3,r2
}
   216d8:	e037883a 	mov	sp,fp
   216dc:	df000017 	ldw	fp,0(sp)
   216e0:	dec00104 	addi	sp,sp,4
   216e4:	f800283a 	ret

000216e8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   216e8:	defffd04 	addi	sp,sp,-12
   216ec:	df000215 	stw	fp,8(sp)
   216f0:	df000204 	addi	fp,sp,8
   216f4:	e13ffe15 	stw	r4,-8(fp)
   216f8:	2805883a 	mov	r2,r5
   216fc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   21700:	e0bffe17 	ldw	r2,-8(fp)
   21704:	10800a17 	ldw	r2,40(r2)
   21708:	1007883a 	mov	r3,r2
   2170c:	e0bfff03 	ldbu	r2,-4(fp)
   21710:	18800025 	stbio	r2,0(r3)
}
   21714:	0001883a 	nop
   21718:	e037883a 	mov	sp,fp
   2171c:	df000017 	ldw	fp,0(sp)
   21720:	dec00104 	addi	sp,sp,4
   21724:	f800283a 	ret

00021728 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   21728:	defffe04 	addi	sp,sp,-8
   2172c:	df000115 	stw	fp,4(sp)
   21730:	df000104 	addi	fp,sp,4
   21734:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   21738:	e0bfff17 	ldw	r2,-4(fp)
   2173c:	10800a17 	ldw	r2,40(r2)
   21740:	1007883a 	mov	r3,r2
   21744:	00800044 	movi	r2,1
   21748:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   2174c:	0001883a 	nop
   21750:	e037883a 	mov	sp,fp
   21754:	df000017 	ldw	fp,0(sp)
   21758:	dec00104 	addi	sp,sp,4
   2175c:	f800283a 	ret

00021760 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   21760:	defffc04 	addi	sp,sp,-16
   21764:	dfc00315 	stw	ra,12(sp)
   21768:	df000215 	stw	fp,8(sp)
   2176c:	df000204 	addi	fp,sp,8
   21770:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   21774:	d1601b84 	addi	r5,gp,-32658
   21778:	e13fff17 	ldw	r4,-4(fp)
   2177c:	00231fc0 	call	231fc <alt_find_dev>
   21780:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   21784:	e0bffe17 	ldw	r2,-8(fp)
}
   21788:	e037883a 	mov	sp,fp
   2178c:	dfc00117 	ldw	ra,4(sp)
   21790:	df000017 	ldw	fp,0(sp)
   21794:	dec00204 	addi	sp,sp,8
   21798:	f800283a 	ret

0002179c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   2179c:	defffb04 	addi	sp,sp,-20
   217a0:	df000415 	stw	fp,16(sp)
   217a4:	df000404 	addi	fp,sp,16
   217a8:	e13ffd15 	stw	r4,-12(fp)
   217ac:	e17ffe15 	stw	r5,-8(fp)
   217b0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   217b4:	e03ffc15 	stw	zero,-16(fp)
   217b8:	00000f06 	br	217f8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   217bc:	e0bffd17 	ldw	r2,-12(fp)
   217c0:	10800a17 	ldw	r2,40(r2)
   217c4:	10800044 	addi	r2,r2,1
   217c8:	1009883a 	mov	r4,r2
   217cc:	e0fffe17 	ldw	r3,-8(fp)
   217d0:	e0bffc17 	ldw	r2,-16(fp)
   217d4:	1885883a 	add	r2,r3,r2
   217d8:	10800003 	ldbu	r2,0(r2)
   217dc:	10803fcc 	andi	r2,r2,255
   217e0:	1080201c 	xori	r2,r2,128
   217e4:	10bfe004 	addi	r2,r2,-128
   217e8:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   217ec:	e0bffc17 	ldw	r2,-16(fp)
   217f0:	10800044 	addi	r2,r2,1
   217f4:	e0bffc15 	stw	r2,-16(fp)
   217f8:	e0fffc17 	ldw	r3,-16(fp)
   217fc:	e0bfff17 	ldw	r2,-4(fp)
   21800:	18bfee36 	bltu	r3,r2,217bc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   21804:	0001883a 	nop
   21808:	e037883a 	mov	sp,fp
   2180c:	df000017 	ldw	fp,0(sp)
   21810:	dec00104 	addi	sp,sp,4
   21814:	f800283a 	ret

00021818 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   21818:	defffd04 	addi	sp,sp,-12
   2181c:	df000215 	stw	fp,8(sp)
   21820:	df000204 	addi	fp,sp,8
   21824:	e13ffe15 	stw	r4,-8(fp)
   21828:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   2182c:	00000d06 	br	21864 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   21830:	e0bffe17 	ldw	r2,-8(fp)
   21834:	10800a17 	ldw	r2,40(r2)
   21838:	10800044 	addi	r2,r2,1
   2183c:	1007883a 	mov	r3,r2
   21840:	e0bfff17 	ldw	r2,-4(fp)
   21844:	10800003 	ldbu	r2,0(r2)
   21848:	10803fcc 	andi	r2,r2,255
   2184c:	1080201c 	xori	r2,r2,128
   21850:	10bfe004 	addi	r2,r2,-128
   21854:	18800025 	stbio	r2,0(r3)
		++ptr;
   21858:	e0bfff17 	ldw	r2,-4(fp)
   2185c:	10800044 	addi	r2,r2,1
   21860:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   21864:	e0bfff17 	ldw	r2,-4(fp)
   21868:	10800003 	ldbu	r2,0(r2)
   2186c:	10803fcc 	andi	r2,r2,255
   21870:	1080201c 	xori	r2,r2,128
   21874:	10bfe004 	addi	r2,r2,-128
   21878:	103fed1e 	bne	r2,zero,21830 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   2187c:	0001883a 	nop
   21880:	e037883a 	mov	sp,fp
   21884:	df000017 	ldw	fp,0(sp)
   21888:	dec00104 	addi	sp,sp,4
   2188c:	f800283a 	ret

00021890 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   21890:	defffb04 	addi	sp,sp,-20
   21894:	dfc00415 	stw	ra,16(sp)
   21898:	df000315 	stw	fp,12(sp)
   2189c:	df000304 	addi	fp,sp,12
   218a0:	e13ffd15 	stw	r4,-12(fp)
   218a4:	e17ffe15 	stw	r5,-8(fp)
   218a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   218ac:	e0bffd17 	ldw	r2,-12(fp)
   218b0:	10800017 	ldw	r2,0(r2)
   218b4:	e0ffff17 	ldw	r3,-4(fp)
   218b8:	180d883a 	mov	r6,r3
   218bc:	e17ffe17 	ldw	r5,-8(fp)
   218c0:	1009883a 	mov	r4,r2
   218c4:	002179c0 	call	2179c <alt_up_character_lcd_write>
	return 0;
   218c8:	0005883a 	mov	r2,zero
}
   218cc:	e037883a 	mov	sp,fp
   218d0:	dfc00117 	ldw	ra,4(sp)
   218d4:	df000017 	ldw	fp,0(sp)
   218d8:	dec00204 	addi	sp,sp,8
   218dc:	f800283a 	ret

000218e0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   218e0:	defffa04 	addi	sp,sp,-24
   218e4:	dfc00515 	stw	ra,20(sp)
   218e8:	df000415 	stw	fp,16(sp)
   218ec:	df000404 	addi	fp,sp,16
   218f0:	e13ffd15 	stw	r4,-12(fp)
   218f4:	e17ffe15 	stw	r5,-8(fp)
   218f8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   218fc:	e0bffe17 	ldw	r2,-8(fp)
   21900:	10800a28 	cmpgeui	r2,r2,40
   21904:	1000031e 	bne	r2,zero,21914 <alt_up_character_lcd_set_cursor_pos+0x34>
   21908:	e0bfff17 	ldw	r2,-4(fp)
   2190c:	108000b0 	cmpltui	r2,r2,2
   21910:	1000021e 	bne	r2,zero,2191c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   21914:	00bfffc4 	movi	r2,-1
   21918:	00000906 	br	21940 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   2191c:	e17fff17 	ldw	r5,-4(fp)
   21920:	e13ffe17 	ldw	r4,-8(fp)
   21924:	00216740 	call	21674 <get_DDRAM_addr>
   21928:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   2192c:	e0bffc03 	ldbu	r2,-16(fp)
   21930:	100b883a 	mov	r5,r2
   21934:	e13ffd17 	ldw	r4,-12(fp)
   21938:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
	return 0;
   2193c:	0005883a 	mov	r2,zero
}
   21940:	e037883a 	mov	sp,fp
   21944:	dfc00117 	ldw	ra,4(sp)
   21948:	df000017 	ldw	fp,0(sp)
   2194c:	dec00204 	addi	sp,sp,8
   21950:	f800283a 	ret

00021954 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   21954:	defffb04 	addi	sp,sp,-20
   21958:	dfc00415 	stw	ra,16(sp)
   2195c:	df000315 	stw	fp,12(sp)
   21960:	df000304 	addi	fp,sp,12
   21964:	e13ffe15 	stw	r4,-8(fp)
   21968:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   2196c:	e0bfff17 	ldw	r2,-4(fp)
   21970:	10001526 	beq	r2,zero,219c8 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   21974:	e0bfff17 	ldw	r2,-4(fp)
   21978:	0080020e 	bge	zero,r2,21984 <alt_up_character_lcd_shift_cursor+0x30>
   2197c:	00800504 	movi	r2,20
   21980:	00000106 	br	21988 <alt_up_character_lcd_shift_cursor+0x34>
   21984:	00800404 	movi	r2,16
   21988:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   2198c:	e0bfff17 	ldw	r2,-4(fp)
   21990:	1000010e 	bge	r2,zero,21998 <alt_up_character_lcd_shift_cursor+0x44>
   21994:	0085c83a 	sub	r2,zero,r2
   21998:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   2199c:	00000406 	br	219b0 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   219a0:	e0bffd43 	ldbu	r2,-11(fp)
   219a4:	100b883a 	mov	r5,r2
   219a8:	e13ffe17 	ldw	r4,-8(fp)
   219ac:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   219b0:	e0bffd03 	ldbu	r2,-12(fp)
   219b4:	10ffffc4 	addi	r3,r2,-1
   219b8:	e0fffd05 	stb	r3,-12(fp)
   219bc:	10803fcc 	andi	r2,r2,255
   219c0:	103ff71e 	bne	r2,zero,219a0 <alt_up_character_lcd_shift_cursor+0x4c>
   219c4:	00000106 	br	219cc <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   219c8:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   219cc:	e037883a 	mov	sp,fp
   219d0:	dfc00117 	ldw	ra,4(sp)
   219d4:	df000017 	ldw	fp,0(sp)
   219d8:	dec00204 	addi	sp,sp,8
   219dc:	f800283a 	ret

000219e0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   219e0:	defffb04 	addi	sp,sp,-20
   219e4:	dfc00415 	stw	ra,16(sp)
   219e8:	df000315 	stw	fp,12(sp)
   219ec:	df000304 	addi	fp,sp,12
   219f0:	e13ffe15 	stw	r4,-8(fp)
   219f4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   219f8:	e0bfff17 	ldw	r2,-4(fp)
   219fc:	10001526 	beq	r2,zero,21a54 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   21a00:	e0bfff17 	ldw	r2,-4(fp)
   21a04:	0080020e 	bge	zero,r2,21a10 <alt_up_character_lcd_shift_display+0x30>
   21a08:	00800704 	movi	r2,28
   21a0c:	00000106 	br	21a14 <alt_up_character_lcd_shift_display+0x34>
   21a10:	00800604 	movi	r2,24
   21a14:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   21a18:	e0bfff17 	ldw	r2,-4(fp)
   21a1c:	1000010e 	bge	r2,zero,21a24 <alt_up_character_lcd_shift_display+0x44>
   21a20:	0085c83a 	sub	r2,zero,r2
   21a24:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   21a28:	00000406 	br	21a3c <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   21a2c:	e0bffd43 	ldbu	r2,-11(fp)
   21a30:	100b883a 	mov	r5,r2
   21a34:	e13ffe17 	ldw	r4,-8(fp)
   21a38:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   21a3c:	e0bffd03 	ldbu	r2,-12(fp)
   21a40:	10ffffc4 	addi	r3,r2,-1
   21a44:	e0fffd05 	stb	r3,-12(fp)
   21a48:	10803fcc 	andi	r2,r2,255
   21a4c:	103ff71e 	bne	r2,zero,21a2c <alt_up_character_lcd_shift_display+0x4c>
   21a50:	00000106 	br	21a58 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   21a54:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   21a58:	e037883a 	mov	sp,fp
   21a5c:	dfc00117 	ldw	ra,4(sp)
   21a60:	df000017 	ldw	fp,0(sp)
   21a64:	dec00204 	addi	sp,sp,8
   21a68:	f800283a 	ret

00021a6c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   21a6c:	defffa04 	addi	sp,sp,-24
   21a70:	dfc00515 	stw	ra,20(sp)
   21a74:	df000415 	stw	fp,16(sp)
   21a78:	df000404 	addi	fp,sp,16
   21a7c:	e13ffd15 	stw	r4,-12(fp)
   21a80:	e17ffe15 	stw	r5,-8(fp)
   21a84:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   21a88:	e0bffe17 	ldw	r2,-8(fp)
   21a8c:	10800a28 	cmpgeui	r2,r2,40
   21a90:	1000031e 	bne	r2,zero,21aa0 <alt_up_character_lcd_erase_pos+0x34>
   21a94:	e0bfff17 	ldw	r2,-4(fp)
   21a98:	108000b0 	cmpltui	r2,r2,2
   21a9c:	1000021e 	bne	r2,zero,21aa8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   21aa0:	00bfffc4 	movi	r2,-1
   21aa4:	00000f06 	br	21ae4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   21aa8:	e17fff17 	ldw	r5,-4(fp)
   21aac:	e13ffe17 	ldw	r4,-8(fp)
   21ab0:	00216740 	call	21674 <get_DDRAM_addr>
   21ab4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   21ab8:	e0bffc03 	ldbu	r2,-16(fp)
   21abc:	100b883a 	mov	r5,r2
   21ac0:	e13ffd17 	ldw	r4,-12(fp)
   21ac4:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   21ac8:	e0bffd17 	ldw	r2,-12(fp)
   21acc:	10800a17 	ldw	r2,40(r2)
   21ad0:	10800044 	addi	r2,r2,1
   21ad4:	1007883a 	mov	r3,r2
   21ad8:	00800084 	movi	r2,2
   21adc:	18800025 	stbio	r2,0(r3)
	return 0;
   21ae0:	0005883a 	mov	r2,zero
}
   21ae4:	e037883a 	mov	sp,fp
   21ae8:	dfc00117 	ldw	ra,4(sp)
   21aec:	df000017 	ldw	fp,0(sp)
   21af0:	dec00204 	addi	sp,sp,8
   21af4:	f800283a 	ret

00021af8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   21af8:	defffd04 	addi	sp,sp,-12
   21afc:	dfc00215 	stw	ra,8(sp)
   21b00:	df000115 	stw	fp,4(sp)
   21b04:	df000104 	addi	fp,sp,4
   21b08:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   21b0c:	01400304 	movi	r5,12
   21b10:	e13fff17 	ldw	r4,-4(fp)
   21b14:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
}
   21b18:	0001883a 	nop
   21b1c:	e037883a 	mov	sp,fp
   21b20:	dfc00117 	ldw	ra,4(sp)
   21b24:	df000017 	ldw	fp,0(sp)
   21b28:	dec00204 	addi	sp,sp,8
   21b2c:	f800283a 	ret

00021b30 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   21b30:	defffd04 	addi	sp,sp,-12
   21b34:	dfc00215 	stw	ra,8(sp)
   21b38:	df000115 	stw	fp,4(sp)
   21b3c:	df000104 	addi	fp,sp,4
   21b40:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   21b44:	014003c4 	movi	r5,15
   21b48:	e13fff17 	ldw	r4,-4(fp)
   21b4c:	00216e80 	call	216e8 <alt_up_character_lcd_send_cmd>
}
   21b50:	0001883a 	nop
   21b54:	e037883a 	mov	sp,fp
   21b58:	dfc00117 	ldw	ra,4(sp)
   21b5c:	df000017 	ldw	fp,0(sp)
   21b60:	dec00204 	addi	sp,sp,8
   21b64:	f800283a 	ret

00021b68 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   21b68:	defffd04 	addi	sp,sp,-12
   21b6c:	df000215 	stw	fp,8(sp)
   21b70:	df000204 	addi	fp,sp,8
   21b74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   21b78:	e0bfff17 	ldw	r2,-4(fp)
   21b7c:	10800a17 	ldw	r2,40(r2)
   21b80:	10800104 	addi	r2,r2,4
   21b84:	10800037 	ldwio	r2,0(r2)
   21b88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   21b8c:	e0bffe17 	ldw	r2,-8(fp)
   21b90:	10800054 	ori	r2,r2,1
   21b94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   21b98:	e0bfff17 	ldw	r2,-4(fp)
   21b9c:	10800a17 	ldw	r2,40(r2)
   21ba0:	10800104 	addi	r2,r2,4
   21ba4:	1007883a 	mov	r3,r2
   21ba8:	e0bffe17 	ldw	r2,-8(fp)
   21bac:	18800035 	stwio	r2,0(r3)
}
   21bb0:	0001883a 	nop
   21bb4:	e037883a 	mov	sp,fp
   21bb8:	df000017 	ldw	fp,0(sp)
   21bbc:	dec00104 	addi	sp,sp,4
   21bc0:	f800283a 	ret

00021bc4 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   21bc4:	defffd04 	addi	sp,sp,-12
   21bc8:	df000215 	stw	fp,8(sp)
   21bcc:	df000204 	addi	fp,sp,8
   21bd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   21bd4:	e0bfff17 	ldw	r2,-4(fp)
   21bd8:	10800a17 	ldw	r2,40(r2)
   21bdc:	10800104 	addi	r2,r2,4
   21be0:	10800037 	ldwio	r2,0(r2)
   21be4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   21be8:	e0fffe17 	ldw	r3,-8(fp)
   21bec:	00bfff84 	movi	r2,-2
   21bf0:	1884703a 	and	r2,r3,r2
   21bf4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   21bf8:	e0bfff17 	ldw	r2,-4(fp)
   21bfc:	10800a17 	ldw	r2,40(r2)
   21c00:	10800104 	addi	r2,r2,4
   21c04:	1007883a 	mov	r3,r2
   21c08:	e0bffe17 	ldw	r2,-8(fp)
   21c0c:	18800035 	stwio	r2,0(r3)
}
   21c10:	0001883a 	nop
   21c14:	e037883a 	mov	sp,fp
   21c18:	df000017 	ldw	fp,0(sp)
   21c1c:	dec00104 	addi	sp,sp,4
   21c20:	f800283a 	ret

00021c24 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   21c24:	defffd04 	addi	sp,sp,-12
   21c28:	df000215 	stw	fp,8(sp)
   21c2c:	df000204 	addi	fp,sp,8
   21c30:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   21c34:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   21c38:	e0bfff17 	ldw	r2,-4(fp)
   21c3c:	10800a17 	ldw	r2,40(r2)
   21c40:	10800084 	addi	r2,r2,2
   21c44:	1080002b 	ldhuio	r2,0(r2)
   21c48:	10bfffcc 	andi	r2,r2,65535
   21c4c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   21c50:	e0bffe0b 	ldhu	r2,-8(fp)
}
   21c54:	e037883a 	mov	sp,fp
   21c58:	df000017 	ldw	fp,0(sp)
   21c5c:	dec00104 	addi	sp,sp,4
   21c60:	f800283a 	ret

00021c64 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   21c64:	defffd04 	addi	sp,sp,-12
   21c68:	df000215 	stw	fp,8(sp)
   21c6c:	df000204 	addi	fp,sp,8
   21c70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   21c74:	e0bfff17 	ldw	r2,-4(fp)
   21c78:	10800a17 	ldw	r2,40(r2)
   21c7c:	10800104 	addi	r2,r2,4
   21c80:	10800037 	ldwio	r2,0(r2)
   21c84:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   21c88:	e0bffe17 	ldw	r2,-8(fp)
   21c8c:	1004d43a 	srli	r2,r2,16
}
   21c90:	e037883a 	mov	sp,fp
   21c94:	df000017 	ldw	fp,0(sp)
   21c98:	dec00104 	addi	sp,sp,4
   21c9c:	f800283a 	ret

00021ca0 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   21ca0:	defffd04 	addi	sp,sp,-12
   21ca4:	df000215 	stw	fp,8(sp)
   21ca8:	df000204 	addi	fp,sp,8
   21cac:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   21cb0:	e0bfff17 	ldw	r2,-4(fp)
   21cb4:	1080800c 	andi	r2,r2,512
   21cb8:	1004d27a 	srli	r2,r2,9
   21cbc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   21cc0:	e0bffe17 	ldw	r2,-8(fp)
   21cc4:	10000226 	beq	r2,zero,21cd0 <alt_up_irda_check_parity+0x30>
   21cc8:	00bfffc4 	movi	r2,-1
   21ccc:	00000106 	br	21cd4 <alt_up_irda_check_parity+0x34>
   21cd0:	0005883a 	mov	r2,zero
}
   21cd4:	e037883a 	mov	sp,fp
   21cd8:	df000017 	ldw	fp,0(sp)
   21cdc:	dec00104 	addi	sp,sp,4
   21ce0:	f800283a 	ret

00021ce4 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   21ce4:	defffd04 	addi	sp,sp,-12
   21ce8:	df000215 	stw	fp,8(sp)
   21cec:	df000204 	addi	fp,sp,8
   21cf0:	e13ffe15 	stw	r4,-8(fp)
   21cf4:	2805883a 	mov	r2,r5
   21cf8:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   21cfc:	e0bffe17 	ldw	r2,-8(fp)
   21d00:	10800a17 	ldw	r2,40(r2)
   21d04:	1007883a 	mov	r3,r2
   21d08:	e0bfff03 	ldbu	r2,-4(fp)
   21d0c:	18800035 	stwio	r2,0(r3)
	return 0;
   21d10:	0005883a 	mov	r2,zero
}
   21d14:	e037883a 	mov	sp,fp
   21d18:	df000017 	ldw	fp,0(sp)
   21d1c:	dec00104 	addi	sp,sp,4
   21d20:	f800283a 	ret

00021d24 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   21d24:	defffa04 	addi	sp,sp,-24
   21d28:	dfc00515 	stw	ra,20(sp)
   21d2c:	df000415 	stw	fp,16(sp)
   21d30:	df000404 	addi	fp,sp,16
   21d34:	e13ffd15 	stw	r4,-12(fp)
   21d38:	e17ffe15 	stw	r5,-8(fp)
   21d3c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   21d40:	e0bffd17 	ldw	r2,-12(fp)
   21d44:	10800a17 	ldw	r2,40(r2)
   21d48:	10800037 	ldwio	r2,0(r2)
   21d4c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   21d50:	e0bffc17 	ldw	r2,-16(fp)
   21d54:	1007883a 	mov	r3,r2
   21d58:	e0bffe17 	ldw	r2,-8(fp)
   21d5c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   21d60:	e13ffc17 	ldw	r4,-16(fp)
   21d64:	0021ca00 	call	21ca0 <alt_up_irda_check_parity>
   21d68:	1007883a 	mov	r3,r2
   21d6c:	e0bfff17 	ldw	r2,-4(fp)
   21d70:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   21d74:	e0bffc17 	ldw	r2,-16(fp)
   21d78:	10a0000c 	andi	r2,r2,32768
   21d7c:	1004d3fa 	srli	r2,r2,15
   21d80:	10bfffc4 	addi	r2,r2,-1
}
   21d84:	e037883a 	mov	sp,fp
   21d88:	dfc00117 	ldw	ra,4(sp)
   21d8c:	df000017 	ldw	fp,0(sp)
   21d90:	dec00204 	addi	sp,sp,8
   21d94:	f800283a 	ret

00021d98 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   21d98:	defff804 	addi	sp,sp,-32
   21d9c:	dfc00715 	stw	ra,28(sp)
   21da0:	df000615 	stw	fp,24(sp)
   21da4:	df000604 	addi	fp,sp,24
   21da8:	e13ffd15 	stw	r4,-12(fp)
   21dac:	e17ffe15 	stw	r5,-8(fp)
   21db0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   21db4:	e0bffd17 	ldw	r2,-12(fp)
   21db8:	10800017 	ldw	r2,0(r2)
   21dbc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   21dc0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   21dc4:	00000c06 	br	21df8 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   21dc8:	e0bffe17 	ldw	r2,-8(fp)
   21dcc:	10c00044 	addi	r3,r2,1
   21dd0:	e0fffe15 	stw	r3,-8(fp)
   21dd4:	e0fffc04 	addi	r3,fp,-16
   21dd8:	180d883a 	mov	r6,r3
   21ddc:	100b883a 	mov	r5,r2
   21de0:	e13ffb17 	ldw	r4,-20(fp)
   21de4:	0021d240 	call	21d24 <alt_up_irda_read_data>
   21de8:	1000081e 	bne	r2,zero,21e0c <alt_up_irda_read_fd+0x74>
			count++;
   21dec:	e0bffa17 	ldw	r2,-24(fp)
   21df0:	10800044 	addi	r2,r2,1
   21df4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   21df8:	e0bfff17 	ldw	r2,-4(fp)
   21dfc:	10ffffc4 	addi	r3,r2,-1
   21e00:	e0ffff15 	stw	r3,-4(fp)
   21e04:	103ff01e 	bne	r2,zero,21dc8 <alt_up_irda_read_fd+0x30>
   21e08:	00000106 	br	21e10 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   21e0c:	0001883a 	nop
	}
	return count;
   21e10:	e0bffa17 	ldw	r2,-24(fp)
}
   21e14:	e037883a 	mov	sp,fp
   21e18:	dfc00117 	ldw	ra,4(sp)
   21e1c:	df000017 	ldw	fp,0(sp)
   21e20:	dec00204 	addi	sp,sp,8
   21e24:	f800283a 	ret

00021e28 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   21e28:	defff904 	addi	sp,sp,-28
   21e2c:	dfc00615 	stw	ra,24(sp)
   21e30:	df000515 	stw	fp,20(sp)
   21e34:	df000504 	addi	fp,sp,20
   21e38:	e13ffd15 	stw	r4,-12(fp)
   21e3c:	e17ffe15 	stw	r5,-8(fp)
   21e40:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   21e44:	e0bffd17 	ldw	r2,-12(fp)
   21e48:	10800017 	ldw	r2,0(r2)
   21e4c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   21e50:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   21e54:	00000c06 	br	21e88 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   21e58:	e0bffe17 	ldw	r2,-8(fp)
   21e5c:	10c00044 	addi	r3,r2,1
   21e60:	e0fffe15 	stw	r3,-8(fp)
   21e64:	10800003 	ldbu	r2,0(r2)
   21e68:	10803fcc 	andi	r2,r2,255
   21e6c:	100b883a 	mov	r5,r2
   21e70:	e13ffc17 	ldw	r4,-16(fp)
   21e74:	0021ce40 	call	21ce4 <alt_up_irda_write_data>
   21e78:	1000081e 	bne	r2,zero,21e9c <alt_up_irda_write_fd+0x74>
			count++;
   21e7c:	e0bffb17 	ldw	r2,-20(fp)
   21e80:	10800044 	addi	r2,r2,1
   21e84:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   21e88:	e0bfff17 	ldw	r2,-4(fp)
   21e8c:	10ffffc4 	addi	r3,r2,-1
   21e90:	e0ffff15 	stw	r3,-4(fp)
   21e94:	103ff01e 	bne	r2,zero,21e58 <alt_up_irda_write_fd+0x30>
   21e98:	00000106 	br	21ea0 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   21e9c:	0001883a 	nop
	}
	return count;
   21ea0:	e0bffb17 	ldw	r2,-20(fp)
}
   21ea4:	e037883a 	mov	sp,fp
   21ea8:	dfc00117 	ldw	ra,4(sp)
   21eac:	df000017 	ldw	fp,0(sp)
   21eb0:	dec00204 	addi	sp,sp,8
   21eb4:	f800283a 	ret

00021eb8 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   21eb8:	defffc04 	addi	sp,sp,-16
   21ebc:	dfc00315 	stw	ra,12(sp)
   21ec0:	df000215 	stw	fp,8(sp)
   21ec4:	df000204 	addi	fp,sp,8
   21ec8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   21ecc:	d1601b84 	addi	r5,gp,-32658
   21ed0:	e13fff17 	ldw	r4,-4(fp)
   21ed4:	00231fc0 	call	231fc <alt_find_dev>
   21ed8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   21edc:	e0bffe17 	ldw	r2,-8(fp)
}
   21ee0:	e037883a 	mov	sp,fp
   21ee4:	dfc00117 	ldw	ra,4(sp)
   21ee8:	df000017 	ldw	fp,0(sp)
   21eec:	dec00204 	addi	sp,sp,8
   21ef0:	f800283a 	ret

00021ef4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   21ef4:	defffd04 	addi	sp,sp,-12
   21ef8:	df000215 	stw	fp,8(sp)
   21efc:	df000204 	addi	fp,sp,8
   21f00:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   21f04:	e0bfff17 	ldw	r2,-4(fp)
   21f08:	1080400c 	andi	r2,r2,256
   21f0c:	1004d23a 	srli	r2,r2,8
   21f10:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   21f14:	e0bffe03 	ldbu	r2,-8(fp)
}
   21f18:	e037883a 	mov	sp,fp
   21f1c:	df000017 	ldw	fp,0(sp)
   21f20:	dec00104 	addi	sp,sp,4
   21f24:	f800283a 	ret

00021f28 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   21f28:	defffd04 	addi	sp,sp,-12
   21f2c:	df000215 	stw	fp,8(sp)
   21f30:	df000204 	addi	fp,sp,8
   21f34:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   21f38:	e0bfff17 	ldw	r2,-4(fp)
   21f3c:	1080004c 	andi	r2,r2,1
   21f40:	e0bffe05 	stb	r2,-8(fp)
	return re;
   21f44:	e0bffe03 	ldbu	r2,-8(fp)
}
   21f48:	e037883a 	mov	sp,fp
   21f4c:	df000017 	ldw	fp,0(sp)
   21f50:	dec00104 	addi	sp,sp,4
   21f54:	f800283a 	ret

00021f58 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   21f58:	defffd04 	addi	sp,sp,-12
   21f5c:	df000215 	stw	fp,8(sp)
   21f60:	df000204 	addi	fp,sp,8
   21f64:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   21f68:	e0bfff17 	ldw	r2,-4(fp)
   21f6c:	1081000c 	andi	r2,r2,1024
   21f70:	1004d2ba 	srli	r2,r2,10
   21f74:	e0bffe05 	stb	r2,-8(fp)
	return re;
   21f78:	e0bffe03 	ldbu	r2,-8(fp)
}
   21f7c:	e037883a 	mov	sp,fp
   21f80:	df000017 	ldw	fp,0(sp)
   21f84:	dec00104 	addi	sp,sp,4
   21f88:	f800283a 	ret

00021f8c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   21f8c:	defffd04 	addi	sp,sp,-12
   21f90:	df000215 	stw	fp,8(sp)
   21f94:	df000204 	addi	fp,sp,8
   21f98:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   21f9c:	e0bfff17 	ldw	r2,-4(fp)
   21fa0:	1004d43a 	srli	r2,r2,16
   21fa4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   21fa8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   21fac:	e037883a 	mov	sp,fp
   21fb0:	df000017 	ldw	fp,0(sp)
   21fb4:	dec00104 	addi	sp,sp,4
   21fb8:	f800283a 	ret

00021fbc <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   21fbc:	defffd04 	addi	sp,sp,-12
   21fc0:	df000215 	stw	fp,8(sp)
   21fc4:	df000204 	addi	fp,sp,8
   21fc8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   21fcc:	e0bfff17 	ldw	r2,-4(fp)
   21fd0:	10a0000c 	andi	r2,r2,32768
   21fd4:	1004d3fa 	srli	r2,r2,15
   21fd8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   21fdc:	e0bffe03 	ldbu	r2,-8(fp)
}
   21fe0:	e037883a 	mov	sp,fp
   21fe4:	df000017 	ldw	fp,0(sp)
   21fe8:	dec00104 	addi	sp,sp,4
   21fec:	f800283a 	ret

00021ff0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   21ff0:	defffd04 	addi	sp,sp,-12
   21ff4:	df000215 	stw	fp,8(sp)
   21ff8:	df000204 	addi	fp,sp,8
   21ffc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   22000:	e0bfff17 	ldw	r2,-4(fp)
   22004:	e0bffe05 	stb	r2,-8(fp)
	return data;
   22008:	e0bffe03 	ldbu	r2,-8(fp)
}
   2200c:	e037883a 	mov	sp,fp
   22010:	df000017 	ldw	fp,0(sp)
   22014:	dec00104 	addi	sp,sp,4
   22018:	f800283a 	ret

0002201c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   2201c:	defffb04 	addi	sp,sp,-20
   22020:	dfc00415 	stw	ra,16(sp)
   22024:	df000315 	stw	fp,12(sp)
   22028:	df000304 	addi	fp,sp,12
   2202c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   22030:	01403fc4 	movi	r5,255
   22034:	e13fff17 	ldw	r4,-4(fp)
   22038:	002227c0 	call	2227c <alt_up_ps2_write_data_byte_with_ack>
   2203c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   22040:	e0bffd17 	ldw	r2,-12(fp)
   22044:	1000211e 	bne	r2,zero,220cc <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   22048:	e0bffe04 	addi	r2,fp,-8
   2204c:	100b883a 	mov	r5,r2
   22050:	e13fff17 	ldw	r4,-4(fp)
   22054:	00222e00 	call	222e0 <alt_up_ps2_read_data_byte_timeout>
   22058:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   2205c:	e0bffd17 	ldw	r2,-12(fp)
   22060:	10001a1e 	bne	r2,zero,220cc <alt_up_ps2_init+0xb0>
   22064:	e0bffe03 	ldbu	r2,-8(fp)
   22068:	10803fcc 	andi	r2,r2,255
   2206c:	10802a98 	cmpnei	r2,r2,170
   22070:	1000161e 	bne	r2,zero,220cc <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   22074:	e0bffe04 	addi	r2,fp,-8
   22078:	100b883a 	mov	r5,r2
   2207c:	e13fff17 	ldw	r4,-4(fp)
   22080:	00222e00 	call	222e0 <alt_up_ps2_read_data_byte_timeout>
   22084:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   22088:	e0bffd17 	ldw	r2,-12(fp)
   2208c:	10bfe318 	cmpnei	r2,r2,-116
   22090:	1000041e 	bne	r2,zero,220a4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   22094:	e0bfff17 	ldw	r2,-4(fp)
   22098:	00c00044 	movi	r3,1
   2209c:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   220a0:	00000a06 	br	220cc <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   220a4:	e0bffd17 	ldw	r2,-12(fp)
   220a8:	1000081e 	bne	r2,zero,220cc <alt_up_ps2_init+0xb0>
   220ac:	e0bffe03 	ldbu	r2,-8(fp)
   220b0:	10803fcc 	andi	r2,r2,255
   220b4:	1000051e 	bne	r2,zero,220cc <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   220b8:	e0bfff17 	ldw	r2,-4(fp)
   220bc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   220c0:	01403d04 	movi	r5,244
   220c4:	e13fff17 	ldw	r4,-4(fp)
   220c8:	00221a00 	call	221a0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   220cc:	0001883a 	nop
   220d0:	e037883a 	mov	sp,fp
   220d4:	dfc00117 	ldw	ra,4(sp)
   220d8:	df000017 	ldw	fp,0(sp)
   220dc:	dec00204 	addi	sp,sp,8
   220e0:	f800283a 	ret

000220e4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   220e4:	defffd04 	addi	sp,sp,-12
   220e8:	df000215 	stw	fp,8(sp)
   220ec:	df000204 	addi	fp,sp,8
   220f0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   220f4:	e0bfff17 	ldw	r2,-4(fp)
   220f8:	10800a17 	ldw	r2,40(r2)
   220fc:	10800104 	addi	r2,r2,4
   22100:	10800037 	ldwio	r2,0(r2)
   22104:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   22108:	e0bffe17 	ldw	r2,-8(fp)
   2210c:	10800054 	ori	r2,r2,1
   22110:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   22114:	e0bfff17 	ldw	r2,-4(fp)
   22118:	10800a17 	ldw	r2,40(r2)
   2211c:	10800104 	addi	r2,r2,4
   22120:	1007883a 	mov	r3,r2
   22124:	e0bffe17 	ldw	r2,-8(fp)
   22128:	18800035 	stwio	r2,0(r3)
}
   2212c:	0001883a 	nop
   22130:	e037883a 	mov	sp,fp
   22134:	df000017 	ldw	fp,0(sp)
   22138:	dec00104 	addi	sp,sp,4
   2213c:	f800283a 	ret

00022140 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   22140:	defffd04 	addi	sp,sp,-12
   22144:	df000215 	stw	fp,8(sp)
   22148:	df000204 	addi	fp,sp,8
   2214c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   22150:	e0bfff17 	ldw	r2,-4(fp)
   22154:	10800a17 	ldw	r2,40(r2)
   22158:	10800104 	addi	r2,r2,4
   2215c:	10800037 	ldwio	r2,0(r2)
   22160:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   22164:	e0fffe17 	ldw	r3,-8(fp)
   22168:	00bfff84 	movi	r2,-2
   2216c:	1884703a 	and	r2,r3,r2
   22170:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   22174:	e0bfff17 	ldw	r2,-4(fp)
   22178:	10800a17 	ldw	r2,40(r2)
   2217c:	10800104 	addi	r2,r2,4
   22180:	1007883a 	mov	r3,r2
   22184:	e0bffe17 	ldw	r2,-8(fp)
   22188:	18800035 	stwio	r2,0(r3)
}
   2218c:	0001883a 	nop
   22190:	e037883a 	mov	sp,fp
   22194:	df000017 	ldw	fp,0(sp)
   22198:	dec00104 	addi	sp,sp,4
   2219c:	f800283a 	ret

000221a0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   221a0:	defffb04 	addi	sp,sp,-20
   221a4:	dfc00415 	stw	ra,16(sp)
   221a8:	df000315 	stw	fp,12(sp)
   221ac:	df000304 	addi	fp,sp,12
   221b0:	e13ffe15 	stw	r4,-8(fp)
   221b4:	2805883a 	mov	r2,r5
   221b8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   221bc:	e0bffe17 	ldw	r2,-8(fp)
   221c0:	10800a17 	ldw	r2,40(r2)
   221c4:	1007883a 	mov	r3,r2
   221c8:	e0bfff03 	ldbu	r2,-4(fp)
   221cc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   221d0:	e0bffe17 	ldw	r2,-8(fp)
   221d4:	10800a17 	ldw	r2,40(r2)
   221d8:	10800104 	addi	r2,r2,4
   221dc:	10800037 	ldwio	r2,0(r2)
   221e0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   221e4:	e13ffd17 	ldw	r4,-12(fp)
   221e8:	0021f580 	call	21f58 <read_CE_bit>
   221ec:	10803fcc 	andi	r2,r2,255
   221f0:	10000226 	beq	r2,zero,221fc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   221f4:	00bffec4 	movi	r2,-5
   221f8:	00000106 	br	22200 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   221fc:	0005883a 	mov	r2,zero
}
   22200:	e037883a 	mov	sp,fp
   22204:	dfc00117 	ldw	ra,4(sp)
   22208:	df000017 	ldw	fp,0(sp)
   2220c:	dec00204 	addi	sp,sp,8
   22210:	f800283a 	ret

00022214 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   22214:	defffc04 	addi	sp,sp,-16
   22218:	dfc00315 	stw	ra,12(sp)
   2221c:	df000215 	stw	fp,8(sp)
   22220:	df000204 	addi	fp,sp,8
   22224:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   22228:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   2222c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   22230:	e0bffe44 	addi	r2,fp,-7
   22234:	100b883a 	mov	r5,r2
   22238:	e13fff17 	ldw	r4,-4(fp)
   2223c:	00222e00 	call	222e0 <alt_up_ps2_read_data_byte_timeout>
   22240:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   22244:	e0bffe03 	ldbu	r2,-8(fp)
   22248:	1000061e 	bne	r2,zero,22264 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   2224c:	e0bffe43 	ldbu	r2,-7(fp)
   22250:	10803fcc 	andi	r2,r2,255
   22254:	10803e98 	cmpnei	r2,r2,250
   22258:	103ff51e 	bne	r2,zero,22230 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   2225c:	0005883a 	mov	r2,zero
   22260:	00000106 	br	22268 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   22264:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   22268:	e037883a 	mov	sp,fp
   2226c:	dfc00117 	ldw	ra,4(sp)
   22270:	df000017 	ldw	fp,0(sp)
   22274:	dec00204 	addi	sp,sp,8
   22278:	f800283a 	ret

0002227c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   2227c:	defffa04 	addi	sp,sp,-24
   22280:	dfc00515 	stw	ra,20(sp)
   22284:	df000415 	stw	fp,16(sp)
   22288:	df000404 	addi	fp,sp,16
   2228c:	e13ffe15 	stw	r4,-8(fp)
   22290:	2805883a 	mov	r2,r5
   22294:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   22298:	e0bfff03 	ldbu	r2,-4(fp)
   2229c:	100b883a 	mov	r5,r2
   222a0:	e13ffe17 	ldw	r4,-8(fp)
   222a4:	00221a00 	call	221a0 <alt_up_ps2_write_data_byte>
   222a8:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   222ac:	e0bffc17 	ldw	r2,-16(fp)
   222b0:	10000226 	beq	r2,zero,222bc <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   222b4:	e0bffc17 	ldw	r2,-16(fp)
   222b8:	00000406 	br	222cc <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   222bc:	e13ffe17 	ldw	r4,-8(fp)
   222c0:	00222140 	call	22214 <alt_up_ps2_wait_for_ack>
   222c4:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   222c8:	e0bffd17 	ldw	r2,-12(fp)
}
   222cc:	e037883a 	mov	sp,fp
   222d0:	dfc00117 	ldw	ra,4(sp)
   222d4:	df000017 	ldw	fp,0(sp)
   222d8:	dec00204 	addi	sp,sp,8
   222dc:	f800283a 	ret

000222e0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   222e0:	defffa04 	addi	sp,sp,-24
   222e4:	dfc00515 	stw	ra,20(sp)
   222e8:	df000415 	stw	fp,16(sp)
   222ec:	df000404 	addi	fp,sp,16
   222f0:	e13ffe15 	stw	r4,-8(fp)
   222f4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   222f8:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   222fc:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   22300:	e0bffc17 	ldw	r2,-16(fp)
   22304:	10800044 	addi	r2,r2,1
   22308:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   2230c:	e0bffe17 	ldw	r2,-8(fp)
   22310:	10800a17 	ldw	r2,40(r2)
   22314:	10800037 	ldwio	r2,0(r2)
   22318:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   2231c:	e13ffd17 	ldw	r4,-12(fp)
   22320:	0021fbc0 	call	21fbc <read_data_valid>
   22324:	10803fcc 	andi	r2,r2,255
   22328:	10000726 	beq	r2,zero,22348 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   2232c:	e13ffd17 	ldw	r4,-12(fp)
   22330:	0021ff00 	call	21ff0 <read_data_byte>
   22334:	1007883a 	mov	r3,r2
   22338:	e0bfff17 	ldw	r2,-4(fp)
   2233c:	10c00005 	stb	r3,0(r2)
			return 0;
   22340:	0005883a 	mov	r2,zero
   22344:	00000806 	br	22368 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   22348:	e0bffe17 	ldw	r2,-8(fp)
   2234c:	10800c17 	ldw	r2,48(r2)
   22350:	103feb26 	beq	r2,zero,22300 <alt_up_ps2_read_data_byte_timeout+0x20>
   22354:	e0bffe17 	ldw	r2,-8(fp)
   22358:	10c00c17 	ldw	r3,48(r2)
   2235c:	e0bffc17 	ldw	r2,-16(fp)
   22360:	18bfe72e 	bgeu	r3,r2,22300 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   22364:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   22368:	e037883a 	mov	sp,fp
   2236c:	dfc00117 	ldw	ra,4(sp)
   22370:	df000017 	ldw	fp,0(sp)
   22374:	dec00204 	addi	sp,sp,8
   22378:	f800283a 	ret

0002237c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   2237c:	defffb04 	addi	sp,sp,-20
   22380:	dfc00415 	stw	ra,16(sp)
   22384:	df000315 	stw	fp,12(sp)
   22388:	df000304 	addi	fp,sp,12
   2238c:	e13ffe15 	stw	r4,-8(fp)
   22390:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   22394:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   22398:	e0bffe17 	ldw	r2,-8(fp)
   2239c:	10800a17 	ldw	r2,40(r2)
   223a0:	10800037 	ldwio	r2,0(r2)
   223a4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   223a8:	e13ffd17 	ldw	r4,-12(fp)
   223ac:	0021fbc0 	call	21fbc <read_data_valid>
   223b0:	10803fcc 	andi	r2,r2,255
   223b4:	10000726 	beq	r2,zero,223d4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   223b8:	e13ffd17 	ldw	r4,-12(fp)
   223bc:	0021ff00 	call	21ff0 <read_data_byte>
   223c0:	1007883a 	mov	r3,r2
   223c4:	e0bfff17 	ldw	r2,-4(fp)
   223c8:	10c00005 	stb	r3,0(r2)
		return 0;
   223cc:	0005883a 	mov	r2,zero
   223d0:	00000106 	br	223d8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   223d4:	00bfffc4 	movi	r2,-1
}
   223d8:	e037883a 	mov	sp,fp
   223dc:	dfc00117 	ldw	ra,4(sp)
   223e0:	df000017 	ldw	fp,0(sp)
   223e4:	dec00204 	addi	sp,sp,8
   223e8:	f800283a 	ret

000223ec <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   223ec:	defffb04 	addi	sp,sp,-20
   223f0:	dfc00415 	stw	ra,16(sp)
   223f4:	df000315 	stw	fp,12(sp)
   223f8:	df000304 	addi	fp,sp,12
   223fc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   22400:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   22404:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   22408:	e0bfff17 	ldw	r2,-4(fp)
   2240c:	10800a17 	ldw	r2,40(r2)
   22410:	10800037 	ldwio	r2,0(r2)
   22414:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   22418:	e13ffe17 	ldw	r4,-8(fp)
   2241c:	0021f8c0 	call	21f8c <read_num_bytes_available>
   22420:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   22424:	e0bffd0b 	ldhu	r2,-12(fp)
   22428:	103ff71e 	bne	r2,zero,22408 <alt_up_ps2_clear_fifo+0x1c>
}
   2242c:	0001883a 	nop
   22430:	e037883a 	mov	sp,fp
   22434:	dfc00117 	ldw	ra,4(sp)
   22438:	df000017 	ldw	fp,0(sp)
   2243c:	dec00204 	addi	sp,sp,8
   22440:	f800283a 	ret

00022444 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   22444:	defff804 	addi	sp,sp,-32
   22448:	dfc00715 	stw	ra,28(sp)
   2244c:	df000615 	stw	fp,24(sp)
   22450:	df000604 	addi	fp,sp,24
   22454:	e13ffd15 	stw	r4,-12(fp)
   22458:	e17ffe15 	stw	r5,-8(fp)
   2245c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   22460:	e0bffd17 	ldw	r2,-12(fp)
   22464:	10800017 	ldw	r2,0(r2)
   22468:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   2246c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   22470:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   22474:	e0fffc17 	ldw	r3,-16(fp)
   22478:	e0bfff17 	ldw	r2,-4(fp)
   2247c:	18bffd16 	blt	r3,r2,22474 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   22480:	e0bffe17 	ldw	r2,-8(fp)
   22484:	10c00044 	addi	r3,r2,1
   22488:	e0fffe15 	stw	r3,-8(fp)
   2248c:	100b883a 	mov	r5,r2
   22490:	e13ffa17 	ldw	r4,-24(fp)
   22494:	00222e00 	call	222e0 <alt_up_ps2_read_data_byte_timeout>
   22498:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   2249c:	e0bffb17 	ldw	r2,-20(fp)
   224a0:	10000226 	beq	r2,zero,224ac <alt_up_ps2_read_fd+0x68>
			return count;
   224a4:	e0bffc17 	ldw	r2,-16(fp)
   224a8:	00000406 	br	224bc <alt_up_ps2_read_fd+0x78>
		count++;
   224ac:	e0bffc17 	ldw	r2,-16(fp)
   224b0:	10800044 	addi	r2,r2,1
   224b4:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   224b8:	e0bffc17 	ldw	r2,-16(fp)
}
   224bc:	e037883a 	mov	sp,fp
   224c0:	dfc00117 	ldw	ra,4(sp)
   224c4:	df000017 	ldw	fp,0(sp)
   224c8:	dec00204 	addi	sp,sp,8
   224cc:	f800283a 	ret

000224d0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   224d0:	defff804 	addi	sp,sp,-32
   224d4:	dfc00715 	stw	ra,28(sp)
   224d8:	df000615 	stw	fp,24(sp)
   224dc:	df000604 	addi	fp,sp,24
   224e0:	e13ffd15 	stw	r4,-12(fp)
   224e4:	e17ffe15 	stw	r5,-8(fp)
   224e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   224ec:	e0bffd17 	ldw	r2,-12(fp)
   224f0:	10800017 	ldw	r2,0(r2)
   224f4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   224f8:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   224fc:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   22500:	00001006 	br	22544 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   22504:	e0bffe17 	ldw	r2,-8(fp)
   22508:	10c00044 	addi	r3,r2,1
   2250c:	e0fffe15 	stw	r3,-8(fp)
   22510:	10800003 	ldbu	r2,0(r2)
   22514:	10803fcc 	andi	r2,r2,255
   22518:	100b883a 	mov	r5,r2
   2251c:	e13ffb17 	ldw	r4,-20(fp)
   22520:	00221a00 	call	221a0 <alt_up_ps2_write_data_byte>
   22524:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   22528:	e0bffc17 	ldw	r2,-16(fp)
   2252c:	10000226 	beq	r2,zero,22538 <alt_up_ps2_write_fd+0x68>
			return count;
   22530:	e0bffa17 	ldw	r2,-24(fp)
   22534:	00000706 	br	22554 <alt_up_ps2_write_fd+0x84>
		count++;
   22538:	e0bffa17 	ldw	r2,-24(fp)
   2253c:	10800044 	addi	r2,r2,1
   22540:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   22544:	e0fffa17 	ldw	r3,-24(fp)
   22548:	e0bfff17 	ldw	r2,-4(fp)
   2254c:	18bfed16 	blt	r3,r2,22504 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   22550:	e0bffa17 	ldw	r2,-24(fp)
}
   22554:	e037883a 	mov	sp,fp
   22558:	dfc00117 	ldw	ra,4(sp)
   2255c:	df000017 	ldw	fp,0(sp)
   22560:	dec00204 	addi	sp,sp,8
   22564:	f800283a 	ret

00022568 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   22568:	defffc04 	addi	sp,sp,-16
   2256c:	dfc00315 	stw	ra,12(sp)
   22570:	df000215 	stw	fp,8(sp)
   22574:	df000204 	addi	fp,sp,8
   22578:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   2257c:	d1601b84 	addi	r5,gp,-32658
   22580:	e13fff17 	ldw	r4,-4(fp)
   22584:	00231fc0 	call	231fc <alt_find_dev>
   22588:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2258c:	e0bffe17 	ldw	r2,-8(fp)
}
   22590:	e037883a 	mov	sp,fp
   22594:	dfc00117 	ldw	ra,4(sp)
   22598:	df000017 	ldw	fp,0(sp)
   2259c:	dec00204 	addi	sp,sp,8
   225a0:	f800283a 	ret

000225a4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   225a4:	defffd04 	addi	sp,sp,-12
   225a8:	df000215 	stw	fp,8(sp)
   225ac:	df000204 	addi	fp,sp,8
   225b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   225b4:	e0bfff17 	ldw	r2,-4(fp)
   225b8:	10800a17 	ldw	r2,40(r2)
   225bc:	10800104 	addi	r2,r2,4
   225c0:	10800037 	ldwio	r2,0(r2)
   225c4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   225c8:	e0bffe17 	ldw	r2,-8(fp)
   225cc:	10800054 	ori	r2,r2,1
   225d0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   225d4:	e0bfff17 	ldw	r2,-4(fp)
   225d8:	10800a17 	ldw	r2,40(r2)
   225dc:	10800104 	addi	r2,r2,4
   225e0:	1007883a 	mov	r3,r2
   225e4:	e0bffe17 	ldw	r2,-8(fp)
   225e8:	18800035 	stwio	r2,0(r3)
}
   225ec:	0001883a 	nop
   225f0:	e037883a 	mov	sp,fp
   225f4:	df000017 	ldw	fp,0(sp)
   225f8:	dec00104 	addi	sp,sp,4
   225fc:	f800283a 	ret

00022600 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   22600:	defffd04 	addi	sp,sp,-12
   22604:	df000215 	stw	fp,8(sp)
   22608:	df000204 	addi	fp,sp,8
   2260c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   22610:	e0bfff17 	ldw	r2,-4(fp)
   22614:	10800a17 	ldw	r2,40(r2)
   22618:	10800104 	addi	r2,r2,4
   2261c:	10800037 	ldwio	r2,0(r2)
   22620:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   22624:	e0fffe17 	ldw	r3,-8(fp)
   22628:	00bfff84 	movi	r2,-2
   2262c:	1884703a 	and	r2,r3,r2
   22630:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   22634:	e0bfff17 	ldw	r2,-4(fp)
   22638:	10800a17 	ldw	r2,40(r2)
   2263c:	10800104 	addi	r2,r2,4
   22640:	1007883a 	mov	r3,r2
   22644:	e0bffe17 	ldw	r2,-8(fp)
   22648:	18800035 	stwio	r2,0(r3)
}
   2264c:	0001883a 	nop
   22650:	e037883a 	mov	sp,fp
   22654:	df000017 	ldw	fp,0(sp)
   22658:	dec00104 	addi	sp,sp,4
   2265c:	f800283a 	ret

00022660 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   22660:	defffd04 	addi	sp,sp,-12
   22664:	df000215 	stw	fp,8(sp)
   22668:	df000204 	addi	fp,sp,8
   2266c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   22670:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   22674:	e0bfff17 	ldw	r2,-4(fp)
   22678:	10800a17 	ldw	r2,40(r2)
   2267c:	10800084 	addi	r2,r2,2
   22680:	1080002b 	ldhuio	r2,0(r2)
   22684:	10bfffcc 	andi	r2,r2,65535
   22688:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   2268c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   22690:	e037883a 	mov	sp,fp
   22694:	df000017 	ldw	fp,0(sp)
   22698:	dec00104 	addi	sp,sp,4
   2269c:	f800283a 	ret

000226a0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   226a0:	defffd04 	addi	sp,sp,-12
   226a4:	df000215 	stw	fp,8(sp)
   226a8:	df000204 	addi	fp,sp,8
   226ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   226b0:	e0bfff17 	ldw	r2,-4(fp)
   226b4:	10800a17 	ldw	r2,40(r2)
   226b8:	10800104 	addi	r2,r2,4
   226bc:	10800037 	ldwio	r2,0(r2)
   226c0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   226c4:	e0bffe17 	ldw	r2,-8(fp)
   226c8:	1004d43a 	srli	r2,r2,16
}
   226cc:	e037883a 	mov	sp,fp
   226d0:	df000017 	ldw	fp,0(sp)
   226d4:	dec00104 	addi	sp,sp,4
   226d8:	f800283a 	ret

000226dc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   226dc:	defffd04 	addi	sp,sp,-12
   226e0:	df000215 	stw	fp,8(sp)
   226e4:	df000204 	addi	fp,sp,8
   226e8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   226ec:	e0bfff17 	ldw	r2,-4(fp)
   226f0:	1080800c 	andi	r2,r2,512
   226f4:	1004d27a 	srli	r2,r2,9
   226f8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   226fc:	e0bffe17 	ldw	r2,-8(fp)
   22700:	10000226 	beq	r2,zero,2270c <alt_up_rs232_check_parity+0x30>
   22704:	00bfffc4 	movi	r2,-1
   22708:	00000106 	br	22710 <alt_up_rs232_check_parity+0x34>
   2270c:	0005883a 	mov	r2,zero
}
   22710:	e037883a 	mov	sp,fp
   22714:	df000017 	ldw	fp,0(sp)
   22718:	dec00104 	addi	sp,sp,4
   2271c:	f800283a 	ret

00022720 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   22720:	defffd04 	addi	sp,sp,-12
   22724:	df000215 	stw	fp,8(sp)
   22728:	df000204 	addi	fp,sp,8
   2272c:	e13ffe15 	stw	r4,-8(fp)
   22730:	2805883a 	mov	r2,r5
   22734:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   22738:	e0bffe17 	ldw	r2,-8(fp)
   2273c:	10800a17 	ldw	r2,40(r2)
   22740:	1007883a 	mov	r3,r2
   22744:	e0bfff03 	ldbu	r2,-4(fp)
   22748:	18800035 	stwio	r2,0(r3)
	return 0;
   2274c:	0005883a 	mov	r2,zero
}
   22750:	e037883a 	mov	sp,fp
   22754:	df000017 	ldw	fp,0(sp)
   22758:	dec00104 	addi	sp,sp,4
   2275c:	f800283a 	ret

00022760 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   22760:	defffa04 	addi	sp,sp,-24
   22764:	dfc00515 	stw	ra,20(sp)
   22768:	df000415 	stw	fp,16(sp)
   2276c:	df000404 	addi	fp,sp,16
   22770:	e13ffd15 	stw	r4,-12(fp)
   22774:	e17ffe15 	stw	r5,-8(fp)
   22778:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   2277c:	e0bffd17 	ldw	r2,-12(fp)
   22780:	10800a17 	ldw	r2,40(r2)
   22784:	10800037 	ldwio	r2,0(r2)
   22788:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   2278c:	e0bffc17 	ldw	r2,-16(fp)
   22790:	1007883a 	mov	r3,r2
   22794:	e0bffe17 	ldw	r2,-8(fp)
   22798:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   2279c:	e13ffc17 	ldw	r4,-16(fp)
   227a0:	00226dc0 	call	226dc <alt_up_rs232_check_parity>
   227a4:	1007883a 	mov	r3,r2
   227a8:	e0bfff17 	ldw	r2,-4(fp)
   227ac:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   227b0:	e0bffc17 	ldw	r2,-16(fp)
   227b4:	10a0000c 	andi	r2,r2,32768
   227b8:	1004d3fa 	srli	r2,r2,15
   227bc:	10bfffc4 	addi	r2,r2,-1
}
   227c0:	e037883a 	mov	sp,fp
   227c4:	dfc00117 	ldw	ra,4(sp)
   227c8:	df000017 	ldw	fp,0(sp)
   227cc:	dec00204 	addi	sp,sp,8
   227d0:	f800283a 	ret

000227d4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   227d4:	defff804 	addi	sp,sp,-32
   227d8:	dfc00715 	stw	ra,28(sp)
   227dc:	df000615 	stw	fp,24(sp)
   227e0:	df000604 	addi	fp,sp,24
   227e4:	e13ffd15 	stw	r4,-12(fp)
   227e8:	e17ffe15 	stw	r5,-8(fp)
   227ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   227f0:	e0bffd17 	ldw	r2,-12(fp)
   227f4:	10800017 	ldw	r2,0(r2)
   227f8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   227fc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   22800:	00000c06 	br	22834 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   22804:	e0bffe17 	ldw	r2,-8(fp)
   22808:	10c00044 	addi	r3,r2,1
   2280c:	e0fffe15 	stw	r3,-8(fp)
   22810:	e0fffc04 	addi	r3,fp,-16
   22814:	180d883a 	mov	r6,r3
   22818:	100b883a 	mov	r5,r2
   2281c:	e13ffb17 	ldw	r4,-20(fp)
   22820:	00227600 	call	22760 <alt_up_rs232_read_data>
   22824:	1000081e 	bne	r2,zero,22848 <alt_up_rs232_read_fd+0x74>
			count++;
   22828:	e0bffa17 	ldw	r2,-24(fp)
   2282c:	10800044 	addi	r2,r2,1
   22830:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   22834:	e0bfff17 	ldw	r2,-4(fp)
   22838:	10ffffc4 	addi	r3,r2,-1
   2283c:	e0ffff15 	stw	r3,-4(fp)
   22840:	103ff01e 	bne	r2,zero,22804 <alt_up_rs232_read_fd+0x30>
   22844:	00000106 	br	2284c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   22848:	0001883a 	nop
	}
	return count;
   2284c:	e0bffa17 	ldw	r2,-24(fp)
}
   22850:	e037883a 	mov	sp,fp
   22854:	dfc00117 	ldw	ra,4(sp)
   22858:	df000017 	ldw	fp,0(sp)
   2285c:	dec00204 	addi	sp,sp,8
   22860:	f800283a 	ret

00022864 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   22864:	defff904 	addi	sp,sp,-28
   22868:	dfc00615 	stw	ra,24(sp)
   2286c:	df000515 	stw	fp,20(sp)
   22870:	df000504 	addi	fp,sp,20
   22874:	e13ffd15 	stw	r4,-12(fp)
   22878:	e17ffe15 	stw	r5,-8(fp)
   2287c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   22880:	e0bffd17 	ldw	r2,-12(fp)
   22884:	10800017 	ldw	r2,0(r2)
   22888:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   2288c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   22890:	00000d06 	br	228c8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   22894:	e0bffe17 	ldw	r2,-8(fp)
   22898:	10800003 	ldbu	r2,0(r2)
   2289c:	10803fcc 	andi	r2,r2,255
   228a0:	100b883a 	mov	r5,r2
   228a4:	e13ffc17 	ldw	r4,-16(fp)
   228a8:	00227200 	call	22720 <alt_up_rs232_write_data>
   228ac:	10000b1e 	bne	r2,zero,228dc <alt_up_rs232_write_fd+0x78>
		{
			count++;
   228b0:	e0bffb17 	ldw	r2,-20(fp)
   228b4:	10800044 	addi	r2,r2,1
   228b8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   228bc:	e0bffe17 	ldw	r2,-8(fp)
   228c0:	10800044 	addi	r2,r2,1
   228c4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   228c8:	e0bfff17 	ldw	r2,-4(fp)
   228cc:	10ffffc4 	addi	r3,r2,-1
   228d0:	e0ffff15 	stw	r3,-4(fp)
   228d4:	103fef1e 	bne	r2,zero,22894 <alt_up_rs232_write_fd+0x30>
   228d8:	00000106 	br	228e0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   228dc:	0001883a 	nop
	}
	return count;
   228e0:	e0bffb17 	ldw	r2,-20(fp)
}
   228e4:	e037883a 	mov	sp,fp
   228e8:	dfc00117 	ldw	ra,4(sp)
   228ec:	df000017 	ldw	fp,0(sp)
   228f0:	dec00204 	addi	sp,sp,8
   228f4:	f800283a 	ret

000228f8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   228f8:	defffc04 	addi	sp,sp,-16
   228fc:	dfc00315 	stw	ra,12(sp)
   22900:	df000215 	stw	fp,8(sp)
   22904:	df000204 	addi	fp,sp,8
   22908:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   2290c:	d1601b84 	addi	r5,gp,-32658
   22910:	e13fff17 	ldw	r4,-4(fp)
   22914:	00231fc0 	call	231fc <alt_find_dev>
   22918:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2291c:	e0bffe17 	ldw	r2,-8(fp)
}
   22920:	e037883a 	mov	sp,fp
   22924:	dfc00117 	ldw	ra,4(sp)
   22928:	df000017 	ldw	fp,0(sp)
   2292c:	dec00204 	addi	sp,sp,8
   22930:	f800283a 	ret

00022934 <get_multi_byte_make_code_index>:
	STATE_DONE
} DECODE_STATE;

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
   22934:	defffd04 	addi	sp,sp,-12
   22938:	df000215 	stw	fp,8(sp)
   2293c:	df000204 	addi	fp,sp,8
   22940:	2005883a 	mov	r2,r4
   22944:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   22948:	e03ffe15 	stw	zero,-8(fp)
   2294c:	00000d06 	br	22984 <get_multi_byte_make_code_index+0x50>
	{
		if ( multi_byte_make_code[i] == code )
   22950:	008000b4 	movhi	r2,2
   22954:	109b8804 	addi	r2,r2,28192
   22958:	e0fffe17 	ldw	r3,-8(fp)
   2295c:	10c5883a 	add	r2,r2,r3
   22960:	10800003 	ldbu	r2,0(r2)
   22964:	10c03fcc 	andi	r3,r2,255
   22968:	e0bfff03 	ldbu	r2,-4(fp)
   2296c:	1880021e 	bne	r3,r2,22978 <get_multi_byte_make_code_index+0x44>
			return i;
   22970:	e0bffe17 	ldw	r2,-8(fp)
   22974:	00000706 	br	22994 <get_multi_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_multi_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   22978:	e0bffe17 	ldw	r2,-8(fp)
   2297c:	10800044 	addi	r2,r2,1
   22980:	e0bffe15 	stw	r2,-8(fp)
   22984:	e0bffe17 	ldw	r2,-8(fp)
   22988:	108019b0 	cmpltui	r2,r2,102
   2298c:	103ff01e 	bne	r2,zero,22950 <get_multi_byte_make_code_index+0x1c>
	{
		if ( multi_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   22990:	00801984 	movi	r2,102
}
   22994:	e037883a 	mov	sp,fp
   22998:	df000017 	ldw	fp,0(sp)
   2299c:	dec00104 	addi	sp,sp,4
   229a0:	f800283a 	ret

000229a4 <get_single_byte_make_code_index>:

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
   229a4:	defffd04 	addi	sp,sp,-12
   229a8:	df000215 	stw	fp,8(sp)
   229ac:	df000204 	addi	fp,sp,8
   229b0:	2005883a 	mov	r2,r4
   229b4:	e0bfff05 	stb	r2,-4(fp)
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   229b8:	e03ffe15 	stw	zero,-8(fp)
   229bc:	00000d06 	br	229f4 <get_single_byte_make_code_index+0x50>
	{
		if ( single_byte_make_code[i] == code )
   229c0:	008000b4 	movhi	r2,2
   229c4:	109b6e84 	addi	r2,r2,28090
   229c8:	e0fffe17 	ldw	r3,-8(fp)
   229cc:	10c5883a 	add	r2,r2,r3
   229d0:	10800003 	ldbu	r2,0(r2)
   229d4:	10c03fcc 	andi	r3,r2,255
   229d8:	e0bfff03 	ldbu	r2,-4(fp)
   229dc:	1880021e 	bne	r3,r2,229e8 <get_single_byte_make_code_index+0x44>
			return i;
   229e0:	e0bffe17 	ldw	r2,-8(fp)
   229e4:	00000706 	br	22a04 <get_single_byte_make_code_index+0x60>

//helper function for get_next_state
unsigned get_single_byte_make_code_index(alt_u8 code)
{
	unsigned i;
	for (i = 0; i < SCAN_CODE_NUM; i++ )
   229e8:	e0bffe17 	ldw	r2,-8(fp)
   229ec:	10800044 	addi	r2,r2,1
   229f0:	e0bffe15 	stw	r2,-8(fp)
   229f4:	e0bffe17 	ldw	r2,-8(fp)
   229f8:	108019b0 	cmpltui	r2,r2,102
   229fc:	103ff01e 	bne	r2,zero,229c0 <get_single_byte_make_code_index+0x1c>
	{
		if ( single_byte_make_code[i] == code )
			return i;
	}
	return SCAN_CODE_NUM;
   22a00:	00801984 	movi	r2,102
}
   22a04:	e037883a 	mov	sp,fp
   22a08:	df000017 	ldw	fp,0(sp)
   22a0c:	dec00104 	addi	sp,sp,4
   22a10:	f800283a 	ret

00022a14 <get_next_state>:
  +-------------------------------|

 */
DECODE_STATE get_next_state(DECODE_STATE state, alt_u8 byte,
		KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   22a14:	defff804 	addi	sp,sp,-32
   22a18:	dfc00715 	stw	ra,28(sp)
   22a1c:	df000615 	stw	fp,24(sp)
   22a20:	df000604 	addi	fp,sp,24
   22a24:	e13ffc15 	stw	r4,-16(fp)
   22a28:	2805883a 	mov	r2,r5
   22a2c:	e1bffe15 	stw	r6,-8(fp)
   22a30:	e1ffff15 	stw	r7,-4(fp)
   22a34:	e0bffd05 	stb	r2,-12(fp)
	DECODE_STATE next_state = STATE_INIT;
   22a38:	e03ffa15 	stw	zero,-24(fp)
	unsigned idx = SCAN_CODE_NUM;
   22a3c:	00801984 	movi	r2,102
   22a40:	e0bffb15 	stw	r2,-20(fp)
	*ascii = 0;
   22a44:	e0800217 	ldw	r2,8(fp)
   22a48:	10000005 	stb	zero,0(r2)
	switch (state)
   22a4c:	e0bffc17 	ldw	r2,-16(fp)
   22a50:	10c00060 	cmpeqi	r3,r2,1
   22a54:	1800391e 	bne	r3,zero,22b3c <get_next_state+0x128>
   22a58:	0080052e 	bgeu	zero,r2,22a70 <get_next_state+0x5c>
   22a5c:	10c000a0 	cmpeqi	r3,r2,2
   22a60:	18004b1e 	bne	r3,zero,22b90 <get_next_state+0x17c>
   22a64:	108000e0 	cmpeqi	r2,r2,3
   22a68:	10005e1e 	bne	r2,zero,22be4 <get_next_state+0x1d0>
   22a6c:	00007206 	br	22c38 <get_next_state+0x224>
	{
		case STATE_INIT:
			if ( byte == 0xE0 )
   22a70:	e0bffd03 	ldbu	r2,-12(fp)
   22a74:	10803818 	cmpnei	r2,r2,224
   22a78:	1000031e 	bne	r2,zero,22a88 <get_next_state+0x74>
			{
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
   22a7c:	00800044 	movi	r2,1
   22a80:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   22a84:	00007006 	br	22c48 <get_next_state+0x234>
			if ( byte == 0xE0 )
			{
				// this could be a long break code or a long make code
				next_state = STATE_LONG_CODE;
			}
			else if (byte == 0xF0)
   22a88:	e0bffd03 	ldbu	r2,-12(fp)
   22a8c:	10803c18 	cmpnei	r2,r2,240
   22a90:	1000031e 	bne	r2,zero,22aa0 <get_next_state+0x8c>
			{
				// it is a break code
				next_state = STATE_BREAK_CODE;
   22a94:	00800084 	movi	r2,2
   22a98:	e0bffa15 	stw	r2,-24(fp)
					*decode_mode = KB_BINARY_MAKE_CODE;
					*buf = byte;
				}
				next_state = STATE_DONE;
			}
			break;
   22a9c:	00006a06 	br	22c48 <get_next_state+0x234>
				next_state = STATE_BREAK_CODE;
			}
			else
			{
				// it is a normal make code
				idx = get_single_byte_make_code_index(byte);
   22aa0:	e0bffd03 	ldbu	r2,-12(fp)
   22aa4:	1009883a 	mov	r4,r2
   22aa8:	00229a40 	call	229a4 <get_single_byte_make_code_index>
   22aac:	e0bffb15 	stw	r2,-20(fp)
				if ( (idx < 40 || idx == 68 || idx > 79) && ( idx != SCAN_CODE_NUM ) )
   22ab0:	e0bffb17 	ldw	r2,-20(fp)
   22ab4:	10800a30 	cmpltui	r2,r2,40
   22ab8:	1000061e 	bne	r2,zero,22ad4 <get_next_state+0xc0>
   22abc:	e0bffb17 	ldw	r2,-20(fp)
   22ac0:	10801120 	cmpeqi	r2,r2,68
   22ac4:	1000031e 	bne	r2,zero,22ad4 <get_next_state+0xc0>
   22ac8:	e0bffb17 	ldw	r2,-20(fp)
   22acc:	10801430 	cmpltui	r2,r2,80
   22ad0:	1000111e 	bne	r2,zero,22b18 <get_next_state+0x104>
   22ad4:	e0bffb17 	ldw	r2,-20(fp)
   22ad8:	108019a0 	cmpeqi	r2,r2,102
   22adc:	10000e1e 	bne	r2,zero,22b18 <get_next_state+0x104>
				{
					*decode_mode = KB_ASCII_MAKE_CODE;
   22ae0:	e0bffe17 	ldw	r2,-8(fp)
   22ae4:	00c00044 	movi	r3,1
   22ae8:	10c00015 	stw	r3,0(r2)
					*ascii = ascii_codes[idx];
   22aec:	008000b4 	movhi	r2,2
   22af0:	109b5504 	addi	r2,r2,27988
   22af4:	e0fffb17 	ldw	r3,-20(fp)
   22af8:	10c5883a 	add	r2,r2,r3
   22afc:	10c00003 	ldbu	r3,0(r2)
   22b00:	e0800217 	ldw	r2,8(fp)
   22b04:	10c00005 	stb	r3,0(r2)
					*buf = byte;
   22b08:	e0bfff17 	ldw	r2,-4(fp)
   22b0c:	e0fffd03 	ldbu	r3,-12(fp)
   22b10:	10c00005 	stb	r3,0(r2)
   22b14:	00000606 	br	22b30 <get_next_state+0x11c>
				}
				else
				{
					*decode_mode = KB_BINARY_MAKE_CODE;
   22b18:	e0bffe17 	ldw	r2,-8(fp)
   22b1c:	00c00084 	movi	r3,2
   22b20:	10c00015 	stw	r3,0(r2)
					*buf = byte;
   22b24:	e0bfff17 	ldw	r2,-4(fp)
   22b28:	e0fffd03 	ldbu	r3,-12(fp)
   22b2c:	10c00005 	stb	r3,0(r2)
				}
				next_state = STATE_DONE;
   22b30:	00800104 	movi	r2,4
   22b34:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   22b38:	00004306 	br	22c48 <get_next_state+0x234>
		case STATE_LONG_CODE:
			if ( byte != 0xF0 && byte!= 0xE0)
   22b3c:	e0bffd03 	ldbu	r2,-12(fp)
   22b40:	10803c20 	cmpeqi	r2,r2,240
   22b44:	10000c1e 	bne	r2,zero,22b78 <get_next_state+0x164>
   22b48:	e0bffd03 	ldbu	r2,-12(fp)
   22b4c:	10803820 	cmpeqi	r2,r2,224
   22b50:	1000091e 	bne	r2,zero,22b78 <get_next_state+0x164>
			{
				*decode_mode = KB_LONG_BINARY_MAKE_CODE;
   22b54:	e0bffe17 	ldw	r2,-8(fp)
   22b58:	00c000c4 	movi	r3,3
   22b5c:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   22b60:	e0bfff17 	ldw	r2,-4(fp)
   22b64:	e0fffd03 	ldbu	r3,-12(fp)
   22b68:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   22b6c:	00800104 	movi	r2,4
   22b70:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				*decode_mode = KB_BREAK_CODE;
				next_state = STATE_LONG_BREAK_CODE;
			}
			break;
   22b74:	00003406 	br	22c48 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				*decode_mode = KB_BREAK_CODE;
   22b78:	e0bffe17 	ldw	r2,-8(fp)
   22b7c:	00c00104 	movi	r3,4
   22b80:	10c00015 	stw	r3,0(r2)
				next_state = STATE_LONG_BREAK_CODE;
   22b84:	008000c4 	movi	r2,3
   22b88:	e0bffa15 	stw	r2,-24(fp)
			}
			break;
   22b8c:	00002e06 	br	22c48 <get_next_state+0x234>
		case STATE_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   22b90:	e0bffd03 	ldbu	r2,-12(fp)
   22b94:	10803c20 	cmpeqi	r2,r2,240
   22b98:	10000c1e 	bne	r2,zero,22bcc <get_next_state+0x1b8>
   22b9c:	e0bffd03 	ldbu	r2,-12(fp)
   22ba0:	10803820 	cmpeqi	r2,r2,224
   22ba4:	1000091e 	bne	r2,zero,22bcc <get_next_state+0x1b8>
			{
				*decode_mode = KB_BREAK_CODE;
   22ba8:	e0bffe17 	ldw	r2,-8(fp)
   22bac:	00c00104 	movi	r3,4
   22bb0:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   22bb4:	e0bfff17 	ldw	r2,-4(fp)
   22bb8:	e0fffd03 	ldbu	r3,-12(fp)
   22bbc:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   22bc0:	00800104 	movi	r2,4
   22bc4:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_BREAK_CODE;
				*decode_mode = KB_BREAK_CODE;
			}
			break;
   22bc8:	00001f06 	br	22c48 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_BREAK_CODE;
   22bcc:	00800084 	movi	r2,2
   22bd0:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_BREAK_CODE;
   22bd4:	e0bffe17 	ldw	r2,-8(fp)
   22bd8:	00c00104 	movi	r3,4
   22bdc:	10c00015 	stw	r3,0(r2)
			}
			break;
   22be0:	00001906 	br	22c48 <get_next_state+0x234>
		case STATE_LONG_BREAK_CODE:
			if ( byte != 0xF0 && byte != 0xE0)
   22be4:	e0bffd03 	ldbu	r2,-12(fp)
   22be8:	10803c20 	cmpeqi	r2,r2,240
   22bec:	10000c1e 	bne	r2,zero,22c20 <get_next_state+0x20c>
   22bf0:	e0bffd03 	ldbu	r2,-12(fp)
   22bf4:	10803820 	cmpeqi	r2,r2,224
   22bf8:	1000091e 	bne	r2,zero,22c20 <get_next_state+0x20c>
			{
				*decode_mode = KB_LONG_BREAK_CODE;
   22bfc:	e0bffe17 	ldw	r2,-8(fp)
   22c00:	00c00144 	movi	r3,5
   22c04:	10c00015 	stw	r3,0(r2)
				*buf = byte;
   22c08:	e0bfff17 	ldw	r2,-4(fp)
   22c0c:	e0fffd03 	ldbu	r3,-12(fp)
   22c10:	10c00005 	stb	r3,0(r2)
				next_state = STATE_DONE;
   22c14:	00800104 	movi	r2,4
   22c18:	e0bffa15 	stw	r2,-24(fp)
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
				*decode_mode = KB_LONG_BREAK_CODE;
			}
			break;
   22c1c:	00000a06 	br	22c48 <get_next_state+0x234>
				*buf = byte;
				next_state = STATE_DONE;
			}
			else
			{
				next_state = STATE_LONG_BREAK_CODE;
   22c20:	008000c4 	movi	r2,3
   22c24:	e0bffa15 	stw	r2,-24(fp)
				*decode_mode = KB_LONG_BREAK_CODE;
   22c28:	e0bffe17 	ldw	r2,-8(fp)
   22c2c:	00c00144 	movi	r3,5
   22c30:	10c00015 	stw	r3,0(r2)
			}
			break;
   22c34:	00000406 	br	22c48 <get_next_state+0x234>
		default:
			*decode_mode = KB_INVALID_CODE;
   22c38:	e0bffe17 	ldw	r2,-8(fp)
   22c3c:	00c00184 	movi	r3,6
   22c40:	10c00015 	stw	r3,0(r2)
			next_state = STATE_INIT;
   22c44:	e03ffa15 	stw	zero,-24(fp)
	}
	return next_state;
   22c48:	e0bffa17 	ldw	r2,-24(fp)
}
   22c4c:	e037883a 	mov	sp,fp
   22c50:	dfc00117 	ldw	ra,4(sp)
   22c54:	df000017 	ldw	fp,0(sp)
   22c58:	dec00204 	addi	sp,sp,8
   22c5c:	f800283a 	ret

00022c60 <decode_scancode>:

int decode_scancode(alt_up_ps2_dev *ps2, KB_CODE_TYPE *decode_mode, alt_u8 *buf, char *ascii)
{
   22c60:	defff704 	addi	sp,sp,-36
   22c64:	dfc00815 	stw	ra,32(sp)
   22c68:	df000715 	stw	fp,28(sp)
   22c6c:	df000704 	addi	fp,sp,28
   22c70:	e13ffc15 	stw	r4,-16(fp)
   22c74:	e17ffd15 	stw	r5,-12(fp)
   22c78:	e1bffe15 	stw	r6,-8(fp)
   22c7c:	e1ffff15 	stw	r7,-4(fp)
	alt_u8 byte = 0;
   22c80:	e03ffb05 	stb	zero,-20(fp)
	int status_read =0;
   22c84:	e03ffa15 	stw	zero,-24(fp)
	*decode_mode = KB_INVALID_CODE;
   22c88:	e0bffd17 	ldw	r2,-12(fp)
   22c8c:	00c00184 	movi	r3,6
   22c90:	10c00015 	stw	r3,0(r2)
	static DECODE_STATE state = STATE_INIT;
	do
	{
		status_read = alt_up_ps2_read_data_byte(ps2, &byte);
   22c94:	e0bffb04 	addi	r2,fp,-20
   22c98:	100b883a 	mov	r5,r2
   22c9c:	e13ffc17 	ldw	r4,-16(fp)
   22ca0:	002237c0 	call	2237c <alt_up_ps2_read_data_byte>
   22ca4:	e0bffa15 	stw	r2,-24(fp)
		//FIXME: When the user press the keyboard extremely fast, data may get
		//occasionally get lost

		if (status_read != 0) {
   22ca8:	e0bffa17 	ldw	r2,-24(fp)
   22cac:	10000626 	beq	r2,zero,22cc8 <decode_scancode+0x68>
			if (state == STATE_INIT)
   22cb0:	d0a8ed97 	ldw	r2,-23626(gp)
   22cb4:	1000021e 	bne	r2,zero,22cc0 <decode_scancode+0x60>
				return status_read;
   22cb8:	e0bffa17 	ldw	r2,-24(fp)
   22cbc:	00001206 	br	22d08 <decode_scancode+0xa8>
			else
				return -2;
   22cc0:	00bfff84 	movi	r2,-2
   22cc4:	00001006 	br	22d08 <decode_scancode+0xa8>
		}

		state = get_next_state(state, byte, decode_mode, buf, ascii);
   22cc8:	d0e8ed97 	ldw	r3,-23626(gp)
   22ccc:	e0bffb03 	ldbu	r2,-20(fp)
   22cd0:	11003fcc 	andi	r4,r2,255
   22cd4:	e0bfff17 	ldw	r2,-4(fp)
   22cd8:	d8800015 	stw	r2,0(sp)
   22cdc:	e1fffe17 	ldw	r7,-8(fp)
   22ce0:	e1bffd17 	ldw	r6,-12(fp)
   22ce4:	200b883a 	mov	r5,r4
   22ce8:	1809883a 	mov	r4,r3
   22cec:	0022a140 	call	22a14 <get_next_state>
   22cf0:	d0a8ed95 	stw	r2,-23626(gp)
	} while ( state != STATE_DONE );
   22cf4:	d0a8ed97 	ldw	r2,-23626(gp)
   22cf8:	10800118 	cmpnei	r2,r2,4
   22cfc:	103fe51e 	bne	r2,zero,22c94 <decode_scancode+0x34>

	state = STATE_INIT;
   22d00:	d028ed95 	stw	zero,-23626(gp)

	return 0;
   22d04:	0005883a 	mov	r2,zero
}
   22d08:	e037883a 	mov	sp,fp
   22d0c:	dfc00117 	ldw	ra,4(sp)
   22d10:	df000017 	ldw	fp,0(sp)
   22d14:	dec00204 	addi	sp,sp,8
   22d18:	f800283a 	ret

00022d1c <set_keyboard_rate>:

alt_u32 set_keyboard_rate(alt_up_ps2_dev *ps2, alt_u8 rate)
{
   22d1c:	defffb04 	addi	sp,sp,-20
   22d20:	dfc00415 	stw	ra,16(sp)
   22d24:	df000315 	stw	fp,12(sp)
   22d28:	df000304 	addi	fp,sp,12
   22d2c:	e13ffe15 	stw	r4,-8(fp)
   22d30:	2805883a 	mov	r2,r5
   22d34:	e0bfff05 	stb	r2,-4(fp)
	// send the set keyboard rate command
	int status_send = alt_up_ps2_write_data_byte_with_ack(ps2, 0xF3);
   22d38:	01403cc4 	movi	r5,243
   22d3c:	e13ffe17 	ldw	r4,-8(fp)
   22d40:	002227c0 	call	2227c <alt_up_ps2_write_data_byte_with_ack>
   22d44:	e0bffd15 	stw	r2,-12(fp)
	if ( status_send == 0)
   22d48:	e0bffd17 	ldw	r2,-12(fp)
   22d4c:	1000061e 	bne	r2,zero,22d68 <set_keyboard_rate+0x4c>
	{
		// we received ACK, so send out the desired rate now
		status_send = alt_up_ps2_write_data_byte_with_ack(ps2, rate & 0x1F);
   22d50:	e0bfff03 	ldbu	r2,-4(fp)
   22d54:	108007cc 	andi	r2,r2,31
   22d58:	100b883a 	mov	r5,r2
   22d5c:	e13ffe17 	ldw	r4,-8(fp)
   22d60:	002227c0 	call	2227c <alt_up_ps2_write_data_byte_with_ack>
   22d64:	e0bffd15 	stw	r2,-12(fp)
	}
	return status_send;
   22d68:	e0bffd17 	ldw	r2,-12(fp)
}
   22d6c:	e037883a 	mov	sp,fp
   22d70:	dfc00117 	ldw	ra,4(sp)
   22d74:	df000017 	ldw	fp,0(sp)
   22d78:	dec00204 	addi	sp,sp,8
   22d7c:	f800283a 	ret

00022d80 <translate_make_code>:

void translate_make_code(KB_CODE_TYPE decode_mode, alt_u8 makecode, char *str)
{
   22d80:	defffa04 	addi	sp,sp,-24
   22d84:	dfc00515 	stw	ra,20(sp)
   22d88:	df000415 	stw	fp,16(sp)
   22d8c:	df000404 	addi	fp,sp,16
   22d90:	e13ffd15 	stw	r4,-12(fp)
   22d94:	2805883a 	mov	r2,r5
   22d98:	e1bfff15 	stw	r6,-4(fp)
   22d9c:	e0bffe05 	stb	r2,-8(fp)
	unsigned idx;
	switch (decode_mode)
   22da0:	e0bffd17 	ldw	r2,-12(fp)
   22da4:	10c000a0 	cmpeqi	r3,r2,2
   22da8:	1800131e 	bne	r3,zero,22df8 <translate_make_code+0x78>
   22dac:	10c000e0 	cmpeqi	r3,r2,3
   22db0:	1800201e 	bne	r3,zero,22e34 <translate_make_code+0xb4>
   22db4:	10800060 	cmpeqi	r2,r2,1
   22db8:	10002d26 	beq	r2,zero,22e70 <translate_make_code+0xf0>
	{
		case KB_ASCII_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   22dbc:	e0bffe03 	ldbu	r2,-8(fp)
   22dc0:	1009883a 	mov	r4,r2
   22dc4:	00229a40 	call	229a4 <get_single_byte_make_code_index>
   22dc8:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   22dcc:	008000b4 	movhi	r2,2
   22dd0:	109aef04 	addi	r2,r2,27580
   22dd4:	e0fffc17 	ldw	r3,-16(fp)
   22dd8:	18c7883a 	add	r3,r3,r3
   22ddc:	18c7883a 	add	r3,r3,r3
   22de0:	10c5883a 	add	r2,r2,r3
   22de4:	10800017 	ldw	r2,0(r2)
   22de8:	100b883a 	mov	r5,r2
   22dec:	e13fff17 	ldw	r4,-4(fp)
   22df0:	0002f300 	call	2f30 <strcpy>
			break;
   22df4:	00002206 	br	22e80 <translate_make_code+0x100>
		case KB_BINARY_MAKE_CODE:
			idx = get_single_byte_make_code_index(makecode);
   22df8:	e0bffe03 	ldbu	r2,-8(fp)
   22dfc:	1009883a 	mov	r4,r2
   22e00:	00229a40 	call	229a4 <get_single_byte_make_code_index>
   22e04:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   22e08:	008000b4 	movhi	r2,2
   22e0c:	109aef04 	addi	r2,r2,27580
   22e10:	e0fffc17 	ldw	r3,-16(fp)
   22e14:	18c7883a 	add	r3,r3,r3
   22e18:	18c7883a 	add	r3,r3,r3
   22e1c:	10c5883a 	add	r2,r2,r3
   22e20:	10800017 	ldw	r2,0(r2)
   22e24:	100b883a 	mov	r5,r2
   22e28:	e13fff17 	ldw	r4,-4(fp)
   22e2c:	0002f300 	call	2f30 <strcpy>
			break;
   22e30:	00001306 	br	22e80 <translate_make_code+0x100>
		case KB_LONG_BINARY_MAKE_CODE:
			idx = get_multi_byte_make_code_index(makecode);
   22e34:	e0bffe03 	ldbu	r2,-8(fp)
   22e38:	1009883a 	mov	r4,r2
   22e3c:	00229340 	call	22934 <get_multi_byte_make_code_index>
   22e40:	e0bffc15 	stw	r2,-16(fp)
			strcpy(str, key_table[idx]);
   22e44:	008000b4 	movhi	r2,2
   22e48:	109aef04 	addi	r2,r2,27580
   22e4c:	e0fffc17 	ldw	r3,-16(fp)
   22e50:	18c7883a 	add	r3,r3,r3
   22e54:	18c7883a 	add	r3,r3,r3
   22e58:	10c5883a 	add	r2,r2,r3
   22e5c:	10800017 	ldw	r2,0(r2)
   22e60:	100b883a 	mov	r5,r2
   22e64:	e13fff17 	ldw	r4,-4(fp)
   22e68:	0002f300 	call	2f30 <strcpy>
			break;
   22e6c:	00000406 	br	22e80 <translate_make_code+0x100>
		default:
			str = "";
   22e70:	008000b4 	movhi	r2,2
   22e74:	10937404 	addi	r2,r2,19920
   22e78:	e0bfff15 	stw	r2,-4(fp)
			break;
   22e7c:	0001883a 	nop
	}
}
   22e80:	0001883a 	nop
   22e84:	e037883a 	mov	sp,fp
   22e88:	dfc00117 	ldw	ra,4(sp)
   22e8c:	df000017 	ldw	fp,0(sp)
   22e90:	dec00204 	addi	sp,sp,8
   22e94:	f800283a 	ret

00022e98 <reset_keyboard>:


alt_u32 reset_keyboard(alt_up_ps2_dev *ps2)
{
   22e98:	defffb04 	addi	sp,sp,-20
   22e9c:	dfc00415 	stw	ra,16(sp)
   22ea0:	df000315 	stw	fp,12(sp)
   22ea4:	df000304 	addi	fp,sp,12
   22ea8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 byte;
	// send out the reset command
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   22eac:	01403fc4 	movi	r5,255
   22eb0:	e13fff17 	ldw	r4,-4(fp)
   22eb4:	002227c0 	call	2227c <alt_up_ps2_write_data_byte_with_ack>
   22eb8:	e0bffd15 	stw	r2,-12(fp)
	if ( status == 0)
   22ebc:	e0bffd17 	ldw	r2,-12(fp)
   22ec0:	10000d1e 	bne	r2,zero,22ef8 <reset_keyboard+0x60>
	{
		// received the ACK for reset, now check the BAT result
		status = alt_up_ps2_read_data_byte(ps2, &byte);
   22ec4:	e0bffe04 	addi	r2,fp,-8
   22ec8:	100b883a 	mov	r5,r2
   22ecc:	e13fff17 	ldw	r4,-4(fp)
   22ed0:	002237c0 	call	2237c <alt_up_ps2_read_data_byte>
   22ed4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   22ed8:	e0bffd17 	ldw	r2,-12(fp)
   22edc:	1000041e 	bne	r2,zero,22ef0 <reset_keyboard+0x58>
   22ee0:	e0bffe03 	ldbu	r2,-8(fp)
   22ee4:	10803fcc 	andi	r2,r2,255
   22ee8:	10802a98 	cmpnei	r2,r2,170
   22eec:	10000226 	beq	r2,zero,22ef8 <reset_keyboard+0x60>
			// BAT succeed
		}
		else
		{
			// BAT failed
			status = -1;
   22ef0:	00bfffc4 	movi	r2,-1
   22ef4:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	return status;
   22ef8:	e0bffd17 	ldw	r2,-12(fp)
}
   22efc:	e037883a 	mov	sp,fp
   22f00:	dfc00117 	ldw	ra,4(sp)
   22f04:	df000017 	ldw	fp,0(sp)
   22f08:	dec00204 	addi	sp,sp,8
   22f0c:	f800283a 	ret

00022f10 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22f10:	defff504 	addi	sp,sp,-44
   22f14:	df000a15 	stw	fp,40(sp)
   22f18:	df000a04 	addi	fp,sp,40
   22f1c:	e13ffc15 	stw	r4,-16(fp)
   22f20:	e17ffd15 	stw	r5,-12(fp)
   22f24:	e1bffe15 	stw	r6,-8(fp)
   22f28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22f2c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22f30:	d0a8ef97 	ldw	r2,-23618(gp)
  
  if (alt_ticks_per_second ())
   22f34:	10003c26 	beq	r2,zero,23028 <alt_alarm_start+0x118>
  {
    if (alarm)
   22f38:	e0bffc17 	ldw	r2,-16(fp)
   22f3c:	10003826 	beq	r2,zero,23020 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   22f40:	e0bffc17 	ldw	r2,-16(fp)
   22f44:	e0fffe17 	ldw	r3,-8(fp)
   22f48:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   22f4c:	e0bffc17 	ldw	r2,-16(fp)
   22f50:	e0ffff17 	ldw	r3,-4(fp)
   22f54:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22f58:	0005303a 	rdctl	r2,status
   22f5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22f60:	e0fff917 	ldw	r3,-28(fp)
   22f64:	00bfff84 	movi	r2,-2
   22f68:	1884703a 	and	r2,r3,r2
   22f6c:	1001703a 	wrctl	status,r2
  
  return context;
   22f70:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   22f74:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   22f78:	d0a8f097 	ldw	r2,-23614(gp)
      
      current_nticks = alt_nticks();
   22f7c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   22f80:	e0fffd17 	ldw	r3,-12(fp)
   22f84:	e0bff617 	ldw	r2,-40(fp)
   22f88:	1885883a 	add	r2,r3,r2
   22f8c:	10c00044 	addi	r3,r2,1
   22f90:	e0bffc17 	ldw	r2,-16(fp)
   22f94:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   22f98:	e0bffc17 	ldw	r2,-16(fp)
   22f9c:	10c00217 	ldw	r3,8(r2)
   22fa0:	e0bff617 	ldw	r2,-40(fp)
   22fa4:	1880042e 	bgeu	r3,r2,22fb8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   22fa8:	e0bffc17 	ldw	r2,-16(fp)
   22fac:	00c00044 	movi	r3,1
   22fb0:	10c00405 	stb	r3,16(r2)
   22fb4:	00000206 	br	22fc0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22fb8:	e0bffc17 	ldw	r2,-16(fp)
   22fbc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   22fc0:	e0bffc17 	ldw	r2,-16(fp)
   22fc4:	d0e04084 	addi	r3,gp,-32510
   22fc8:	e0fffa15 	stw	r3,-24(fp)
   22fcc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22fd0:	e0bffb17 	ldw	r2,-20(fp)
   22fd4:	e0fffa17 	ldw	r3,-24(fp)
   22fd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22fdc:	e0bffa17 	ldw	r2,-24(fp)
   22fe0:	10c00017 	ldw	r3,0(r2)
   22fe4:	e0bffb17 	ldw	r2,-20(fp)
   22fe8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22fec:	e0bffa17 	ldw	r2,-24(fp)
   22ff0:	10800017 	ldw	r2,0(r2)
   22ff4:	e0fffb17 	ldw	r3,-20(fp)
   22ff8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22ffc:	e0bffa17 	ldw	r2,-24(fp)
   23000:	e0fffb17 	ldw	r3,-20(fp)
   23004:	10c00015 	stw	r3,0(r2)
   23008:	e0bff817 	ldw	r2,-32(fp)
   2300c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23010:	e0bff717 	ldw	r2,-36(fp)
   23014:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23018:	0005883a 	mov	r2,zero
   2301c:	00000306 	br	2302c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   23020:	00bffa84 	movi	r2,-22
   23024:	00000106 	br	2302c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   23028:	00bfde84 	movi	r2,-134
  }
}
   2302c:	e037883a 	mov	sp,fp
   23030:	df000017 	ldw	fp,0(sp)
   23034:	dec00104 	addi	sp,sp,4
   23038:	f800283a 	ret

0002303c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2303c:	deffff04 	addi	sp,sp,-4
   23040:	df000015 	stw	fp,0(sp)
   23044:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23048:	0001883a 	nop
   2304c:	e037883a 	mov	sp,fp
   23050:	df000017 	ldw	fp,0(sp)
   23054:	dec00104 	addi	sp,sp,4
   23058:	f800283a 	ret

0002305c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2305c:	defffe04 	addi	sp,sp,-8
   23060:	dfc00115 	stw	ra,4(sp)
   23064:	df000015 	stw	fp,0(sp)
   23068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2306c:	d0a01e97 	ldw	r2,-32646(gp)
   23070:	10000326 	beq	r2,zero,23080 <alt_get_errno+0x24>
   23074:	d0a01e97 	ldw	r2,-32646(gp)
   23078:	103ee83a 	callr	r2
   2307c:	00000106 	br	23084 <alt_get_errno+0x28>
   23080:	d0a8c084 	addi	r2,gp,-23806
}
   23084:	e037883a 	mov	sp,fp
   23088:	dfc00117 	ldw	ra,4(sp)
   2308c:	df000017 	ldw	fp,0(sp)
   23090:	dec00204 	addi	sp,sp,8
   23094:	f800283a 	ret

00023098 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23098:	defffa04 	addi	sp,sp,-24
   2309c:	dfc00515 	stw	ra,20(sp)
   230a0:	df000415 	stw	fp,16(sp)
   230a4:	df000404 	addi	fp,sp,16
   230a8:	e13ffe15 	stw	r4,-8(fp)
   230ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   230b0:	e0bffe17 	ldw	r2,-8(fp)
   230b4:	10000326 	beq	r2,zero,230c4 <alt_dev_llist_insert+0x2c>
   230b8:	e0bffe17 	ldw	r2,-8(fp)
   230bc:	10800217 	ldw	r2,8(r2)
   230c0:	1000061e 	bne	r2,zero,230dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   230c4:	002305c0 	call	2305c <alt_get_errno>
   230c8:	1007883a 	mov	r3,r2
   230cc:	00800584 	movi	r2,22
   230d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   230d4:	00bffa84 	movi	r2,-22
   230d8:	00001306 	br	23128 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   230dc:	e0bffe17 	ldw	r2,-8(fp)
   230e0:	e0ffff17 	ldw	r3,-4(fp)
   230e4:	e0fffc15 	stw	r3,-16(fp)
   230e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   230ec:	e0bffd17 	ldw	r2,-12(fp)
   230f0:	e0fffc17 	ldw	r3,-16(fp)
   230f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   230f8:	e0bffc17 	ldw	r2,-16(fp)
   230fc:	10c00017 	ldw	r3,0(r2)
   23100:	e0bffd17 	ldw	r2,-12(fp)
   23104:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23108:	e0bffc17 	ldw	r2,-16(fp)
   2310c:	10800017 	ldw	r2,0(r2)
   23110:	e0fffd17 	ldw	r3,-12(fp)
   23114:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23118:	e0bffc17 	ldw	r2,-16(fp)
   2311c:	e0fffd17 	ldw	r3,-12(fp)
   23120:	10c00015 	stw	r3,0(r2)

  return 0;  
   23124:	0005883a 	mov	r2,zero
}
   23128:	e037883a 	mov	sp,fp
   2312c:	dfc00117 	ldw	ra,4(sp)
   23130:	df000017 	ldw	fp,0(sp)
   23134:	dec00204 	addi	sp,sp,8
   23138:	f800283a 	ret

0002313c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2313c:	defffd04 	addi	sp,sp,-12
   23140:	dfc00215 	stw	ra,8(sp)
   23144:	df000115 	stw	fp,4(sp)
   23148:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2314c:	008000b4 	movhi	r2,2
   23150:	1090e504 	addi	r2,r2,17300
   23154:	e0bfff15 	stw	r2,-4(fp)
   23158:	00000606 	br	23174 <_do_ctors+0x38>
        (*ctor) (); 
   2315c:	e0bfff17 	ldw	r2,-4(fp)
   23160:	10800017 	ldw	r2,0(r2)
   23164:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23168:	e0bfff17 	ldw	r2,-4(fp)
   2316c:	10bfff04 	addi	r2,r2,-4
   23170:	e0bfff15 	stw	r2,-4(fp)
   23174:	e0ffff17 	ldw	r3,-4(fp)
   23178:	008000b4 	movhi	r2,2
   2317c:	1090e604 	addi	r2,r2,17304
   23180:	18bff62e 	bgeu	r3,r2,2315c <_do_ctors+0x20>
        (*ctor) (); 
}
   23184:	0001883a 	nop
   23188:	e037883a 	mov	sp,fp
   2318c:	dfc00117 	ldw	ra,4(sp)
   23190:	df000017 	ldw	fp,0(sp)
   23194:	dec00204 	addi	sp,sp,8
   23198:	f800283a 	ret

0002319c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2319c:	defffd04 	addi	sp,sp,-12
   231a0:	dfc00215 	stw	ra,8(sp)
   231a4:	df000115 	stw	fp,4(sp)
   231a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   231ac:	008000b4 	movhi	r2,2
   231b0:	1090e504 	addi	r2,r2,17300
   231b4:	e0bfff15 	stw	r2,-4(fp)
   231b8:	00000606 	br	231d4 <_do_dtors+0x38>
        (*dtor) (); 
   231bc:	e0bfff17 	ldw	r2,-4(fp)
   231c0:	10800017 	ldw	r2,0(r2)
   231c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   231c8:	e0bfff17 	ldw	r2,-4(fp)
   231cc:	10bfff04 	addi	r2,r2,-4
   231d0:	e0bfff15 	stw	r2,-4(fp)
   231d4:	e0ffff17 	ldw	r3,-4(fp)
   231d8:	008000b4 	movhi	r2,2
   231dc:	1090e604 	addi	r2,r2,17304
   231e0:	18bff62e 	bgeu	r3,r2,231bc <_do_dtors+0x20>
        (*dtor) (); 
}
   231e4:	0001883a 	nop
   231e8:	e037883a 	mov	sp,fp
   231ec:	dfc00117 	ldw	ra,4(sp)
   231f0:	df000017 	ldw	fp,0(sp)
   231f4:	dec00204 	addi	sp,sp,8
   231f8:	f800283a 	ret

000231fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   231fc:	defffa04 	addi	sp,sp,-24
   23200:	dfc00515 	stw	ra,20(sp)
   23204:	df000415 	stw	fp,16(sp)
   23208:	df000404 	addi	fp,sp,16
   2320c:	e13ffe15 	stw	r4,-8(fp)
   23210:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   23214:	e0bfff17 	ldw	r2,-4(fp)
   23218:	10800017 	ldw	r2,0(r2)
   2321c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   23220:	e13ffe17 	ldw	r4,-8(fp)
   23224:	0002fc00 	call	2fc0 <strlen>
   23228:	10800044 	addi	r2,r2,1
   2322c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23230:	00000d06 	br	23268 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   23234:	e0bffc17 	ldw	r2,-16(fp)
   23238:	10800217 	ldw	r2,8(r2)
   2323c:	e0fffd17 	ldw	r3,-12(fp)
   23240:	180d883a 	mov	r6,r3
   23244:	e17ffe17 	ldw	r5,-8(fp)
   23248:	1009883a 	mov	r4,r2
   2324c:	00240500 	call	24050 <memcmp>
   23250:	1000021e 	bne	r2,zero,2325c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23254:	e0bffc17 	ldw	r2,-16(fp)
   23258:	00000706 	br	23278 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2325c:	e0bffc17 	ldw	r2,-16(fp)
   23260:	10800017 	ldw	r2,0(r2)
   23264:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23268:	e0fffc17 	ldw	r3,-16(fp)
   2326c:	e0bfff17 	ldw	r2,-4(fp)
   23270:	18bff01e 	bne	r3,r2,23234 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23274:	0005883a 	mov	r2,zero
}
   23278:	e037883a 	mov	sp,fp
   2327c:	dfc00117 	ldw	ra,4(sp)
   23280:	df000017 	ldw	fp,0(sp)
   23284:	dec00204 	addi	sp,sp,8
   23288:	f800283a 	ret

0002328c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2328c:	defffe04 	addi	sp,sp,-8
   23290:	dfc00115 	stw	ra,4(sp)
   23294:	df000015 	stw	fp,0(sp)
   23298:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2329c:	01440004 	movi	r5,4096
   232a0:	0009883a 	mov	r4,zero
   232a4:	0023ed80 	call	23ed8 <alt_icache_flush>
#endif
}
   232a8:	0001883a 	nop
   232ac:	e037883a 	mov	sp,fp
   232b0:	dfc00117 	ldw	ra,4(sp)
   232b4:	df000017 	ldw	fp,0(sp)
   232b8:	dec00204 	addi	sp,sp,8
   232bc:	f800283a 	ret

000232c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   232c0:	defff904 	addi	sp,sp,-28
   232c4:	dfc00615 	stw	ra,24(sp)
   232c8:	df000515 	stw	fp,20(sp)
   232cc:	df000504 	addi	fp,sp,20
   232d0:	e13ffc15 	stw	r4,-16(fp)
   232d4:	e17ffd15 	stw	r5,-12(fp)
   232d8:	e1bffe15 	stw	r6,-8(fp)
   232dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   232e0:	e1bfff17 	ldw	r6,-4(fp)
   232e4:	e17ffe17 	ldw	r5,-8(fp)
   232e8:	e13ffd17 	ldw	r4,-12(fp)
   232ec:	00236800 	call	23680 <open>
   232f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   232f4:	e0bffb17 	ldw	r2,-20(fp)
   232f8:	10001c16 	blt	r2,zero,2336c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   232fc:	008000b4 	movhi	r2,2
   23300:	1095b104 	addi	r2,r2,22212
   23304:	e0fffb17 	ldw	r3,-20(fp)
   23308:	18c00324 	muli	r3,r3,12
   2330c:	10c5883a 	add	r2,r2,r3
   23310:	10c00017 	ldw	r3,0(r2)
   23314:	e0bffc17 	ldw	r2,-16(fp)
   23318:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2331c:	008000b4 	movhi	r2,2
   23320:	1095b104 	addi	r2,r2,22212
   23324:	e0fffb17 	ldw	r3,-20(fp)
   23328:	18c00324 	muli	r3,r3,12
   2332c:	10c5883a 	add	r2,r2,r3
   23330:	10800104 	addi	r2,r2,4
   23334:	10c00017 	ldw	r3,0(r2)
   23338:	e0bffc17 	ldw	r2,-16(fp)
   2333c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23340:	008000b4 	movhi	r2,2
   23344:	1095b104 	addi	r2,r2,22212
   23348:	e0fffb17 	ldw	r3,-20(fp)
   2334c:	18c00324 	muli	r3,r3,12
   23350:	10c5883a 	add	r2,r2,r3
   23354:	10800204 	addi	r2,r2,8
   23358:	10c00017 	ldw	r3,0(r2)
   2335c:	e0bffc17 	ldw	r2,-16(fp)
   23360:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23364:	e13ffb17 	ldw	r4,-20(fp)
   23368:	0012c180 	call	12c18 <alt_release_fd>
  }
} 
   2336c:	0001883a 	nop
   23370:	e037883a 	mov	sp,fp
   23374:	dfc00117 	ldw	ra,4(sp)
   23378:	df000017 	ldw	fp,0(sp)
   2337c:	dec00204 	addi	sp,sp,8
   23380:	f800283a 	ret

00023384 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23384:	defffb04 	addi	sp,sp,-20
   23388:	dfc00415 	stw	ra,16(sp)
   2338c:	df000315 	stw	fp,12(sp)
   23390:	df000304 	addi	fp,sp,12
   23394:	e13ffd15 	stw	r4,-12(fp)
   23398:	e17ffe15 	stw	r5,-8(fp)
   2339c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   233a0:	01c07fc4 	movi	r7,511
   233a4:	01800044 	movi	r6,1
   233a8:	e17ffd17 	ldw	r5,-12(fp)
   233ac:	010000b4 	movhi	r4,2
   233b0:	2115b404 	addi	r4,r4,22224
   233b4:	00232c00 	call	232c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   233b8:	01c07fc4 	movi	r7,511
   233bc:	000d883a 	mov	r6,zero
   233c0:	e17ffe17 	ldw	r5,-8(fp)
   233c4:	010000b4 	movhi	r4,2
   233c8:	2115b104 	addi	r4,r4,22212
   233cc:	00232c00 	call	232c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   233d0:	01c07fc4 	movi	r7,511
   233d4:	01800044 	movi	r6,1
   233d8:	e17fff17 	ldw	r5,-4(fp)
   233dc:	010000b4 	movhi	r4,2
   233e0:	2115b704 	addi	r4,r4,22236
   233e4:	00232c00 	call	232c0 <alt_open_fd>
}  
   233e8:	0001883a 	nop
   233ec:	e037883a 	mov	sp,fp
   233f0:	dfc00117 	ldw	ra,4(sp)
   233f4:	df000017 	ldw	fp,0(sp)
   233f8:	dec00204 	addi	sp,sp,8
   233fc:	f800283a 	ret

00023400 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   23400:	defff004 	addi	sp,sp,-64
   23404:	df000f15 	stw	fp,60(sp)
   23408:	df000f04 	addi	fp,sp,60
   2340c:	e13ffd15 	stw	r4,-12(fp)
   23410:	e17ffe15 	stw	r5,-8(fp)
   23414:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   23418:	00bffa84 	movi	r2,-22
   2341c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23420:	e0bffd17 	ldw	r2,-12(fp)
   23424:	10800828 	cmpgeui	r2,r2,32
   23428:	1000501e 	bne	r2,zero,2356c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2342c:	0005303a 	rdctl	r2,status
   23430:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23434:	e0fff617 	ldw	r3,-40(fp)
   23438:	00bfff84 	movi	r2,-2
   2343c:	1884703a 	and	r2,r3,r2
   23440:	1001703a 	wrctl	status,r2
  
  return context;
   23444:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   23448:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   2344c:	008002b4 	movhi	r2,10
   23450:	10a12604 	addi	r2,r2,-31592
   23454:	e0fffd17 	ldw	r3,-12(fp)
   23458:	180690fa 	slli	r3,r3,3
   2345c:	10c5883a 	add	r2,r2,r3
   23460:	e0ffff17 	ldw	r3,-4(fp)
   23464:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   23468:	008002b4 	movhi	r2,10
   2346c:	10a12604 	addi	r2,r2,-31592
   23470:	e0fffd17 	ldw	r3,-12(fp)
   23474:	180690fa 	slli	r3,r3,3
   23478:	10c5883a 	add	r2,r2,r3
   2347c:	10800104 	addi	r2,r2,4
   23480:	e0fffe17 	ldw	r3,-8(fp)
   23484:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   23488:	e0bfff17 	ldw	r2,-4(fp)
   2348c:	10001926 	beq	r2,zero,234f4 <alt_irq_register+0xf4>
   23490:	e0bffd17 	ldw	r2,-12(fp)
   23494:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23498:	0005303a 	rdctl	r2,status
   2349c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234a0:	e0fff717 	ldw	r3,-36(fp)
   234a4:	00bfff84 	movi	r2,-2
   234a8:	1884703a 	and	r2,r3,r2
   234ac:	1001703a 	wrctl	status,r2
  
  return context;
   234b0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   234b4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   234b8:	00c00044 	movi	r3,1
   234bc:	e0bff217 	ldw	r2,-56(fp)
   234c0:	1884983a 	sll	r2,r3,r2
   234c4:	1007883a 	mov	r3,r2
   234c8:	d0a8ee97 	ldw	r2,-23622(gp)
   234cc:	1884b03a 	or	r2,r3,r2
   234d0:	d0a8ee95 	stw	r2,-23622(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   234d4:	d0a8ee97 	ldw	r2,-23622(gp)
   234d8:	100170fa 	wrctl	ienable,r2
   234dc:	e0bff817 	ldw	r2,-32(fp)
   234e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234e4:	e0bff917 	ldw	r2,-28(fp)
   234e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   234ec:	0005883a 	mov	r2,zero
   234f0:	00001906 	br	23558 <alt_irq_register+0x158>
   234f4:	e0bffd17 	ldw	r2,-12(fp)
   234f8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234fc:	0005303a 	rdctl	r2,status
   23500:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23504:	e0fffa17 	ldw	r3,-24(fp)
   23508:	00bfff84 	movi	r2,-2
   2350c:	1884703a 	and	r2,r3,r2
   23510:	1001703a 	wrctl	status,r2
  
  return context;
   23514:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23518:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   2351c:	00c00044 	movi	r3,1
   23520:	e0bff417 	ldw	r2,-48(fp)
   23524:	1884983a 	sll	r2,r3,r2
   23528:	0084303a 	nor	r2,zero,r2
   2352c:	1007883a 	mov	r3,r2
   23530:	d0a8ee97 	ldw	r2,-23622(gp)
   23534:	1884703a 	and	r2,r3,r2
   23538:	d0a8ee95 	stw	r2,-23622(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2353c:	d0a8ee97 	ldw	r2,-23622(gp)
   23540:	100170fa 	wrctl	ienable,r2
   23544:	e0bffb17 	ldw	r2,-20(fp)
   23548:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2354c:	e0bffc17 	ldw	r2,-16(fp)
   23550:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23554:	0005883a 	mov	r2,zero
   23558:	e0bff115 	stw	r2,-60(fp)
   2355c:	e0bff317 	ldw	r2,-52(fp)
   23560:	e0bff515 	stw	r2,-44(fp)
   23564:	e0bff517 	ldw	r2,-44(fp)
   23568:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   2356c:	e0bff117 	ldw	r2,-60(fp)
}
   23570:	e037883a 	mov	sp,fp
   23574:	df000017 	ldw	fp,0(sp)
   23578:	dec00104 	addi	sp,sp,4
   2357c:	f800283a 	ret

00023580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23580:	defffe04 	addi	sp,sp,-8
   23584:	dfc00115 	stw	ra,4(sp)
   23588:	df000015 	stw	fp,0(sp)
   2358c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23590:	d0a01e97 	ldw	r2,-32646(gp)
   23594:	10000326 	beq	r2,zero,235a4 <alt_get_errno+0x24>
   23598:	d0a01e97 	ldw	r2,-32646(gp)
   2359c:	103ee83a 	callr	r2
   235a0:	00000106 	br	235a8 <alt_get_errno+0x28>
   235a4:	d0a8c084 	addi	r2,gp,-23806
}
   235a8:	e037883a 	mov	sp,fp
   235ac:	dfc00117 	ldw	ra,4(sp)
   235b0:	df000017 	ldw	fp,0(sp)
   235b4:	dec00204 	addi	sp,sp,8
   235b8:	f800283a 	ret

000235bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   235bc:	defffd04 	addi	sp,sp,-12
   235c0:	df000215 	stw	fp,8(sp)
   235c4:	df000204 	addi	fp,sp,8
   235c8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   235cc:	e0bfff17 	ldw	r2,-4(fp)
   235d0:	10800217 	ldw	r2,8(r2)
   235d4:	10d00034 	orhi	r3,r2,16384
   235d8:	e0bfff17 	ldw	r2,-4(fp)
   235dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   235e0:	e03ffe15 	stw	zero,-8(fp)
   235e4:	00001d06 	br	2365c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   235e8:	008000b4 	movhi	r2,2
   235ec:	1095b104 	addi	r2,r2,22212
   235f0:	e0fffe17 	ldw	r3,-8(fp)
   235f4:	18c00324 	muli	r3,r3,12
   235f8:	10c5883a 	add	r2,r2,r3
   235fc:	10c00017 	ldw	r3,0(r2)
   23600:	e0bfff17 	ldw	r2,-4(fp)
   23604:	10800017 	ldw	r2,0(r2)
   23608:	1880111e 	bne	r3,r2,23650 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2360c:	008000b4 	movhi	r2,2
   23610:	1095b104 	addi	r2,r2,22212
   23614:	e0fffe17 	ldw	r3,-8(fp)
   23618:	18c00324 	muli	r3,r3,12
   2361c:	10c5883a 	add	r2,r2,r3
   23620:	10800204 	addi	r2,r2,8
   23624:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23628:	1000090e 	bge	r2,zero,23650 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2362c:	e0bffe17 	ldw	r2,-8(fp)
   23630:	10c00324 	muli	r3,r2,12
   23634:	008000b4 	movhi	r2,2
   23638:	1095b104 	addi	r2,r2,22212
   2363c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23640:	e0bfff17 	ldw	r2,-4(fp)
   23644:	18800226 	beq	r3,r2,23650 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23648:	00bffcc4 	movi	r2,-13
   2364c:	00000806 	br	23670 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23650:	e0bffe17 	ldw	r2,-8(fp)
   23654:	10800044 	addi	r2,r2,1
   23658:	e0bffe15 	stw	r2,-8(fp)
   2365c:	d0a01d97 	ldw	r2,-32650(gp)
   23660:	1007883a 	mov	r3,r2
   23664:	e0bffe17 	ldw	r2,-8(fp)
   23668:	18bfdf2e 	bgeu	r3,r2,235e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2366c:	0005883a 	mov	r2,zero
}
   23670:	e037883a 	mov	sp,fp
   23674:	df000017 	ldw	fp,0(sp)
   23678:	dec00104 	addi	sp,sp,4
   2367c:	f800283a 	ret

00023680 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23680:	defff604 	addi	sp,sp,-40
   23684:	dfc00915 	stw	ra,36(sp)
   23688:	df000815 	stw	fp,32(sp)
   2368c:	df000804 	addi	fp,sp,32
   23690:	e13ffd15 	stw	r4,-12(fp)
   23694:	e17ffe15 	stw	r5,-8(fp)
   23698:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2369c:	00bfffc4 	movi	r2,-1
   236a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   236a4:	00bffb44 	movi	r2,-19
   236a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   236ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   236b0:	d1601b84 	addi	r5,gp,-32658
   236b4:	e13ffd17 	ldw	r4,-12(fp)
   236b8:	00231fc0 	call	231fc <alt_find_dev>
   236bc:	e0bff815 	stw	r2,-32(fp)
   236c0:	e0bff817 	ldw	r2,-32(fp)
   236c4:	1000051e 	bne	r2,zero,236dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   236c8:	e13ffd17 	ldw	r4,-12(fp)
   236cc:	0023cf40 	call	23cf4 <alt_find_file>
   236d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   236d4:	00800044 	movi	r2,1
   236d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   236dc:	e0bff817 	ldw	r2,-32(fp)
   236e0:	10002926 	beq	r2,zero,23788 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   236e4:	e13ff817 	ldw	r4,-32(fp)
   236e8:	0023dfc0 	call	23dfc <alt_get_fd>
   236ec:	e0bff915 	stw	r2,-28(fp)
   236f0:	e0bff917 	ldw	r2,-28(fp)
   236f4:	1000030e 	bge	r2,zero,23704 <open+0x84>
    {
      status = index;
   236f8:	e0bff917 	ldw	r2,-28(fp)
   236fc:	e0bffa15 	stw	r2,-24(fp)
   23700:	00002306 	br	23790 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   23704:	e0bff917 	ldw	r2,-28(fp)
   23708:	10c00324 	muli	r3,r2,12
   2370c:	008000b4 	movhi	r2,2
   23710:	1095b104 	addi	r2,r2,22212
   23714:	1885883a 	add	r2,r3,r2
   23718:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2371c:	e0fffe17 	ldw	r3,-8(fp)
   23720:	00900034 	movhi	r2,16384
   23724:	10bfffc4 	addi	r2,r2,-1
   23728:	1886703a 	and	r3,r3,r2
   2372c:	e0bffc17 	ldw	r2,-16(fp)
   23730:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   23734:	e0bffb17 	ldw	r2,-20(fp)
   23738:	1000051e 	bne	r2,zero,23750 <open+0xd0>
   2373c:	e13ffc17 	ldw	r4,-16(fp)
   23740:	00235bc0 	call	235bc <alt_file_locked>
   23744:	e0bffa15 	stw	r2,-24(fp)
   23748:	e0bffa17 	ldw	r2,-24(fp)
   2374c:	10001016 	blt	r2,zero,23790 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   23750:	e0bff817 	ldw	r2,-32(fp)
   23754:	10800317 	ldw	r2,12(r2)
   23758:	10000826 	beq	r2,zero,2377c <open+0xfc>
   2375c:	e0bff817 	ldw	r2,-32(fp)
   23760:	10800317 	ldw	r2,12(r2)
   23764:	e1ffff17 	ldw	r7,-4(fp)
   23768:	e1bffe17 	ldw	r6,-8(fp)
   2376c:	e17ffd17 	ldw	r5,-12(fp)
   23770:	e13ffc17 	ldw	r4,-16(fp)
   23774:	103ee83a 	callr	r2
   23778:	00000106 	br	23780 <open+0x100>
   2377c:	0005883a 	mov	r2,zero
   23780:	e0bffa15 	stw	r2,-24(fp)
   23784:	00000206 	br	23790 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   23788:	00bffb44 	movi	r2,-19
   2378c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   23790:	e0bffa17 	ldw	r2,-24(fp)
   23794:	1000090e 	bge	r2,zero,237bc <open+0x13c>
  {
    alt_release_fd (index);  
   23798:	e13ff917 	ldw	r4,-28(fp)
   2379c:	0012c180 	call	12c18 <alt_release_fd>
    ALT_ERRNO = -status;
   237a0:	00235800 	call	23580 <alt_get_errno>
   237a4:	1007883a 	mov	r3,r2
   237a8:	e0bffa17 	ldw	r2,-24(fp)
   237ac:	0085c83a 	sub	r2,zero,r2
   237b0:	18800015 	stw	r2,0(r3)
    return -1;
   237b4:	00bfffc4 	movi	r2,-1
   237b8:	00000106 	br	237c0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   237bc:	e0bff917 	ldw	r2,-28(fp)
}
   237c0:	e037883a 	mov	sp,fp
   237c4:	dfc00117 	ldw	ra,4(sp)
   237c8:	df000017 	ldw	fp,0(sp)
   237cc:	dec00204 	addi	sp,sp,8
   237d0:	f800283a 	ret

000237d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   237d4:	defffa04 	addi	sp,sp,-24
   237d8:	df000515 	stw	fp,20(sp)
   237dc:	df000504 	addi	fp,sp,20
   237e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   237e4:	0005303a 	rdctl	r2,status
   237e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   237ec:	e0fffc17 	ldw	r3,-16(fp)
   237f0:	00bfff84 	movi	r2,-2
   237f4:	1884703a 	and	r2,r3,r2
   237f8:	1001703a 	wrctl	status,r2
  
  return context;
   237fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23800:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23804:	e0bfff17 	ldw	r2,-4(fp)
   23808:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2380c:	e0bffd17 	ldw	r2,-12(fp)
   23810:	10800017 	ldw	r2,0(r2)
   23814:	e0fffd17 	ldw	r3,-12(fp)
   23818:	18c00117 	ldw	r3,4(r3)
   2381c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23820:	e0bffd17 	ldw	r2,-12(fp)
   23824:	10800117 	ldw	r2,4(r2)
   23828:	e0fffd17 	ldw	r3,-12(fp)
   2382c:	18c00017 	ldw	r3,0(r3)
   23830:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23834:	e0bffd17 	ldw	r2,-12(fp)
   23838:	e0fffd17 	ldw	r3,-12(fp)
   2383c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23840:	e0bffd17 	ldw	r2,-12(fp)
   23844:	e0fffd17 	ldw	r3,-12(fp)
   23848:	10c00015 	stw	r3,0(r2)
   2384c:	e0bffb17 	ldw	r2,-20(fp)
   23850:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23854:	e0bffe17 	ldw	r2,-8(fp)
   23858:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2385c:	0001883a 	nop
   23860:	e037883a 	mov	sp,fp
   23864:	df000017 	ldw	fp,0(sp)
   23868:	dec00104 	addi	sp,sp,4
   2386c:	f800283a 	ret

00023870 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23870:	defffb04 	addi	sp,sp,-20
   23874:	dfc00415 	stw	ra,16(sp)
   23878:	df000315 	stw	fp,12(sp)
   2387c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23880:	d0a04097 	ldw	r2,-32510(gp)
   23884:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   23888:	d0a8f097 	ldw	r2,-23614(gp)
   2388c:	10800044 	addi	r2,r2,1
   23890:	d0a8f095 	stw	r2,-23614(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23894:	00002e06 	br	23950 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23898:	e0bffd17 	ldw	r2,-12(fp)
   2389c:	10800017 	ldw	r2,0(r2)
   238a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   238a4:	e0bffd17 	ldw	r2,-12(fp)
   238a8:	10800403 	ldbu	r2,16(r2)
   238ac:	10803fcc 	andi	r2,r2,255
   238b0:	10000426 	beq	r2,zero,238c4 <alt_tick+0x54>
   238b4:	d0a8f097 	ldw	r2,-23614(gp)
   238b8:	1000021e 	bne	r2,zero,238c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   238bc:	e0bffd17 	ldw	r2,-12(fp)
   238c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   238c4:	e0bffd17 	ldw	r2,-12(fp)
   238c8:	10800217 	ldw	r2,8(r2)
   238cc:	d0e8f097 	ldw	r3,-23614(gp)
   238d0:	18801d36 	bltu	r3,r2,23948 <alt_tick+0xd8>
   238d4:	e0bffd17 	ldw	r2,-12(fp)
   238d8:	10800403 	ldbu	r2,16(r2)
   238dc:	10803fcc 	andi	r2,r2,255
   238e0:	1000191e 	bne	r2,zero,23948 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   238e4:	e0bffd17 	ldw	r2,-12(fp)
   238e8:	10800317 	ldw	r2,12(r2)
   238ec:	e0fffd17 	ldw	r3,-12(fp)
   238f0:	18c00517 	ldw	r3,20(r3)
   238f4:	1809883a 	mov	r4,r3
   238f8:	103ee83a 	callr	r2
   238fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23900:	e0bfff17 	ldw	r2,-4(fp)
   23904:	1000031e 	bne	r2,zero,23914 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23908:	e13ffd17 	ldw	r4,-12(fp)
   2390c:	00237d40 	call	237d4 <alt_alarm_stop>
   23910:	00000d06 	br	23948 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23914:	e0bffd17 	ldw	r2,-12(fp)
   23918:	10c00217 	ldw	r3,8(r2)
   2391c:	e0bfff17 	ldw	r2,-4(fp)
   23920:	1887883a 	add	r3,r3,r2
   23924:	e0bffd17 	ldw	r2,-12(fp)
   23928:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2392c:	e0bffd17 	ldw	r2,-12(fp)
   23930:	10c00217 	ldw	r3,8(r2)
   23934:	d0a8f097 	ldw	r2,-23614(gp)
   23938:	1880032e 	bgeu	r3,r2,23948 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2393c:	e0bffd17 	ldw	r2,-12(fp)
   23940:	00c00044 	movi	r3,1
   23944:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23948:	e0bffe17 	ldw	r2,-8(fp)
   2394c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23950:	e0fffd17 	ldw	r3,-12(fp)
   23954:	d0a04084 	addi	r2,gp,-32510
   23958:	18bfcf1e 	bne	r3,r2,23898 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2395c:	0013e040 	call	13e04 <OSTimeTick>
}
   23960:	0001883a 	nop
   23964:	e037883a 	mov	sp,fp
   23968:	dfc00117 	ldw	ra,4(sp)
   2396c:	df000017 	ldw	fp,0(sp)
   23970:	dec00204 	addi	sp,sp,8
   23974:	f800283a 	ret

00023978 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   23978:	deffff04 	addi	sp,sp,-4
   2397c:	df000015 	stw	fp,0(sp)
   23980:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   23984:	000170fa 	wrctl	ienable,zero
}
   23988:	0001883a 	nop
   2398c:	e037883a 	mov	sp,fp
   23990:	df000017 	ldw	fp,0(sp)
   23994:	dec00104 	addi	sp,sp,4
   23998:	f800283a 	ret

0002399c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   2399c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   239a0:	d0e01697 	ldw	r3,-32678(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   239a4:	d128db97 	ldw	r4,-23698(gp)

      stw ra,  0(sp)
   239a8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   239ac:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   239b0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   239b4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   239b8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   239bc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   239c0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   239c4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   239c8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   239cc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   239d0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   239d4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   239d8:	0023c100 	call	23c10 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   239dc:	d128d697 	ldw	r4,-23718(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   239e0:	d168ce87 	ldb	r5,-23750(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   239e4:	d128db95 	stw	r4,-23698(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   239e8:	d168cec5 	stb	r5,-23749(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   239ec:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   239f0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   239f4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   239f8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   239fc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   23a00:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   23a04:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   23a08:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   23a0c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   23a10:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   23a14:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   23a18:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   23a1c:	d0e01695 	stw	r3,-32678(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   23a20:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   23a24:	f800283a 	ret

00023a28 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   23a28:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   23a2c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   23a30:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   23a34:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   23a38:	0023c100 	call	23c10 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   23a3c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   23a40:	d4a8ccc5 	stb	r18,-23757(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   23a44:	003fe506 	br	239dc <OSCtxSw+0x40>

00023a48 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   23a48:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   23a4c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   23a50:	10800054 	ori	r2,r2,1
      wrctl status, r2
   23a54:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   23a58:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   23a5c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   23a60:	dec00204 	addi	sp,sp,8

      callr r2
   23a64:	103ee83a 	callr	r2

      nop
   23a68:	0001883a 	nop

00023a6c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   23a6c:	defff704 	addi	sp,sp,-36
   23a70:	dfc00815 	stw	ra,32(sp)
   23a74:	df000715 	stw	fp,28(sp)
   23a78:	df000704 	addi	fp,sp,28
   23a7c:	e13ffc15 	stw	r4,-16(fp)
   23a80:	e17ffd15 	stw	r5,-12(fp)
   23a84:	e1bffe15 	stw	r6,-8(fp)
   23a88:	3805883a 	mov	r2,r7
   23a8c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   23a90:	e0fffe17 	ldw	r3,-8(fp)
   23a94:	00bfff04 	movi	r2,-4
   23a98:	1884703a 	and	r2,r3,r2
   23a9c:	10bef704 	addi	r2,r2,-1060
   23aa0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   23aa4:	01810904 	movi	r6,1060
   23aa8:	000b883a 	mov	r5,zero
   23aac:	e13ff917 	ldw	r4,-28(fp)
   23ab0:	000a5bc0 	call	a5bc <memset>
   23ab4:	e0bff917 	ldw	r2,-28(fp)
   23ab8:	10c0bb04 	addi	r3,r2,748
   23abc:	e0bff917 	ldw	r2,-28(fp)
   23ac0:	10c00115 	stw	r3,4(r2)
   23ac4:	e0bff917 	ldw	r2,-28(fp)
   23ac8:	10c0d504 	addi	r3,r2,852
   23acc:	e0bff917 	ldw	r2,-28(fp)
   23ad0:	10c00215 	stw	r3,8(r2)
   23ad4:	e0bff917 	ldw	r2,-28(fp)
   23ad8:	10c0ef04 	addi	r3,r2,956
   23adc:	e0bff917 	ldw	r2,-28(fp)
   23ae0:	10c00315 	stw	r3,12(r2)
   23ae4:	e0fff917 	ldw	r3,-28(fp)
   23ae8:	008000b4 	movhi	r2,2
   23aec:	10937504 	addi	r2,r2,19924
   23af0:	18800d15 	stw	r2,52(r3)
   23af4:	e0bff917 	ldw	r2,-28(fp)
   23af8:	00c00044 	movi	r3,1
   23afc:	10c02915 	stw	r3,164(r2)
   23b00:	10002a15 	stw	zero,168(r2)
   23b04:	e0bff917 	ldw	r2,-28(fp)
   23b08:	00ccc384 	movi	r3,13070
   23b0c:	10c02b0d 	sth	r3,172(r2)
   23b10:	e0bff917 	ldw	r2,-28(fp)
   23b14:	00eaf344 	movi	r3,-21555
   23b18:	10c02b8d 	sth	r3,174(r2)
   23b1c:	e0bff917 	ldw	r2,-28(fp)
   23b20:	00c48d04 	movi	r3,4660
   23b24:	10c02c0d 	sth	r3,176(r2)
   23b28:	e0bff917 	ldw	r2,-28(fp)
   23b2c:	00f99b44 	movi	r3,-6547
   23b30:	10c02c8d 	sth	r3,178(r2)
   23b34:	e0bff917 	ldw	r2,-28(fp)
   23b38:	00f7bb04 	movi	r3,-8468
   23b3c:	10c02d0d 	sth	r3,180(r2)
   23b40:	e0bff917 	ldw	r2,-28(fp)
   23b44:	00c00144 	movi	r3,5
   23b48:	10c02d8d 	sth	r3,182(r2)
   23b4c:	e0bff917 	ldw	r2,-28(fp)
   23b50:	00c002c4 	movi	r3,11
   23b54:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   23b58:	e0bff917 	ldw	r2,-28(fp)
   23b5c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   23b60:	e0bffa17 	ldw	r2,-24(fp)
   23b64:	10bff304 	addi	r2,r2,-52
   23b68:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   23b6c:	e0bffb17 	ldw	r2,-20(fp)
   23b70:	10800c04 	addi	r2,r2,48
   23b74:	e0fffc17 	ldw	r3,-16(fp)
   23b78:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   23b7c:	e0bffb17 	ldw	r2,-20(fp)
   23b80:	10800b04 	addi	r2,r2,44
   23b84:	e0fffd17 	ldw	r3,-12(fp)
   23b88:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   23b8c:	e0bffb17 	ldw	r2,-20(fp)
   23b90:	10800a04 	addi	r2,r2,40
   23b94:	e0fff917 	ldw	r3,-28(fp)
   23b98:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   23b9c:	008000b4 	movhi	r2,2
   23ba0:	108e9204 	addi	r2,r2,14920
   23ba4:	10c00104 	addi	r3,r2,4
   23ba8:	e0bffb17 	ldw	r2,-20(fp)
   23bac:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   23bb0:	e0bffb17 	ldw	r2,-20(fp)
}
   23bb4:	e037883a 	mov	sp,fp
   23bb8:	dfc00117 	ldw	ra,4(sp)
   23bbc:	df000017 	ldw	fp,0(sp)
   23bc0:	dec00204 	addi	sp,sp,8
   23bc4:	f800283a 	ret

00023bc8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   23bc8:	defffe04 	addi	sp,sp,-8
   23bcc:	df000115 	stw	fp,4(sp)
   23bd0:	df000104 	addi	fp,sp,4
   23bd4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   23bd8:	0001883a 	nop
   23bdc:	e037883a 	mov	sp,fp
   23be0:	df000017 	ldw	fp,0(sp)
   23be4:	dec00104 	addi	sp,sp,4
   23be8:	f800283a 	ret

00023bec <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   23bec:	defffe04 	addi	sp,sp,-8
   23bf0:	df000115 	stw	fp,4(sp)
   23bf4:	df000104 	addi	fp,sp,4
   23bf8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   23bfc:	0001883a 	nop
   23c00:	e037883a 	mov	sp,fp
   23c04:	df000017 	ldw	fp,0(sp)
   23c08:	dec00104 	addi	sp,sp,4
   23c0c:	f800283a 	ret

00023c10 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   23c10:	deffff04 	addi	sp,sp,-4
   23c14:	df000015 	stw	fp,0(sp)
   23c18:	d839883a 	mov	fp,sp
}
   23c1c:	0001883a 	nop
   23c20:	e037883a 	mov	sp,fp
   23c24:	df000017 	ldw	fp,0(sp)
   23c28:	dec00104 	addi	sp,sp,4
   23c2c:	f800283a 	ret

00023c30 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   23c30:	deffff04 	addi	sp,sp,-4
   23c34:	df000015 	stw	fp,0(sp)
   23c38:	d839883a 	mov	fp,sp
}
   23c3c:	0001883a 	nop
   23c40:	e037883a 	mov	sp,fp
   23c44:	df000017 	ldw	fp,0(sp)
   23c48:	dec00104 	addi	sp,sp,4
   23c4c:	f800283a 	ret

00023c50 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   23c50:	deffff04 	addi	sp,sp,-4
   23c54:	df000015 	stw	fp,0(sp)
   23c58:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   23c5c:	0001883a 	nop
   23c60:	e037883a 	mov	sp,fp
   23c64:	df000017 	ldw	fp,0(sp)
   23c68:	dec00104 	addi	sp,sp,4
   23c6c:	f800283a 	ret

00023c70 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   23c70:	deffff04 	addi	sp,sp,-4
   23c74:	df000015 	stw	fp,0(sp)
   23c78:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   23c7c:	0001883a 	nop
   23c80:	e037883a 	mov	sp,fp
   23c84:	df000017 	ldw	fp,0(sp)
   23c88:	dec00104 	addi	sp,sp,4
   23c8c:	f800283a 	ret

00023c90 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   23c90:	deffff04 	addi	sp,sp,-4
   23c94:	df000015 	stw	fp,0(sp)
   23c98:	d839883a 	mov	fp,sp
}
   23c9c:	0001883a 	nop
   23ca0:	e037883a 	mov	sp,fp
   23ca4:	df000017 	ldw	fp,0(sp)
   23ca8:	dec00104 	addi	sp,sp,4
   23cac:	f800283a 	ret

00023cb0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   23cb0:	deffff04 	addi	sp,sp,-4
   23cb4:	df000015 	stw	fp,0(sp)
   23cb8:	d839883a 	mov	fp,sp
}
   23cbc:	0001883a 	nop
   23cc0:	e037883a 	mov	sp,fp
   23cc4:	df000017 	ldw	fp,0(sp)
   23cc8:	dec00104 	addi	sp,sp,4
   23ccc:	f800283a 	ret

00023cd0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   23cd0:	defffe04 	addi	sp,sp,-8
   23cd4:	df000115 	stw	fp,4(sp)
   23cd8:	df000104 	addi	fp,sp,4
   23cdc:	e13fff15 	stw	r4,-4(fp)
}
   23ce0:	0001883a 	nop
   23ce4:	e037883a 	mov	sp,fp
   23ce8:	df000017 	ldw	fp,0(sp)
   23cec:	dec00104 	addi	sp,sp,4
   23cf0:	f800283a 	ret

00023cf4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23cf4:	defffb04 	addi	sp,sp,-20
   23cf8:	dfc00415 	stw	ra,16(sp)
   23cfc:	df000315 	stw	fp,12(sp)
   23d00:	df000304 	addi	fp,sp,12
   23d04:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23d08:	d0a01997 	ldw	r2,-32666(gp)
   23d0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23d10:	00003106 	br	23dd8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23d14:	e0bffd17 	ldw	r2,-12(fp)
   23d18:	10800217 	ldw	r2,8(r2)
   23d1c:	1009883a 	mov	r4,r2
   23d20:	0002fc00 	call	2fc0 <strlen>
   23d24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23d28:	e0bffd17 	ldw	r2,-12(fp)
   23d2c:	10c00217 	ldw	r3,8(r2)
   23d30:	e0bffe17 	ldw	r2,-8(fp)
   23d34:	10bfffc4 	addi	r2,r2,-1
   23d38:	1885883a 	add	r2,r3,r2
   23d3c:	10800003 	ldbu	r2,0(r2)
   23d40:	10803fcc 	andi	r2,r2,255
   23d44:	1080201c 	xori	r2,r2,128
   23d48:	10bfe004 	addi	r2,r2,-128
   23d4c:	10800bd8 	cmpnei	r2,r2,47
   23d50:	1000031e 	bne	r2,zero,23d60 <alt_find_file+0x6c>
    {
      len -= 1;
   23d54:	e0bffe17 	ldw	r2,-8(fp)
   23d58:	10bfffc4 	addi	r2,r2,-1
   23d5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23d60:	e0bffe17 	ldw	r2,-8(fp)
   23d64:	e0ffff17 	ldw	r3,-4(fp)
   23d68:	1885883a 	add	r2,r3,r2
   23d6c:	10800003 	ldbu	r2,0(r2)
   23d70:	10803fcc 	andi	r2,r2,255
   23d74:	1080201c 	xori	r2,r2,128
   23d78:	10bfe004 	addi	r2,r2,-128
   23d7c:	10800be0 	cmpeqi	r2,r2,47
   23d80:	1000081e 	bne	r2,zero,23da4 <alt_find_file+0xb0>
   23d84:	e0bffe17 	ldw	r2,-8(fp)
   23d88:	e0ffff17 	ldw	r3,-4(fp)
   23d8c:	1885883a 	add	r2,r3,r2
   23d90:	10800003 	ldbu	r2,0(r2)
   23d94:	10803fcc 	andi	r2,r2,255
   23d98:	1080201c 	xori	r2,r2,128
   23d9c:	10bfe004 	addi	r2,r2,-128
   23da0:	10000a1e 	bne	r2,zero,23dcc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23da4:	e0bffd17 	ldw	r2,-12(fp)
   23da8:	10800217 	ldw	r2,8(r2)
   23dac:	e0fffe17 	ldw	r3,-8(fp)
   23db0:	180d883a 	mov	r6,r3
   23db4:	e17fff17 	ldw	r5,-4(fp)
   23db8:	1009883a 	mov	r4,r2
   23dbc:	00240500 	call	24050 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23dc0:	1000021e 	bne	r2,zero,23dcc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   23dc4:	e0bffd17 	ldw	r2,-12(fp)
   23dc8:	00000706 	br	23de8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23dcc:	e0bffd17 	ldw	r2,-12(fp)
   23dd0:	10800017 	ldw	r2,0(r2)
   23dd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23dd8:	e0fffd17 	ldw	r3,-12(fp)
   23ddc:	d0a01984 	addi	r2,gp,-32666
   23de0:	18bfcc1e 	bne	r3,r2,23d14 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   23de4:	0005883a 	mov	r2,zero
}
   23de8:	e037883a 	mov	sp,fp
   23dec:	dfc00117 	ldw	ra,4(sp)
   23df0:	df000017 	ldw	fp,0(sp)
   23df4:	dec00204 	addi	sp,sp,8
   23df8:	f800283a 	ret

00023dfc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23dfc:	defff904 	addi	sp,sp,-28
   23e00:	dfc00615 	stw	ra,24(sp)
   23e04:	df000515 	stw	fp,20(sp)
   23e08:	df000504 	addi	fp,sp,20
   23e0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   23e10:	00bffa04 	movi	r2,-24
   23e14:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   23e18:	d0a8c497 	ldw	r2,-23790(gp)
   23e1c:	e0bffd15 	stw	r2,-12(fp)
   23e20:	e03ffe0d 	sth	zero,-8(fp)
   23e24:	e0bffe0b 	ldhu	r2,-8(fp)
   23e28:	e0fffe84 	addi	r3,fp,-6
   23e2c:	180d883a 	mov	r6,r3
   23e30:	100b883a 	mov	r5,r2
   23e34:	e13ffd17 	ldw	r4,-12(fp)
   23e38:	00191200 	call	19120 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23e3c:	e03ffb15 	stw	zero,-20(fp)
   23e40:	00001906 	br	23ea8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   23e44:	008000b4 	movhi	r2,2
   23e48:	1095b104 	addi	r2,r2,22212
   23e4c:	e0fffb17 	ldw	r3,-20(fp)
   23e50:	18c00324 	muli	r3,r3,12
   23e54:	10c5883a 	add	r2,r2,r3
   23e58:	10800017 	ldw	r2,0(r2)
   23e5c:	10000f1e 	bne	r2,zero,23e9c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   23e60:	008000b4 	movhi	r2,2
   23e64:	1095b104 	addi	r2,r2,22212
   23e68:	e0fffb17 	ldw	r3,-20(fp)
   23e6c:	18c00324 	muli	r3,r3,12
   23e70:	10c5883a 	add	r2,r2,r3
   23e74:	e0ffff17 	ldw	r3,-4(fp)
   23e78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23e7c:	d0e01d97 	ldw	r3,-32650(gp)
   23e80:	e0bffb17 	ldw	r2,-20(fp)
   23e84:	1880020e 	bge	r3,r2,23e90 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   23e88:	e0bffb17 	ldw	r2,-20(fp)
   23e8c:	d0a01d95 	stw	r2,-32650(gp)
      }
      rc = i;
   23e90:	e0bffb17 	ldw	r2,-20(fp)
   23e94:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   23e98:	00000606 	br	23eb4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23e9c:	e0bffb17 	ldw	r2,-20(fp)
   23ea0:	10800044 	addi	r2,r2,1
   23ea4:	e0bffb15 	stw	r2,-20(fp)
   23ea8:	e0bffb17 	ldw	r2,-20(fp)
   23eac:	10800810 	cmplti	r2,r2,32
   23eb0:	103fe41e 	bne	r2,zero,23e44 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   23eb4:	d0a8c497 	ldw	r2,-23790(gp)
   23eb8:	1009883a 	mov	r4,r2
   23ebc:	00194980 	call	19498 <OSSemPost>

  return rc;
   23ec0:	e0bffc17 	ldw	r2,-16(fp)
}
   23ec4:	e037883a 	mov	sp,fp
   23ec8:	dfc00117 	ldw	ra,4(sp)
   23ecc:	df000017 	ldw	fp,0(sp)
   23ed0:	dec00204 	addi	sp,sp,8
   23ed4:	f800283a 	ret

00023ed8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   23ed8:	defffb04 	addi	sp,sp,-20
   23edc:	df000415 	stw	fp,16(sp)
   23ee0:	df000404 	addi	fp,sp,16
   23ee4:	e13ffe15 	stw	r4,-8(fp)
   23ee8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   23eec:	e0bfff17 	ldw	r2,-4(fp)
   23ef0:	10840070 	cmpltui	r2,r2,4097
   23ef4:	1000021e 	bne	r2,zero,23f00 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   23ef8:	00840004 	movi	r2,4096
   23efc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   23f00:	e0fffe17 	ldw	r3,-8(fp)
   23f04:	e0bfff17 	ldw	r2,-4(fp)
   23f08:	1885883a 	add	r2,r3,r2
   23f0c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23f10:	e0bffe17 	ldw	r2,-8(fp)
   23f14:	e0bffc15 	stw	r2,-16(fp)
   23f18:	00000506 	br	23f30 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   23f1c:	e0bffc17 	ldw	r2,-16(fp)
   23f20:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23f24:	e0bffc17 	ldw	r2,-16(fp)
   23f28:	10800804 	addi	r2,r2,32
   23f2c:	e0bffc15 	stw	r2,-16(fp)
   23f30:	e0fffc17 	ldw	r3,-16(fp)
   23f34:	e0bffd17 	ldw	r2,-12(fp)
   23f38:	18bff836 	bltu	r3,r2,23f1c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   23f3c:	e0bffe17 	ldw	r2,-8(fp)
   23f40:	108007cc 	andi	r2,r2,31
   23f44:	10000226 	beq	r2,zero,23f50 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   23f48:	e0bffc17 	ldw	r2,-16(fp)
   23f4c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   23f50:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   23f54:	0001883a 	nop
   23f58:	e037883a 	mov	sp,fp
   23f5c:	df000017 	ldw	fp,0(sp)
   23f60:	dec00104 	addi	sp,sp,4
   23f64:	f800283a 	ret

00023f68 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23f68:	defffe04 	addi	sp,sp,-8
   23f6c:	df000115 	stw	fp,4(sp)
   23f70:	df000104 	addi	fp,sp,4
   23f74:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23f78:	e0bfff17 	ldw	r2,-4(fp)
   23f7c:	10bffe84 	addi	r2,r2,-6
   23f80:	10c00428 	cmpgeui	r3,r2,16
   23f84:	18001a1e 	bne	r3,zero,23ff0 <alt_exception_cause_generated_bad_addr+0x88>
   23f88:	100690ba 	slli	r3,r2,2
   23f8c:	008000b4 	movhi	r2,2
   23f90:	108fe804 	addi	r2,r2,16288
   23f94:	1885883a 	add	r2,r3,r2
   23f98:	10800017 	ldw	r2,0(r2)
   23f9c:	1000683a 	jmp	r2
   23fa0:	00023fe0 	cmpeqi	zero,zero,2303
   23fa4:	00023fe0 	cmpeqi	zero,zero,2303
   23fa8:	00023ff0 	cmpltui	zero,zero,2303
   23fac:	00023ff0 	cmpltui	zero,zero,2303
   23fb0:	00023ff0 	cmpltui	zero,zero,2303
   23fb4:	00023fe0 	cmpeqi	zero,zero,2303
   23fb8:	00023fe8 	cmpgeui	zero,zero,2303
   23fbc:	00023ff0 	cmpltui	zero,zero,2303
   23fc0:	00023fe0 	cmpeqi	zero,zero,2303
   23fc4:	00023fe0 	cmpeqi	zero,zero,2303
   23fc8:	00023ff0 	cmpltui	zero,zero,2303
   23fcc:	00023fe0 	cmpeqi	zero,zero,2303
   23fd0:	00023fe8 	cmpgeui	zero,zero,2303
   23fd4:	00023ff0 	cmpltui	zero,zero,2303
   23fd8:	00023ff0 	cmpltui	zero,zero,2303
   23fdc:	00023fe0 	cmpeqi	zero,zero,2303
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23fe0:	00800044 	movi	r2,1
   23fe4:	00000306 	br	23ff4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23fe8:	0005883a 	mov	r2,zero
   23fec:	00000106 	br	23ff4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23ff0:	0005883a 	mov	r2,zero
  }
}
   23ff4:	e037883a 	mov	sp,fp
   23ff8:	df000017 	ldw	fp,0(sp)
   23ffc:	dec00104 	addi	sp,sp,4
   24000:	f800283a 	ret

00024004 <atexit>:
   24004:	200b883a 	mov	r5,r4
   24008:	000f883a 	mov	r7,zero
   2400c:	000d883a 	mov	r6,zero
   24010:	0009883a 	mov	r4,zero
   24014:	00240cc1 	jmpi	240cc <__register_exitproc>

00024018 <exit>:
   24018:	defffe04 	addi	sp,sp,-8
   2401c:	000b883a 	mov	r5,zero
   24020:	dc000015 	stw	r16,0(sp)
   24024:	dfc00115 	stw	ra,4(sp)
   24028:	2021883a 	mov	r16,r4
   2402c:	00241e40 	call	241e4 <__call_exitprocs>
   24030:	008000b4 	movhi	r2,2
   24034:	109bb704 	addi	r2,r2,28380
   24038:	11000017 	ldw	r4,0(r2)
   2403c:	20800f17 	ldw	r2,60(r4)
   24040:	10000126 	beq	r2,zero,24048 <exit+0x30>
   24044:	103ee83a 	callr	r2
   24048:	8009883a 	mov	r4,r16
   2404c:	00243640 	call	24364 <_exit>

00024050 <memcmp>:
   24050:	01c000c4 	movi	r7,3
   24054:	3980192e 	bgeu	r7,r6,240bc <memcmp+0x6c>
   24058:	2144b03a 	or	r2,r4,r5
   2405c:	11c4703a 	and	r2,r2,r7
   24060:	10000f26 	beq	r2,zero,240a0 <memcmp+0x50>
   24064:	20800003 	ldbu	r2,0(r4)
   24068:	28c00003 	ldbu	r3,0(r5)
   2406c:	10c0151e 	bne	r2,r3,240c4 <memcmp+0x74>
   24070:	31bfff84 	addi	r6,r6,-2
   24074:	01ffffc4 	movi	r7,-1
   24078:	00000406 	br	2408c <memcmp+0x3c>
   2407c:	20800003 	ldbu	r2,0(r4)
   24080:	28c00003 	ldbu	r3,0(r5)
   24084:	31bfffc4 	addi	r6,r6,-1
   24088:	10c00e1e 	bne	r2,r3,240c4 <memcmp+0x74>
   2408c:	21000044 	addi	r4,r4,1
   24090:	29400044 	addi	r5,r5,1
   24094:	31fff91e 	bne	r6,r7,2407c <memcmp+0x2c>
   24098:	0005883a 	mov	r2,zero
   2409c:	f800283a 	ret
   240a0:	20c00017 	ldw	r3,0(r4)
   240a4:	28800017 	ldw	r2,0(r5)
   240a8:	18bfee1e 	bne	r3,r2,24064 <memcmp+0x14>
   240ac:	31bfff04 	addi	r6,r6,-4
   240b0:	21000104 	addi	r4,r4,4
   240b4:	29400104 	addi	r5,r5,4
   240b8:	39bff936 	bltu	r7,r6,240a0 <memcmp+0x50>
   240bc:	303fe91e 	bne	r6,zero,24064 <memcmp+0x14>
   240c0:	003ff506 	br	24098 <memcmp+0x48>
   240c4:	10c5c83a 	sub	r2,r2,r3
   240c8:	f800283a 	ret

000240cc <__register_exitproc>:
   240cc:	defffa04 	addi	sp,sp,-24
   240d0:	dc000315 	stw	r16,12(sp)
   240d4:	040000b4 	movhi	r16,2
   240d8:	841bb704 	addi	r16,r16,28380
   240dc:	80c00017 	ldw	r3,0(r16)
   240e0:	dc400415 	stw	r17,16(sp)
   240e4:	dfc00515 	stw	ra,20(sp)
   240e8:	18805217 	ldw	r2,328(r3)
   240ec:	2023883a 	mov	r17,r4
   240f0:	10003726 	beq	r2,zero,241d0 <__register_exitproc+0x104>
   240f4:	10c00117 	ldw	r3,4(r2)
   240f8:	010007c4 	movi	r4,31
   240fc:	20c00e16 	blt	r4,r3,24138 <__register_exitproc+0x6c>
   24100:	1a000044 	addi	r8,r3,1
   24104:	8800221e 	bne	r17,zero,24190 <__register_exitproc+0xc4>
   24108:	18c00084 	addi	r3,r3,2
   2410c:	18c7883a 	add	r3,r3,r3
   24110:	18c7883a 	add	r3,r3,r3
   24114:	12000115 	stw	r8,4(r2)
   24118:	10c7883a 	add	r3,r2,r3
   2411c:	19400015 	stw	r5,0(r3)
   24120:	0005883a 	mov	r2,zero
   24124:	dfc00517 	ldw	ra,20(sp)
   24128:	dc400417 	ldw	r17,16(sp)
   2412c:	dc000317 	ldw	r16,12(sp)
   24130:	dec00604 	addi	sp,sp,24
   24134:	f800283a 	ret
   24138:	00800034 	movhi	r2,0
   2413c:	1088ca04 	addi	r2,r2,9000
   24140:	10002626 	beq	r2,zero,241dc <__register_exitproc+0x110>
   24144:	01006404 	movi	r4,400
   24148:	d9400015 	stw	r5,0(sp)
   2414c:	d9800115 	stw	r6,4(sp)
   24150:	d9c00215 	stw	r7,8(sp)
   24154:	00023280 	call	2328 <malloc>
   24158:	d9400017 	ldw	r5,0(sp)
   2415c:	d9800117 	ldw	r6,4(sp)
   24160:	d9c00217 	ldw	r7,8(sp)
   24164:	10001d26 	beq	r2,zero,241dc <__register_exitproc+0x110>
   24168:	81000017 	ldw	r4,0(r16)
   2416c:	10000115 	stw	zero,4(r2)
   24170:	02000044 	movi	r8,1
   24174:	22405217 	ldw	r9,328(r4)
   24178:	0007883a 	mov	r3,zero
   2417c:	12400015 	stw	r9,0(r2)
   24180:	20805215 	stw	r2,328(r4)
   24184:	10006215 	stw	zero,392(r2)
   24188:	10006315 	stw	zero,396(r2)
   2418c:	883fde26 	beq	r17,zero,24108 <__register_exitproc+0x3c>
   24190:	18c9883a 	add	r4,r3,r3
   24194:	2109883a 	add	r4,r4,r4
   24198:	1109883a 	add	r4,r2,r4
   2419c:	21802215 	stw	r6,136(r4)
   241a0:	01800044 	movi	r6,1
   241a4:	12406217 	ldw	r9,392(r2)
   241a8:	30cc983a 	sll	r6,r6,r3
   241ac:	4992b03a 	or	r9,r9,r6
   241b0:	12406215 	stw	r9,392(r2)
   241b4:	21c04215 	stw	r7,264(r4)
   241b8:	01000084 	movi	r4,2
   241bc:	893fd21e 	bne	r17,r4,24108 <__register_exitproc+0x3c>
   241c0:	11006317 	ldw	r4,396(r2)
   241c4:	218cb03a 	or	r6,r4,r6
   241c8:	11806315 	stw	r6,396(r2)
   241cc:	003fce06 	br	24108 <__register_exitproc+0x3c>
   241d0:	18805304 	addi	r2,r3,332
   241d4:	18805215 	stw	r2,328(r3)
   241d8:	003fc606 	br	240f4 <__register_exitproc+0x28>
   241dc:	00bfffc4 	movi	r2,-1
   241e0:	003fd006 	br	24124 <__register_exitproc+0x58>

000241e4 <__call_exitprocs>:
   241e4:	defff504 	addi	sp,sp,-44
   241e8:	df000915 	stw	fp,36(sp)
   241ec:	dd400615 	stw	r21,24(sp)
   241f0:	dc800315 	stw	r18,12(sp)
   241f4:	dfc00a15 	stw	ra,40(sp)
   241f8:	ddc00815 	stw	r23,32(sp)
   241fc:	dd800715 	stw	r22,28(sp)
   24200:	dd000515 	stw	r20,20(sp)
   24204:	dcc00415 	stw	r19,16(sp)
   24208:	dc400215 	stw	r17,8(sp)
   2420c:	dc000115 	stw	r16,4(sp)
   24210:	d9000015 	stw	r4,0(sp)
   24214:	2839883a 	mov	fp,r5
   24218:	04800044 	movi	r18,1
   2421c:	057fffc4 	movi	r21,-1
   24220:	008000b4 	movhi	r2,2
   24224:	109bb704 	addi	r2,r2,28380
   24228:	12000017 	ldw	r8,0(r2)
   2422c:	45005217 	ldw	r20,328(r8)
   24230:	44c05204 	addi	r19,r8,328
   24234:	a0001c26 	beq	r20,zero,242a8 <__call_exitprocs+0xc4>
   24238:	a0800117 	ldw	r2,4(r20)
   2423c:	15ffffc4 	addi	r23,r2,-1
   24240:	b8000d16 	blt	r23,zero,24278 <__call_exitprocs+0x94>
   24244:	14000044 	addi	r16,r2,1
   24248:	8421883a 	add	r16,r16,r16
   2424c:	8421883a 	add	r16,r16,r16
   24250:	84402004 	addi	r17,r16,128
   24254:	a463883a 	add	r17,r20,r17
   24258:	a421883a 	add	r16,r20,r16
   2425c:	e0001e26 	beq	fp,zero,242d8 <__call_exitprocs+0xf4>
   24260:	80804017 	ldw	r2,256(r16)
   24264:	e0801c26 	beq	fp,r2,242d8 <__call_exitprocs+0xf4>
   24268:	bdffffc4 	addi	r23,r23,-1
   2426c:	843fff04 	addi	r16,r16,-4
   24270:	8c7fff04 	addi	r17,r17,-4
   24274:	bd7ff91e 	bne	r23,r21,2425c <__call_exitprocs+0x78>
   24278:	00800034 	movhi	r2,0
   2427c:	1088cf04 	addi	r2,r2,9020
   24280:	10000926 	beq	r2,zero,242a8 <__call_exitprocs+0xc4>
   24284:	a0800117 	ldw	r2,4(r20)
   24288:	1000301e 	bne	r2,zero,2434c <__call_exitprocs+0x168>
   2428c:	a0800017 	ldw	r2,0(r20)
   24290:	10003226 	beq	r2,zero,2435c <__call_exitprocs+0x178>
   24294:	a009883a 	mov	r4,r20
   24298:	98800015 	stw	r2,0(r19)
   2429c:	000233c0 	call	233c <free>
   242a0:	9d000017 	ldw	r20,0(r19)
   242a4:	a03fe41e 	bne	r20,zero,24238 <__call_exitprocs+0x54>
   242a8:	dfc00a17 	ldw	ra,40(sp)
   242ac:	df000917 	ldw	fp,36(sp)
   242b0:	ddc00817 	ldw	r23,32(sp)
   242b4:	dd800717 	ldw	r22,28(sp)
   242b8:	dd400617 	ldw	r21,24(sp)
   242bc:	dd000517 	ldw	r20,20(sp)
   242c0:	dcc00417 	ldw	r19,16(sp)
   242c4:	dc800317 	ldw	r18,12(sp)
   242c8:	dc400217 	ldw	r17,8(sp)
   242cc:	dc000117 	ldw	r16,4(sp)
   242d0:	dec00b04 	addi	sp,sp,44
   242d4:	f800283a 	ret
   242d8:	a0800117 	ldw	r2,4(r20)
   242dc:	80c00017 	ldw	r3,0(r16)
   242e0:	10bfffc4 	addi	r2,r2,-1
   242e4:	15c01426 	beq	r2,r23,24338 <__call_exitprocs+0x154>
   242e8:	80000015 	stw	zero,0(r16)
   242ec:	183fde26 	beq	r3,zero,24268 <__call_exitprocs+0x84>
   242f0:	95c8983a 	sll	r4,r18,r23
   242f4:	a0806217 	ldw	r2,392(r20)
   242f8:	a5800117 	ldw	r22,4(r20)
   242fc:	2084703a 	and	r2,r4,r2
   24300:	10000b26 	beq	r2,zero,24330 <__call_exitprocs+0x14c>
   24304:	a0806317 	ldw	r2,396(r20)
   24308:	2088703a 	and	r4,r4,r2
   2430c:	20000c1e 	bne	r4,zero,24340 <__call_exitprocs+0x15c>
   24310:	89400017 	ldw	r5,0(r17)
   24314:	d9000017 	ldw	r4,0(sp)
   24318:	183ee83a 	callr	r3
   2431c:	a0800117 	ldw	r2,4(r20)
   24320:	15bfbf1e 	bne	r2,r22,24220 <__call_exitprocs+0x3c>
   24324:	98800017 	ldw	r2,0(r19)
   24328:	153fcf26 	beq	r2,r20,24268 <__call_exitprocs+0x84>
   2432c:	003fbc06 	br	24220 <__call_exitprocs+0x3c>
   24330:	183ee83a 	callr	r3
   24334:	003ff906 	br	2431c <__call_exitprocs+0x138>
   24338:	a5c00115 	stw	r23,4(r20)
   2433c:	003feb06 	br	242ec <__call_exitprocs+0x108>
   24340:	89000017 	ldw	r4,0(r17)
   24344:	183ee83a 	callr	r3
   24348:	003ff406 	br	2431c <__call_exitprocs+0x138>
   2434c:	a0800017 	ldw	r2,0(r20)
   24350:	a027883a 	mov	r19,r20
   24354:	1029883a 	mov	r20,r2
   24358:	003fb606 	br	24234 <__call_exitprocs+0x50>
   2435c:	0005883a 	mov	r2,zero
   24360:	003ffb06 	br	24350 <__call_exitprocs+0x16c>

00024364 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24364:	defffd04 	addi	sp,sp,-12
   24368:	df000215 	stw	fp,8(sp)
   2436c:	df000204 	addi	fp,sp,8
   24370:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24374:	d028ccc5 	stb	zero,-23757(gp)
   24378:	e0bfff17 	ldw	r2,-4(fp)
   2437c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24380:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24384:	10000226 	beq	r2,zero,24390 <_exit+0x2c>
    ALT_SIM_FAIL();
   24388:	002af070 	cmpltui	zero,zero,43969
   2438c:	00000106 	br	24394 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24390:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24394:	003fff06 	br	24394 <_exit+0x30>
